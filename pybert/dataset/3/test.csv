id,repo,content
90,"Tencent,Hippy","Hippy is designed to easily build cross-platform dynamic apps. üëè. Hippy is a cross-platform development framework, that aims to help developers write once, and run on multiple platforms(iOS, Android, Web, and so on). Hippy is quite friendly to Web developers, especially those who are familiar with React or Vue. With Hippy, developers can create the cross-platform app easily.
Hippy is now applied in Tencent major apps such as Mobile QQ, Mobile QQ Browser, Tencent Video App, QQ Music App, and Tencent News, reaching hundreds of millions of ordinary users.
Designed for Web developers, officially support Web frameworks like React and Vue.
Same APIs for different platforms.
Excellent performance with JS engine binding communication.
Build-in recyclable component with better performance.
Smoothly and gracefully migrate to Web browser.
Fully supported Flex Layout engine.
For experiencing more features, check out hippy examples and visit Documents page.
Detailed changes for each release version are documented in the project release notes.
Developers are welcome to contribute to Tencent's open source, and we will also give them incentives to acknowledge and thank them. Here we provide an official description of Tencent's open source contribution. Specific contribution rules for each project are formulated by the project team. Developers can choose the appropriate project and participate according to the corresponding rules. The Tencent Project Management Committee will report regularly to qualified contributors and awards will be issued by the official contact. Before making a pull request or issue to Hippy, please make sure to read Contributing Guide.
All the people who already contributed to Hippy can be seen in Contributors and Authors File.

Hippy is Apache-2.0 licensed.
Taitank Layout Engine"
91,"HospitalRun,hospitalrun-frontend","Frontend for HospitalRun. 

![Status](https://img.shields.io/badge/Status-developing-brightgree) [![Release](https://img.shields.io/github/release/HospitalRun/hospitalrun-frontend.svg)](https://github.com/HospitalRun/hospitalrun-frontend/releases) [![Version](https://img.shields.io/github/package-json/v/hospitalrun/hospitalrun-frontend)](https://github.com/HospitalRun/hospitalrun-frontend/releases)
[![GitHub CI](https://github.com/HospitalRun/frontend/workflows/GitHub%20CI/badge.svg)](https://github.com/HospitalRun/frontend/actions) [![Coverage Status](https://coveralls.io/repos/github/HospitalRun/hospitalrun-frontend/badge.svg?branch=master)](https://coveralls.io/github/HospitalRun/hospitalrun-frontend?branch=master) [![Language grade: JavaScript](https://img.shields.io/lgtm/grade/javascript/g/HospitalRun/hospitalrun-frontend.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/HospitalRun/hospitalrun-frontend/context:javascript) ![Code scanning](https://github.com/HospitalRun/hospitalrun-frontend/workflows/Code%20scanning/badge.svg?branch=master) [![Documentation Status](https://readthedocs.org/projects/hospitalrun-frontend/badge/?version=latest)](https://hospitalrun-frontend.readthedocs.io)
[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2FHospitalRun%2Fhospitalrun-frontend.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2FHospitalRun%2Fhospitalrun-frontend?ref=badge_large) [![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)
![dependabot](https://api.dependabot.com/badges/status?host=github&repo=HospitalRun/hospitalrun-frontend) [![Slack](https://hospitalrun-slack.herokuapp.com/badge.svg)](https://hospitalrun-slack.herokuapp.com)



React frontend for HospitalRun: free software for developing world hospitals.
Visit this page for general information on the HospitalRun application including:
How can I deploy 1.0.0-beta?
Where do I report a bug or request a feature?
How can I contribute? (There are several other ways besides coding)
What is the project structure?
What is the application infrastructure?
Who is behind HospitalRun? etc.
Get started by checking out the Frontend Contributing Guide for:
What's the tech stack?
Where can I become familiar with the technologies?
Where do I browse issues?
How do I set up my local environment?
How do I run tests locally?
How do I submit my changes?
etc.
Released under the MIT license."
92,"zeroclipboard,zeroclipboard","The ZeroClipboard library provides an easy way to copy text to the clipboard using an invisible Adobe Flash movie and a JavaScript interface.. This library is no longer maintained as it is no longer necessary for modern web development. If you want your frontend JavaScript to manipulate the clipboard, please look into the new HTML Clipboard API (various docs available on MDN) or a small convenience wrapper around it like clipboard.js. Thanks for all your support, this project was a labor of love for many years. :heart:
This master branch contains the v2.x codebase for ZeroClipboard! For the v1.x codebase, see the 1.x-master branch instead.
     
The ZeroClipboard library provides an easy way to copy text to the clipboard using an invisible Adobe Flash movie and a JavaScript interface. The ""Zero"" signifies that the library is invisible and the user interface is left entirely up to you.
This is achieved by automatically floating the invisible movie on top of a DOM element of your choice. Standard mouse events are even propagated out to your DOM element, so you can still have rollover and mousedown effects.
Suggestions welcome read over the contributing guidelines.
To setup the project for local development start with these commands in your terminal.
Before submitting a pull request you'll need to validate, build, and test your code. Run the default grunt task in your terminal.
If you just want to run the tests, run grunt test.
Due to browser and Flash security restrictions, this clipboard injection can ONLY occur when
the user clicks on the invisible Flash movie. A simulated click event from JavaScript will not
suffice as this would enable clipboard poisoning.
For a complete list of limitations, see docs/instructions.md#limitations.
On that page, you will also find an explanation of why ZeroClipboard will NOT work by default on code playground sites like JSFiddle, JSBin, and CodePen, as well as the appropriate ""View"" URLs to use on those sites in order to allow ZeroClipboard to work.
See docs/instructions.md for more advanced options in using the library on your site.
See docs/api/ZeroClipboard.md for the complete API documentation.
Here is a working test page where you can try out ZeroClipboard in your browser.
To test the page demo page locally, clone the website repo.
This library is fully compatible with Flash Player 11.0.0 and above, which requires
that the clipboard copy operation be initiated by a user click event inside the
Flash movie. This is achieved by automatically floating the invisible movie on top
of a DOM element of your
choice. Standard mouse events are even propagated out to your DOM element, so you
can still have rollover and mousedown effects with just a little extra effort.
ZeroClipboard v2.x is expected to work in IE9+ and all of the evergreen browsers.
Although support for IE7 & IE8 was officially dropped in v2.0.0, it was actually
still technically supported through v2.0.2.
Starting with version 1.1.7, ZeroClipboard uses semantic versioning.
see releases
MIT &copy; James M. Greene Jon Rohan"
93,"rails,webpacker","Use Webpack to manage app-like JavaScript modules in Rails. Webpacker has served the Rails community for over five years as a bridge to compiled and bundled JavaScript. This bridge is no longer needed for most people in most situations following the release of Rails 7. We now have three great default answers to JavaScript in 2021+, and thus we will no longer be evolving Webpacker in an official Rails capacity.
For applications currently using Webpacker, the first recommendation is to switch to jsbundling-rails with Webpack (or another bundler). You can follow the switching guide, if you choose this option.
Secondly, you may want to try making the jump all the way to import maps. That's the default setup for new Rails 7 applications, but depending on your JavaScript use, it may be a substantial jump.
Finally, you can continue to use Webpacker as-is. We will continue to address security issues on the Ruby side of the gem according to the normal maintenance schedule of Rails. But we will not be updating the gem to include newer versions of the JavaScript libraries. This pertains to the v5 edition of this gem that was included by default with previous versions of Rails.
The development of v6 will not result in an official gem released by the Rails team nor see any future support. But Justin Gordon is continuing that line of development ‚Äì including a focus on hot-module reloading features etc ‚Äì under a new gem called Shakapacker that is based on the unreleased v6 work from this repository.
Thank you to everyone who has contributed to Webpacker over the last five-plus years!
Please refer to the 5-x-stable branch for 5.x documentation."
94,"papercups-io,papercups","Open-source live customer chat. :warning: Maintenance Mode
Papercups is in maintenance mode. This means there won't be any major new features in the near future. We will still accept pull requests and conduct major bug fixes. Read more here
Papercups is an open source live customer support tool web app written in Elixir. We offer a hosted version at app.papercups.io.
You can check out how our chat widget looks and play around with customizing it on our demo page. The chat widget component is also open sourced at github.com/papercups-io/chat-widget.
Watch how easy it is to get set up with our Slack integration üöÄ :

The fastest way to get started is one click deploy on Heroku with:

We wanted to make a self-hosted customer support tool like Zendesk and Intercom for companies that have privacy and security concerns about having customer data going to third party services.
Reply from email - use Papercups to answer support tickets via email
Reply from SMS - forward Twilio conversations and respond to SMS requests from Papercups
Custom chat widget - a customizable chat widget you can embed on your website to talk to your customers
React support - embed the chat widget as a React component, or a simple HTML snippet
React Native support - embed the chat widget in your React Native app
Flutter support - embed the chat widget in your Flutter app (courtesy of @aguilaair :heart:)
Slack integration - connect with Slack, so you can view and reply to messages directly from a Slack channel
Mattermost integration - connect with Mattermost, so you can view and reply to messages directly from Mattermost
Markdown and emoji support - use markdown and emoji to add character to your messages!
Invite your team - send invite links to your teammates to join your account
Conversation management - close, assign, and prioritize conversations
Built on Elixir - optimized for responsiveness, fault-tolerance, and support for realtime updates
We set up a simple page that demonstrates how Papercups works.
Try sending us a message to see what the chat experience is like!
Check out our blog for more updates and learnings
Check out our docs at docs.papercups.io
We :heart: contributions big or small. See CONTRIBUTING.md for a guide on how to get started.
<td>





























</td>

MIT ¬© Papercups"
95,"BuilderIO,builder","Drag and drop Visual CMS for React, Vue, Angular, and more. 


  
    <source media=""(prefers-color-scheme: dark)"" srcset=""https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F160d3724e72b4f88af781e0887df5601"">
    
  </picture>



  The Drag & Drop Headless CMS


  Integrate with any site or app. Drag and drop with the components already in your codebase.



  
  
  
  
  



  



<table style=""width:100%;"">
  <tr>
    <td width=""50%"">Register components</td>
    <td>Rendered your visually created content</td>
  </tr>
  <tr>
    <td width=""50%"">

import { Builder } from '@builder.io/react'
&nbsp;
// Register our heading component for use in
// the visual editor
const Heading = props => (
  &lt;h1 className=""my-heading""&gt;{props.title}&lt;/h1&gt;
)
&nbsp;
Builder.registerComponent(Heading, {
&nbsp;&nbsp;name: 'Heading',
&nbsp;&nbsp;inputs: [{ name: 'title', type: 'text' }]
})
</pre>

</td>
    <td width=""50%"">

import { BuilderComponent, builder } from '@builder.io/react'
&nbsp;
builder.init('YOUR_KEY')
&nbsp;
export const getStaticProps = async () => ({ 
&nbsp;&nbsp;props: {
&nbsp;&nbsp;&nbsp;&nbsp;builderJson: await builder.get('page', { url: '/' }).promise()
&nbsp;&nbsp;}
})
&nbsp;
export function BuilderPage({ builderJson }) => {
&nbsp;&nbsp;return &lt;>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;YourHeader />
&nbsp;&nbsp;&nbsp;&nbsp;&lt;BuilderComponent model=""page"" content={builderJson} />
&nbsp;&nbsp;&nbsp;&nbsp;&lt;YourFooter />
&nbsp;&nbsp;&lt;/>
}

</pre>
    </td>
  </tr>
</table>

See our full getting started docs, or jump right into integration. We generally recommend to start with page buliding as your initial integration:
<table>
  <tr>
    <td align=""center"">Integrate Page Building</td>
    <td align=""center"">Integrate Section Building</td>
    <td align=""center"">Integrate Structured Data</td>
  </tr>
  <tr>
    <td align=""center"">
      
        
      
    </td>
    <td align=""center"">
      
        
      
    </td>    
    <td align=""center"">
      
        
      
    </td>        
  </tr>
</table>

<table>
  <tr>
    <td align=""center"">Editor Demo</td>
    <td align=""center"">Commerce Example</td>
    <td align=""center"">Blog Example</td>
  </tr>
  <tr>
    <td align=""center"">
      
        
      
    </td>
    <td align=""center"">
      
        
      
    </td>    
    <td align=""center"">
      
        
      
    </td>        
  </tr>
</table>

Hardcoding layouts for frequently changing content bottlenecks your team and makes releases messy
Using an API-driven UI allows you to:
Decouple page updates from deploys
Schedule, a/b test, and personalize via APIs
Reduce code + increase composability


Integrate the Builder API or SDK to your site or app
Create a free account on builder.io and drag and drop to create and publish pages and content

  

Learn more about how builder works here
Performance is our top priority. All content is delivered from the edge, renderable server side or statically, we optimize the heck out of it and our SDKs are small and mighty. 
Some example SDK sizes from Bundlephobia:
Importantly, there are no hacks here - no iframes, no unneeded client side code or rendering, our rule of thumb is we produce content just like if you wrote it by hand. Assets are optimized, DOM is minimized, and it's all native to your framework (so all React components if you use React, Svelte for Svelte, etc)
See more about how Builder works, or take a look at the perf of our own site (built completely in Builder):

  

In Builder, content is structured in models, and customized with custom fields and targeting
Builder pages - full drag and drop control between your site's header and footer. Try it out
Builder sections - make a part of a page visually editable in Builder and use our targeting and scheduling to decide who sees what. Try it out
Builder data - fetch structured data from Builder and use it anywhere in your application (e.g. menu items, structured pages). Try it out

Read more about how builder works here
See here for examples on how to structure a site with Builder
<a target=""_blank"" href=""https://www.builder.io/c/docs/developers"">
  

<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""middle"">
        <a target=""_blank"" href=""https://www.builder.io/c/docs/developers?codeFramework=rest"">
          
          
          
            REST API
          
        
      </td>
      <td align=""center"" valign=""middle"">
        <a target=""_blank"" href=""https://apps.shopify.com/builder-2"">
          
          
          
            Shopify
          </P>
        
      </td>
      <td align=""center"" valign=""middle"">
        <a target=""_blank"" href=""https://github.com/builderio/html-to-figma"">
          
          
          
            Figma
          
        
      </td>
      <td align=""center"" valign=""middle"">
        <a target=""_blank"" href=""https://www.builder.io/c/docs/developers?codeFramework=react"">
          
          
          
            React
          
        
      </td>
      <td align=""center"" valign=""middle"">
        <a target=""_blank"" href=""https://www.builder.io/c/docs/developers?codeFramework=next"">
          
          
          
            Next.js
          
        
      </td>
    </tr>
    <tr>
      <td align=""center"" valign=""middle"">
        <a target=""_blank"" href=""https://www.builder.io/c/docs/developers?codeFramework=gatsby"">
          
          
          
            Gatsby
          
        
      </td>
      <td align=""center"" valign=""middle"">
        <a target=""_blank"" href=""https://www.builder.io/c/docs/developers?codeFramework=vue"">
          
          
          
            Vue
          
        
      </td>
      <td align=""center"" valign=""middle"">
        <a target=""_blank"" href=""https://www.builder.io/c/docs/developers?codeFramework=nuxt"">
          
          
          
            Nuxt
          
        
      </td>
      <td align=""center"" valign=""middle"">
        <a target=""_blank"" href=""https://www.builder.io/c/docs/developers?codeFramework=angular"">
          
          
          
            Angular
          
        
      </td>
      <td align=""center"" valign=""middle"">
        <a target=""_blank"" href=""https://www.builder.io/c/docs/developers?codeFramework=webcomponents"">
          
          
          
            Web Components
          
        
      </td>
    </tr>
  </tbody>
</table>


Don't see an integration you're looking for? Our HTML API, Content APIs, and GraphQL APIs works for all tech stacks and frameworks.
This repo houses all of the various SDKs, usage examples, starter projects, and plugins.
There are a lot of ways you can use Builder for your site. Some of the main questions you'll want to ask yourselves - what on your site should be in your code vs in Builder.
As a general rule, parts of your site that should be managed by non developers should probably be in Builder. Parts that are complex with a lot of code, should probably be in your codebase. Using custom components in your Builder content can help you strike a good balance here as well
Here are some examples we recommend for how to structure various pages on your site, for instance for a headless commerce site:


  



Builder.io gives you a ton more power and control than just page building. Check our guides on
Additional framework support:
As well as some handy power features like:
Questions? Requests? Feedback? Chat with us in our official forum!
Problems? Requests? Open an issue. We always want to hear feedback and interesting new use cases and are happy to help.
Help us enable anyone to build digital experiences and bring more ideas to life --> https://www.builder.io/m/careers"
96,"TeamAmaze,AmazeFileManager","Material design file manager for Android. Simple and attractive Material Design file manager for Android
</img>



Open Source, light and smooth

Based on Material Design guidelines

Basic features like cut, copy, delete, compress, extract etc. easily accessible

Work on multiple tabs at same time

Multiple themes with cool icons

Navigation drawer for quick navigation

App Manager to open, backup, or directly uninstall any app

Quickly access history, access bookmarks or search for any file

Root explorer for advanced users

AES Encryption and Decryption of files for security (Jellybean v4.3+)

Cloud services support (Jellybean v4.3+ / requires additional plug-in)

Inbuilt Database Reader, Zip/Rar Reader, Apk Reader, Text Reader

No ads or In-app purchases

lots more...










Or buy the Cloud Plugin supports Google Drive‚Ñ¢, Dropbox, OneDrive and Box accounts.
Try our app - Amaze File Utilities
List videos / images / music documents in your device in a interactive UI where you're able to group / sort and quickly jump to any headers.
Open videos / images / music / documents (pdf / docx / epub) with inbuilt player.
Share / delete / cast on your tv
Analyse internal storage for junk files, duplicate files, large videos / old downloads / screenshots or recordings.
Analyse and group images between memes, low light / blurry / selfies / group pics.
Transfer files directly between two mobile devices on same wifi network using high speed peer to peer network
Gesture support in image / video player, play in background, picture in picture mode, download subtitles within the player.
Basic r/w operations might not work on external memory on Kitkat devices. Don't use cut/paste from or to external SD Card. You might lose your files.
Under the license we are not responsible for damages.
See our Privacy Policy
Want to help translate Amaze to your language?  
See Transifex translation.
The device vendors/ROM developers are free to include Amaze apk pre-installed in system. There is no fee required; but you must comply with the license (for more information read the GNU GPL v3 or newer).
We strongly recommend using apk signed by us (either Play Store version or from AFH link above) so that users would be able to update directly from Play Store after distribution. Furthermore, a change in digital signature will break plug-ins."
97,"RitikPatni,Front-End-Web-Development-Resources","This repository contains content which will be helpful in your journey as a front-end Web Developer. <!-- @format -->







This is an open-source repository for all who want to learn front-end Development.


<strong>Front-end development</strong>

Front-end web development is the practice of converting data to a graphical interface, through the use of HTML, CSS, and JavaScript, so that users can view and interact with that data.

Make sure to show your support by star mark & sharing the repository
Roadmap - For a well described step-by-step roadmap for front-end developers. 
BGJar - Free SVG background generator for your websites, blogs, and app. 
Inspect - inspect and debug your mobile web apps and websites on iOS devices directly from Mac or Windows.
A Complete Guide to Flexbox | CSS-Tricks - A comprehensive guide to the Flexbox Layout. 
A Complete Guide to Grid | CSS-Tricks - A comprehensive guide to the Grid Layout. 
Command Line Power User - A video series for web developers on learning a modern command-line workflow with ZSH, Z, and related tools. 
CSS Grid - Complete video course all about CSS Grid 
Best Of JS A site to check the best GitHub Repos for your favourite js framework 
CodeCademy - A series of interactive courses teaching the world how to code. Offering free and paid subscriptions across a variety of languages.  
Codementor - A tool to get help from experienced developers in various coding languages on your learning journey. 
Scaler Topics - A platform to learn programming languages like HTML, Java, Javascript, Python etc. 
Conquering Responsive Layouts - Made by Kevin Powell(https://twitter.com/KevinJPowell). This course takes you through everything you need to know to create responsive layouts in his brilliant 21-day course. 
Coursera - A selection of courses from highly reputable schools like Stanford and Yale.  
CSS Almanac | CSS-Tricks - A quick reference guide to many features of CSS. 
CSS Grid Playground - A visual guide curated by the Mozilla team to help you learn CSS's grid layout features with lots of code example and demos. 
Design Resources - Design Resources from Skullface. 
dev.to - Where programmers share ideas and help each other grow. 
DevProjects - A free community consists of curated projects from senior developers to help you bridge the gap between theory and practice.  !
Dicoding Academy - Where everyone can learn programming from fundamentals (Available only in Bahasa Indonesia).  
edx - A series of University-level courses from Harvard, MIT, Wharton, and more. 
EggHead - Web development video tutorials in ""bite-size"" segments. Has both free and ""Pro"" (paid) memberships.  
Enboard | Front End Resources - Organized resources about front end development. 
Flexbox - Level up your Flexbox knowledge ‚Äì an online, Zombie-centric story course. 
freeCodeCamp - A free resource incorporating programming projects and interview preparation for developer jobs. 
Frontend Masters - Web development video tutorials from industry leaders (updated frequently). Has both free (limited-time) and paid memberships.  
Full Stack Open - Course on Full Stack Web Development by University of Helsinski. Learn React, Redux, Node.js, MongoDB, GraphQL and TypeScript in one go! This course will introduce you to modern JavaScript-based web development. The main focus is on building single page applications with ReactJS that use REST APIs built with Node.js. 
GeeksforGeeks - A computer science portal for geeks. 
Khan Academy - A universal online learning platform that also provides the important courses for developers.  
LearnAnything - Search interactive mind maps to learn anything. 
Learn JavaScript - Learn JavaScript in an interactive environment. Read short lessons, take notes, and complete challenges directly in your browser.  
Mastering Markdown - A Mini Series that will change how you write documentation. 
Mozilla Developer Network - The latest information about Open Web technologies. 
Complete web development tutorials -Lyty.dev complete web development tutorials with well explained examples for free. 
Pluralsight - Unlimited online developer training from industry experts. 

Saylor - An open, online learning solution offering college credit opportunities for students. 
Scrimba - Code-screencast-based learning in a variety of languages. 

Scotch - Many Web development courses. Has both free and ""Premium"" (paid) memberships.  
Search Courses - A selection of trending courses and tutorials. 

SoloLearn- A free portal for learning web development. 
Team Treehouse - Self-paced learning across a variety of languages and subjects. 

The Modern JavaScript Tutorial - Everything about the Javascript Language. 
The Odin Project - An Open-Source Curriculum for Learning Web Development 
Tutorials point - Tutorials for many different languages with interactive code examples. 
Udacity - Learn anything online ‚Äì¬†deep learning, machine learning, front end languages. 

Udemy - An online learning and teaching marketplace. 

Watch and Code - The computer science school for students that demand intellectual rigor and depth. 
W3School - Web development reference library. Covers HTML, CSS, Javascript (jQuery, AJAX, and more), as well as some server-side languages. Includes descriptions and interactive examples. 
Web APIs | MDN - Everything a beginner needs to know about Web APIs. 
Web Design in 4 minutes by Jeremy Thomas creator of Bulma CSS and marksheet.io. 
WesBos - Free and premium courses in web development 

Web Dev Tricks - All your CSS, js, jQuery trending codes with source codes in one place. Your handy partner for all types of modern web development and designs. 
web.dev - Guides and resources for modern fast websites by google developers. 
Become a Front-End Web Developer - Develop competency with HTML, CSS, JavaScript, and jQuery. 

Web Skills - A visual overview of useful skills to learn as a web developer. 
The App Brewery - All in one platform to cover your web development skills 
Full Stack open 2021 - This course serves as an introduction to modern web application development with JavaScript. 
Devtools Tech - A free interview preparation platform for Frontend Engineers with a focus on high quality real world programming questions. 
‚¨Ü back to top
A11y Style Guide - A living style guide or pattern library, generated from KSS documented styles...with an accessibility twist. 
Axe - Accessibility testing toolkit. 

Colour Contrast Analyser - CCA helps you determine the legibility of text and the contrast of visual elements, such as graphical controls and visual indicators. 
Deque University - Online courses on web and mobile accessibility skills. 

W3C Intro to Web Accessibility - Strategies, standards, resources to make the Web accessible to people with disabilities. 
‚¨Ü back to top
Adrian Twarog- Tutorials on HTML,CSS,Bootstrap,JavaScript,React,React
Native,UI/UX and cool Designing stuff 
1stWebDesigner - Tutorials on WordPress, PSD to HTML 
Brad Hussey - Tutorials on Bootstrap, SASS, jQuery, PHP, Freelancing 
CSS Tricks - YouTube channel of well-known web design and development blog CSS Tricks by Chris Coyier. 
CSS Tutorials - Tutorials in Hindi by Husain sir covering all the basics of CSS. 
Coder‚Äôs Guide - Tutorials on HTML, CSS, JavaScript, Bootstrap 
Codevolution - Tutorials on React, Vue, Angular, MongoDB, JavaScript, MEAN stack, HTML, CSS. 
Clever Programmer - Tutorials on React, MongoDB, JavaScript, MERN stack, HTML, CSS, React Native. 
Derek Banas - Tutorials on C#, Visual Basic, Django, Python, NodeJS, AngularJS, MongoDB, jQuery, JavaScript, CSS, Ruby on Rails, Java, SQLite, Android, HTML, PHP, Objective C 
DevTips - Tutorials on HTML5, CSS, SASS, Bootstrap, Foundation, jQuery, Ruby on Rails, GitHub. 
DesignCourse - Tutorials on UI/UX Design or HTML5, CSS, SASS, Animation Library. 
Dennis Ivy - Tutorials on Django & Flask Full-Stack Web Development Projects 
Elzero Web School - Arabic only 
freeCodeCamp - Tutorials on JQuery, JavaScript, React, Math, Science, Software Engineering, Open source software 
Fun Fun Function - Tutorials on JavaScript, React, Functional Programming, GraphQL, Life as a Developer 
Google Chrome Developers - Latest and greatest talks on modern web development with pro-tips, insights, and techniques to help you level up your web development skill. 
Kevin Powell - Tutorials on HTML, CSS, Helping to Understand Css Better in Simple Way 
LearnCode.academy - Tutorials on HTML, CSS, jQuery, JavaScript, React JS / Redux, Node JS 
LevelUpTuts - Tutorials on HTML, CSS, SASS, WordPress, Magento,Drupal, React, Meteor 
Mackenzie Child - Design to Code Challenge - Tutorials on UI, how to design & code multiple styles of sites. 
The Coding Train - Tutorials on JavaScript, Node, Machine Learning, Neural Networks, Algorithms 
The Net Ninja - Tutorials on HTML, CSS, jQuery, JavaScript, Git and GitHub, Bootstrap, MangoDB, PSD to WordPress, PSD to HTML, and many more. 
TheDigiCraft - Tutorials on HTML, CSS, jQuery, PHP, Ajax, Bootstrap, MySQL. 
thenewboston - Tutorials on ECMAScript 6, React JS / Redux, Django, Angular 2, Gulp, Git, Python, SEO, SASS, SCSS, Grunt, Illustrator, MongoDB, PHP, Java, Ruby, Objective C 
Traversy Media - Tutorials on HTML, CSS, jQuery, PHP, Ajax, Bootstrap, MySQL, ECMAScript 6, React JS / Redux, Django, Angular, Ionic, Gulp, Git, Python, Node JS, PHP, Laravel, Cake PHP, Symfony, CodeIgniter, Programming Tips 
CodeWithHarry - Tutorials on HTML, CSS, Javascript, Node JS, MongoDB and hosting. 
Programming With Mosh - Tutorial on React, Nodejs, Python, Javascript, Angular,Typescipt and C#. 
Dev Ed - Learn web development, web design, 3d modelling, tools like figma and more 
Web Dev Simplified - Learn Website Developments with Html , Javascript , Css and other Frameworks with same projects and more 
Mozilla Developer - Videos for helping you with your work as a web designer, web developer, or person involved making websites or web apps 
Academind - There's always something to learn. Whether you want to have look at Angular Tutorials or Guides, Vue.js, other Frontend Development Content or Data Science Topics or anything else - you're probably right
Sonny Sangha Project Tutorials on React, Redux, Next JS & React Native
WB Web Development - Tutorials on HTML, CSS, Bootstrap, SASS, JavaScript, Git and GitHub, MongoDB, NodeJS, ReactJS 
Online Tutorials- Top class contents on front end web development. Has exclusive tutorials on HTML,CSS and javascript with amazing effects. A must visit for all front end developers
Akshay Saini- Videos on Frontend Interview Tips, Interview Experiences, and specially core concepts of Javascript.
Devtools Tech- Videos on Advanced Frontend Concepts, Interview Questions & Experiences, and focus on intermediate to advanced JavaScript concepts. 
‚¨Ü back to top
10 Need to Know JavaScript Concepts Courses - From basic to advance Javascript concept explained in simple way that every Javascript developer need to know. 
100 Ways to be more creative - 100 Ways to be More Creative from Shaunta Grimes. 
2017 Design RoundUp - Collection of all Codrops web development resources for 2017. 
50 Things You [Probably] Forgot To Design ‚Äì UX Power Tools ‚Äì Medium - 50 Things You Probably Forgot to Design from Jon Moore 
ACM Month Of Code 2k17: Building Moodify - ACM Month Of Code 2k17: Building Moodify from Ajay NS. 
An Illustrated Guide for Setting Up Your Website Using GitHub &amp; Cloudflare - An illustrated guide to setting up your website using GitHub and Cloudflare from Karan Thakkar. 
Brad Frost Blog - Author of Atomic Design, building design systems in CSS & HTML. 
Best Free Fonts - 70+ Best Free Fonts for Designers ‚Äì Free for Commercial Use in 2019 
CSS Animations vs the Web Animations API: A Case Study 
CSS Tricks - Daily articles about CSS, HTML, JavaScript, and all things related to web design and development. 
Design and Creativity quotes - 72 Quotes about Design and Creativity from Margaret Kelsey. 
Design Resources - List of resources for working in and learning about design. 
Design For Change - Article on regenerative and sustainable designing by Viba Mohan. 
Domain registrars DNS and hosting - Domain Registrars, DNS, and Hosting from Kirby Kohlmorge 
Beginners guide to Gatsby - Gatsby.js: How to set up and use the React Static Site Generator from Aman Mittal 
Examples of everything in ECMAScript in 2016,2017, 2018 
Flavio Copes Tutorials - Daily tutorials about Javascript and Web development by Flavio Copes 
From URL to Interactive - Explanation of how our world wide web works. 
Frontend Weekly - The best articles, links and news related to Frontend Development delivered once a week to your inbox. 
How I Animated the bitsofcode Logo with CSS - Process article on a custom CSS animation.  
How the minmax() Function Works - Explanation of the CSS minmax() function, which can be used for CSS grid layouts.  
How to Build an Impressive Portfolio When You're New to Tech - How to Build an Impressive Portfolio When You‚Äôre New to Tech from Randle Browning 
How to build a random quote generator with JavaScript and HTML, for absolute beginners - How to Build a Random Quote Generator with JavaScript and HTML, for Absolute Beginners from Sophanarith Sok. 
How to build your first Vue Component - Beginner project tutorial to build a Vue Component by Sarah Dayan. 
Let‚Äôs code a Neural Network from scratch ‚Äî Part 1 ‚Äì TypeMe ‚Äì Medium - Let‚Äôs Code a Neural Network from Scratch from Charles Fried 
Music Player Inspirations - Music Player Inspiration 2017 from Muzli. 
The Front End CheckList - An Exhaustive List of all the Elements you need to have/test Before Launching your Website To Production. 
What it‚Äôs like to build and market a chatbot when you‚Äôre only 14 years old - What it‚Äôs Like to Build and Market a Chatbot When You‚Äôre Only 14 Years Old from Alec Jones 
What's the Deal with Collapsible Margins? - Explanation of CSS' Collapsing Margins feature.  
A well curated list for UX - Curated resource list for UX by fernandocomet. 
Airbnb Open source - Engineering and Data Science articles and open source projects. 
The Cost of JS - How to deliver JavaScript efficiently for valuable user experience by Addy Osmani. 
CSS Scroll-Snap - Tutorial on CSS scroll snapping, which allows you to lock the viewport after a user has finished scrolling. 
Preload, Prefetch and priorities in chrome - Article on how web loading primitives work on Chrome's neworking stack by Addy Osmani. 
Learning Git for yourself - Traditional Chinese  
IDEs for web Developers - Factors to consider when choosing an IDE for web development and examples of good options. 
The Top 8 Weather APIs for 2020 - Top 8 Weather APIs for 2020 - The Best Free Weather APIs for Developers
Digital Ocean community Tutorials - A free tutorial collection from experts. All contributted from digital ocean community.
React for Beginners ‚Äì A React.js Handbook for Front End Developers - A React.js Handbook for Front End Developers
Ultimate React Resources - The blog includes blog posts, free e-books, Github Repos with curated lists, practical implementation of React.js in the real world with working code.
Complete Introduction to CSS Grid - A blog to learn the fundamentals of CSS grid by building different complex layouts.
Rado's Blog) - A blog consisiting of articles on React Dependencies and Implementation, GraphQl and Lot more!
Monica Powell Blog - An awesome blog on JavaScript, React, Gatsby and Git.
Devtools Tech - Carefully curated high quality resources for Frontend Engineers. 
Two Great Places to Discover Tech Talent and How to Attract Them - Hiring tech talent in 2020
‚¨Ü back to top
Coding Blocks - Software development podcasts by a team of professional programmers. 
Frontend Happy Hour - Front end, software, and career development podcasts by industry panelists. 
JavaScript Jabber - Podcasts for JavaScript developers. Website also offers many other programming-related podcasts. 
Syntax - Front end development podcasts by Wes Bos and Scott Tolinski from Level Up Tuts. 
‚¨Ü back to top
Atom - Atom is a text editor that's modern, approachable, yet hackable to the core‚Äîa tool you can customize to do anything but also use productively without ever touching a config file. Open Source | All Platforms 
Brackets - With focused visual tools and preprocessor support, Brackets is a modern text editor that makes it easy to design in the browser. It's crafted from the ground up for web designers and front-end developers. Open Source | All Platforms 
Geany - Geany is a small and lightweight integrated development environment. 
IntellijIDEA - A universal IDE from JetBrains. It has code-completion, integrationa, and Version Control System (VCS).  
Notepad++ - Notepad++ is a free (as in ""free speech"" and also as in ""free beer"") source code editor and Notepad replacement that supports several languages. Windows Only  -Pycharm-Used specially for python language,It provides code analysis,a graphical debugger,an integrated unit tester,integration with version control systems and supports web development with Django as well as data science with Anaconda. All Platforms | Open Source 
Sublime Text - A sophisticated text editor for code, markup and prose. All Platforms 

Vim - Vim is a highly configurable text editor for efficiently creating and changing any kind of text. It is included as ""vi"" with most UNIX systems and with Apple OS X. 
Visual Studio Code - Code editing Redefined. It has syntax highlighting and autocompletion with IntelliSense, Git commands built-in, Extensible and customizable. Open Source | All Platforms 
WebStorm - The smartest JavaScript IDE, WebStorm is an integrated development environment for JavaScript and related technologies. All Platforms  
UltraEdit - UltraEdit is a powerful HTML and Code editor available for Mac, Windows, and Linux. It comes with a built-in file comparison utility, autocompletion, advanced layout, multi-tab, multi-pane editors, and syntax highlighting for the most popular programming languages. 

Nano - GNU nano is a text editor for Unix-like OS's. 
StackBlitz - An online open-source powerful code editor for JavaScript Frameworks and Libraries, with some awesome features such as GitHub Imports, Live Server and direct commit from the Editor to Github! 
‚¨Ü back to top
Auto Rename Tag - When you rename one HTML/XML tag, automatically rename the paired HTML/XML tag. 
Better Comments - This extension color codes various types of comments to give them different significance and stand out from the rest of your code. 
Bracket Pair Colorizor - Colors matching brackets to make your code much more readable - very helpful. 
Code Spell Checker - A basic spell checker that works well with camelCase code. 
ES Lint - Javascript linter for highlighting code errors and best practices. 
Formatting Toggle - A VS Code extension that allows you to toggle the formatter (Prettier, Beautify, ‚Ä¶) ON and OFF with a simple click. 
Git History - View git log, file history, compare branches or commits 
GitLens - Supercharge the Git capabilities built into Visual Studio Code ‚Äî Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more. 
JS Snippets - This extension contains code snippets for JavaScript in ES6 syntax for VS Code editor (supports both JavaScript and TypeScript). 
Live server - A Quick Development Live Server with live browser reload. 
Material Icon Theme - Google Material themed icon pack. 
Path Intellisense - As you start typing a path in quotations, you will get intellisense for directories and file names. 
Peacock - Subtly change the workspace color of your workspace. Ideal when you have multiple VS Code instances and you want to quickly identify which is which. 
Polacode - You know those fancy code screenshots you see in articles and tweets? Well, most likely they came from Polacode. It's super simple to use. Copy a piece of code to your clipboard, open up the extension, paste the code, and click to save your image! 
Prettier - Format your code automatically on save. 
Quokka.js - Quokka.js is a developer productivity tool for rapid JavaScript / TypeScript prototyping. Runtime values are updated and displayed in your IDE next to your code, as you type.  
Settings Sync - Settings Sync extension save your setting off in Github. Then, you can load them to any new version of VS Code with one command. 
‚¨Ü back to top
API Directory | ProgrammableWeb 
Animista - CSS animation presets/generator 
Better Code Hub - Checks GitHub codebase against software engineering guidelines and gives feedback. 
Browserling - Live interactive cross-browser testing on virtual machines. 

LambdaTest - Test websites & web apps on 2000+ browsers & OS. 

BrowserStack - Test websites and mobile apps on different browsers and mobile devices. 

Can I use... - Support tables for HTML5, CSS3, etc. on desktop and mobile browsers 
Checkbot - Browser extension that tests websites for SEO, speed and security issues 

Codepen - Social development environment where you can write code in the browser and see results as you build.  
Codeply - A HTML, CSS, JavaScript editor playground for designers & developers to compare, prototype and test frontend frameworks. 
Codesandbox - Instant IDE and prototyping tool for web development. 

Create a new fiddle - JSFiddle - Test JS, CSS, HTML, or CoffeeScript in an online code editor. 
Critical Path CSS Generator - by Jonas Ohlsson - Reduces the amount of CSS the browser has to go through to render a webpage. 
CrossBrowserTesting App - Web service for running functional web tests on mobile and desktop web browsers. 
CSS cheat sheet - A very easy to use one page reference for css selectors and properties. It also includes categories for flexbox and grid. 
CSS Minifier - Minify your CSS files! 
CSS Reference - A free visual guide to CSS. 
CSS Triggers - Tells you what gets triggered when mutating a given CSS property. 
CSS Filters - Interactive CSS filter generator 
ColorLisa - Color palette generator based on great artists 
DirtyMarkup - Tidy up your HTML, CSS, and JavaScript code. 
ExtendsClass - Provides tools to add features directly usable in the browser. 
Favicon Generator - Upload an image and generate a favicon for your website. 
Favicon Generator for iOS/Google Progressive Web App Manifest - Online tool to test favicons on different platforms. 
Free Developer Stuff - List of free stuff for developer by developer to use. Some services are free forever or have a free tier at least for 1 year.  
Free for Developers - This website has an extensive amount of free and paid resource lists curated not only for frontend developers but also for any kind of developer.  
Generate favicon based on text - Generate a favicon from text, an image, or emojis. 
Get Waves - Generate many types of SVG waves for use in web design. 
Glitch - Glitch is like working together in Google Docs‚Äìmultiple people can work on the same project at the same time. 
Graphic Generator - Generates graphics for some common front end applications.
Google Analytics - Web service that tracks and reports website traffic. 
Google APIs Explorer - Tool to interactively explore various Google APIs. 
Javascript Console in Sublime Text - Tutorial to test JavaScript and execute it via build systems in Sublime Text 3. 
jQuery mega cheat sheet - Cheat sheet of jQuery selectros, manipulation, events, and more in PDF format. 
JS Bin - Live pastebin for HTML, CSS, and JS, as well as a range of processors.   
Lighthouse - Open source, automated tool for improving the quality of webpages. 
Modern JavaScript cheat sheet - This is an excellent collection of JavaScript Tips and concept by Manuel Beaudru works as a nice overview of many of the things you'll need to be familiar with if you're just getting started with JavaScript and other related frameworks. 
Node Package Manager(npm) - Package manager for Javascript. 
Yarn - Package manager for Javascript, Like npm. 
Responsinator - Replicate how responsive sites will look on popular devices. 
React cheat sheet - A documentation based website also a progressive web app which means that works well even in offline. You can search by keyword or select one of the predefined filters. 
Responsive Grid System - Generate flexible grids to create a responsive website. 
Regular Expression (Regex) Editor - Helps create and verify your regular expressions.
Sans Francisco - a tool for designers - Collection of tools for designers 
Screensizemap - A comparison of screen sizes in device-independent pixel. 
Sizzy:Browser Testing Tool - Tool for developing and testing responsive design on multiple devices at once. 
Stack Overflow - Online community for developers to ask questions and get answers. 
The W3C Markup Validation Service - Checks the markup validity of Web documents in HTML, XHTML, SMIL, MATHML, etc. 
The W3C CSS Validation Service - Checks the validity of CSS and XHTML documents with style sheets. 
Time Helper - Helps convert millis to DateTimes and vice-versa.
TinyPNG - PNG and JPEG compression/optimizer 
Web Developer Checklist - Categorized checklist for things to cover during web development. 
Progressive Tooling to optimize your performance on Web - List of tools that can be used to improve page performance. 
StackBlitz - Online IDE for Angular and React projects that can be share via link. 
Postman(Tool for testing APIs) - API client to create, share, test, and document APIs. 
Free Bootstrap 5 Cheat Sheet - It is an interactive list of Bootstrap 5 classes, variables, and mixins. 
JSONT - An online simple and powerful JSON formatting tool. 
‚¨Ü back to top
Bootstrap - Design and customize responsible mobile-first sites. 
Bulma CSS - Modular open source framework based on Flexbox. 
Caramel - A simple, modern, responsive website framework. 
Cardinal - Modular mobile-first framework for performance and scalability. 
Element CSS - Vue 2.0 based component library. 
Foundation CSS - Family of responsive front-end frameworks. 
Halfmoon - Fully customizable and responsive front-end framework for building dashboards and tools. 
Jeet - Fractional grid system for Sass and Stylus. 
Less - CSS grid system for designing adaptive websites. 
Material Design Lite - Implementation of Material Design components in vanilla CSS, JS, and HTML. 
Materialize CSS - CSS framework aimed to allow a unified user experience across all products on any platform. 
Milligram - A minimalist CSS framework. 
Neat - A lightweight and flexible Sass grid. 
Petal CSS - Light CSS UI framework based on LESS. 
Pure CSS - A set of small, responsive CSS modules. 
Semantic UI - UI framework designed for theming and responsive design. 
Skeleton CSS - Simple, responsive boilerplate to kickstart any responsive project. 
Spectre CSS - Lightweight, Responsive and Modern CSS framework for faster and extensible development. 
Tacit - Primitive but attractive framework for beginners in graphic design. 
TailwindCSS - Highly customizable, low level CSS framework. 
UI Kit - Lightweight and modular front-end framework for web interfaces. 
Unsemantic - Fluid grid system based on percentages, rather than a set number of columns. 
Vital CSS - Minimally invasive CSS framework for web applications built with Sass and Slim. 
‚¨Ü back to top
Brandicons - Icon font generator and viewer. 
Flat Icon - Database of free icons in PNG, SVG, EPS, PSD, and Base64 formats. 
Font Awesome - Open source icon set and toolkit with consistent styles. 

Glyphicon - Icons for use with Bootstrap, other CSS frameworks, and any web projects. 
Google Material Design Icons - An overview of material icons and how to integrate them into projects. 
Icomoon - Icon font generator and icon collection. 

Icongram - Collection of icon packs from different sources. 
IconSVG - Quick customizable icons for your projects  
Icons8 - Consistently styled and customizable icon packs. 
Ionicons - Open source icons in SVG and webfont. 
Mapicons - Icon font for use with Google Maps API and Google Places API using SVG markers and icon labels. 
Material Design Iconic Font - Full suite of material design icons for easy SVGs on website or desktop. 
MfgLabs-Iconset - MFG Lab's icon set for use in webfonts and CSS. 
Micon - Windows font and CSS toolkit. 
The Noun Project - Comprehensive icon collection. 
Octicons - Collection of GitHub's icons for projects. 
Open Iconic, a free and open icon set - Open source icon set in SVG, webfont, and raster formats. 

OpenWebIcons - Webfont for scalable vector icons and logos. 
ReactIcons -SVG react icons of popular icon packs. 
RemixIcon - Open source neutral style icon system. 
Shape.so - Customizable collection of icons and animations. 

Stackicons - Customizable icons for social brands. 
Typicons - Free-to-use vector icons embedded in a webfont. 
Weather Icons - Weather themed icon font and CSS. 
Zocial | CSS3 Button Set - Create social buttons using CSS and rendering social icons as a font. 
‚¨Ü back to top
Adobe Color - Color Wheel, Extract Theme, Extract Gradient, Accessibility Tools and more 
BADA55 Color Codes - Convert leet words into CSS hex colors. 
Branition Colors - Hand-curated collection of color palettes best fitted for branding. 
Color Hunt - Open collections of beautiful color palettes 
Color Theory by Natalya Shelburne - Practical Color Theory for People who Code: Tutorial on the use of color with examples 
Color wheel | Color schemes - Adobe Color CC - Interactive color wheel with different color rules (adjustments possible) 
Colordesigner Tools - The main purpose of this tool is to help with building a color palette and generate tints and shades based on it. Just pick a color, and the app does the rest. You can use the preselected colors or the color picker for more control. Check also the other tools here 
Colormind - Bootstrap - Colormind is a color scheme generator that uses deep learning to automatically apply the color pallete to a live website mockup. 
Coolors- Super fast color scheme creator with a lot of functionalities 
CSS Gradient - Curated list of sites to explore gradients and color palettes. 
Data Color Picker - Generate color palettes with visually equidistant colors. Useful for data visualizations. 
Designing in Color - A complete guide to design in color (article on Medium) 
Flat UI Colors - Color picker for flat designs 
Image Color Picker - Image color picker and palette generator 
LOL Colors - Curated color palette inspirations 
Material Palette - Color palette generator for Material Design 
Palettable - Interactive color picker: creates a color scheme based on your preferences and palettes on the Internet 
Paletton - The Color Scheme Designer - Advanced tool for creating color schemes 
Picular - Google, but for colors - Primary color generator using Google's image search. 
Pigment - Palette Generator - Generate color palettes based on lighting and pigment. 
UI Gradients - Scroll through or pick from beautiful gradients, download JPG and copy CSS Code 
W3school Color Picker - Find the perfect color from the color wheel, easy control 
UI Color Picker - Best colors in few selected shades to choose from very helpful for quickly choosing and adding color to design. ![Free]
‚¨Ü back to top
A Crash Course in Typography: The Basics of Type - First article of a series on Typography 

Circular Font Combinations | Free Alternatives | Typewolf - A great resource for everything related to Typography 
Font Pair - Helps designers pair Google Fonts together. Beautiful Google Font combinations and pairs. - Clean web-tool on How to pair Google Fonts 
Fontspiration - An iOS app for creating custom typographic designs 
Fontsquirrel - A resource for FREE, hand-picked, high-quality, commercial-use fonts 
Google Fonts - A catalog of free & open source fonts, great details and font pair suggestions 
Just My Type - A collection of font pairings 
Table of Contents | The Elements of Typographic Style Applied to the Web - A practical guide to web typography 
Typekit - ""Quality fonts from the world‚Äôs best foundries"" 

Typography Terms - An infographic on Typography Terms + explanations 
‚¨Ü back to top
Admire The Web - Admire the Web is where we showcase the very best in website design inspiration - carefully curated and organised to keep you inspired. 
Awwwards - The Website Awards that recognize and promote the talent and effort of the best developers, designers and web agencies in the world. 
Dribble - Dribbble is where designers gain inspiration, feedback, community, and jobs and is your best resource to discover and connect with designers worldwide. 
Site Inspire - siteInspire is a showcase of the finest web and interactive design. 
Web design Inspiration - Find inspiration for your next web design project. We help web designers, digital agencies and entrepreneurs to be inspired. Everyday, our team of experts hand picks the best new web designs from all over the world. 
Behance - Behance is a social media platform to showcase and discover creative work like Graphic Design, Illustration, Game Design and many more things 
Pinterest - Pinterest has a host of design inspirations in a variety of forms and styles. 
Pixpa - Pixpa features some nice modern designs and inspirations for web designers and photographers. 
Lapa Ninja - Lapa Ninja is a gallery featuring the best 4127 landing page examples, free books for designers and free UI kits from around the web. 
Landings - Find the best landing pages for your design inspiration based on your preference. 
‚¨Ü back to top
Animate CSS - Choose, try out and get the CSS-Code for different animation types (over 70) 
Anime JS - It‚Äôs easy to use, has a small and simple API, and offers everything you could want from a modern animation engine. 
Bounce JS - Tool and JS Library, creating CSS3 powered animations(adjustments possible) & export CSS code 
Magic Animations - Showcase of different animations with link to GitHub repo 
MO JS - The library provides built-in components to start animating from scratch like HTML, shape, swirl, burst, and stagger but also brings you tools to help craft your animation in a most natural way. 
Particles JS - A lightweight JavaScript library for creating particles. 
Typed JS - A JavaScript typing animation library with a great documentation on GitHub 
Wow JS - JavaScript library: Reveal CSS animation as you scroll down a page 

‚¨Ü back to top
Burst - Free, high-resolution images. All our pictures are free to download for personal and commercial use. 
Canva - 8,000+ free templates and thousands of free photos 
Free stock images and Videos - A great collection of stock photos, videos and other resources. Most of them under the CC0-License, all of them free. 
Gratisography - Photographer Ryan McGuire provides this collection of high-resolution pictures for free. You can use them on your personal or commercial project free of copyright restrictions. 
Humaaans - Library of editable people illustrations. Free for both commercial and personal use. 
I‚Äôd Pin That! - Created to help bloggers and non-designers create high quality images like those often seen on Pinterest. I‚Äôd Pin That is more than just a source for free images ‚Äî it is an image editor! Use the tools provided here to add your own text and edit the images right on the site. 
Illlustrations - 120+ Awesome free illustrations made by the artist vijay verma on a 100 days challenge. 
MakerBook - The best free resources for creatives - A directory of sites to get free resources (Photography, Mockups, Graphics, Textures, Fonts, Colours, Video, Audio & Tools). 
Morguefile - Founded in 1996 by college student Michael Connors.Photographers contribute images to Morguefile for visitors to use in their creative projects. Yes, they‚Äôre all completely free. The website does ask that you credit the photographer when possible. 
Open Doodles - A Free Set of Open-Source Illustrations. 
The Open Photo Project - The Open Photo Project is a photo sharing platform created in 1998 by Michael Jastremski. Contributors have offered their images free of charge under terms of Creative Commons licensing. 
Pexels - Exclusively stock photos of high quality, great feature: Filter photos by color. 
Picalls - Free photos and wallpapers licensed under the Creative Commons CC0 license. 
Pixabay - In addition to photos, Pixabay offers video, vectors and illustrations. 
Pikwizard - Free stock photo library for commercial and editorial use. Huge library of stunning, high quality, royalty free images. No attribution required  
Public Domain Archive - ‚Äúa public domain image repository‚Äù created by Matt a graphic designer, web designer and photographer.Vintage and modern images. 
StockSnap.io - High quality stock photos free to download and use. Licensed under the Creative Commons CC0 license. 
The Stocks - Another awesome directory sharing sites for resources, loading directly on the webpage 
UnDraw - ""MIT licensed illustrations for every project you can imagine and create 
UnSplash - ""Beautiful, Free Photos"" & themed collections of photos 
3D Bay - ""Free, 3D Illustrations"" A collection of High-quality 3D Illustration resources 
Design Stripe - ""Create beautiful illustrations, no design skills needed  
‚¨Ü back to top
Geocomplete-location autocomplete - An advanced jQuery plugin that wraps the Google Maps APIs Geocoding and Places Autocomplete services into a dropdown for an input-form. 
Google maps API | Google - Google Map APIs including documentation & learning resources - extensive 
Google maps API | Traversy - Great YouTube tutorial on using the Google Maps APIs 
OpenCage Geocoder - Free to use forward (lat/long to text) and reverse (text to lat/long) geocoding API 
GeoJS - Free to use API for geolocation lookup by IP address 
‚¨Ü back to top
Alexa API | Codecademy - Learn to develop a custom Amazon Alexa skill that respond to the user's voice with custom messages. 

Abstract APIs - Free utility API's for compressing images, creating user avatars, validating emails, and more 
jsonplaceholder - Fake Online REST API for Testing and Prototyping 
A list of public APIs 
Lorem Picsum - Easy to use and customize placeholder photos 
OpenWeatherMap - Weather API with free and paid licenses 

Random famous quotes | Rapid APIs - Gets a random quote in JSON format. 
TMDB API - API Service for those who are interested in displaying data/images about different movies, TV Shows or actors in their application. 
Unsplash Source - API to retrieve random images from Unsplash.com 
Web APIs | MDN 
News API - Locate articles and breaking news headlines from news sources and blogs across the web with our JSON API.  
Spotify API - Spotify's Web API allows you to find music and podcasts, manage your Spotify collection, control audio playing, and do a variety of other things.  
‚¨Ü back to top
Am I Responsive - This is a tool to check the responsiveness of a website and take a screenshot on multiple devices in a single frame. Go to the site and enter the URL to capture the screenshot. You should have separate screen capture tool to take the proper screenshot. 
Figma - Free app with a simple to use surface for designing, prototyping and sharing your website and app ideas 
Adobe XD - One of the best tool for UI/UX Design, Wireframe, animate, prototype, collaborate, and more  
Magic Mockups - Place your product in realistic environment! Free real-life product/app mockup generator. Laptop, Phone, Tablet, Imac. 
Rotato 3D Mockup Generator - Make video 3D mockups and images. No experience required. Unlimited renders. MacOS.
The MockUp Club - Website that offers free downloads of design mockups (mostly Photoshop format). 
MockupsJar - Build mockups with screenshots of your application or web Design for free to share with customers and clients 
MockUPhone - Free and simple screenshots device mockups generator. Wrap your design in mobile devices or Laptop/Desktop in a few clicks! 
Multi Device Website Mockup Generator - Multi device website mockup generator is free online tool to test your responsive website on apple devices including Apple iMac, MacBook, iPad and iPhone. This tool is very helpful for theme developers to mockup the web template on various apple devices with a single click. You should have a proper screen grabber tool to take the screenshot from the browser. 
Wireframe.cc - Great tool for sketching out ideas and layouts, super minimalistic 
‚¨Ü back to top
Ebook Foundation-free programing books: GitHub Repository - A directory of free learning resources, categorized by language 
HTML Basics - A workshop covering the basics of HTML (free pdf/18 pages) 
HTML5 for Masterminds, 2nd Edition - A complete course from Beginner to Mastermind 
HTML5 Pocket Reference (Pocket Reference (O'Reilly) - A comprehensive compact reference for HTML 5 
HTML Tutorialspoint - A thorough tutorial on HTML (free pdf/486 pages) 
Learn How To Code In HTML5 and CSS3 - A free e-book about making websites in HTML5 and CSS for absolute beginners 
Responsive Web Design with HTML5 and CSS3 - A comprehensive book about making RWD 
You don't know JS - Book series diving deep into the core mechanisms of the JavaScript language. 
Guide to Git and Github - A beginner friendly guide to using git and working with Github. 
Introduction to HTTP - Introduction to HTTP, the stateless protocol underlying all of the web. 
Introduction to the Command Line - A short and beginner friendly introduction to the command line, covering common commands that will make you immediately productive. 
HTML & CSS Books  ![Free]
Web Design Playground, Second Edition - Modern HTML, CSS, and web design standards.Paid
Build a Frontend Web Framework (From Scratch) - Learn how a frontend web framework works by coding your own.Paid
‚¨Ü back to top
Ace Front End - Ace Front End has complete and practical coding challenges, with a detailed walk through of a perfect interview solution. 
Codepen Challenges - Each month has a theme and every week there is a new challenge prompt that you can use to build a project online using HTML, CSS and JavaScript. The best projects are featured on Codepen's homepage. 
Codewars - Improve your skills by training with others on real code challenges. 
CSS Battle - CSSBattle is an online CSS Code Golfing game. Here, players from all around the world try to visually replicate Targets in smallest possible CSS code and battle it out to get to the top of the leaderboard. 
CSS Diner - It's a fun game to learn and practice CSS selectors. 
CSS Zen Garden - A demonstration of what can be accomplished through CSS-based design, and a chance to do your own. 
Dev Challenges - Made by Thu Nghiem. devChallenges.io is a community driven platform for anyone who wants to solve practical tasks. It has some tricky and curated challenges. 
Flexbox Defense - It is a game that covers the flex properties align-items, justify-content, flex-direction, align-self and has 12 different levels. 
Flexbox Froggy - This game is also about Flexbox and it covers even more flex properties: align-items, justify-content, align-content, flex-direction, align-self, flex-wrap, flex-flow and has 24 different levels. 
Front End Mentor - Solve real-world HTML, CSS and JavaScript challenges whilst working to professional designs. Join 192,401 developers building projects, reviewing code, and helping each other get better.  
Grid Garden - Interactive CSS code game. Practice your CSS skills by watering your garden! It has 28 different levels to learn CSS Grid Layout. 
Hackerrank - Practice coding, prepare for interviews, and solve interview style coding challenges. 
JavaScript30 - A free challenge course, building 30 little projects with HTML, CSS and plain JavaScript. 
Leetcode - Coding problems to solve in a range of categories and difficulties  
Project Euler - Challenging computer science and mathematical problems. 
100DaysOfCode - Regardless of your coding skills or your language of choice, this challenge invites you to code for at least 1 hour a day. 
Devtools Tech - Devtools Tech is a free platform for Frontend Engineers to practice high quality real world programming interview questions, follow curated learning paths, read blogs, and track progress across various frontend domains. 
‚¨Ü back to top
JetBrains Student License: Free individual licenses of the award-winning professional developer tools from JetBrains for students and faculty members. 
Student Developer Pack: The best developer tools, free for students via @githubeducation 
‚¨Ü back to top
Flexbox in 20 minutes - Quick crash-course on the CSS Flexbox model. 
SVGs can do that üòé - Sarah Drasner's talk on nontypical pratical uses of SVGs. 
CSS Grid Tutorial - Use CSS grid to structure and position websites with ease. 
Git and GitHub for Beginners - Crash Course - Ad-free tutorial by freeCodeCamp.
12HR Coding Bootcamp 2021! - Complete frontend bootcamp!

‚¨Ü back to top
Jest - JavaScript testing framework 
Mocha - JavaScript testing framework 
Karma - JavaScript test runner
Istanbul - JavaScript test coverage tool 
TestCafe - Node.js end-to-end testing 
Cypress - JavaScript end-to-end testing framework  
Puppeteer - Google's Chrome automation tool for E2E testing.
Playwright - Microsoft's browser automation tool for E2E testing.
Sinon.JS - Standalone test spies, stubs and mocks for JavaScript 
Chai - Assertation library for JavaScript testing 
PactumJS - REST API Testing Tool used to automate e2e, integration, contract & component (or service level) tests 
Vitest - Vitest is a blazing fast unit test framework powered by Vite 
‚¨Ü back to top"
98,"mendel5,alternative-front-ends","Overview of alternative open source front-ends for popular internet platforms (e.g. YouTube, Twitter, etc.). Overview of alternative open source front-ends for popular internet platforms (e.g. YouTube, Twitter, etc.)
Do you know any other free/open-source projects that are not included in the overview yet? (front ends, alternatives to websites, apps, etc.)
Just create an issue and let me know. I'm always looking for new free/open-source projects to add.
Invidious: Invidious is an alternative front-end to YouTube - Lightweight, no ads, no tracking, no JavaScript required
Home page: https://invidious.io
Invidious instances: https://docs.invidious.io/instances/
Invidious instances API: https://api.invidious.io
Installation guide for self-hosting: https://docs.invidious.io/installation/
Piped: An alternative privacy-friendly YouTube frontend which is efficient by design - Lightweight, no ads, no tracking
Official instance: https://piped.video
Public instances: https://github.com/TeamPiped/Piped/wiki/Instances
Installation guide for self-hosting: https://github.com/TeamPiped/Documentation/blob/main/content/docs/self-hosting/index.md
Poketube: The privacy-friendly youtube front-end built with the InnerTube API
Official instance: https://poketube.fun
CloudTube: Alternative front-end for Invidious
Official instance: https://tube.cadence.moe
Installation guide for self-hosting: https://git.sr.ht/~cadence/tube-docs/tree/main/item/docs/cloudtube/Installing%20CloudTube.md
YouTube.js: Full-featured wrapper around the Innertube API, which is what YouTube itself uses
FreeTube: Open source YouTube desktop player for privacy on Windows, Mac and Linux
Official Instance: https://freetubeapp.io/
Invuedious: An alternative frontend for invidious built with vue.js
Official instance: https://bocchilorenzo.github.io/invuedious
Youtube-viewer: Lightweight YouTube client for Linux
pipe-viewer: A lightweight application (fork of straw-viewer) for searching and playing videos from YouTube.
Invidious-viewer: Python application to watch YouTube videos through the Invidious API, in the terminal (requires MPV player and libmpv.so, provided by Linux distro)
NewPipe: A libre lightweight streaming front-end for Android
Youtube-dl: Command-line program to download videos from YouTube.com and other video sites
OpenVideoDownloader aka jely2002/youtube-dl-gui: A cross-platform GUI for youtube-dl made in Electron and node.js
ytdl-gui: A simple-to-use, cross-platform graphical interface for youtube-dl
Alltube: Web GUI for youtube-dl
Vividl: Modern Windows GUI for youtube-dl
Tartube: A GUI front-end for youtube-dl, partly based on youtube-dl-gui and written in Python 3 / Gtk 3
ytmdl: A simple app to get songs from YouTube in mp3 format with artist name, album name etc from sources like iTunes, LastFM, Deezer, Gaana etc.
Plumber: Local and remote video trimmer, can trim parts of video without downloading whole video, utilizes youtube-dl, allows conversion to GIFs
ViewTube: An alternative front-end for YouTube, written in Vue.js, uses Plyr video player; supports SponsorBlock, multiple Invidious instances support, chapters
youtube-local: Browser-based client for watching Youtube anonymously and with greater page performance
yt-local: Browser-based client for watching Youtube anonymously without forcing javascript (Fork of youtube-local)
SkyTube: An open-source YouTube app for Android
yt-dlp: A youtube-dl fork with additional features and fixes
uYouPlus: uYouPlus (uYou+) is an alternative YouTube app for Apple's iOS and iPadOS
SmartTubeNext: SmartTubeNext is an advanced YouTube app for Android TVs and TV boxes, free and open source. It is not a live TV client and does not support ""YouTube TV""
TubeSync: TubeSync is a PVR (personal video recorder) for YouTube. It syncs YouTube channels and playlists to a locally hosted media server
TubeArchivist: A self hosted YouTube media server
ytfzf: A POSIX script that helps you find Youtube videos (without API) and opens/downloads them using mpv/youtube-dl
ytcc: Command line tool to keep track of your favorite playlists on YouTube and many other places. Can import youtube subscriptions from Google Takeout and provide them as an RSS feed for your favorite reader
smtube: Stand-alone YouTube video player
Website: https://www.smtube.org
SMTube is part of SMPlayer
SMPlayer website: https://www.smplayer.info
SMPlayer repository: https://github.com/smplayer-dev/smplayer
mps-youtube: Terminal based YouTube player and downloader
minitube: Lightweight youtube client with a kid-friendly interface. Can make playlists from search keywords
yattee: Alternative YouTube frontend for iOS, tvOS and macOS built with Invidious and Piped, supports sponsorblock
ytcast: Cast YouTube videos to your smart TV from the command line. This program does roughly the same thing as the ""Play on TV"" button that appears on the player bar when you visit youtube.com with Chrome or when you use the YouTube smartphone app
LibreTube: Android frontend for YouTube, based on Piped
BlackHole: Android music player app for YouTube Music and Spotify made with Flutter
oleksis/youtube-dl-gui: Cross-platform front-end GUI of the popular youtube-dl written in wxPython
ytmdesktop: Cross-platform (Windows, Mac, and Linux) desktop app for YouTube Music. Has a (proprietary?) remote control app for Android
Beatbump: An alternative frontend for YouTube Music created using Svelte/SvelteKit, powered by Cloudflare Workers
Official instance: https://beatbump.ml/
AudioTube: Client for YouTube Music. Plasma-mobile project with an interface designed for Linux phones
th-ch/youtube-music: YouTube Music desktop app based on Electron bundled with custom plugins (including built-in ad blocker and downloader)
Nitter: Alternative Twitter front-end - Lightweight, no ads, no tracking, no JavaScript required
Official instance: nitter.net
Public instances: https://github.com/zedeus/nitter/wiki/Instances
Example: Troy Hunt on Twitter and Nitter
Shitter: Android, alternative front-end for Twitter, built with Java
Harpy: Android, alternative front-end for Twitter, built with Flutter/Dart
Twidere X: Android, alternative front-end for Twitter, built mostly with Kotlin, in early stage
Tweeterr: A tool to use Twitter from the command line on the fly
Tweet-app: Desktop Twitter client only for tweeting. Timeline never shows up
Tweepy: Twitter for Python
Fritter: A free, open-source Twitter client for Android
Teddit: Alternative Reddit front-end focused on privacy - Lightweight, no ads, no JavaScript, unofficial API
Official instance: https://teddit.net
Public instances: https://github.com/teddit-net/teddit#instances
Example: /r/Privacy on Reddit and Teddit
Libreddit: Alternative front-end for Reddit. Themed around Reddit's new design - Lightweight, no JavaScript, no ads, no tracking
Official instance: https://libreddit.spike.codes
Public instances: https://github.com/spikecodes/libreddit#instances
Xeddit: A Xamarin.Forms app for Reddit
Official instance: xeddit.com
Example: /r/Privacy on Reddit and Xeddit
RedditClient: Alternative front-end for Reddit, built with Angular
Updoot: Android, alternative front-end for Reddit
Eddrit: Alternative front-end for Reddit, inspired by Nitter, built with Python & Starlette
Top of Reddit: Top Reddit posts every day
Snew: Open-source client for Reddit forked from the Reddit source code
Stealth: Account-free, privacy-oriented, and feature-rich Reddit client
Available on F-Droid
Infinity: Reddit client for Android
Available on F-Droid
Dawn: Open-source Reddit app
Available on F-Droid
Forked from Dank: https://github.com/saket/Dank
Slide: Open source, ad free Reddit browser for Android
Available on F-Droid
junipf/reddit-frontend: A reddit front-end written in React
Official instance: https://jpf-reddit.netlify.app
kddit: uWSGI frontend for Reddit.com written in Python
Official instance: https://kddit.kalli.st
Troddit: A web client for Reddit
Official instance: https://www.troddit.com
Roffline: A self-hosted offline Reddit server. It allows you to browse Reddit posts (including any media in the post) while offline. It is targeted at people that have intermittent internet
ProxiTok: Open source alternative frontend for TikTok made with PHP
Official instance: https://proxitok.pabloferreiro.es/
Rimgo: Self-hosted frontend for Imgur ritten in Go
Public instances: https://codeberg.org/video-prize-ranch/rimgo#instances
Rimgu: Self-hosted alternative frontend/ proxy for Imgur
Imgin: Minimal Imgur front end
Official instance: https://imgin.voidnet.tech
Example album on Imgur.com: https://imgur.com/a/GD6p5Fi
Same album on Imgin: https://imgin.voidnet.tech/a/GD6p5Fi
Omgur: Omgur is a free and open-source alternative Imgur front-end focused on privacy. Inspired by the Invidious, Nitter, and Teddit projects.
No JavaScript or ads
All requests go through the Omgur backend, client never talks to Imgur
Prevents Imgur from tracking your IP or JavaScript fingerprint
Lightweight
Self-hostable
Mirror of the original repository on Github: https://github.com/geraldwuhoo/omgur
imgrs: Imgrs is a free and open-source alternative Imgur front-end focused on privacy. It's a Rust rewrite of a previous Imgur proxy project, Omgur.
Mirror of the original repository on Github: https://github.com/geraldwuhoo/imgrs
psst: Fast and multi-platform Spotify client with native GUI
Spotiqueue: Minimalistic queue-oriented macOS-native client for Spotify, with Guile Scheme scriptability
spot: Gtk/Rust native Spotify client for the GNOME desktop. Only works with premium accounts
spotube: A lightweight and free Spotify crossplatform-client which handles playback manually, streams music using Youtube & no Spotify premium account is needed
SpotX: Modified Spotify Client for Windows (Windows Only) - Blocking ads and updates for the desktop version of Spotify, disabling podcasts and more
kotify: Requires Spotify Account - Multiplatform desktop client for Spotify focused on library organization for power users. Relies on official Spotify client for playback
librespot: Requires Spotify Premium Account - librespot is an open source client library for Spotify. It enables applications to use Spotify's service to control and play music via various backends, and to act as a Spotify Connect receiver. It is an alternative to the official and now deprecated closed-source libspotify. Additionally, it will provide extra features which are not available in the official library
spotifyd: unix daemon, using librespot.
oggify: Download Spotify tracks to Ogg Vorbis (with a Spotify premium account), based on librespot
Cider: Cross-platform Apple Music experience based on Electron and Vue.js written from scratch with performance in mind
Tent: A simple alternative front-end for Bandcamp that does not require JavaScript and proxies all requests
streamlink-twitch-gui: Multi platform Twitch.tv browser for Streamlink
Twire: Alternative and open source Twitch client for Android
Xtra: Twitch player and browser for Android
ElectronPlayer: Electron Based Web Video Services Player. Supports Netflix, Youtube, Twitch, Floatplane, Hulu and more
gtkcord4: A lightweight Discord client written in Golang which uses GTK3 for the user interface
Whoogle Search: A self-hosted, ad-free, privacy-respecting metasearch engine for Google
Public instances: https://github.com/benbusby/whoogle-search#public-instances
Searx: Searx is a free privacy-respecting internet metasearch engine which aggregates results from more than 70 search services. Users are neither tracked nor profiled. Additionally, searx can be used over Tor for online anonymity
Public instances: https://searx.space
SearXNG: SearXNG is a free internet metasearch engine which aggregates results from various search services and databases. Users are neither tracked nor profiled (SearXNG is a fork of searx)
LibreX: Privacy respecting free meta search engine (free as in freedom)
Small and simple meta search engine, fetches and anonymizes results from Google only, has API support, allows redirects to Invidious/ Bibliogram/ Nitter/ Libreddit
Lingva Translate: Alternative front-end for Google Translate, serving as a free and open-source translator with over a hundred languages available
Official instance: lingva.ml
Public instances: https://github.com/TheDavidDelta/lingva-translate#instances
SimplyTranslate: Provide fast and private translations to the user without wasting much overhead for extensive styling or JavaScript. Supports Google Translate, DeepL, ICIBA and LibreTranslate.
Official instance: simplytranslate.org
Home page and public instances: https://simple-web.org/projects/simplytranslate.html
SimplyTranslate Mobile: Unofficial Android client of SimplyTranslate.
Available on F-Droid
InstaLate: Distraction-free translation for Android, to be used directly from within any app. Supports Beolingus, DeepL, Dict.cc, GNU CIDE, Heinzelnisse, LibreTranslate, Linguee, WikDict and Wiktionary.
Available on F-Droid
DeepL Android: Unofficial Android client for DeepL
Available on F-Droid
Crow Translate: Simple and lightweight cross-platform translator that allows translation using LibreTranslate, Lingva, Google, Bing, and Yandex, as well as text-to-speech using Google
SlimSocial: Android, alternative front-end for Facebook, built with Java
Frost: An extensive and functional third party app for Facebook (Android app)
Caprine: Unofficial and privacy-focused Facebook Messenger app with many useful features
Sengi: cross-platform multi-account Mastodon & Pleroma desktop client
TheDesk: cross-platform Mastodon & Misskey desktop client
Tootle: simple GTK-based Linux Mastodon client
Tusky: lightweight Android Mastodon client
Fedilab: multi-account Android Mastodon client
Pinafore: Alternative web client for Mastodon, focused on speed and simplicity Unmaintained
Hyperspace: cross-platform Mastodon client for the fediverse written in TypeScript and React In maintenance mode 
Scribe: Alternative front-end to Medium.com
Official website: https://scribe.rip
Libmedium: Alternative front-end to Medium.com
Official website: https://libmedium.batsense.net
libremdb: A FOSS alternative front-end to IMDb.
Official instance: https://libremdb.iket.me/
Public Instances: https://github.com/zyachel/libremdb#instances
Quetre: A libre front-end for Quora
Official website: https://quetre.iket.me/
Public instances: https://github.com/zyachel/quetre#instances
Neuters: An alternative front-end to Reuters.com. It is intented to be lightweight and fast, and was heavily inspired by Nitter
Official instance: https://neuters.de
RPiPlay: An open-source AirPlay mirroring server for the Raspberry Pi. Supports iOS 9 and up.
air-pi-play: Turn a Raspberry Pi into an Airplay server using RPiPlay to enable screen mirroring on tvs, monitors and projectors.
SongRec: Open-source Shazam client for Linux, written in Rust
Telegram-FOSS: Unofficial, FOSS-friendly fork of the original Telegram client for Android
PornInvidious: Simple JavaScript-Free Frontend for xvideos.com
HN-search: Algolia Hacker News search
Example: Highest rated submissions of the past 24 hours
HNTopLinks: Top Links on Hacker News
Hackerweb: A simply readable Hacker News web app
Official instance: https://hackerweb.app
About Hackerweb: https://hackerwebapp.com
Hckrnws: A custom front-end for a better reading experience of HackerNews
Official instance: https://www.hckrnws.com
Hackers: a native iOS app for Hacker News
Available to download on the Apple AppStore: https://apps.apple.com/us/app/hackers-for-hacker-news/id603503901
Pastewin: Free alternative Pastebin front-end
MediathekViewWeb: Video content of German public-service television broadcasters (e.g. ARD, ZDF)
Official instance: mediathekviewweb.de
NoPaste: NoPaste is an open-source website similar to Pastebin where you can store any piece of code, and generate links for easy sharing
PrivateBin: Zero knowledge encrypted paste-bin. A minimalist, open source online pastebin where the server has zero knowledge of pasted data. Data is encrypted/decrypted in the browser using 256 bits AES
vaultwarden: Password manager. Unofficial Bitwarden compatible server written in Rust, formerly known as bitwarden_rs
snapdrop: Similar to Apple's Airdrop but in your browser. A Progressive Web App for local file sharing
hedgedoc: Collaborative markdown editor. A platform to write and share markdown
etherpad-lite: Collaborative rich text editor. A modern really-real-time collaborative document editor
gitea: Lightweight git server. Git with a cup of tea, painless self-hosted git service
ArchiveBox: Open source self-hosted web archiving. Takes URLs/browser history/bookmarks/Pocket/Pinboard/etc., saves HTML, JS, PDFs, media, and more
Wikiless: A free open source alternative Wikipedia front-end focused on privacy
Official instance: https://wikiless.org/
Public instances: https://github.com/Metastem/wikiless
Librarian: Alternative frontend for LBRY / Odysee.com
Public instances: https://codeberg.org/librarian/librarian#instances
Privacy Redirect: A simple web extension that redirects Twitter, YouTube, & Google Maps requests to privacy friendly alternatives
libredirect: A web extension that redirects popular sites to alternative privacy-friendly frontends and backends. Actively maintained fork of Privacy Redirect that supports Youtube, Youtube Music, Twitter, TikTok, Imgur, Reddit, Searx, Google Translate, Google Maps, Wikipedia, and Medium
Farside: Farside provides links that automatically redirect to working instances of privacy-oriented alternative frontends, such as Nitter, Libreddit, etc. This allows for users to have more reliable access to the available public instances for a particular service, while also helping to distribute traffic more evenly across all instances and avoid performance bottlenecks and rate-limiting.
UntrackMe: UntrackMe transforms Twitter, YouTube, Reddit and Medium and Wikipedia links to links of open source, privacy friendly front-ends. Converts Google Maps links to OpenStreetMap links. Removes tracking parameters from any url. Then delegates the action to other apps that are capable of handling them. (Android app)
Redirector: Web browser extension (Firefox, Vivaldi, Chrome, Opera, Edge) to redirect URLs based on regex or wildcard patterns.
uBlock Origin: An efficient blocker for Chromium and Firefox. Fast and lean
StreetComplete: Easy to use OpenStreetMap editor for Android
Matrix.org's Synapse: End-to-end-encrypted messaging. Matrix reference homeserver. See also matrix.org.
Pluja's Awesome Privacy: A curated list of services and alternatives that respect your privacy because privacy matters.
12ft.io / 12ft Ladder: 12ft Ladder is a free service for reading news articles. Prepend 12ft.io/ to the URL of any paywalled page, and we'll try our best to remove the paywall and get you access to the article. It is similar to Outline.com which is not available anymore.
Note: The source code of 12ft Ladder is not available under a free/open-source license.
Youtube Vanced: Youtube replacement app for the Android platform: YouTube Vanced is the stock Android YouTube app, but better. It includes adblocking, true amoled dark mode and a lot more. Use the Vanced Manager to install YouTube Vanced with ease.
Official website with install instructions: https://vancedapp.com
Note: The source code of Youtube Vanced is not available under a free/open-source license.
For an explanation about the origin of Youtube Vanced see here: https://old.reddit.com/r/Vanced/comments/o3xm9m/if_youtube_vanced_isnt_open_source_and_doesnt/h2ec7wf/
Vanced was forced to shut down by Google due to legal reasons. The project https://github.com/revanced tries to continue its legacy
This overview originally included three alternative front-ends: Invidious (for YouTube), Bibliogram (for Instagram) and Nitter (for Twitter). Therefore it was named alternative front-ends. As more projects have been added to the repository, the listed projects partially left the scope of alternative front-ends.
For example, youtube-dl is not a front-end, but can be generally described as an open source project that interacts with the internet platform Youtube.
Therefore the name alternative front-ends does not capture the full scope of the listed projects anymore. Maybe this repository will be renamed in the future to better reflect the larger scope. A possible name might be open-source-alternatives or something similar."
99,"sadanandpai,javascript-code-challenges","A collection of JavaScript modern interview code challenges for beginners to experts. 
    JavaScript Modern Interview Code Challenges
    Collection of modern interview code challenges on JavaScript suitable for
        <h4>Interviewees | Interviewers | Knowledge test | Practice</h4>
        



    
        <a name=""stars"">
        <a name=""forks"">
        <a name=""contributions"">
        <a name=""madeWith"">
        <a name=""license"">
    



    Show your support by giving a ‚≠ê to this repo
    <h5>Feel free to connect with me on </h5>



    JavaScript Modern Interview Code Challenges by topic




If you want to contribute, improve or suggest changes to this repo, then check out the Contributing Guide



This repository is MIT licensed. Read more"
187,"discordjs,discord.js","A powerful JavaScript library for interacting with the Discord API. 
    
    
        
    
    
    
        
        
        
        
        
    
    
        
    


discord.js is a powerful Node.js module that allows you to easily interact with the
Discord API.
Object-oriented
Predictable abstractions
Performant
100% coverage of the Discord API
Node.js 16.9.0 or newer is required.
zlib-sync for WebSocket data compression and inflation (npm install zlib-sync)
erlpack for significantly faster WebSocket data (de)serialisation (npm install discord/erlpack)
bufferutil for a much faster WebSocket connection (npm install bufferutil)
utf-8-validate in combination with bufferutil for much faster WebSocket processing (npm install utf-8-validate)
@discordjs/voice for interacting with the Discord Voice API (npm install @discordjs/voice)
Install discord.js:
Register a slash command against the Discord API:
Afterwards we can create a quite simple example bot:
Website (source)
Documentation
Guide (source)
See also the Update Guide, including updated and removed items in the library.
discord.js Discord server
Discord API Discord server
GitHub
npm
Related libraries
RPC (source)
Before creating an issue, please ensure that it hasn't already been reported/suggested, and double-check the
documentation.
See the contribution guide if you'd like to submit a PR.
If you don't understand something in the documentation, you are experiencing problems, or you just need a gentle
nudge in the right direction, please don't hesitate to join our official discord.js Server."
188,"jaredhanson,passport","Simple, unobtrusive authentication for Node.js.. Passport is Express-compatible authentication
middleware for Node.js.
Passport's sole purpose is to authenticate requests, which it does through an
extensible set of plugins known as strategies.  Passport does not mount
routes or assume any particular database schema, which maximizes flexibility and
allows application-level decisions to be made by the developer.  The API is
simple: you provide Passport a request to authenticate, and Passport provides
hooks for controlling what occurs when authentication succeeds or fails.

  <sup>Sponsors</sup>
  
  
  <b>Your app, enterprise-ready.</b>Start selling to enterprise customers with just a few lines of code. Add Single Sign-On (and more) in minutes instead of months.
  
  
  
    
      <source media=""(prefers-color-scheme: dark)"" srcset=""https://raw.githubusercontent.com/jaredhanson/passport/master/sponsors/descope-dark.svg"">
      <source media=""(prefers-color-scheme: light)"" srcset=""https://raw.githubusercontent.com/jaredhanson/passport/master/sponsors/descope.svg"">
      
    </picture>
  
  <b>Drag and drop your auth</b>Add authentication and user management to your consumer and business apps with a few lines of code.
  
  
  
  <b>Auth. Built for Devs, by Devs</b>Add login, registration, SSO, MFA, and a bazillion other features to your app in minutes. Integrates with any codebase and installs on any server, anywhere in the world.


Status:



Passport uses the concept of strategies to authenticate requests.  Strategies
can range from verifying username and password credentials, delegated
authentication using OAuth (for example, via Facebook
or Twitter), or federated authentication using OpenID.
Before authenticating requests, the strategy (or strategies) used by an
application must be configured.
There are 480+ strategies. Find the ones you want at: passportjs.org
Passport will maintain persistent login sessions.  In order for persistent
sessions to work, the authenticated user must be serialized to the session, and
deserialized when subsequent requests are made.
Passport does not impose any restrictions on how your user records are stored.
Instead, you provide functions to Passport which implements the necessary
serialization and deserialization logic.  In a typical application, this will be
as simple as serializing the user ID, and finding the user by ID when
deserializing.
To use Passport in an Express or
Connect-based application, configure it
with the required passport.initialize() middleware.  If your application uses
persistent login sessions (recommended, but not required), passport.session()
middleware must also be used.
Passport provides an authenticate() function, which is used as route
middleware to authenticate requests.
Passport has a comprehensive set of over 480 authentication strategies
covering social networking, enterprise integration, API services, and more.
There is a Strategy Search at passportjs.org
The following table lists commonly used strategies:
For a complete, working example, refer to the example
that uses passport-local.
Local Strategy: Refer to the following tutorials for setting up user authentication via LocalStrategy (passport-local):
Mongo
Express v3x - Tutorial / working example
Express v4x - Tutorial / working example
Postgres
Tutorial / working example
Social Authentication: Refer to the following tutorials for setting up various social authentication strategies:
Express v3x - Tutorial / working example
Express v4x - Tutorial / working example
Locomotive ‚Äî Powerful MVC web framework
OAuthorize ‚Äî OAuth service provider toolkit
OAuth2orize ‚Äî OAuth 2.0 authorization server toolkit
connect-ensure-login  ‚Äî middleware to ensure login sessions
The modules page on the
wiki lists other useful modules
that build upon or integrate with Passport.
Copyright (c) 2011-2021 Jared Hanson <https://www.jaredhanson.me/>"
189,"parse-community,parse-server","Parse Server for Node.js / Express. Parse Server is an open source backend that can be deployed to any infrastructure that can run Node.js. Parse Server works with the Express web application framework. It can be added to existing web applications, or run by itself.
The full documentation for Parse Server is available in the wiki. The Parse Server guide is a good place to get started. An API reference and Cloud Code guide are also available. If you're interested in developing for Parse Server, the Development guide will help you get set up.
A big thank you üôè to our sponsors and backers who support the development of Parse Platform!

Parse Server is available in different flavors on different branches:
The main branches are release, beta and alpha. See the changelog overview for details.
The long-term-support (LTS) branches are named release-&lt;version&gt;.x.x, for example release-5.x.x. LTS branches do not have pre-release branches.
Long-Term-Support (LTS) is provided for the previous Parse Server major version. For example, Parse Server 5.x will receive security updates until Parse Server 6.x is superseded by Parse Server 7.x and becomes the new LTS version. While the current major version is published on branch release, a LTS version is published on branch release-#.x.x, for example release-5.x.x for the Parse Server 5.x LTS branch.
‚ö†Ô∏è LTS versions are provided to help you transition as soon as possible to the current major version. While we aim to fix security vulnerabilities in the LTS version, our main focus is on developing the current major version and preparing the next major release. Therefore we may leave certain vulnerabilities up to the community to fix. Search for pull requests with the specific LTS base branch to see the current open vulnerabilities for that LTS branch.
The fastest and easiest way to get started is to run MongoDB and Parse Server locally.
Before you start make sure you have installed:
NodeJS that includes npm
MongoDB or PostgreSQL(with PostGIS 2.2.0 or higher)
Optionally Docker
Parse Server is continuously tested with the most recent releases of Node.js to ensure compatibility. We follow the Node.js Long Term Support plan and only test against versions that are officially supported and have not reached their end-of-life date.
Parse Server is continuously tested with the most recent releases of MongoDB to ensure compatibility. We follow the MongoDB support schedule and MongoDB lifecycle schedule and only test against versions that are officially supported and have not reached their end-of-life date. We consider the end-of-life date of a MongoDB ""rapid release"" to be the same as its major version release.
Parse Server is continuously tested with the most recent releases of PostgreSQL and PostGIS to ensure compatibility, using PostGIS docker images. We follow the PostgreSQL support schedule and PostGIS support schedule and only test against versions that are officially supported and have not reached their end-of-life date. Due to the extensive PostgreSQL support duration of 5 years, Parse Server drops support about 2 years before the official end-of-life date.
Note: If installation with -g fails due to permission problems (npm ERR! code 'EACCES'), please refer to this link.
Note: If you want to use Cloud Code, add -v cloud-code-vol:/parse-server/cloud --cloud /parse-server/cloud/main.js to the command above. Make sure main.js is in the cloud-code-vol directory before starting Parse Server.
You can use any arbitrary string as your application id and master key. These will be used by your clients to authenticate with the Parse Server.
That's it! You are now running a standalone version of Parse Server on your machine.
Using a remote MongoDB? Pass the  --databaseURI DATABASE_URI parameter when starting parse-server. Learn more about configuring Parse Server here. For a full list of available options, run parse-server --help.
Now that you're running Parse Server, it is time to save your first object. We'll use the REST API, but you can easily do the same using any of the Parse SDKs. Run the following:
You should get a response similar to this:
You can now retrieve this object directly (make sure to replace 2ntvSpRGIK with the actual objectId you received when the object was created):
Keeping tracks of individual object ids is not ideal, however. In most cases you will want to run a query over the collection, like so:
To learn more about using saving and querying objects on Parse Server, check out the Parse documentation.
Parse provides SDKs for all the major platforms. Refer to the Parse Server guide to learn how to connect your app to Parse Server.
Once you have a better understanding of how the project works, please refer to the Parse Server wiki for in-depth guides to deploy Parse Server to major infrastructure providers. Read on to learn more about additional ways of running Parse Server.
We have provided a basic Node.js application that uses the Parse Server module on Express and can be easily deployed to various infrastructure providers:
You can also create an instance of Parse Server, and mount it on a new or existing Express website:
For a full list of available options, run parse-server --help or take a look at Parse Server Configurations.
Check the Parse Server health by sending a request to the /parse/health endpoint.
The response looks like this:
Parse Server can be configured using the following options. You may pass these as parameters when running a standalone parse-server, or by loading a configuration file in JSON format using parse-server path/to/configuration.json. If you're using Parse Server on Express, you may also pass these to the ParseServer object as options.
For the full list of available options, run parse-server --help or take a look at Parse Server Configurations.
appId (required) - The application id to host with this server instance. You can use any arbitrary string. For migrated apps, this should match your hosted Parse app.
masterKey (required) - The master key to use for overriding ACL security.  You can use any arbitrary string. Keep it secret! For migrated apps, this should match your hosted Parse app.
databaseURI (required) - The connection string for your database, i.e. mongodb://user:pass@host.com/dbname. Be sure to URL encode your password if your password has special characters.
port - The default port is 1337, specify this parameter to use a different port.
serverURL - URL to your Parse Server (don't forget to specify http:// or https://). This URL will be used when making requests to Parse Server from Cloud Code.
cloud - The absolute path to your cloud code main.js file.
push - Configuration options for APNS and GCM push. See the Push Notifications quick start.
The client keys used with Parse are no longer necessary with Parse Server. If you wish to still require them, perhaps to be able to refuse access to older clients, you can set the keys at initialization time. Setting any of these keys will require all requests to provide one of the configured keys.
clientKey
javascriptKey
restAPIKey
dotNetKey
Verifying user email addresses and enabling password reset via email requires an email adapter. There are many email adapters provided and maintained by the community. The following is an example configuration with an example email adapter. See the Parse Server Options for more details and a full list of available options.
Offical email adapters maintained by Parse Platform:
parse-server-api-mail-adapter (localization, templates, universally supports any email provider)
Email adapters contributed by the community:
parse-smtp-template (localization, templates)
Set a password and account policy that meets your security requirements. The following is an example configuration. See the Parse Server Options for more details and a full list of available options.
Caution, this is an experimental feature that may not be appropriate for production.
Custom routes allow to build user flows with webpages, similar to the existing password reset and email verification features. Custom routes are defined with the pages option in the Parse Server configuration:
The above route can be invoked by sending a GET request to:
https://[parseServerPublicUrl]/[parseMount]/[pagesEndpoint]/[appId]/[customRoute]
The handler receives the request and returns a custom_page.html webpage from the pages.pagesPath directory as response. The advantage of building a custom route this way is that it automatically makes use of Parse Server's built-in capabilities, such as page localization and dynamic placeholders.
The following paths are already used by Parse Server's built-in features and are therefore not available for custom routes. Custom routes with an identical combination of path and method are ignored.
It‚Äôs possible to change the default pages of the app and redirect the user to another path or domain.
You may configure the Parse Server using environment variables:
The default port is 1337, to use a different port set the PORT environment variable:
For the full list of configurable environment variables, run parse-server --help or take a look at Parse Server Configuration.
All official adapters are distributed as scoped packages on npm (@parse).
Some well maintained adapters are also available on the Parse Server Modules organization.
You can also find more adapters maintained by the community by searching on npm.
Parse Server allows developers to choose from several options when hosting files:
GridFSBucketAdapter - which is backed by MongoDB
S3Adapter - which is backed by Amazon S3
GCSAdapter - which is backed by Google Cloud Storage
FSAdapter - local file storage
GridFSBucketAdapter is used by default and requires no setup, but if you're interested in using Amazon S3, Google Cloud Storage, or local file storage, additional configuration information is available in the Parse Server guide.
Caution, this is an experimental feature that may not be appropriate for production.
This feature deduplicates identical requests that are received by Parse Server multiple times, typically due to network issues or network adapter access restrictions on mobile operating systems.
Identical requests are identified by their request header X-Parse-Request-Id. Therefore a client request has to include this header for deduplication to be applied. Requests that do not contain this header cannot be deduplicated and are processed normally by Parse Server. This means rolling out this feature to clients is seamless as Parse Server still processes requests without this header when this feature is enabled.
This feature needs to be enabled on the client side to send the header and on the server to process the header. Refer to the specific Parse SDK docs to see whether the feature is supported yet.
Deduplication is only done for object creation and update (POST and PUT requests). Deduplication is not done for object finding and deletion (GET and DELETE requests), as these operations are already idempotent by definition.
To use this feature in Postgres, you will need to create a cron job using pgAdmin or similar to call the Postgres function idempotency_delete_expired_records() that deletes expired idempotency records. You can find an example script below. Make sure the script has the same privileges to log into Postgres as Parse Server.
Assuming the script above is named, parse_idempotency_delete_expired_records.sh, a cron job that runs the script every 2 minutes may look like:
Caution, this is an experimental feature that may not be appropriate for production.
Custom pages as well as feature pages (e.g. password reset, email verification) can be localized with the pages option in the Parse Server configuration:
Localization is achieved by matching a request-supplied locale parameter with localized page content. The locale can be supplied in either the request query, body or header with the following keys:
query: locale
body: locale
header: x-parse-page-param-locale
For example, a password reset link with the locale parameter in the query could look like this:
Localization is only available for pages in the pages directory as set with pages.pagesPath.
Localization for feature pages (e.g. password reset, email verification) is disabled if pages.customUrls are set, even if the custom URLs point to the pages within the pages path.
Only .html files are considered for localization when localizing custom pages.
Pages can be localized in two ways:
Pages are localized by using the corresponding file in the directory structure where the files are placed in subdirectories named after the locale or language. The file in the base directory is the default file.
Example Directory Structure:
Files are matched with the locale in the following order:
Locale match, e.g. locale de-AT matches file in folder de-AT.
Language match, e.g. locale de-CH matches file in folder de.
Default; file in base folder is returned.
Configuration Example:
Pros:
All files are complete in their content and can be easily opened and previewed by viewing the file in a browser.
Cons:
In most cases, a localized page differs only slightly from the default page, which could cause a lot of duplicate code that is difficult to maintain.
Pages are localized by adding placeholders in the HTML files and providing a JSON resource that contains the translations to fill into the placeholders.
Example Directory Structure:
The JSON resource file loosely follows the i18next syntax, which is a syntax that is often supported by translation platforms, making it easy to manage translations, exporting them for use in Parse Server, and even to automate this workflow.
Example JSON Content:
Configuration Example:
Pros:
There is only one HTML file to maintain that contains the placeholders that are filled with the translations according to the locale.
Cons:
Files cannot be easily previewed by viewing the file in a browser because the content contains only placeholders and even HTML or CSS changes may be dynamically applied, e.g. when a localization requires a Right-To-Left layout direction.
Style and other fundamental layout changes may be more difficult to apply.
In addition to feature related default parameters such as appId and the translations provided via JSON resource, it is possible to define custom dynamic placeholders as part of the router configuration. This works independently of localization and, also if enableLocalization is disabled.
Configuration Example:
The placeholders can also be provided as function or as async function, with the locale and other feature related parameters passed through, to allow for dynamic placeholder values:
The following parameter and placeholder keys are reserved because they are used related to features such as password reset or email verification. They should not be used as translation keys in the JSON resource or as manually defined placeholder keys in the configuration: appId, appName, email, error, locale, publicServerUrl, token, username.
In combination with the Parse Server API Mail Adapter Parse Server provides a fully localized flow (emails -> pages) for the user. The email adapter sends a localized email and adds a locale parameter to the password reset or email verification link, which is then used to respond with localized pages.
Parse Server will, by default, log:
to the console
daily rotating files as new line delimited JSON
Logs are also viewable in Parse Dashboard.
Want to log each request and response? Set the VERBOSE environment variable when starting parse-server. Usage :-  VERBOSE='1' parse-server --appId APPLICATION_ID --masterKey MASTER_KEY
Want logs to be placed in a different folder? Pass the PARSE_SERVER_LOGS_FOLDER environment variable when starting parse-server. Usage :-  PARSE_SERVER_LOGS_FOLDER='&lt;path-to-logs-folder&gt;' parse-server --appId APPLICATION_ID --masterKey MASTER_KEY
Want to log specific levels? Pass the logLevel parameter when starting parse-server. Usage :-  parse-server --appId APPLICATION_ID --masterKey MASTER_KEY --logLevel LOG_LEVEL
Want new line delimited JSON error logs (for consumption by CloudWatch, Google Cloud Logging, etc)? Pass the JSON_LOGS environment variable when starting parse-server. Usage :-  JSON_LOGS='1' parse-server --appId APPLICATION_ID --masterKey MASTER_KEY
See the Deprecation Plan for an overview of deprecations and planned breaking changes.
Live queries are meant to be used in real-time reactive applications, where just using the traditional query paradigm could cause several problems, like increased response time and high network and server usage. Live queries should be used in cases where you need to continuously update a page with fresh data coming from the database, which often happens in (but is not limited to) online games, messaging clients and shared to-do lists.
Take a look at Live Query Guide, Live Query Server Setup Guide and Live Query Protocol Specification. You can setup a standalone server or multiple instances for scalability (recommended).
GraphQL, developed by Facebook, is an open-source data query and manipulation language for APIs. In addition to the traditional REST API, Parse Server automatically generates a GraphQL API based on your current application schema. Parse Server also allows you to define your custom GraphQL queries and mutations, whose resolvers can be bound to your cloud code functions.
The easiest way to run the Parse GraphQL API is through the CLI:
After starting the server, you can visit http://localhost:1337/playground in your browser to start playing with your GraphQL API.
Note: Do NOT use --mountPlayground option in production. Parse Dashboard has a built-in GraphQL Playground and it is the recommended option for production apps.
You can also run the Parse GraphQL API inside a Docker container:
Note: If you want to use Cloud Code, add -v cloud-code-vol:/parse-server/cloud --cloud /parse-server/cloud/main.js to the command above. Make sure main.js is in the cloud-code-vol directory before starting Parse Server.
After starting the server, you can visit http://localhost:1337/playground in your browser to start playing with your GraphQL API.
Note: Do NOT use --mountPlayground option in production. Parse Dashboard has a built-in GraphQL Playground and it is the recommended option for production apps.
You can also mount the GraphQL API in an Express.js application together with the REST API or solo. You first need to create a new project and install the required dependencies:
Then, create an index.js file with the following content:
And finally start your app:
After starting the app, you can visit http://localhost:1337/playground in your browser to start playing with your GraphQL API.
Note: Do NOT mount the GraphQL Playground in production. Parse Dashboard has a built-in GraphQL Playground and it is the recommended option for production apps.
Run the following:
You should receive the following response:
Since your application does not have any schema yet, you can use the createClass mutation to create your first class. Run the following:
You should receive the following response:
Parse Server learned from the first class that you created and now you have the GameScore class in your schema. You can now start using the automatically generated operations!
Run the following to create your first object:
You should receive a response similar to this:
You can also run a query to this new class:
You should receive a response similar to this:
Parse GraphQL Server allows you to create a custom GraphQL schema with own queries and mutations to be merged with the auto-generated ones. You can resolve these operations using your regular cloud code functions.
To start creating your custom schema, you need to code a schema.graphql file and initialize Parse Server with --graphQLSchema and --cloud options:
Use the code below for your schema.graphql and main.js files. Then restart your Parse Server.
You can now run your custom query using GraphQL Playground:
You should receive the response below:
The Parse GraphQL Guide is a very good source for learning how to use the Parse GraphQL API.
You also have a very powerful tool inside your GraphQL Playground. Please look at the right side of your GraphQL Playground. You will see the DOCS and SCHEMA menus. They are automatically generated by analyzing your application schema. Please refer to them and learn more about everything that you can do with your Parse GraphQL API.
Additionally, the GraphQL Learn Section is a very good source to learn more about the power of the GraphQL language.
Please see the Contributing Guide.
This project exists thanks to all the people who contribute... we'd love to see your face on this list!

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. Become a sponsor!






























Support us with a monthly donation and help us continue our activities. Become a backer!
"
190,"novuhq,novu","The open-source notification infrastructure for products. Add a notification center for your React, Vue and Angular apps üöÄ. 
  
  
    <source media=""(prefers-color-scheme: dark)"" srcset=""https://user-images.githubusercontent.com/2233092/213641039-220ac15f-f367-4d13-9eaf-56e79433b8c1.png"">
    
  </picture>
  


The open-source notification infrastructure for developers


The ultimate service for managing multi-channel notifications with a single API.



    
    <strong>Explore the docs ¬ª</strong>
    

  
    Report Bug
    ¬∑
    Request Feature
    ¬∑
  Join Our Discord
    ¬∑
    Roadmap
    ¬∑
    Twitter
    ¬∑
    Notifications Directory
  


  Available in: Node.js<a/>
  ¬∑ PHP
  ¬∑ Elixir
  ¬∑ Rust
  ¬∑ Go
  

Novu provides a unified API that makes it simple to send notifications through multiple channels, including In-App, Push, Email, SMS, and Chat.
With Novu, you can create custom workflows and define conditions for each channel, ensuring that your notifications are delivered in the most effective way possible.
üåà Single API for all messaging providers (In-App, Email, SMS, Push, Chat)
üíÖ Easily manage notifications over multiple channels
üöÄ Equipped with a CMS for advanced layouts and design management
üõ° Built-in protection for missing variables (Coming Soon)
üì¶ Easy to set up and integrate
üõ° Debug and analyze multi-channel messages in a single dashboard
üì¶ Embeddable notification center with real-time updates
üë®‚Äçüíª Community driven
We are excited to launch the complete Novu API and admin panel. Want to give it a test before the official release? Here is how:
After setting up your account using the cloud or docker version you can trigger the API using the @novu/node package.
Using the Novu API and admin panel, you can easily add a real-time notification center to your web app without building it yourself. You can use our React / Vue / Angular component or an iframe embed.



Read more about how to add a notification center to your app with the Novu API [here](https://docs.novu.co/notification-center/getting-started)


  React Component
  ¬∑ Vue Component
  ¬∑ Angular Component
  



Novu provides a single API to manage providers across multiple channels with a simple-to-use interface.
[ ] SparkPost
[ ] Bandwidth
[ ] RingCentral
[ ] Pushwoosh
[x] Slack
[x] Discord
[x] MS Teams
[x] Mattermost
[ ] MagicBell
[ ] PagerDuty
Before you begin coding and collaborating, please read our Code of Conduct thoroughly to understand the standards (that you are required to adhere to) for community engagement. As part of our open-source community, we hold ourselves and other contributors to a high standard of communication. As a participant and contributor to this project, you are agreeing to abide by our Code of Conduct.
We are more than happy to help you. If you are getting any errors or facing problems while working on this project, join our Discord server and ask for help. We are open to discussing anything related to the project.

Novu is licensed under the MIT License - see the LICENSE file for details.
Thanks a lot for spending your time helping Novu grow. Keep rocking ü•Ç

  
"
191,"jsdom,jsdom","A JavaScript implementation of various web standards, for use with Node.js. 
    
    jsdom


jsdom is a pure-JavaScript implementation of many web standards, notably the WHATWG DOM and HTML Standards, for use with Node.js. In general, the goal of the project is to emulate enough of a subset of a web browser to be useful for testing and scraping real-world web applications.
The latest versions of jsdom require Node.js v14 or newer. (Versions of jsdom below v20 still work with previous Node.js versions, but are unsupported.)
To use jsdom, you will primarily use the JSDOM constructor, which is a named export of the jsdom main module. Pass the constructor a string. You will get back a JSDOM object, which has a number of useful properties, notably window:
(Note that jsdom will parse the HTML you pass it just like a browser does, including implied &lt;html&gt;, &lt;head&gt;, and &lt;body&gt; tags.)
The resulting object is an instance of the JSDOM class, which contains a number of useful properties and methods besides window. In general, it can be used to act on the jsdom from the ""outside,"" doing things that are not possible with the normal DOM APIs. For simple cases, where you don't need any of this functionality, we recommend a coding pattern like
Full documentation on everything you can do with the JSDOM class is below, in the section ""JSDOM Object API"".
The JSDOM constructor accepts a second parameter which can be used to customize your jsdom in the following ways.
url sets the value returned by window.location, document.URL, and document.documentURI, and affects things like resolution of relative URLs within the document and the same-origin restrictions and referrer used while fetching subresources. It defaults to ""about:blank"".
referrer just affects the value read from document.referrer. It defaults to no referrer (which reflects as the empty string).
contentType affects the value read from document.contentType, as well as how the document is parsed: as HTML or as XML. Values that are not a HTML MIME type or an XML MIME type will throw. It defaults to ""text/html"". If a charset parameter is present, it can affect binary data processing.
includeNodeLocations preserves the location info produced by the HTML parser, allowing you to retrieve it with the nodeLocation() method (described below). It also ensures that line numbers reported in exception stack traces for code running inside &lt;script&gt; elements are correct. It defaults to false to give the best performance, and cannot be used with an XML content type since our XML parser does not support location info.
storageQuota is the maximum size in code units for the separate storage areas used by localStorage and sessionStorage. Attempts to store data larger than this limit will cause a DOMException to be thrown. By default, it is set to 5,000,000 code units per origin, as inspired by the HTML specification.
Note that both url and referrer are canonicalized before they're used, so e.g. if you pass in ""https:example.com"", jsdom will interpret that as if you had given ""https://example.com/"". If you pass an unparseable URL, the call will throw. (URLs are parsed and serialized according to the URL Standard.)
jsdom's most powerful ability is that it can execute scripts inside the jsdom. These scripts can modify the content of the page and access all the web platform APIs jsdom implements.
However, this is also highly dangerous when dealing with untrusted content. The jsdom sandbox is not foolproof, and code running inside the DOM's &lt;script&gt;s can, if it tries hard enough, get access to the Node.js environment, and thus to your machine. As such, the ability to execute scripts embedded in the HTML is disabled by default:
To enable executing scripts inside the page, you can use the runScripts: ""dangerously"" option:
Again we emphasize to only use this when feeding jsdom code you know is safe. If you use it on arbitrary user-supplied code, or code from the Internet, you are effectively running untrusted Node.js code, and your machine could be compromised.
If you want to execute external scripts, included via &lt;script src=""""&gt;, you'll also need to ensure that they load them. To do this, add the option resources: ""usable"" as described below. (You'll likely also want to set the url option, for the reasons discussed there.)
Event handler attributes, like &lt;div onclick=""""&gt;, are also governed by this setting; they will not function unless runScripts is set to ""dangerously"". (However, event handler properties, like div.onclick = ..., will function regardless of runScripts.)
If you are simply trying to execute script ""from the outside"", instead of letting &lt;script&gt; elements and event handlers attributes run ""from the inside"", you can use the runScripts: ""outside-only"" option, which enables fresh copies of all the JavaScript spec-provided globals to be installed on window. This includes things like window.Array, window.Promise, etc. It also, notably, includes window.eval, which allows running scripts, but with the jsdom window as the global:
This is turned off by default for performance reasons, but is safe to enable.
(Note that in the default configuration, without setting runScripts, the values of window.Array, window.eval, etc. will be the same as those provided by the outer Node.js environment. That is, window.eval === eval will hold, so window.eval will not run scripts in a useful way.)
We strongly advise against trying to ""execute scripts"" by mashing together the jsdom and Node global environments (e.g. by doing global.window = dom.window), and then executing scripts or test code inside the Node global environment. Instead, you should treat jsdom like you would a browser, and run all scripts and tests that need access to a DOM inside the jsdom environment, using window.eval or runScripts: ""dangerously"". This might require, for example, creating a browserify bundle to execute as a &lt;script&gt; element‚Äîjust like you would in a browser.
Finally, for advanced use cases you can use the dom.getInternalVMContext() method, documented below.
jsdom does not have the capability to render visual content, and will act like a headless browser by default. It provides hints to web pages through APIs such as document.hidden that their content is not visible.
When the pretendToBeVisual option is set to true, jsdom will pretend that it is rendering and displaying content. It does this by:
Changing document.hidden to return false instead of true
Changing document.visibilityState to return ""visible"" instead of ""prerender""
Enabling window.requestAnimationFrame() and window.cancelAnimationFrame() methods, which otherwise do not exist
Note that jsdom still does not do any layout or rendering, so this is really just about pretending to be visual, not about implementing the parts of the platform a real, visual web browser would implement.
By default, jsdom will not load any subresources such as scripts, stylesheets, images, or iframes. If you'd like jsdom to load such resources, you can pass the resources: ""usable"" option, which will load all usable resources. Those are:
Frames and iframes, via &lt;frame&gt; and &lt;iframe&gt;
Stylesheets, via &lt;link rel=""stylesheet""&gt;
Scripts, via &lt;script&gt;, but only if runScripts: ""dangerously"" is also set
Images, via &lt;img&gt;, but only if the canvas npm package is also installed (see ""Canvas Support"" below)
When attempting to load resources, recall that the default value for the url option is ""about:blank"", which means that any resources included via relative URLs will fail to load. (The result of trying to parse the URL /something against the URL about:blank is an error.) So, you'll likely want to set a non-default value for the url option in those cases, or use one of the convenience APIs that do so automatically.
To more fully customize jsdom's resource-loading behavior, you can pass an instance of the ResourceLoader class as the resources option value:
The three options to the ResourceLoader constructor are:
proxy is the address of an HTTP proxy to be used.
strictSSL can be set to false to disable the requirement that SSL certificates be valid.
userAgent affects the User-Agent header sent, and thus the resulting value for navigator.userAgent. It defaults to <code>`Mozilla/5.0 (${process.platform || ""unknown OS""}) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/${jsdomVersion}`</code>.
You can further customize resource fetching by subclassing ResourceLoader and overriding the fetch() method. For example, here is a version that overrides the response provided for a specific URL:
jsdom will call your custom resource loader's fetch() method whenever it encounters a ""usable"" resource, per the above section. The method takes a URL string, as well as a few options which you should pass through unmodified if calling super.fetch(). It must return a promise for a Node.js Buffer object, or return null if the resource is intentionally not to be loaded. In general, most cases will want to delegate to super.fetch(), as shown.
One of the options you will receive in fetch() will be the element (if applicable) that is fetching a resource.
Like web browsers, jsdom has the concept of a ""console"". This records both information directly sent from the page, via scripts executing inside the document, as well as information from the jsdom implementation itself. We call the user-controllable console a ""virtual console"", to distinguish it from the Node.js console API and from the inside-the-page window.console API.
By default, the JSDOM constructor will return an instance with a virtual console that forwards all its output to the Node.js console. To create your own virtual console and pass it to jsdom, you can override this default by doing
Code like this will create a virtual console with no behavior. You can give it behavior by adding event listeners for all the possible console methods:
(Note that it is probably best to set up these event listeners before calling new JSDOM(), since errors or console-invoking script might occur during parsing.)
If you simply want to redirect the virtual console output to another console, like the default Node.js one, you can do
There is also a special event, ""jsdomError"", which will fire with error objects to report errors from jsdom itself. This is similar to how error messages often show up in web browser consoles, even if they are not initiated by console.error. So far, the following errors are output this way:
Errors loading or parsing subresources (scripts, stylesheets, frames, and iframes)
Script execution errors that are not handled by a window onerror event handler that returns true or calls event.preventDefault()
Not-implemented errors resulting from calls to methods, like window.alert, which jsdom does not implement, but installs anyway for web compatibility
If you're using sendTo(c) to send errors to c, by default it will call c.error(errorStack[, errorDetail]) with information from ""jsdomError"" events. If you'd prefer to maintain a strict one-to-one mapping of events to method calls, and perhaps handle ""jsdomError""s yourself, then you can do
Like web browsers, jsdom has the concept of a cookie jar, storing HTTP cookies. Cookies that have a URL on the same domain as the document, and are not marked HTTP-only, are accessible via the document.cookie API. Additionally, all cookies in the cookie jar will impact the fetching of subresources.
By default, the JSDOM constructor will return an instance with an empty cookie jar. To create your own cookie jar and pass it to jsdom, you can override this default by doing
This is mostly useful if you want to share the same cookie jar among multiple jsdoms, or prime the cookie jar with certain values ahead of time.
Cookie jars are provided by the tough-cookie package. The jsdom.CookieJar constructor is a subclass of the tough-cookie cookie jar which by default sets the looseMode: true option, since that matches better how browsers behave. If you want to use tough-cookie's utilities and classes yourself, you can use the jsdom.toughCookie module export to get access to the tough-cookie module instance packaged with jsdom.
jsdom allows you to intervene in the creation of a jsdom very early: after the Window and Document objects are created, but before any HTML is parsed to populate the document with nodes:
This is especially useful if you are wanting to modify the environment in some way, for example adding shims for web platform APIs jsdom does not support.
Once you have constructed a JSDOM object, it will have the following useful capabilities:
The property window retrieves the Window object that was created for you.
The properties virtualConsole and cookieJar reflect the options you pass in, or the defaults created for you if nothing was passed in for those options.
The serialize() method will return the HTML serialization of the document, including the doctype:
The nodeLocation() method will find where a DOM node is within the source document, returning the parse5 location info for the node:
Note that this feature only works if you have set the includeNodeLocations option; node locations are off by default for performance reasons.
The built-in vm module of Node.js is what underpins jsdom's script-running magic. Some advanced use cases, like pre-compiling a script and then running it multiple times, benefit from using the vm module directly with a jsdom-created Window.
To get access to the contextified global object, suitable for use with the vm APIs, you can use the getInternalVMContext() method:
This is somewhat-advanced functionality, and we advise sticking to normal DOM APIs (such as window.eval() or document.createElement(""script"")) unless you have very specific needs.
Note that this method will throw an exception if the JSDOM instance was created without runScripts set, or if you are using jsdom in a web browser.
The top property on window is marked [Unforgeable] in the spec, meaning it is a non-configurable own property and thus cannot be overridden or shadowed by normal code running inside the jsdom, even using Object.defineProperty.
Similarly, at present jsdom does not handle navigation (such as setting window.location.href = ""https://example.com/""); doing so will cause the virtual console to emit a ""jsdomError"" explaining that this feature is not implemented, and nothing will change: there will be no new Window or Document object, and the existing window's location object will still have all the same property values.
However, if you're acting from outside the window, e.g. in some test framework that creates jsdoms, you can override one or both of these using the special reconfigure() method:
Note that changing the jsdom's URL will impact all APIs that return the current document URL, such as window.location, document.URL, and document.documentURI, as well as the resolution of relative URLs within the document, and the same-origin checks and referrer used while fetching subresources. It will not, however, perform navigation to the contents of that URL; the contents of the DOM will remain unchanged, and no new instances of Window, Document, etc. will be created.
In addition to the JSDOM constructor itself, jsdom provides a promise-returning factory method for constructing a jsdom from a URL:
The returned promise will fulfill with a JSDOM instance if the URL is valid and the request is successful. Any redirects will be followed to their ultimate destination.
The options provided to fromURL() are similar to those provided to the JSDOM constructor, with the following additional restrictions and consequences:
The url and contentType options cannot be provided.
The referrer option is used as the HTTP Referer request header of the initial request.
The resources option also affects the initial request; this is useful if you want to, for example, configure a proxy (see above).
The resulting jsdom's URL, content type, and referrer are determined from the response.
Any cookies set via HTTP Set-Cookie response headers are stored in the jsdom's cookie jar. Similarly, any cookies already in a supplied cookie jar are sent as HTTP Cookie request headers.
Similar to fromURL(), jsdom also provides a fromFile() factory method for constructing a jsdom from a filename:
The returned promise will fulfill with a JSDOM instance if the given file can be opened. As usual in Node.js APIs, the filename is given relative to the current working directory.
The options provided to fromFile() are similar to those provided to the JSDOM constructor, with the following additional defaults:
The url option will default to a file URL corresponding to the given filename, instead of to ""about:blank"".
The contentType option will default to ""application/xhtml+xml"" if the given filename ends in .xht, .xhtml, or .xml; otherwise it will continue to default to ""text/html"".
For the very simplest of cases, you might not need a whole JSDOM instance with all its associated power. You might not even need a Window or Document! Instead, you just need to parse some HTML, and get a DOM object you can manipulate. For that, we have fragment(), which creates a DocumentFragment from a given string:
Here frag is a DocumentFragment instance, whose contents are created by parsing the provided string. The parsing is done using a &lt;template&gt; element, so you can include any element there (including ones with weird parsing rules like &lt;td&gt;). It's also important to note that the resulting DocumentFragment will not have an associated browsing context: that is, elements' ownerDocument will have a null defaultView property, resources will not load, etc.
All invocations of the fragment() factory result in DocumentFragments that share the same template owner Document. This allows many calls to fragment() with no extra overhead. But it also means that calls to fragment() cannot be customized with any options.
Note that serialization is not as easy with DocumentFragments as it is with full JSDOM objects. If you need to serialize your DOM, you should probably use the JSDOM constructor more directly. But for the special case of a fragment containing a single element, it's pretty easy to do through normal means:
jsdom includes support for using the canvas package to extend any &lt;canvas&gt; elements with the canvas API. To make this work, you need to include canvas as a dependency in your project, as a peer of jsdom. If jsdom can find the canvas package, it will use it, but if it's not present, then &lt;canvas&gt; elements will behave like &lt;div&gt;s. Since jsdom v13, version 2.x of canvas is required; version 1.x is no longer supported.
In addition to supplying a string, the JSDOM constructor can also be supplied binary data, in the form of a Node.js Buffer or a standard JavaScript binary data type like ArrayBuffer, Uint8Array, DataView, etc. When this is done, jsdom will sniff the encoding from the supplied bytes, scanning for &lt;meta charset&gt; tags just like a browser does.
If the supplied contentType option contains a charset parameter, that encoding will override the sniffed encoding‚Äîunless a UTF-8 or UTF-16 BOM is present, in which case those take precedence. (Again, this is just like a browser.)
This encoding sniffing also applies to JSDOM.fromFile() and JSDOM.fromURL(). In the latter case, any Content-Type headers sent with the response will take priority, in the same fashion as the constructor's contentType option.
Note that in many cases supplying bytes in this fashion can be better than supplying a string. For example, if you attempt to use Node.js's buffer.toString(""utf-8"") API, Node.js will not strip any leading BOMs. If you then give this string to jsdom, it will interpret it verbatim, leaving the BOM intact. But jsdom's binary data decoding code will strip leading BOMs, just like a browser; in such cases, supplying buffer directly will give the desired result.
Timers in the jsdom (set by window.setTimeout() or window.setInterval()) will, by definition, execute code in the future in the context of the window. Since there is no way to execute code in the future without keeping the process alive, outstanding jsdom timers will keep your Node.js process alive. Similarly, since there is no way to execute code in the context of an object without keeping that object alive, outstanding jsdom timers will prevent garbage collection of the window on which they are scheduled.
If you want to be sure to shut down a jsdom window, use window.close(), which will terminate all running timers (and also remove any event listeners on the window and document).
jsdom has some support for being run inside a web browser, using browserify. That is, inside a web browser, you can use a browserified jsdom to create an entirely self-contained set of plain JavaScript objects which look and act much like the browser's existing DOM objects, while being entirely independent of them. ""Virtual DOM"", indeed!
jsdom's primary target is still Node.js, and so we use language features that are only present in recent Node.js versions. Thus, older browsers will likely not work. (Even transpilation will not help: we use Proxys extensively throughout the jsdom codebase.)
Notably, jsdom works well inside a web worker. The original contributor, @lawnsea, who made this possible, has published a paper about his project which uses this capability.
Not everything works perfectly when running jsdom inside a web browser. Sometimes that is because of fundamental limitations (such as not having filesystem access), but sometimes it is simply because we haven't spent enough time making the appropriate small tweaks. Bug reports are certainly welcome.
In Node.js you can debug programs using Chrome DevTools. See the official documentation for how to get started.
By default jsdom elements are formatted as plain old JS objects in the console. To make it easier to debug, you can use jsdom-devtools-formatter, which lets you inspect them like real DOM elements.
People often have trouble with asynchronous script loading when using jsdom. Many pages load scripts asynchronously, but there is no way to tell when they're done doing so, and thus when it's a good time to run your code and inspect the resulting DOM structure. This is a fundamental limitation; we cannot predict what scripts on the web page will do, and so cannot tell you when they are done loading more scripts.
This can be worked around in a few ways. The best way, if you control the page in question, is to use whatever mechanisms are given by the script loader to detect when loading is done. For example, if you're using a module loader like RequireJS, the code could look like:
If you do not control the page, you could try workarounds such as polling for the presence of a specific element.
For more details, see the discussion in #640, especially @matthewkastor's insightful comment.
Although we enjoy adding new features to jsdom and keeping it up to date with the latest web specs, it has many missing APIs. Please feel free to file an issue for anything missing, but we're a small and busy team, so a pull request might work even better.
Some features of jsdom are provided by our dependencies. Notable documentation in that regard includes the list of supported CSS selectors for our CSS selector engine, nwsapi.
Beyond just features that we haven't gotten to yet, there are two major features that are currently outside the scope of jsdom. These are:
Navigation: the ability to change the global object, and all other objects, when clicking a link or assigning location.href or similar.
Layout: the ability to calculate where elements will be visually laid out as a result of CSS, which impacts methods like getBoundingClientRects() or properties like offsetTop.
Currently jsdom has dummy behaviors for some aspects of these features, such as sending a ""not implemented"" ""jsdomError"" to the virtual console for navigation, or returning zeros for many layout-related properties. Often you can work around these limitations in your code, e.g. by creating new JSDOM instances for each page you ""navigate"" to during a crawl, or using Object.defineProperty() to change what various layout-related getters and methods return.
Note that other tools in the same space, such as PhantomJS, do support these features. On the wiki, we have a more complete writeup about jsdom vs. PhantomJS.
jsdom is a community-driven project maintained by a team of volunteers. You could support jsdom by:
Getting professional support for jsdom as part of a Tidelift subscription. Tidelift helps making open source sustainable for us while giving teams assurances for maintenance, licensing, and security.
Contributing directly to the project.
If you need help with jsdom, please feel free to use any of the following venues:
The mailing list (best for ""how do I"" questions)
The issue tracker (best for bug reports)
The Matrix room: #jsdom:matrix.org"
192,"ToolJet,ToolJet","Extensible low-code framework for building business applications. Connect to databases, cloud storages, GraphQL, API endpoints, Airtable, etc and build apps using drag and drop application builder. Built using JavaScript/TypeScript. üöÄ. ToolJet is an open-source low-code framework to build and deploy internal tools quickly with minimal engineering effort. ToolJet's drag and drop frontend builder allows you to build complicated responsive frontends within minutes. You can also connect to your data sources, such as databases ( PostgreSQL, MongoDB, Elasticsearch & more), API endpoints (ToolJet supports importing OpenAPI spec & OAuth2 authorization), SaaS tools (Stripe, Slack, Google Sheets, Airtable, Notion & more) and object storage services ( S3, GCS, Minio, etc ) to fetch and write data.











    




  <kbd>
    

  </kbd>



  <kbd>

  </kbd>



  <kbd>

  </kbd>



  <kbd>

  </kbd>


Visual app builder: 40+ built-in responsive widgets such as Tables, Charts, Lists, Forms, Progressbars, and more.
ToolJet Database: In-built no-code database.
Multi-Page: Build an application with as many pages as you want.
Multiplayer editing: multiple users can use the app builder at the same time.
40+ data sources: connect to external databases, cloud storages and APIs.
Desktop & mobile: layout widths can be customised to support different screens.
Self-host: (supports Docker, Kubernetes, Heroku, AWS EC2, Google Cloud Run, and more).
Collaborate: add comments anywhere on the canvas and tag your team members.
Extend with plugins: use our commandline tool to easily bootstrap new connectors.
Version control: every application have different versions with proper release cycle.
Run JS & Python code: ability custom JavaScript & Python snippets
Granular access control on group-level and app-level.
Low-code: write JS code almost anywhere in the builder. For example, the color property of text can be set to status === 'success' ? 'green' : 'red'
No-code query editors: for all supported data sources.
Join and transform data: transform query results using just JavaScript/Python code.
Secure: All the credentials are securely encrypted using aes-256-gcm.
Doesn't store data: ToolJet acts only as a proxy and doesn't store any data.
SSO: Supports multiple SSO providers
<hr>

The easiest way to get started with ToolJet is by creating a ToolJet Cloud account. ToolJet Cloud offers a hosted solution of ToolJet. If you want to self-host ToolJet, kindly proceed to deployment documentation.
You can deploy ToolJet on Heroku for free using the one-click-deployment button only until 28th November 2022.

  
  


Want to give ToolJet a quick spin on your local machine? You can run the following command from your terminal to have ToolJet up and running right away.
GitHub contributor leaderboard using ToolJet
Cryptocurrency dashboard using ToolJet
WhatsApp CRM using ToolJet
AWS S3 file explorer
Documentation is available at https://docs.tooljet.com.
Getting Started
Datasource Reference
You can use ToolJet cloud for a fully managed solution. If you want to self-host ToolJet, we have guides on deploying ToolJet on Kubernetes, AWS EC2, Docker, Heroku and more.
For general help using ToolJet, please refer to the official documentation. For additional help, you can use one of these channels to ask a question:
Slack - Discussions with the community and the team.
GitHub - For bug reports and feature requests.
Twitter - Get the product updates easily.
Check out our roadmap to get informed of the latest features released and the upcoming ones.
We use the git-flow branching model. The base branch is develop. If you are looking for a stable version, please use the main branch or tags labeled as v1.x.x.
Kindly read our Contributing Guide to learn and understand about our development process, how to propose bug fixes and improvements, and how to build and test your changes to ToolJet. 

  
  

ToolJet ¬© 2022, ToolJet Solutions Inc - Released under the GNU Affero General Public License v3.0."
193,"medusajs,medusa","The open-source Shopify alternative ‚ö°Ô∏è. 
  
    
  


  Medusa


<h4 align=""center"">
  Documentation |
  Medusa Admin Demo |
  Website
</h4>


An open source composable commerce engine built for developers.


  
    
  
  
    
  
  
    
  
    
  
    
  
  
    
  


Follow our quickstart guide to learn how to set up a Medusa server.
You can check out this documentation for details about setting up your environment.
Medusa is an open source composable commerce engine built with Node.js. Medusa enables developers to build scalable and sophisticated commerce setups with low effort and great developer experience.
You can learn more about Medusa‚Äôs architecture in our documentation.
You can learn about all of the ecommerce features that Medusa provides in our documentation.
You can view our roadmap with features that are planned, started, and completed on the Roadmap discussion category.
Check out our available plugins that you can install and use instantly on your Medusa server.
Please check¬†our contribution guide¬†for details about how to contribute to both our codebase and our documentation.
Follow our¬†upgrade guides on the documentation to keep your Medusa project up-to-date.
Use these channels to be part of the community, ask for help while using Medusa, or just learn more about Medusa:
Discord: This is the main channel to join the community. You can ask for help, showcase your work with Medusa, and stay up to date with everything Medusa.
GitHub Issues: for sending in any issues you face or bugs you find while using Medusa.
GitHub Discussions: for joining discussions and submitting your ideas.
Medusa Blog: find diverse tutorials and company news.
Licensed under the¬†MIT License"
194,"nrwl,nx","Smart, Fast and Extensible Build System. 
  
    <source media=""(prefers-color-scheme: dark)"" srcset=""https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg"">
    
  </picture>




[![CircleCI](https://circleci.com/gh/nrwl/nx.svg?style=svg)](https://circleci.com/gh/nrwl/nx)
[![License](https://img.shields.io/npm/l/@nrwl/workspace.svg?style=flat-square)]()
[![NPM Version](https://badge.fury.io/js/%40nrwl%2Fworkspace.svg)](https://www.npmjs.com/@nrwl/workspace)
[![Semantic Release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=flat-square)]()
[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)
[![Join the chat at https://gitter.im/nrwl-nx/community](https://badges.gitter.im/nrwl-nx/community.svg)](https://gitter.im/nrwl-nx/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
[![Join us @nrwl/community on slack](https://img.shields.io/badge/slack-%40nrwl%2Fcommunity-brightgreen)](https://go.nrwl.io/join-slack)



<hr>

Nx is a next generation build system with first class monorepo support and powerful integrations.
A few links to help you get started:


The Nx Show Playlist on YouTube. It's a
regular YouTube stream where we talk all things Nx. Join the stream, ask questions, etc.
If you want to file a bug or submit a PR, read up on
our guidelines for contributing and watch this video that will
help you get started.


"
195,"redis,node-redis","A high-performance Node.js Redis client.. node-redis is a modern, high performance Redis client for Node.js.
:warning: In version 4.1.0 we moved our subpackages from @node-redis to @redis. If you're just using npm install redis, you don't need to do anything‚Äîit'll upgrade automatically. If you're using the subpackages directly, you'll need to point to the new scope (e.g. @redis/client instead of @node-redis/client).
Start a redis via docker:
To install node-redis, simply:
:warning: The new interface is clean and cool, but if you have an existing codebase, you'll want to read the migration guide.
Looking for a high-level library to handle object mapping? See redis-om-node!
The above code connects to localhost on port 6379. To connect to a different host or port, use a connection string in the format redis[s]://[[username][:password]@][host][:port][/db-number]:
You can also use discrete parameters, UNIX sockets, and even TLS to connect. Details can be found in the client configuration guide.
To check if the the client is connected and ready to send commands, use client.isReady which returns a boolean. client.isOpen is also available.  This returns true when the client's underlying socket is open, and false when it isn't (for example when the client is still connecting or reconnecting after a network error).
There is built-in support for all of the out-of-the-box Redis commands. They are exposed using the raw Redis command names (HSET, HGETALL, etc.) and a friendlier camel-cased version (hSet, hGetAll, etc.):
Modifiers to commands are specified using a JavaScript object:
Replies will be transformed into useful data structures:
Buffers are supported as well:
If you want to run commands and/or use arguments that Node Redis doesn't know about (yet!) use .sendCommand():
Start a transaction by calling .multi(), then chaining your commands. When you're done, call .exec() and you'll get an array back with your results:
You can also watch keys by calling .watch(). Your transaction will abort if any of the watched keys change.
To dig deeper into transactions, check out the Isolated Execution Guide.
Any command can be run on a new connection by specifying the isolated option. The newly created connection is closed when the command's Promise is fulfilled.
This pattern works especially well for blocking commands‚Äîsuch as BLPOP and BLMOVE:
To learn more about isolated execution, check out the guide.
See the Pub/Sub overview.
SCAN results can be looped over using async iterators:
This works with HSCAN, SSCAN, and ZSCAN too:
You can override the default options by providing a configuration object:
Redis provides a programming interface allowing code execution on the redis server.
The following example retrieves a key in redis, returning the value of the key, incremented by an integer. For example, if your key foo has the value 17 and we run add('foo', 25), it returns the answer to Life, the Universe and Everything.
Here is the same example, but in a format that can be pasted into the redis-cli.
Load the prior redis function on the redis server before running the example below.
The following is an end-to-end example of the prior concept.
There are two functions that disconnect a client from the Redis server. In most scenarios you should use .quit() to ensure that pending commands are sent to Redis before closing a connection.
Gracefully close a client's connection to Redis, by sending the QUIT command to the server. Before quitting, the client executes any remaining commands in its queue, and will receive replies from Redis for each of them.
Forcibly close a client's connection to Redis immediately. Calling disconnect will not send further pending commands to the Redis server, or wait for or parse outstanding responses.
Node Redis will automatically pipeline requests that are made during the same ""tick"".
Of course, if you don't do something with your Promises you're certain to get unhandled Promise exceptions. To take advantage of auto-pipelining and handle your Promises, use Promise.all().
Check out the Clustering Guide when using Node Redis to connect to a Redis Cluster.
The Node Redis client class is an Nodejs EventEmitter and it emits an event each time the network status changes:
:warning: You MUST listen to error events. If a client doesn't have at least one error listener registered and an error occurs, that error will be thrown and the Node.js process will exit. See the EventEmitter docs for more details.
The client will not emit any other events beyond those listed above.
Node Redis is supported with the following versions of Redis:
Node Redis should work with older versions of Redis, but it is not fully tested and we cannot offer support.
If you'd like to contribute, check out the contributing guide.
Thank you to all the people who already contributed to Node Redis!

This repository is licensed under the ""MIT"" license. See LICENSE."
196,"nextauthjs,next-auth",Authentication for the Web.. packages/next-auth/README.md
283,"workshopper,how-to-npm","A module to teach you how to module.. A module to teach you how to module.
To use this project, you'll need NodeJS. Visit http://www.nodejs.org to
download and learn more!

This will walk you through the basics of setting up a working
environment, installing dependencies, logging into npm, publishing a
module, and so on, all from the safety of your own laptop.
This is an open open source project. Individuals making significant
and valuable contributions are given commit-access to the project to
contribute as they see fit."
284,"xxczaki,oji","(‚óï‚Äø‚óï) Text Emoticons Maker. 
  
  OJI
  (‚óï‚Äø‚óï) Text Emoticons Maker






  


<h5 align=""center"">Discuss it on Product Hunt! :rocket:</h5>


    


Just type `oji` to start interactive emoticon creator! Works on every platform :unicorn:

You can add custom characters for each part by creating an optional `~/.oji` directory in your root path. Add new characters to each section by creating a `~/.oji/{file}.txt` with any of the corresponding filenames:

`'arms_symmetric'`

`'arms_left'` 

`'bodies_symmetric'`

`'bodies_left'`

`'cheeks'`

`'eyes'`

`'mouths_noses'`

`'bodies_right'`

`'arms_right'`

MIT

[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fxxczaki%2Foji.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fxxczaki%2Foji?ref=badge_large)"
285,"yarnpkg,website","Yarn package manager website. This repo contains the source code for the Yarn website.
In order to get started:
You should ensure you have Yarn and Bundler installed:
And then:
Or:
On Windows, make is not available, so you need to execute bundle and jekyll directly:
Special thanks to Netlify for powering the website."
286,"yarnpkg,yarn","The 1.x line is frozen - features and bugfixes now happen on https://github.com/yarnpkg/berry. 
  
    
  



  Fast, reliable, and secure dependency management.



  
  
  
  
  


Fast: Yarn caches every package it has downloaded, so it never needs to download the same package again. It also does almost everything concurrently to maximize resource utilization. This means even faster installs.
Reliable: Using a detailed but concise lockfile format and a deterministic algorithm for install operations, Yarn is able to guarantee that any installation that works on one system will work exactly the same on another system.
Secure: Yarn uses checksums to verify the integrity of every installed package before its code is executed.
Offline Mode. If you've installed a package before,¬†then¬†you can install it again without¬†an¬†internet connection.
Deterministic. The same dependencies will be installed in the same exact way on any machine, regardless of¬†installation¬†order.
Network Performance. Yarn efficiently queues¬†requests and¬†avoids request waterfalls in order to maximize network utilization.
Network Resilience. A single request that fails will not cause the entire installation to fail. Requests are automatically retried upon failure.
Flat Mode. Yarn resolves mismatched versions of dependencies to a single version to avoid creating duplicates.
More emojis. üêà
Read the Installation Guide on our website for detailed instructions on how to install Yarn.
Read the Usage Guide on our website for detailed instructions on how to use Yarn.
Contributions are always welcome, no matter how large or small. Substantial feature requests should be proposed as an RFC. Before contributing, please read the code of conduct.
See Contributing.
Yarn wouldn't exist if it wasn't for excellent prior art. Yarn has been inspired by the following projects:
Thanks to Sam Holmes for donating the npm package name!"
287,"zeit,release","Generate changelogs with a single command. When run, this command line interface automatically generates a new GitHub Release and populates it with the changes (commits) made since the last release.
Firstly, install the package from npm (you'll need at least Node.js 7.6.0):
Alternatively, you can use Yarn to install it:
Once that's done, you can run this command inside your project's directory:
As you can see, a &lt;type&gt; argument can be passed. If you leave it out, a GitHub Release will be created from the most recent commit and tag.
According to the SemVer spec, the argument can have one of these values:
major: Incompatible API changes were introduced
minor: Functionality was added in a backwards-compatible manner
patch: Backwards-compatible bug fixes were applied
In addition to those values, we also support creating pre-releases like 3.0.0-canary.1:
You can also apply a custom suffix in place of ""canary"" like this:
Assuming that you provide ""beta"" as the &lt;suffix&gt; your release will then be 3.0.0-beta.1 ‚Äì and so on...
The following command will show you a list of all available options:
If you want to automate release even further, specify the change type of your commits by adding it to the title or description within parenthesis:
Error logging works now (patch)
Assuming that you've defined it for a certain commit, release won't ask you to set a type for it manually. This will make the process of creating a release even faster.
To pre-define that a commit should be excluded from the list, you can use this keyword:
This is a commit message (ignore)
Sometimes you might want to filter the information that gets inserted into new releases by adding an intro text, replacing certain data or just changing the order of the changes.
With a custom hook, the examples above (and many more) are very easy to accomplish:
By default, release will look for a file named release.js in the root directory of your project. This file should export a function with two parameters and always return a String (the final release):
In the example above, markdown contains the release as a String (if you just want to replace something). In addition, metaData contains these properties:
Hint: You can specify a custom location for the hook file using the --hook or -H flag, which takes in a path relative to the current working directory.
As we at ZEIT moved all of our GitHub repositories from keeping a HISTORY.md file to using GitHub Releases, we needed a way to automatically generate these releases from our own devices, rather than always having to open a page in the browser and manually add the notes for each change.
You can find the authentication flow here.
Fork this repository to your own GitHub account and then clone it to your local device
Uninstall the package if it's already installed: npm uninstall -g release
Link the package to the global module directory: npm link
You can now use release on the command line!
As always, you can use npm test to run the tests and see if your changes have broken anything.
Thanks a lot to Daniel Chatfield for donating the ""release"" name on npm and my lovely team for telling me about their needs and how I can make this package as efficient as possible.
Leo Lamprecht (@notquiteleo) - ‚ñ≤ZEIT"
288,"zkat,npx","execute npm package binaries (moved). npx [options] &lt;command&gt;[@version] [command-arg]...
npx [options] [-p|--package &lt;pkg&gt;]... &lt;command&gt; [command-arg]...
npx [options] -c '&lt;command-string&gt;'
npx --shell-auto-fallback [shell]
npm install -g npx
Executes &lt;command&gt; either from a local node_modules/.bin, or from a central cache, installing any packages needed in order for &lt;command&gt; to run.
By default, npx will check whether &lt;command&gt; exists in $PATH, or in the local project binaries, and execute that. If &lt;command&gt; is not found, it will be installed prior to execution.
Unless a --package option is specified, npx will try to guess the name of the binary to invoke depending on the specifier provided. All package specifiers understood by npm may be used with npx, including git specifiers, remote tarballs, local directories, or scoped packages.
If a full specifier is included, or if --package is used, npx will always use a freshly-installed, temporary version of the package. This can also be forced with the --ignore-existing flag.
-p, --package &lt;package&gt; - define the package to be installed. This defaults to the value of &lt;command&gt;. This is only needed for packages with multiple binaries if you want to call one of the other executables, or where the binary name does not match the package name. If this option is provided &lt;command&gt; will be executed as-is, without interpreting @version if it's there. Multiple --package options may be provided, and all the packages specified will be installed.
--no-install - If passed to npx, it will only try to run &lt;command&gt; if it already exists in the current path or in $prefix/node_modules/.bin. It won't try to install missing commands.
--cache &lt;path&gt; - set the location of the npm cache. Defaults to npm's own cache settings.
--userconfig &lt;path&gt; - path to the user configuration file to pass to npm. Defaults to whatever npm's current default is.
-c &lt;string&gt; - Execute &lt;string&gt; inside an npm run-script-like shell environment, with all the usual environment variables available. Only the first item in &lt;string&gt; will be automatically used as &lt;command&gt;. Any others must use -p.
--shell &lt;string&gt; - The shell to invoke the command with, if any.
--shell-auto-fallback [&lt;shell&gt;] - Generates shell code to override your shell's ""command not found"" handler with one that calls npx. Tries to figure out your shell, or you can pass its name (either bash, fish, or zsh) as an option. See below for how to install.
--ignore-existing - If this flag is set, npx will not look in $PATH, or in the current package's node_modules/.bin for an existing version before deciding whether to install. Binaries in those paths will still be available for execution, but will be shadowed by any packages requested by this install.
-q, --quiet - Suppressed any output from npx itself (progress bars, error messages, install reports). Subcommand output itself will not be silenced.
-n, --node-arg - Extra node argument to supply to node when binary is a node script. You can supply this option multiple times to add more arguments.
-v, --version - Show the current npx version.
You can configure npx to run as your default fallback command when you type something in the command line with an @ but the command is not found. This includes installing packages that were not found in the local prefix either.
For example:
Currently, zsh, bash (>= 4), and fish are supported. You can access these completion scripts using npx --shell-auto-fallback &lt;shell&gt;.
To install permanently, add the relevant line below to your ~/.bashrc, ~/.zshrc, ~/.config/fish/config.fish, or as needed. To install just for the shell session, simply run the line.
You can optionally pass through --no-install when generating the fallback to prevent it from installing packages if the command is missing.
Huge thanks to Kwyn Meagher for generously donating the package name in the main npm registry. Previously npx was used for a Tessel board Neopixels library, which can now be found under npx-tessel.
Written by Kat Marchan.
Please file any relevant issues on Github.
This work is released by its authors into the public domain under CC0-1.0. See LICENSE.md for details.
npm(1)
npm-run-script(1)
npm-config(7)"
289,"astrit,css.gg","700+ Pure CSS, SVG & Figma UI Icons Available in SVG Sprite, styled-components, NPM & API. Open-source CSS, SVG and Figma UI Icons \
Available in SVG Sprite, styled-components, NPM & API
      


Install the latest version via npm or yarn
Using Package Manager \
This package contains the following directories and files:
To resize an icon you just need to change the value of a css variable ""--ggs"" to any value you like if not specified it falls back to 1 or the actual size.
The variable can be added to the parent, custom class,body or root level if you want all icons same size.
By default all the CSS, SCSS icons inherit the color from the parent by using currentColor attribute how ever you can apply any color you like.
You can't use these paths, you must download since SVG doesn't allow external sources.
You can add as symbol each or copy the entire file contents at one of the CDN alternatives as mentioned at 2.1
You can go to https://css.gg/{ICONNAME} and copy the SVG icon directy and paste it on your project. \
You can also download a single icon by just visiting https://css.gg/{ICONNAME}.svg
You need to define width and height in order for this to work.
Afterwards you can just create a div
To encode use this tool \
https://yoksel.github.io/url-encoder/
By default all colors use currentColor as value in order to inherit the color from the parent. \
If you wish to change that color you can do the following.
On a React project you can include a single icon as CSS, Styled Component, SCSS, SVG or call the contents using .json or .xml files.
\
Note that only styled-components icons can be called directly such as:
After you install the package by using npm i css.gg or yarn add css.gg you can add a single icon like this:
If you need to download a single typescript or styled-componment format icon without downloading the entire package just visit the link like this:
If you don't want to download at all but just copy paste visit the icon page and you have a special tab for it.
SCSS format to work you need to have node-sass installed npm i node-sass
SCSS format to work you need to have node-sass installed npm i node-sass
All icons are available as components on assets from where you can search for a sigle icon or browse categories.

All icons are available as components \

Astrit - Author
JiangWeixian - Styled Components
Lona - Figma/SVG Design
To become a contributor do a new pull request.
Discord - https://discord.gg/e7NDKFM
In order to access older versions you can use one of the provided CDN Alternatives
CSS Modules
Angluar
Vue.js
If you would like to contribute feel free to do a new pull request."
290,"raineorshine,npm-check-updates","Find newer versions of package dependencies than what your package.json allows. npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.
maintains existing semantic versioning policies, i.e. ""react"": ""^16.0.4"" to ""react"": ""^18.2.0"".
only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
clean output
sensible defaults
lots of options for custom behavior
CLI and module usage
compatible with npm, yarn, and pnpm

Red = major upgrade (and all major version zero)
Cyan = minor upgrade
Green = patch upgrade
Install globally:
Or run with npx:
Show all new dependencies (excluding peerDependencies) for the project in the current directory:
Upgrade a project's package file:
Make sure your package file is in version control and all changes have been committed. This will overwrite your package file.
Check global packages:
Filter packages using the --filter option or adding additional cli arguments. You can exclude specific packages with the --reject option or prefixing a filter with !. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regular expressions:
Direct dependencies are updated to the latest stable version:
2.0.1 ‚Üí 2.2.0
1.2 ‚Üí 1.3
0.1.0 ‚Üí 1.0.1
Range operators are preserved and the version is updated:
^1.2.0 ‚Üí ^2.0.0
1.x ‚Üí 2.x
&gt;0.2.0 ‚Üí &gt;0.3.0
""Less than"" is replaced with a wildcard:
&lt;2.0.0 ‚Üí ^3.0.0
1.0.0 &lt; 2.0.0 ‚Üí ^3.0.0
""Any version"" is preserved:
* ‚Üí *
Prerelease and deprecated versions are ignored by default.
Use --pre to include prerelease versions (e.g. alpha, beta, build1235)
Use --deprecated to include deprecated versions
With --target minor, only update patch and minor:
0.1.0 ‚Üí 0.2.1
With --target patch, only update patch:
0.1.0 ‚Üí 0.1.2
With --target @next, update to the version published on the next tag:
0.1.0 -> 0.1.1-next.1
<!-- BEGIN Options -->
<!-- Do not edit this section by hand. It is auto-generated in build-options.ts. Run ""npm run build"" or ""npm run build:options"" to build. -->

<!-- END Options -->

Some options have advanced usage, or allow per-package values by specifying a function in your ncurc.js file.
Run ncu --help [OPTION] to view advanced help for a specific option, or see below:
<!-- BEGIN Advanced Options -->
<!-- Do not edit this section by hand. It is auto-generated in build-options.ts. Run ""npm run build"" or ""npm run build:options"" to build. -->

Usage:
Iteratively installs upgrades and runs tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.
Add ""-u"" to execute (modifies your package file, lock file, and node_modules)
To be more precise:
Runs ""npm install"" and ""npm test"" to ensure tests are currently passing.
Runs ""ncu -u"" to optimistically upgrade all dependencies.
If tests pass, hurray!
If tests fail, restores package file and lock file.
For each dependency, install upgrade and run tests.
Prints broken upgrades with test error.
Saves working upgrades to package.json.
Additional options:
Example:
Usage:
Modify the output formatting or show additional information. Specify one or more comma-delimited values.
Usage:
Customize how packages are divided into groups when using '--format group'. Only available in .ncurc.js or when importing npm-check-updates as a module:
Usage:
Specifies the package manager to use when looking up version numbers.
Usage:
Check peer dependencies of installed packages and filter updates to compatible versions.
Example:
The following example demonstrates how --peer works, and how it uses peer dependencies from upgraded modules.
The package ncu-test-peer-update has two versions published:
1.0.0 has peer dependency ""ncu-test-return-version"": ""1.0.x""
1.1.0 has peer dependency ""ncu-test-return-version"": ""1.1.x""
Our test app has the following dependencies:
The latest versions of these packages are:
With --peer:
ncu upgrades packages to the highest version that still adheres to the peer dependency constraints:
Without --peer:
As a comparison: without using the --peer option, ncu will suggest the latest versions, ignoring peer dependencies:
Usage:
Specify the registry to use when looking up package version numbers.
When --packageManager staticRegistry is set, --registry must specify a path to a JSON
registry file.
Usage:
Determines the version to upgrade to. (default: ""latest"")
You can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module:
<!-- END Advanced Options -->

Choose which packages to update in interactive mode:

Combine with --format group for a truly luxe experience:

Use a .ncurc.{json,yml,js} file to specify configuration information.
You can specify file name and path using --configFileName and --configFilePath
command line options.
For example, .ncurc.json:
npm-check-updates can be imported as a module:
Contributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see CONTRIBUTING.md.
If ncu prints output that does not seem related to this package, it may be conflicting with another executable such as ncu-weather-cli or Nvidia CUDA. Try using the long name instead: npm-check-updates.
Windows: If npm-check-updates hangs, try setting the package file explicitly: ncu --packageFile package.json. You can run ncu --loglevel verbose to confirm that it was incorrectly waiting for stdin. See #136.
File an issue. Please search existing issues first."
291,"apify,crawlee","Crawlee‚ÄîA web scraping and browser automation library for Node.js that helps you build reliable crawlers. Fast.. 
    
        
          <source media=""(prefers-color-scheme: dark)"" srcset=""https://raw.githubusercontent.com/apify/crawlee/master/website/static/img/crawlee-dark.svg?sanitize=true"">
          
        </picture>
    
    
    <small>A web scraping and browser automation library</small>



    
    
    
    


‚ÑπÔ∏è Crawlee is the successor to Apify SDK. üéâ Fully rewritten in TypeScript for a better developer experience, and with even more powerful anti-blocking features. The interface is almost the same as Apify SDK so upgrading is a breeze. Read the upgrading guide to learn about the changes. ‚ÑπÔ∏è
Crawlee covers your crawling and scraping end-to-end and helps you build reliable scrapers. Fast.
Your crawlers will appear human-like and fly under the radar of modern bot protections even with the default configuration. Crawlee gives you the tools to crawl the web for links, scrape data, and store it to disk or cloud while staying configurable to suit your project's needs.
Crawlee is available as the crawlee NPM package.
üëâ View full documentation, guides and examples on the Crawlee project website üëà
We recommend visiting the Introduction tutorial in Crawlee documentation for more information.
Crawlee requires Node.js 16 or higher.
The fastest way to try Crawlee out is to use the Crawlee CLI and choose the Getting started example. The CLI will install all the necessary dependencies and add boilerplate code for you to play with.
If you prefer adding Crawlee into your own project, try the example below. Because it uses PlaywrightCrawler we also need to install Playwright. It's not bundled with Crawlee to reduce install size.
By default, Crawlee stores data to ./storage in the current working directory. You can override this directory via Crawlee configuration. For details, see Configuration guide, Request storage and Result storage.
Single interface for HTTP and headless browser crawling
Persistent queue for URLs to crawl (breadth & depth first)
Pluggable storage of both tabular data and files
Automatic scaling with available system resources
Integrated proxy rotation and session management
Lifecycles customizable with hooks
CLI to bootstrap your projects
Configurable routing, error handling and retries
Dockerfiles ready to deploy
Written in TypeScript with generics
Zero config HTTP2 support, even for proxies
Automatic generation of browser-like headers
Replication of browser TLS fingerprints
Integrated fast HTML parsers. Cheerio and JSDOM
Yes, you can scrape JSON APIs as well
JavaScript rendering and screenshots
Headless and headful support
Zero-config generation of human-like fingerprints
Automatic browser management
Use Playwright and Puppeteer with the same interface
Chrome, Firefox, Webkit and many others
Crawlee is open-source and runs anywhere, but since it's developed by Apify, it's easy to set up on the Apify platform and run in the cloud. Visit the Apify SDK website to learn more about deploying Crawlee to the Apify platform.
If you find any bug or issue with Crawlee, please submit an issue on GitHub. For questions, you can ask on Stack Overflow, in GitHub Discussions or you can join our Discord server.
Your code contributions are welcome, and you'll be praised to eternity! If you have any ideas for improvements, either submit an issue or create a pull request. For contribution guidelines and the code of conduct, see CONTRIBUTING.md.
This project is licensed under the Apache License 2.0 - see the LICENSE.md file for details."
292,"matteobruni,tsparticles","tsParticles - Easily create highly customizable JavaScript particles effects, confetti explosions and fireworks animations and use them as animated backgrounds for your website. Ready to use components available for React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Solid, Riot and Web Components.. A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with
React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Riot.js, Solid.js, and Web Components
















](https://www.buymeacoffee.com/matteobruni)
‚ö†Ô∏è‚ö†Ô∏è _This readme refers to v2
version, read here for v1 documentation* ‚ö†Ô∏è‚ö†Ô∏è
Documentation and Development references here üìñ
This library is available on two of the most popular CDNs and it's easy and ready to use, if you were using particles.js
it's even easier.
You'll find the
instructions below, with all the
links you need, and don't be scared by TypeScript, it's just the source language.
The output files are just JavaScript. ü§©
CDNs and npm have all the sources you need in Javascript, a bundle browser ready (tsparticles.engine.min.js), and
all
files splitted for import syntax.
If you are interested there are some simple instructions
just below to guide you to
migrate from the old particles.js library.
Please use these hosts or your own to load tsParticles on your projects






https://unpkg.com/tsparticles-confetti/ https://unpkg.com/tsparticles-engine/ https://unpkg.com/tsparticles-fireworks/ https://unpkg.com/tsparticles-slim/ https://unpkg.com/tsparticles/
tsParticles Confetti
 
tsParticles Engine
 
tsParticles Fireworks
 
tsParticles Slim
 
tsParticles
 
The imported tsParticles is the same instance you have when including the script in the page using the &lt;script&gt; tag.
Load tsParticles and configure the particles:


index.html
app.js
ng-particles
 
Instructions available here
inferno-particles
 
Instructions available here
jquery-particles
 
Instructions available here
preact-particles
 
Instructions available here
react-particles
 
Instructions available here
 
You can find the instructions here
 
You can find the instructions here
svelte-particles
 
Instructions available here
vue2-particles
 
Instructions available here
vue3-particles
 
Instruction available here
 
You can find the instructions here
   
The plugin page hosted on WordPress.org can be
found here
Actually, an official tsParticles plugin isn't existing, but I have a collaboration with
the Premium Addons for Elementor plugin collection.

    


    Premium Addons for Elementor is one of the most common plugins for Elementor that offers more than 55 highly customizable Elementor Widgets and Section Add-ons. tsParticles is exclusively included in Premium Particles Section Add-on for Elementor Page Builder. Check It Now.
    Use Premium Addons for Elementor Page Builder and get the chance to include tsParticles in your next WordPress website without the need to write a single line of code. See a Live Example.



There are some presets ready to be used in this repository, and they also have a bundle file that contains everything
needed to run.
  
This preset loads big colored circles moving upwards on a white background.

You can find the instructions here
  
This preset loads colored bubbles coming from the bottom of the screen on a white background.

You can find the instructions here
  
This preset loads white and red confetti launched from the screen center on a transparent background.

You can find the instructions here
  
This preset loads a faded red to a black background with particles colored like fire and ash sparks.

You can find the instructions here
  
This preset loads a mouse trail made with small fading particles like little fireflies.

You can find the instructions here
  
This preset loads a beautiful fireworks effect.

You can find the instructions here
  

You can find the instructions here
  

You can find the instructions here
  

You can find the instructions here
  

You can find the instructions here
  

You can find the instructions here
  

You can find the instructions here
You can find some tsParticles related templates here. The templates are
created for Vanilla Javascript, ReactJS, VueJS, Angular, SvelteJS, and other frameworks.
The templates will vary, new ones can be created or older ones updated with the latest features or changed to a better
style. Check them out once in a while.
If you created some good design with tsParticles feel free to submit a pull request with your cool template, you'll be
credited as the template author!
https://github.com/tsparticles/templates
https://particles.js.org/samples

You can find all video tutorials on the website here: https://particles.js.org/video.html
More videos are coming soon! Check every day if there are some new contents.






particles.json
You can find some config samples here üìñ
You can find all options
available here üìñ
I've created a tsParticles collection on CodePen üòÆ or you can check out
my profile
Otherwise, there's the demo page link below. Just click/tap the Coronavirus below, don't be scared. It's safe üò∑.

Want to see even more demos? Clone the repository on your computer and follow these instructions
Boom! üí• http://localhost:3000 and you can check out other demos.
If you are brave enough you can switch to the dev branch for trying the features under development.
tsParticles has a package that makes this library 100% compatible with the particles.js configuration.
  
Seriously, you just need to change the script from particles.js to the bundled compatibility package, et-voil√†, you're
ready üßô!
You can read more here
Want to know 5 reasons to do the
switch? Read here
Below you can find all the information you need to install tsParticles and its new syntax.
tsParticles now supports some customizations ü•≥.
You can create your own plugins
Read more here...
  
      
          
      
      
          
      


JetBrains WebStorm is used to maintain this project."
380,"dmotz,oriDomi","üìÉ Fold up DOM elements like paper. Dan Motzenbecker, MIT License




Visit oridomi.com for examples, documentation and notes.
Read the annotated source
for a detailed look.
If you want to work on the source, run npm install after first cloning to
install local package dependencies.
Run cake watch to automatically compile as you work.
cake build will update the annotated source and the minified version as well.
Pull requests are welcome. When contributing, please commit just the .coffee
file and I'll update the build when it's merged.
The DOM is your oyster.
app-UI"
381,"arendjr,selectivity","Modular and light-weight selection library. Modular and light-weight selection library.
Deprecation notice: At Speakap, we are migrating to a more responsive
component library. As such, we will be migrating away from Selectivity, and we will no longer be
maintaining this library. If you are interested in taking over ownership, please
file an issue. Thanks for all the support!
Selectivity doesn't require any external libraries to be loaded on your page, but it does have some
optional dependencies:
There's a React build that provides the official Selectivity React API. If you wish to use this,
React should be loaded on your page.
There's a jQuery build that provides the official Selectivity jQuery API. If you wish to use
this, either jQuery or Zepto.js should be loaded on
your page.
The default templates assume that you have included
FontAwesome in your page to display the icons. If
you do not want this, please specify custom templates.
Warning: Do you use Browserify or Webpack? Please use Yarn or NPM as described below.
Download and unpack the latest release from the project website:
https://arendjr.github.io/selectivity/
Copy the JavaScript and CSS file for your desired build from the archive into your project. See the
following table to see which files you need:
Reference the files from your HTML page like this:
Note the first line includes FontAwesome which is required for the default icons. This line is
optional if you use custom templates.
The second line should reference the CSS file from the bundle you chose to use.
The third line should reference jQuery, React or Zepto.js as appropriate. This line is optional if
you use the VanillaJS bundle. Note: If you want to use the React templates plugin, don't forget to
also include react-dom.js.
Finally, the last line should reference the JavaScript file from the bundle you chose to use.
You are now ready to start using Selectivity as described on the Selectivity homepage:
https://arendjr.github.io/selectivity/
Use one of the following commands, depending on whether you have Yarn or NPM installed:
Note you will need to include the CSS yourself. You can find it in
node_modules/selectivity/selectivity.css.
You can require() Selectivity as follows:
But, this will only expose the main Selectivity object and will load none of the plugins, nor enable
any of the specialized APIs. You could say what you're getting is the core of the VanillaJS API.
If however, you just want to use the jQuery API with all the relevant plugins loaded, you can do
this:
After this you can call the jQuery API as you would expect:
Similarly, if you want to use the React API with all its relevant plugins, you can do this:
The Selectivity object you receive is the same one as if you'd required 'selectivity', but you get
the React Component class as Selectivity.React so you can use it as follows:
Finally, if you're an expert (*) you can choose to use the VanillaJS API and enable just the
plugins you want one by one. For example:
All the modules listed in the table below under Creating custom builds can be required this way.
*) Using the VanillaJS API isn't really that hard, but all the examples and documentation assume
you're using either the React or the jQuery API, so be prepared that you'll have to figure out a bit
more on your own.
Once installed, you may want to customize Selectivity. For example, by specifying custom templates
or localized strings. While creating a custom build is always an option (see details below), easier
options exist.
To do any basic customization, you'll need a reference to the Selectivity object. If you have
installed through Yarn/NPM, you can get this object through
const Selectivity = require(""selectivity"");. If you're using a jQuery build, the object is exposed
as $.Selectivity. For non-jQuery builds that you included as a script, the object is exposed as
global variable.
See locale.js for an overview of
all localizable messages.
See templates.js for an
overview of all templates that can be customized.
For usage instructions, please see the Selectivity homepage: https://arendjr.github.io/selectivity/
Chrome
Firefox
Internet Explorer 10+
Safari 6+
Note that while Internet Explorer versions older than 10 are not supported, you might be able to get
them to work, possibly with the use of some polyfills. Reports of success or patches to create a
""legacy"" build would be welcomed.
Selectivity is built modularly and uses Yarn and Gulp as a build system to build its distributable
files. Make sure you have the yarn command globally available. Then, inside the project directory,
run:
Now you can generate new distributable files from the sources, using:
If you want to create your own Selectivity library that contains just the modules you need, you can
use the following command:
The following modules are available:
Note that the build system automatically resolves dependencies between modules. So for example, if
you specify you want the submenu plugin, the dropdown module will be automatically included.
Example:
This will create a custom build that uses the React API and which has support for selecting multiple
values with a dropdown. The build will be saved in build/selectivity-custom.js. There will be no
plugins available, you will have to provide your own templates with their localizable content, and
you cannot use this build for creating a single-select input.
To display any other options available for custom builds, run gulp usage.
While developing, you can start a development server like this:
You can reach the development server on the URL printed on the console (typically
http://localhost:3000), and you'll probably want to open one of the demos there:
React: http://localhost:3000/demos/custom-react.html (only works if you started with
yarn start --api=react)
jQuery: http://localhost:3000/demos/custom-jquery.html (only works if you started with
yarn start --api=jquery)
Zepto: http://localhost:3000/demos/custom-zepto.html (only works if you started with
yarn start --api=jquery)
Unit tests are available and can be ran using the following command:
If you want to run an individual test, just add --test=&lt;test-name&gt;. Simply provide an invalid test
name to get a list of all available test names.
Selectivity is made available under the MIT license.
To read more about guidelines for submitting pull requests, please read the
Contributing document."
382,"lichess-org,lichobile","lichess.org mobile application. Lichess mobile is the lichess.org official application. It is written
in TypeScript, with a bit of Kotlin and Swift.
It is a web application that accesses the native SDK, thanks to Ionic capacitor.
The rendering library is mithril.js.
It talks to a native Stockfish engine, supporting multiple variants, through a
capacitor plugin.
Multi-variant chess library is brought by a JavaScript version of scalachess.


or get the APK from the Releases section
node latest LTS version
Android:
in addition to capacitor dependencies, android ndk for stockfish compilation (to install with Android Studio).
Make sure to install all dependencies:
Capacitor needs the web app before sync, so build it:
Sync capacitor:
Will serve assets at http://localhost:8080.
Once the server is up, browse to http://localhost:8080/www.
You should use a chromium based browser to be close to the android webview which
is based on chrome.
Be sure to Toggle Device Mode
or else you won't be able to click on anything.
Be sure to install all the dependencies and follow the steps above in the Setup
project section.
In order to build Stockfish, you need to download the current stockfish plugin
NNUE file and save it to the proper location for each platform:
Using command line:
Using android studio:
More information available here.
By default, the output APK will rely on Firebase Cloud
Messaging to support push
notifications. However, it is possible to remove this dependency if you don't
care about push notifications.
To build the free version:
You will need a GoogleService-Info.plist file in order to compile iOS project.
You can download a dummy one from the firebase open-source project.
Put it in the ios/App/App/ folder.
Only debug builds are allowed with that example file. Push notifications
won't work, but you will be able to run the app on a simulator just fine.
Using command line:
Using Xcode:
More information available here.
See the wiki."
383,"liquidcarrot,carrot","ü•ï Evolutionary Neural Networks in JavaScript. 
 



    
        
    
    
        
    
    
        
    
    
        
    
    
        
    
    
        
    


<h4>‚ÑπÔ∏è The new TypeScript version is coming! If you would like to try the expiremental version please clone the repository and checkout the typescript branch of the project. Docs for this new version can temporarily be found here</h4>


  Carrot is an architecture-free neural network library built around neuroevolution



 Why / when should I use this?

 Whenever you have a problem that you:

Don't know how-to solve

Don't want to design a custom network for

Want to discover the ideal neural-network structure for

You can use Carrot's ability to **design networks of arbitrary complexity by itself** to solve whatever problem you have. If you want to see Carrot designing a neural-network to play flappy-bird [check here](https://liquidcarrot.io/example.flappy-bird/)



For Documentation, visit here
Simple docs & interactive examples
Neuro-evolution & population based training
Multi-threading & GPU (coming soon)
Preconfigured GRU, LSTM, NARX Networks
Mutable Neurons, Layers, Groups, and Networks
SVG Network Visualizations using D3.js


Flappy bird neuro-evolution
Carrot files are hosted by JSDelivr
For prototyping or learning, use the latest version here:
For production, link to a specific version number to avoid unexpected breakage from newer versions:
üí° Want to be super knowledgeable about neuro-evolution in a few minutes?
Check out this article by the creator of NEAT, Kenneth Stanley
üí° Curious about how neural-networks can understand speech and video?
Check out this video on Recurrent Neural Networks, from @LearnedVector, on YouTube
This is a simple perceptron:
.
How to build it with Carrot:
Building networks is easy with 6 built-in networks
Building custom network architectures
Networks also shape themselves with neuro-evolution
Build vanilla neural networks
Or implement custom algorithms with neuron-level control
This project exists thanks to all the people who contribute. We can't do it without you! üôá
Thanks goes to these wonderful people (emoji key):
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><sub><b>Luis Carbonell</b></sub>üíª ü§î üëÄ üìñ</td>
    <td align=""center""><sub><b>Christian Echevarria</b></sub>üíª üìñ üöá</td>
    <td align=""center""><sub><b>Daniel Ryan</b></sub>üêõ üëÄ</td>
    <td align=""center""><sub><b>IviieMtz</b></sub>‚ö†Ô∏è</td>
    <td align=""center""><sub><b>Nicholas Szerman</b></sub>üíª</td>
    <td align=""center""><sub><b>tracy collins</b></sub>üêõ</td>
    <td align=""center""><sub><b>Manuel Raimann</b></sub>üêõ üíª ü§î</td>
  </tr>
</table>

<!-- markdownlint-enable -->
<!-- prettier-ignore-end -->
<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the all-contributors specification. Contributions of any kind welcome!

Your contributions are always welcome! Please have a look at the contribution guidelines first. üéâ
To build a community welcome to all, Carrot follows the Contributor Covenant Code of Conduct.
And finally, a big thank you to all of you for supporting! ü§ó
<details><summary><strong>Planned Features</strong></summary>

[ ] Performance Enhancements

[ ] GPU Acceleration

[ ] Tests

[ ] Benchmarks

[ ] Matrix Multiplications

[ ] Tests

[ ] Benchmarks

[ ] Clustering | Multi-Threading

[ ] Tests

[ ] Benchmarks

[ ] Syntax Support

[ ] Callbacks

[ ] Promises

[ ] Streaming

[ ] Async/Await

[ ] Math Support

[ ] Big Numbers

[ ] Small Numbers
</details>



A special thanks to:
@wagenaartje for Neataptic which was the starting point for this project
@cazala for Synaptic which pioneered architecture free neural networks in javascript and was the starting point for Neataptic
@robertleeplummerjr for GPU.js which makes using GPU in JS easy and Brain.js which has inspired Carrot's development"
384,"kamilkisiela,graphql-inspector","üïµÔ∏è‚Äç‚ôÄÔ∏è Validate schema, get schema change notifications, validate operations, find breaking changes, look for similar types, schema coverage. GraphQL Inspector outputs a list of changes between two GraphQL schemas. Every change is precisely explained and
marked as breaking, non-breaking or dangerous. It helps you validate documents and fragments against a schema and even
find similar or duplicated types.
You may like GraphQL Hive as well!
It's an open-source performance monitoring tool and schema registry for GraphQL.
GraphQL Hive is currently available as a hosted service but it offers self-hosting as well.
Use GraphQL Inspector however you want:
Compares schemas
Detect breaking or dangerous changes
Schema change notifications
Use serverless functions validate changes
Validates Operations and Fragments against a schema
Finds similar / duplicated types
Schema coverage based on Operations and Fragments
Serves a GraphQL server with faked data and GraphiQL
Docker Image


Visit our website graphql-inspector.com to learn more about the project.
Documentation is available at
graphql-inspector.com/docs/introduction.
Some part of the library was ported to NodeJS from
Ruby's GraphQL Schema Comparator
Contributions, issues and feature requests are very welcome. If you are using this package and fixed a bug for yourself,
please consider submitting a PR!
And if this is your first time contributing to this project, please do read our
Contributor Workflow Guide before you get started
off.
Help us keep GraphQL Inspector open and inclusive. Please read and follow our
Code of Conduct as adopted from
Contributor Covenant
MIT ¬© Kamil Kisiela"
385,"felipefialho,kratos-boilerplate",":fire: A simple boilerplate for creating statics PWA using Webpack, Pug, PostCSS and CSS Modules. 
  


A simple boilerplate for creating a static PWA using Webpack, Pug, PostCSS and CSS Modules


To make easy create a new projects, Kratos has a generator using Yeoman
To use it:
With the commands above, you have everything to start.
The app.config.json file has all minimal config to create your scaffolding.
This project use Sass as CSS preprocessor üòÅ
For grid system uses Autoprefixer to make easy use browser prefixes, Lost with some help from, Rucksack for animations, reset and a lot of great mixins, Rupture for responsive utilities. And Font Magician to get the webfonts.
To make easier create your components and avoid a lot of problems, it boilerplate use CSS Modules.
Example
After the transformation it will become like this
npm start: run all tasks and initialize watch for changes and a server
npm run build: run all production tasks create a dist folder to deploy
npm run lint: lint javascript and css
npm run fix: command to fix all eslint errors
npm run deploy: run all tasks to build and deploy on gh-pages
MIT License ¬© Felipe Fialho"
386,"kristian-lange,net-glimpse","1) Real-time visualization of network traffic (Ethernet and Internet), and 2) Streaming of header data from your network interfaces via WebSockets. I wanted a little tool that gives me a quick overview on what's going in my network right now, displaying it in the browser  so I can access it easily whenever I want. Tools like tcpdump or Wireshark are great but don't give you this 'glimpse'.
net-glimpse has two parts: 1) Visualization of network traffic (Ethernet and/or Internet) in real-time, and 2) Streaming of header data from your network interfaces via WebSockets.
Have a look at this video.

Scala, JavaScript
Pcap4J (https://github.com/kaitoy/pcap4j) to access network interfaces
Play Framework and sbt
Akka to distribute network interface data to multiple WebSockets
Graphics with p5js and physics with toxiclibs
Build yourself and modify the source code  
net-glimpse works on Linux/Unix (including Mac OS X) and Windows.
net-glimpse needs Java 8 (JRE is enough) to run.
For the visualizations you need a modern browser (one that supports WebSockets and WebGL).
On Windows it is necessary to install Npcap (https://nmap.org/npcap/) OR WinPcap (https://www.winpcap.org/). On Linux/Unix libpcap is needed.
Unzip and change into the unzipped folder
On Linux or Unix to access network interfaces you have to start the net-glimpse either as root or give Java special capabilities, e.g. with sudo setcap cap_net_raw,cap_net_admin=eip /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java (but exchange the path to your Java installation). On Windows you will be ask after starting net-glimpse's batch file if you want to grant access to the network interfaces.
On Unix it might be necessary to make the run script executable: chmod u+x ./bin/net-glimpse
Run on Linux or Unix in the terminal ./bin/net-glimpse - on Windows double-click the ./bin/net-glimpse.bat
You can specify IP and port with the parameters -Dhttp.address and -Dhttp.port. E.g. ./bin/net-glimpse -Dhttp.address=172.23.1.81 -Dhttp.port=8080 binds net-glimpse to IP 172.23.1.81 and port 8080. If you don't specify these parameters the defaults 0.0.0.0 (listens all addresses) and 9000 are used.
If net-glimpse does not want to start have a look in its installation folder whether you find a file RUNNING_PID. Delete it and start again.
Try in a browser, e.g. with http://localhost:9000/?nif=myNetworkInterface (instead of myNetworkInterface use the name of the network interface you want to intercept)
net-glimpse prints out potential network interface names (NIF) in it's log. You can copy-paste one from there. This is especially handy on Windows where they have names like, e.g. \Device\NPF_{998BB72F-3468-413E-813C-7E3A2E7B591B} which would lead to the URL http://localhost:9000/?nif=\Device\NPF_{998BB72F-3468-413E-813C-7E3A2E7B591B}.
The resulting webpage shows a list of raw packet header data in JSON format.

If you are done with net-glimpse you can stop it with Ctrl+C.
http://localhost:9000/glimpse?nif=myNetworkInterface - shows both, Ethernet and Internet
http://localhost:9000/ipglimpse?nif=myNetworkInterface - shows only Internet
http://localhost:9000/etherglimpse?nif=myNetworkInterface - shows only Ethernet
http://localhost:9000/?nif=myNetworkInterface - shows raw packet header data in JSON
E.g. http://localhost:9000/glimpse?nif=wlp3s0 shows a visualization of the Ethernet layer and the Internet layer of the network interface wlp3s0. 

You can open multiple pages of the same or different network interface(s) at the same time.
You can press 'p' to pause the drawing at any time
It's actually a force-directed graph
Nodes represent MAC or IP addresses
Node colors are determined by the MAC or IP address (means the same MAC or IP address leads always to the same color)
Nodes with broadcast or multicast IP addresses are white.
Nodes and edges blink when a new packet is sent
Edges represent sent packets
The arrow shows the direction of the sent packet
The edges get thicker the more packets are sent
The EtherType (in the Ethernet visualization) is annotated at the edge (scroll down - under the graphic is a glossary)
In the Internet visualization if it is a TCP or UDP packet and the port is one of the well known or registered ones (port 0 to 49151) the port is annotated at the edge. The most common port numbers are exchanged with their names, eg. port 22 is exchanged with SSH (scroll down - under the graphic is a glossary).
If it's the Internet and not a TCP or UDP packet then the protocol name is annotated at the edge.
Edges of unknown EtherTypes or Internet packets are black/gray by default (but you can add new types in the config)
Nodes and edges get removed after a while if no packets are sent (default is 10 s)
In fullscreen mode the whole screen is used for the graph(s) - otherwise they have a squared canvas
Many parameters of the visualizations can be changed, e.g.
Edge colors and annotation
Node size and node repulsion
Cleaning interval and max age of nodes
Blacklist and whitelist for IP and MAC addresses 
The configuration file is in ./config/glimpse.conf. More details are in the comments of the config file.

Usually it's not possible to access network interfaces from within a browser. net-glimpse uses pcap4j to access the interfaces and then streams the header data via WebSockets into the browser. You can use this part of net-glimpse independent of the visualization.
If you just want to get the header data without the visualization you have to open a WebSocket with the URL /netdata and the network interface you want to intercept has to be specified in the query string with the parameter 'nif'. 
E.g. in JavaScript (browser) to get traffic from the network interface wlp3s0 one could write
or more generally with secure WebSockets and assuming net-glimpse runs on the same host as your JavaScript is served from.
The streamed packet header data are in JSON format.
It is possible to stream different network interfaces in parallel.
It is also possible to stream the same network interface to multiple destinations.
Only header data are captured and streamed via WebSockets - the actual payload is not read.
net-glimpse takes a couple of parameters:
-Dnif - Specifies the default network interface. If you specify it here you can leave it out in the URL query. It has no default.
-DskipOwnTraffic - If true net-glimpse's own network traffic (via WebSockets) is not streamed. Default is true.
-Dsnaplen - Sets the snap length (see wiki.wireshark.org/SnapLen for more info). Default is 128 byte.
-Dhttp.address - Specifies the IP address net-glimpse runs on. Default is 0.0.0.0 (listens on all IPs).
-Dhttp.port - Specifies the port net-glimpse runs on. Default is 9000.
e.g. ./bin/net-glimpse -Dhttp.address=192.168.178.160 -Dhttp.port=80 -Dnif=wlp3s0 -DskipOwnTraffic=false
All parameters that can be specified via -D run parameters can be set in ./conf/application.conf too.
If you don't trust net-glimpse' pre-build releases you can build it yourself. It uses sbt as build tool. Just download the source code and run sbt dist. In ./target/universal/ will be the built .zip file. More information can be found in https://www.playframework.com/documentation/2.6.x/Deploying or https://www.playframework.com/documentation/2.6.x/BuildOverview.
If you want to modify the source code (e.g. you need more data from the network packets) the following files are probably where you want to start:
/app/services/PacketToJsonTransfer.scala - serialises the packet data into JSON (backend-side)
/public/netDataReceiver.js - deserialising JSON in the browser
/public/p5visu.js - visalisation with p5.js
/public/graph.js - graph data structure and physics"
387,"DHTMLX,scheduler","GPL version of JavaScript Event Scheduler. dhtmlxScheduler is a JavaScript library that allows you to add a Google-like scheduler to your web app or website.
Intuitive drag-and-drop interface allows end users to quickly manage events and appointments in 10 different views, including Day, Week, Month, Year, Agenda, Timeline, etc. The Scheduler also supports integration with Google Maps so users can assign a location to the particular calendar events. Moreover, they can create recurring and multiday events.

==> See more samples
Add files:"
388,"electron-userland,electron-prebuilt","üéÇ  Retired project. See README. This project has been merged into the
electron/electron
repository, and the electron module is now published to npm as part of the
Electron release process.
If you're having trouble installing or using Electron, please 
file an issue on the electron/electron repo.
In the early days of Electron, back when it was still called atom-shell, there 
was no module published to npm, nor was there even an Electron team at GitHub.
Electron was used primarly by the Atom team, and it was up 
to early adopters to manually download compiled binary builds of Electron for 
use in their apps.
In early 2015 Max Ogden created 
electron-download 
and electron-prebuilt, two npm modules to simplify the process of installing 
Electron. These tools quickly became de facto standards in the Electron 
community.
Shortly after electron-prebuilt was written, 
John Muhl created
electron-prebuilt-updater, 
a Heroku app to publish the the prebuilt module to npm automatically as new 
versions of Electron were published on GitHub.
Fast forward to mid-2017, and GitHub now has a team working full-time on 
Electron. We are working towards a more regular release cadence, 
and are incrementally documenting and improving our release process. 
As we've added support for things like 
TypeScript definitions,
it's been challenging to work these additions into the electron -> electron-prebuilt-updater -> electron-prebuilt release flow.
To reduce the number of moving parts in the release process, we imported
the electron-prebuilt codebase into electron itself, and have 
preserved the git history
to acknowledge the contributions of the 32 open-source community members who 
have helped improve electron-prebuilt over the years."
474,"spring-projects,spring-framework","Spring Framework. This is the home of the Spring Framework: the foundation for all Spring projects. Collectively the Spring Framework and the family of Spring projects are often referred to simply as ""Spring"". 
Spring provides everything required beyond the Java programming language for creating enterprise applications for a wide range of scenarios and architectures. Please read the Overview section as reference for a more complete introduction.
This project is governed by the Spring Code of Conduct. By participating, you are expected to uphold this code of conduct. Please report unacceptable behavior to spring-code-of-conduct@pivotal.io.
For access to artifacts or a distribution zip, see the Spring Framework Artifacts wiki page.
The Spring Framework maintains reference documentation (published and source), GitHub wiki pages, and an
API reference. There are also guides and tutorials across Spring projects.
See the Micro-Benchmarks wiki page.
See the Build from Source wiki page and the CONTRIBUTING.md file.
Information regarding CI builds can be found in the Spring Framework Concourse pipeline documentation.
Follow @SpringCentral, @SpringFramework, and its team members on Twitter. In-depth articles can be found at The Spring Blog, and releases are announced via our news feed.
The Spring Framework is released under version 2.0 of the Apache License."
475,"Dogfalo,materialize","Materialize, a CSS Framework based on Material Design. 
  
    
  


MaterializeCSS


  Materialize, a CSS Framework based on material design.
  
  <strong>-- Browse the docs --</strong>
  
  
  
    
  
  
    
  
  
    
  
  
    
    
  
    
  
  
    
  


Read the getting started guide for more information on how to use materialize.
Download the latest release of materialize directly from GitHub. (Beta)
Clone the repo: git clone https://github.com/Dogfalo/materialize.git (Beta: git clone -b v1-dev https://github.com/Dogfalo/materialize.git)
Include the files via cdnjs. More here. (Beta)
Install with npm: npm install materialize-css (Beta: npm install materialize-css@next)
Install with Bower: bower install materialize (DEPRECATED)
Install with Atmosphere: meteor add materialize:materialize (Beta: meteor add materialize:materialize@=1.0.0-beta)
The documentation can be found at http://materializecss.com. To run the documentation locally on your machine, you need Node.js installed on your computer.
Run these commands to set up the documentation:
Then run grunt monitor to compile the documentation. When it finishes, open a new browser window and navigate to localhost:8000. We use BrowserSync to display the documentation.
Previous releases and their documentation are available for download.
Materialize is compatible with:
Chrome 35+
Firefox 31+
Safari 9+
Opera
Edge
IE 11+
For changelogs, check out the Releases section of materialize or the CHANGELOG.md.
We use Jasmine as our testing framework and we're trying to write a robust test suite for our components. If you want to help, here's a starting guide on how to write tests in Jasmine.
Check out the CONTRIBUTING document in the root of the repository to learn how you can contribute. You can also browse the help-wanted tag in our issue tracker to find things to do.
Code Copyright 2018 Materialize. Code released under the MIT license."
476,"apache,dubbo","Apache Dubbo is a high-performance, java based, open source RPC framework.. Apache Dubbo is a high-performance, Java-based open-source RPC framework. Please visit the official site for the quick start guide and documentation, as well as the wiki for news, FAQ, and release notes.
We are now collecting Dubbo user info to help us to improve Dubbo further. Kindly support us by providing your usage information on issue#9436: Wanted: who's using dubbo, thanks :)

Transparent interface based RPC
Intelligent load balancing
Automatic service registration and discovery
High extensibility
Runtime traffic routing
Visualized service governance
The following code snippet comes from Dubbo Samples. You may clone the sample project and step into the dubbo-samples-api subdirectory before proceeding.
There's a README file under dubbo-samples-api directory. We recommend referencing the samples in that directory by following the below-mentioned instructions: 
See api/GreetingsService.java on GitHub.
See provider/GreetingsServiceImpl.java on GitHub.
See provider/Application.java on GitHub.
See client/Application.java on GitHub.
The consumer will print out hi, dubbo on the screen.
Your first Dubbo application - A 101 tutorial to reveal more details, with the same code above.
Dubbo user manual - How to use Dubbo and all its features.
Dubbo developer guide - How to involve in Dubbo development.
Dubbo admin manual - How to admin and manage Dubbo services.
If you want to try out the cutting-edge features, you can build with the following commands. (Java 1.8 is needed to build the master branch)
Mailing list:
dev list: for dev/user discussion. subscribe, unsubscribe, archive,  guide
Bugs: Issues
Gitter: Gitter channel
Twitter: @ApacheDubbo
See¬†CONTRIBUTING¬†for details on submitting patches and the contribution workflow.
Take a look at issues with tags marked Good first issue or Help wanted.
Join the discussion on the mailing list, subscription guide.
Answer questions on issues.
Fix bugs reported on issues, and send us a pull request.
Review the existing pull request.
Improve the website, typically we need
blog post
translation on documentation
use cases around the integration of Dubbo in enterprise systems.
Improve the dubbo-admin/dubbo-monitor.
Contribute to the projects listed in ecosystem.
Other forms of contribution not explicitly enumerated above.
If you would like to contribute, please send an email to dev@dubbo.apache.org to let us know!
Please follow the template¬†for reporting any issues.
Please report security vulnerabilities to us privately.
Dubbo Ecosystem Entry - A GitHub group dubbo to gather all Dubbo relevant projects not appropriate in apache group yet
Dubbo Website - Apache Dubbo official website
Dubbo Samples - samples for Apache Dubbo
Dubbo Spring Boot - Spring Boot Project for Dubbo
Dubbo Admin - The reference implementation for Dubbo admin
Dubbo Awesome - Dubbo's slides and video links in Meetup
Go (recommended)
Apache Dubbo software is licenced under the Apache License Version 2.0. See the¬†LICENSE¬†file for details."
477,"laravel,framework","The Laravel Framework.. 








Note: This repository contains the core code of the Laravel framework. If you want to build an application using Laravel, visit the main Laravel repository.
Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable, creative experience to be truly fulfilling. Laravel attempts to take the pain out of development by easing common tasks used in the majority of web projects, such as:
Simple, fast routing engine.
Powerful dependency injection container.
Multiple back-ends for session and cache storage.
Database agnostic schema migrations.
Robust background job processing.
Real-time event broadcasting.
Laravel is accessible, yet powerful, providing tools needed for large, robust applications. A superb combination of simplicity, elegance, and innovation gives you a complete toolset required to build any application with which you are tasked.
Laravel has the most extensive and thorough documentation and video tutorial library of any modern web application framework. The Laravel documentation is in-depth and complete, making it a breeze to get started learning the framework.
You may also try the Laravel Bootcamp, where you will be guided through building a modern Laravel application from scratch.
If you're not in the mood to read, Laracasts contains over 1100 video tutorials covering a range of topics including Laravel, modern PHP, unit testing, JavaScript, and more. Boost the skill level of yourself and your entire team by digging into our comprehensive video library.
Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the Laravel documentation.
In order to ensure that the Laravel community is welcoming to all, please review and abide by the Code of Conduct.
Please review our security policy on how to report security vulnerabilities.
The Laravel framework is open-sourced software licensed under the MIT license."
478,"symfony,symfony","The Symfony PHP framework. 
    


Symfony is a PHP framework for web and console applications and a set
of reusable PHP components. Symfony is used by thousands of web
applications and most of the popular PHP projects.
Install Symfony with Composer (see requirements details).
Symfony follows the semantic versioning strictly, publishes ""Long Term
Support"" (LTS) versions and has a release process that is predictable and
business-friendly.
Symfony 6.3 is backed by SensioLabs, Shopware and Les-Tilleuls.coop.
As the creator of Symfony, SensioLabs supports companies using Symfony,
with an offering encompassing consultancy, expertise, services, training, and
technical assistance to ensure the success of web application development projects.
Shopware offers you cutting-edge, highly adaptable ecommerce solutions trusted
by the world's most acclaimed brands. Create outstanding customer experiences,
innovate fast, and accelerate your growth in the ever-evolving space of digital
commerce. You decide how far you want to go, and we'll be by your side.
Les-Tilleuls.coop is a team of 70+ Symfony experts who can help you design,
develop and fix your projects. We provide a wide range of professional services
including development, consulting, coaching, training and audits. We also are
highly skilled in JS, Go and DevOps. We are a worker cooperative!
Help Symfony by sponsoring its development!
Read the Getting Started guide if you are new to Symfony.
Try the Symfony Demo application to learn Symfony in practice.
Discover Symfony ecosystem in detail with Symfony The Fast Track.
Master Symfony with the Guides and Tutorials, the Components docs
and the Best Practices reference.
Join the Symfony Community and meet other members at the Symfony events.
Get Symfony support on Stack Overflow, Slack, IRC, etc.
Follow us on GitHub, Twitter and Facebook.
Read our Code of Conduct and meet the CARE Team.
Symfony is an Open Source, community-driven project with thousands of
contributors. Join them contributing code or contributing documentation.
If you discover a security vulnerability within Symfony, please follow our
disclosure procedure.
Symfony development is led by the Symfony Core Team
and supported by Symfony contributors."
479,"akveo,ngx-admin","Customizable admin dashboard template based on Angular 10+. Who uses ngx-admin?| Documentation | Installation Guidelines | Angular templates
To install ngx-admin you have to use NodeJS version 14.14+ because of node-sass version utilized in the application.
Material admin theme is based on the most popular Angular dashboard template - ngx-admin
To use material theme checkout feat/material-theme branch.
The most popular and trusted Angular open source dashboard template is out there. Used by hundreds of thousands developers worldwide and Fortune 500 companies*.
Over 40+ Angular Components and 60+ Usage Examples. Kick off your project and save money by using ngx-admin.
Already using ngx-admin and willing to switch to material theme? Material theme is backward-compatible. Check out the article describing how to do that.
ngx-admin material works perfectly with Angular Material and Nebular. Take the best from both!
<a target=""_blank"" href=""https://akveo.com/ngx-admin/pages/dashboard?theme=corporate&utm_campaign=ngx_admin%20-%20demo%20-%20ngx_admin%20github%20readme&utm_source=ngx_admin&utm_medium=referral&utm_content=hero_banner_corporate"">
Try low-code internal tool builder for free

Check out our Store for ready to use Backend Bundles.

Angular 13+ & Typescript
Bootstrap 4+ & SCSS
Responsive layout
RTL support
High resolution
Flexibly configurable themes with hot-reload (3 themes included)
Authentication module with multiple providers
40+ Angular Components
60+ Usage Examples
<a target=""_blank"" href=""http://www.akveo.com/ngx-admin/?utm_campaign=ngx_admin%20-%20demo%20-%20ngx_admin%20github%20readme&utm_source=ngx_admin&utm_medium=referral&utm_content=live_demo_link"">Live Demo
This template is using Nebular modules set, here you can find documentation and other useful articles.
Don't need all the pages and modules and just looking for an empty starter kit for your next project? Check out our starter-kit branch.
This project runs its tests on multiple desktop and mobile browsers using BrowserStack.

Eva Icons - 480+ beautiful Open Source icons
Nebular - Angular Components, Auth and Security
Akveo templates - 10+ Ready-to-use apps templates to speed up your apps developments
Star our GitHub repo :star:
Create pull requests, submit bugs, suggest new features or documentation updates :wrench:
Follow us on Twitter :feet:
Like our page on Facebook :thumbsup:
Visit our homepage or simply leave us a message to contact@akveo.com. We will be happy to work with you!
Made with :heart: by Akveo team. Follow us on Twitter to get the latest news first!
We're always happy to receive your feedback!"
480,"mdbootstrap,mdb-ui-kit","Bootstrap 5 & Material Design 2.0 UI KIT. Bootstrap 5 UI KIT - 700+ components, plain JavaScript, MIT license, simple installation.
MDB is a collection of free Bootstrap templates, themes, design tools & resources.
Simple installation via .zip, npm or cdnjs.
This option is useful for experienced developers it enables bundling, unit testing code formatting, linting, saas support & more.
Free Hosting, WordPress support, custom domains, SSL support, free database, frontend & backend templates, webpack starter included, git repostiory, FTP & jenkins support.
One click setup! MDB GO allows you to create a WordPress page with a single click.
Regardless whether you want to create a Travel Blog or an e-commerce shop to sell your product you can easily do that. You can even combine both into single page.
Created by   
 




Trusted by <b>2 000 000+</b> developers & designers. Used by companies & institutions like
<table>
  <tbody>
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
    </tr>
   </tbody>
</table>

<table>
  <tbody>
    <tr>
      <td>
          
                
          
      </td>
      <td>
        <ul>
        <li><b>700+ UI components</b></li>          
         <li><b>Free templates</b></li>
         <li>Super simple, 1 minute installation</li>
         <li>Detailed docs & practical examples</li>
         <li>Lots of tutorials</li>
         <li><b>Plain JavaScript (but works also with jQuery)</b></li>
         <li>Huge and active community</li>
         <li><b>MIT license - free for personal & commercial use</b></li>
        </ul>
      </td>
    </tr>
   </tbody>
</table>

>> Learn more about Bootstrap 5
>> Bootstrap 5 Tutorial
>> Subscribe to our YouTube channel with dozens of Bootstrap tutorials
<table>
  <tbody>
    <tr>
      <td align=""center"">
         
                
          
      </td>
      <td>
          
                
          
      </td>
    </tr>
     <tr>
        <td align=""center"">
          <b>Start learning from Basics</b>
          
                
          
         </td>
        <td align=""center"">
          <b>Learn Bootstrap 5 | Crash Course for Beginners in 1.5H</b>
          
                
          
         </td>
      </tr>
   </tbody>
</table>

A slideshow component for cycling through elements‚Äîimages or slides of text‚Äîlike a carousel.




    
  

Use MDB custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.




    
  




    
  




    
  




    
  

Indicate the loading state of a component or page with MDB spinners, built entirely with HTML, CSS, and no JavaScript.




    
  




    
  

A card is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options.




    
  

Provide valuable, actionable feedback to your users with HTML5 form validation, via browser default behaviors or custom styles and JavaScript.




    
  

 
 

    
  

 
 

    
  

Examples and usage guidelines for form control styles, layout options, and custom components for creating a wide variety of forms.


 

    
  

 
 

    
  

A footer is an additional navigation component. It can hold links, buttons, company info, copyrights, forms, and many other elements.




    
  

Use MDB modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.




    
  

MDB hover effect appears when the user positions the computer cursor over an element without activating it. Hover effects make a website more interactive.




    
  




    
  

Tabs are quasi-navigation components which can highly improve website clarity and increase user experience.




    
  




    
  

Notes are small components very helpful in inserting an additional piece of information.




    
  

Automatically update Bootstrap navigation or list group components based on scroll position to indicate which link is currently active in the viewport.




    
  

Also check out our standalone project Perfect Scrollbar which is included in MDB.

All of the templates were created with MDB 5 UI KIT (Material Design for Bootstrap 5).

MDB is a free (MIT license) library, that provides extra features and significantly extends Bootstrap's capabilities.

<table>
  <tbody>
    <tr>
      <td>
        
          
        
        <b>Ecommerce</b>
      <td>
        
          
        
        <b>Carousel Full Cover</b>
    </tr>
   </tbody>

  <tbody>
    <tr>
      <td>
        
          
        
        <b>Image Full Cover</b>
      <td>
        
          
        
        <b>Portfolio</b>
    </tr>
   </tbody>

  <tbody>
    <tr>
      <td>
        
          
        
        <b>Post</b>
      <td>
        
          
        
        <b>Pricing</b>
    </tr>
   </tbody>

  <tbody>
    <tr>
      <td>
        
          
        
        <b>Video Full Cover</b>
      <td>
        
          
        
        <b>Carousel Half Cover</b>
    </tr>
   </tbody>

  <tbody>
    <tr>
      <td>
        
          
        
        <b>Video Half Cover</b>
      <td>
        
          
        
        <b>Login</b>
    </tr>
   </tbody>

  <tbody>
    <tr>
      <td>
        
          
        
        <b>Magazine</b>
      <td>
        
          
        
        <b>Checkout</b>
    </tr>
   </tbody>

  <tbody>
    <tr>
      <td>
        
                    
        
          <b>Blog</b>
      <td>
        
          
        
        <b>Product</b>
    </tr>
   </tbody>

  <tbody>
    <tr>
      <td>
        
                    
        
          <b>Category</b>
      <td>
        
          
        
        <b>Landing Page</b>
    </tr>
   </tbody>

  <tbody>
    <tr>
      <td>
        
          
        
        <b>Admin</b>
      <td>
        
          
        
        <b>Coming Soon</b>
    </tr>
   </tbody>

  <tbody>
    <tr>
      <td>
        
          
        
        <b>Classic Jumbotron</b>
      <td>
        
          
        
        <b>One Column</b>
    </tr>
   </tbody>

  <tbody>
    <tr>
      <td>
        
          
        
        <b>Two Columns</b>
      <td>
        
          
        
        <b>Three Columns</b>
  </tr>
   </tbody>
</table>

<ul>
<li>Bootstrap Address Form</li>
<li>Bootstrap Avatar</li>
<li>Bootstrap Back To Top Button</li>
<li>Bootstrap Carousel Slider with Thumbnails</li>
<li>Bootstrap Chat</li>
<li>Bootstrap Code Blocks</li>
<li>Bootstrap Comments</li>
<li>Bootstrap Comparison Table</li>
<li>Bootstrap Credit Card Form</li>
<li>Bootstrap Drawer</li>
<li>Bootstrap Nested Dropdown</li>
<li>Bootstrap FAQ component / section</li>
<li>Bootstrap Gallery</li>
<li>Bootstrap Hamburger Menu</li>
<li>Bootstrap Invoice</li>
<li>Bootstrap Jumbotron</li>
<li>Bootstrap Login Form</li>
<li>Bootstrap Maps</li>
<li>Bootstrap Media Object</li>
<li>Bootstrap Mega Menu</li> 
<li>Bootstrap Multiselect</li> 
<li>Bootstrap News Feed</li> 
<li>Bootstrap Offcanvas</li> 
<li>Bootstrap Order Details</li> 
<li>Bootstrap Page Transitions</li> 
<li>Bootstrap Payment Forms</li> 
<li>Bootstrap Product Cards</li> 
<li>Bootstrap Profiles</li>  
<li>Bootstrap Quotes</li> 
<li>Bootstrap Registration Form</li> 
<li>Bootstrap Expanding Search Bar</li> 
<li>Bootstrap Shopping Carts</li> 
<li>Bootstrap Side Navbar</li>  
<li>Bootstrap Sidebar</li>  
<li>Bootstrap Social Media Icons & Buttons</li>  
<li>Bootstrap Square Buttons</li>  
<li>Bootstrap Survey Form</li>  
<li>Bootstrap Testimonial Slider</li>  
<li>Bootstrap Testimonials</li>  
<li>Bootstrap Textarea</li>  
<li>Bootstrap Timeline</li>  
<li>Bootstrap To Do List</li>  
<li>Bootstrap Video Carousel / Gallery</li>  
<li>Bootstrap Weather</li>  
<li>Bootstrap Dark Mode</li> 
<li>Bootstrap Padding</li> 
<li>Bootstrap Modal Size</li> 
<li>Bootstrap Modal Show, Close, Hide & Toggle</li> 
<li>Bootstrap Backdrop</li> 
<li>Bootstrap Card Deck</li> 
<li>Bootstrap Table Filter</li> 
<li>Bootstrap Slider</li> 
<li>Bootstrap Logo</li> 
<li>Bootstrap Popup</li> 
<li>Bootstrap Max Width</li>
<li>Bootstrap Hero</li>
<li>Bootstrap Select Dropdown</li>
<li>Bootstrap Labels</li>
<li>Bootstrap Dialog</li>
<li>Bootstrap Screen Sizes</li>
<li>Bootstrap Dropdown Button</li>
<li>Bootstrap Side Menu</li>
<li>Bootstrap Table Fixed Header</li>
<li>Bootstrap Border Radius</li>
<li>Bootstrap Popover On Hover</li>
<li>Bootstrap Overlay</li>
<li>Bootstrap Height</li>
<li>Bootstrap Widgets</li>

</ul>"
481,"vapor,vapor","üíß A server-side Swift HTTP web framework.. 



    
        
    
    
        
    
    
        
    
    
        
    
    
        
    
    
        
    



Vapor is an HTTP web framework for Swift. It provides a beautifully expressive and easy-to-use foundation for your next website, API, or cloud project.
Take a look at some of the awesome stuff created with Vapor.
Join the welcoming community of fellow Vapor developers on Discord.
To contribute a feature or idea to Vapor, create an issue explaining your idea or bring it up on Discord.
If you find a bug, please create an issue. 
If you find a security vulnerability, please contact security@vapor.codes as soon as possible.
Support Vapor's development by becoming a sponsor.

    


    


    


    

Support Vapor's development by becoming a backer.
<!-- backers -->


















































<!-- backers -->"
565,"trodi,electron-splashscreen","Simple splashscreen for electron applications.. 
Simple splashscreen for Electron applications.
Ideally, your application loads instantaneously. However, some applications are larger and/or may be running on a slower machine, causing the load to take longer. If the application is taking a bit to load, electron-splashscreen will appear so the user knows the application is loading, but can't interact with a partially loaded application.
electron-splashscreen is simple to incorporate, while allowing you the freedom to customize with any look, feel, and functionality.
No external dependencies.


Example of your Electron browser process.
You can run examples via npm run example and npm run example-dynamic.
npm run build
npm version &lt;patch|minor|major&gt;
npm publish
Commit and push changes to git
MIT License"
566,"sidneys,desktop-dimmer","Enable darker-than-dark dimming for internal and external screens.. 
  
  <b>Enable darker-than-dark dimming for internal and external screens.</b>
  Available for macOS, Windows and Linux (Beta).




Cross-Platform
Tested on macOS Sierra, Windows 10 Anniversary. Beta support for Ubuntu 16.10. 
Lean
Small resource footprint, minimal User Interface.
Unobstrusive
Settings are persisted and restored per-Display without any configuration.
Smart
Heading out? Disconnecting and reconnecting external displays are handled seamlessly.
Open Source
GitHub-based workflow, MIT licensed.
Download the latest version of Desktop Dimmer on the Releases page.
Clone the repo and install dependencies.
Run the app with integrated Electron.
Install the app in the System app folder and start it.
Build the app and create installers (see requirements).
Building for Windows requires wine and mono (on macOS, Linux)
Building for Linux requires  fakeroot¬†and¬†dpkg (on macOS, Windows)
Only macOS can build for other platforms.
Install Homebrew, then run:
Turnkey build-in-the-cloud for Windows 10, macOS and Linux.
The process is managed by a custom layer of node scripts and Electron-optimized configuration templates.
Completed Installation packages are deployed to GitHub Releases. Builds for all platforms and architectures take about 5 minutes.
Backed by the open-source-friendly guys at Travis and AppVeyor and running electron-packager under the hood.
Fork the repo
Generate your GitHub Personal Access Token using ""repo"" as scope. Copy it to the clipboard.
macOS + Linux
Sign in to Travis using GitHub.
Open your Travis Profile, click ""Sync Account"" and wait for the process to complete.
Find this repository in the list, enable it and click ""‚öô"" to open its settings.
Create a new Environment Variable named GITHUB_TOKEN. Paste your Token from step 2 as value. 
Windows
Sign in to AppVeyor using GitHub.
Click on ""New Project"", select ""GitHub"", look up this repo in the list and click ""Add"".
After import navigate to the Settings > Environment subsection
Select ""Add Variable"", insert GITHUB_TOKEN for name, paste your Token as value. Save.
Add a new Tag to start the build process:
The builds are started in parallel and added to the ""Releases"" page of the GitHub repo (in draft mode).
Use the editing feature to publish the new app version.
There is no step 3
[ ] <span style=""color: cyan;"">Colored Shades</span>
[ ] In-App Updates (Squirrel)
[ ] Signed binaries
[ ] E2E Testing (Spectron)
Gitter Developer Chat
Issues File, track and discuss features and issues
Wiki Read or contribute to the project Wiki
sidneys 2016"
567,"DanRuta,xVA-Synth","Machine learning based speech synthesis Electron app, with voices from specific characters from video games. xVASynth 2.0 is a machine learning based speech synthesis app, using voices from characters/voice sets from video games.
Patreon: https://www.patreon.com/xvasynth
Steam: https://store.steampowered.com/app/1765720/xVASynth_v2


This is an Electron UI wrapped around inference of FastPitch models trained on voice data from video games. The app serves as a framework, which loads and uses whichever models are given to it. As such, the app does nothing by itself, and models need to be installed. Models which have a corresponding asset file will be loaded in their respective game/category. Anything else gets loaded in the ""Other"" category.
The main benefit of this tool is allowing mod creators to generate new voice lines for third party game modifications (mods). There are other uses, such as creating machinima, and just generally having fun with familiar voices.
Join chat on Discord here: https://discord.gg/nv7c6E2TzV
Where possible, make sure you download the app from the Nexusmods websites (Files tab, ""Main Files"" section). There the compiled version will be the most up-to-date.
The base application can be downloaded and placed anywhere. Aim to install it onto an SSD, if you have the space, to reduce voice set loading time. To install voice sets, you can drop the files into the respective game directory: xVASynth/resources/app/models/&lt;game&gt;/
Watch the above video for a summary of this section.
To start, download the latest release, double click the xVASynth.exe file, and make sure to click Allow, if Windows asks for permission to run the python server script (this is used internally). Alternatively, check out the Development section, to see how to run the non-packaged dev code.
Once the app is up and running, select the voice set category (the game) from the top left dropdown, then click a specific voice set.
A list of already synthesized audio files for that voice set, if any, is displayed. For synthesis, click the Load model button. This may take a minute, on a slow machine.
Once finished, type your text in the text area and click the Generate Voice button. Once generated, you will be shown a preview of the output. Click the Keep sample button to save to file, or click the Generate Voice after making ammends to the text input, to discard it and re-generate.
You can adjust the pitch, durations, and energy of individual letters by moving the letter sliders up and down, or by using the tools in the toolbars below.
In the list of audio files, you can preview, re-name, click to open the containing folder, or delete each one.
If the required CUDA dependencies are installed on your system, you can enable GPU inference by switching the toggle in the settings menu (click the setting cog at the top right).
npm install dependencies, and run with npm start. Use virtualenv, and pip install -r requirements.txt using Python 3.6.
The app uses both JavaScript (Electron, UI) and Python code (FastPitch Model). As the python script needs to remain running alongside the app, and receive input, communication is done via an HTTP server, with the JavaScript code sending localhost requests, at port 8008. During development, the python source is used. In production, the compiled python is used.
First, run the scripts in package.json to create the electron distributables.
Second, use pyinstaller to compile the python. pip install pyinstaller and run pyinstaller -F server.spec. Discard the build folder, and move the server folder (in dist) into release-builds/xVASynth-win32-x64/resources/app, and rename it to cpython. Distribute the contents in xVASynth-win32-x64 and run app through xVASynth.exe.
Run the distributed app once and check the server.log file for any problems, remove any unnecessary files before distribution.
Make sure you remove your environment folder, if it is copied over to the distributed output.
Though, if you're just tweaking small things in JS/HTML/CSS, it may be easier to just edit/copy over the files into an existing packaged distributable. There's no code obfuscation or anything like that in place.
A large number of models have been trained for this app. They are publicly hosted on the nexus.com website, on the game page respective to the game the voice belongs to.
Future plans are currently to continue training models for more voices, with plenty more remaining."
568,"hackmdio,hackmd-desktop",":notebook: HackMD Desktop Application. An electron wrapped desktop client for HackMD :tada:

electron"
569,"Tustin,PlayStationDiscord","Discord Rich Presence for PlayStation 4, PlayStation 3, and PlayStation Vita games.. Discord Rich Presence for PlayStation 5, PlayStation 4, PlayStation 3, and PlayStation Vita games.
You can download the compiled build for both of these platforms on the official PlayStationDiscord page. Windows uses a proper installer and macOS has a dmg you can mount and install.
I don't have any Linux builds because there's too many combinations of Linux to test. If you want to use this on Linux, follow the guide below for developing so you can manually build the application.
PlayStationDiscord is currently built on Electron using TypeScript. Simply follow the steps below to get it up and running:
git clone https://github.com/Tustin/PlayStationDiscord/
cd into PlayStationDiscord folder
npm install (or yarn install)
npm run start (or yarn start)
Yes, Electron is bloated. But until we have a better way to build cross platform UI applications, we just have to deal with it. Sorry."
570,"electerm,electerm","üìªTerminal/ssh/telnet/serialport/sftp client(linux, mac, win). 
    
        
    









Open-sourced terminal/ssh/telnet/serialport/sftp client(linux, mac, win).

  


Works as a terminal/file manager or ssh/telnet/serialport/sftp client
Global hotkey to toggle window visibility (similar to guake, default is ctrl + 2)
Multi platform(linux, mac, win)
üá∫üá∏ üá®üá≥ üáßüá∑ üá∑üá∫ üá™üá∏ üá´üá∑ üáπüá∑ üá≠üá∞ üáØüáµ üá∏üá¶ üá©üá™ üá∞üá∑ Multi-language support(electerm-locales, contributions/fixes welcome)
Double click to directly edit (small) remote files.
Auth with publicKey + password.
Support Zmodem(rz, sz).
Support Trzsz(trz/tsz), similar to rz/sz, and compatible with tmux.
Transparent window(Mac, win).
Terminal background image.
Global/session proxy.
Quick commands
UI/terminal theme
Sync bookmarks/themes/quick commands to github/gitee secret gist
Quick input to one or all terminals.
Command line usage: check wiki
From release: https://github.com/electerm/electerm/releases
For Mac user: brew install --cask electerm
With snap: sudo snap install electerm --classic
For some Linux distribution, you can find it from OS default App store(Ubuntu, Deepin, Mint...).
For some linux OS, the rpm, deb, or snap release may not work, you can try the tar.gz release.
For Windows users, you can install it from windows store, command-line installer winget and scoop is also recommended:
Install from npm
Auto upgrade: When a new version is released, you will get an upgrade notification after you start electerm again. You can then click the upgrade button to upgrade.
Download: Just download the latest edition, reinstall.
Npm: If you install from npm, just run npm i -g electerm again.
If use Snap or some other distribution system, these systems may provide upgrades.
https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/electerm
https://github.com/Hope-IT-Works/electerm-theme-termius
Would love to hear from you, please tell me what you think, submit an issue, Start a new discussion, create/fix language files or create pull requests, all welcome.
open collective

wechat donate

Visit Releases.
MIT"
571,"kubernetes-sigs,kui","A hybrid command-line/UI development experience for cloud-native development. Blogs | PDF Summary | Installation | API | Custom Graphical CLIs

We love CLIs, and think they are critical for interacting in a
flexible way with the cloud. We need the power to go off the
rails. But ASCII is tedious.
Kui takes your normal kubectl command line requests and responds
with graphics. Instead of ASCII tables, you are presented with
sortable ones. Instead of copying and pasting long auto-generated
resource names, in Kui you just click.
Kui is also fast. It launches in seconds, and can process kubectl
commands 2-3 times faster than kubectl itself.

Help us make Kubernetes tools better by filling out a quick 2
minute survey on your tool
preferences. Thanks!
<a name=""install"">
We offer prebuilt images optimized for an enhanced Kubernetes CLI
experience.

Download and
unzip, then
add the unzipped directory to your PATH. Now use kubectl kui or
launch the Kui executable to use Kui's built-in REPL.
Windows Warning: Please use forward slashes for filepaths, e.g. c:/users, not c:\users.
We hear you. Choose your platform (e.g. mac:amd64), execute the
following, then look in ./dist/electron.
<a name=""custom"">
Kui is a framework for adding graphics to CLIs. Kui allows for either
a hosted client-server architecture, or the distribution of
double-clickable applications (via Electron).
Using the Kui framework, you can design your own Kubernetes
enhancements, set a custom theme or custom icon, and enhance the
commands of your favorite CLI. Check out the template
repo. If your
enhancements would be generally valuable, please PR them back here,
e.g. awesome Kubernetes enhancements can be integrated with the core
Kubernetes plugin.
Participation in the Kubernetes community is governed by the Kubernetes Code
of Conduct."
572,"saltyshiomix,nuxtron","‚ö° Nuxt.js + Electron ‚ö°. 

  
  


Build a Nuxt.js + Electron app for speed ‚ö°
(The screenshot above is a top page of examples/with-javascript.)
Show a way of developing desktop apps only web knowledge
Easy to use
Be transparent and open to OSS developers
To create my-app, just run the command below:
You can use examples/* apps as a template.
To create the examples/with-typescript app, run the command below:
Run npm run dev, and nuxtron automatically launches an electron app.
Run npm run build, and nuxtron outputs packaged bundles under the dist folder.
To build Windows 32 bit version, run npm run build:win32 like below:
CAUTION: To build macOS binary, your host machine must be macOS!
Edit electron-builder.yml properties for custom build configuration.
For more information, please check out electron-builder official configuration documents.
See examples folder for more information.
Or you can start the example app by nuxtron init &lt;app-name&gt; --example &lt;example-dirname&gt;.
To list all examples, just type the command below:
Nextron - ‚ö° Electron + NEXT.js ‚ö°"
573,"Figma-Linux,figma-linux","Figma is the first interface design tool based in the browser, making it easier for teams to create software. Join us in https://t.me/figma_linux and https://spectrum.chat/figma-linux. Figma-linux is an unofficial Electron-based  Figma desktop app for Linux.

    



    
    
        
    
    
    
        
    
    
        
    
    
    
    
        
    





    <span class=""badge-buymeacoffee""></span>
    <span class=""badge-paypal""></span>


You can install Figma-linux from Snap here.
Alternatively, type
in your terminal.
To use local fonts when using the snapd version create a symbolic link:
There is also an AppImage available.
Get it on our Releases page, then make it executable and install using these terminal commands:
This is not a portable AppImage - it will install figma-linux on your system, after which you can run it from terminal or from your app list.
For more info, execute
Firstly, install libgconf-2-4:
Download the .deb package from the Releases page, and install it with dpkg or your favorite .deb installer.
On Ubuntu, you can use our PPA:
If you receive a NO_PUBKEY error while running apt update, then you must add the key manualy:
Download the .deb package from the Releases page, and install it with apt.
Figma-linux is available on the AUR.
You can use an AUR helper like yay to install it:
Download the .rpm package from our Releases page, then install it:
Clone the repository:
Install Rust:
Install prerequisites from npm:
To run Figma-linux from npm in dev mode execute this:
Aside from that, you can also run:
npm run build to built the app for production
npm run start to run the built version
npm run builder to package the app for distribution.
The build targets are listed in ./config/builder.json. You can remove the ones you don't need or don't have dependencies for.
npm run pack to remove old packages from the installer directory, then pack the app.
This depends on AppImageTool being installed.
ATTENTION:
When you do changes in middleware component, You need to rebuild (npm run build) and restart the app each time, because the middleware execute only on run the app, Hot Reload won't work.
Join us on Telegram or Spectrum.
You can contribute to figma-linux development by supporting us on Paypal or Buy me a Coffee:

    <span class=""badge-buymeacoffee""></span>
    <span class=""badge-paypal""></span>


Thanks to the supporters."
574,"quasarframework,quasar","Quasar Framework - Build high-performance VueJS user interfaces in record time. Build high-performance VueJS user interfaces in record time: responsive Single Page Apps, SSR Apps, PWAs, Browser extensions, Hybrid Mobile Apps and Electron Apps. If you want, all using the same codebase!
      




Please submit a PR to https://github.com/quasarframework/quasar-awesome with your website/app/Quasar tutorial/video etc. Thank you!
Quasar Framework is an MIT-licensed open source project. Its ongoing development is made possible thanks to the support by these awesome backers.
Please read our manifest on Why donations are important. If you'd like to become a donator, check out Quasar Framework's Donator campaign.
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
    </tr>
    <tr></tr>
    <tr>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
    </tr>
    <tr></tr>
    <tr>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
    </tr>
    <tr></tr>
    <tr>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
    </tr>
    <tr></tr>
    <tr>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
    </tr>
    <tr></tr>
    <tr>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
    </tr>
    <tr></tr>
    <tr>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
    </tr>
    <tr></tr>
    <tr>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
    </tr>
    <tr></tr>
    <tr>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
      <td align=""center"" valign=""middle"">
        
          
        
      </td>
    </tr>
  </tbody>
</table>

Head on to the Quasar Framework official website: https://quasar.dev
For latest releases and announcements, follow us on our Twitter account: @quasarframework
Ask questions at the official community Discord server: https://chat.quasar.dev
Ask questions at the official community forum: https://forum.quasar.dev
Please make sure to read the Contributing Guide before making a pull request. If you have a Quasar-related project/component/tool, add it with a pull request to this curated list!
Thank you to all the people who already contributed to Quasar!
Quasar is following Semantic Versioning 2.0.
Copyright (c) 2015-present Razvan Stoenescu
MIT License"
646,"ahmetuysal,nest-hackathon-starter","Hackathon starter project for NestJS. Includes Prisma, email verification, Passport-JWT authentication, Swagger and more. <!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->


<!-- ALL-CONTRIBUTORS-BADGE:END -->

This project contains boilerplate for creating APIs using Nest, a progressive Node.js framework for building efficient and scalable server-side applications.
It is mostly built to be used as a starting point in hackathons and implements common operations such as sign up, JWT authentication, mail validation, model validation and database access.
You can also look at my Angular Hackathon Starter template that shares the same contract with this API.
PostgreSQL with Prisma
JWT Authentication
Mail Verification
Mail Change
Password Reset
Request Validation
Customizable Mail Templates
Swagger API Documentation
Security Techniques
Logger
Make sure that you have Node.js(>= 10.13.0, except for v13) installed.
Clone this repository by running git clone https://github.com/ahmetuysal/nest-hackathon-starter.git &lt;YOUR_PROJECT_NAME&gt; or directly create your own GitHub repository using this template.
Move to the appropriate directory: cd &lt;YOUR_PROJECT_NAME&gt;.
Run yarn to install dependencies.
This template uses Postgres by default. If you want to use another database, follow instructions in the official Nest recipe on Prisma.
If you wish to use another database you will also have to edit the connection string on prisma/.env file accordingly.
Template includes three different environment options by default. Most of the time you will use the local
environment when developing and production environment on production. You will need to fill out corresponding
environment files in env directory.
A secret key is needed in encryption process. Generate a secret key using a service like randomkeygen.
Enter your secret key to config.ts file. You can also the change expiration time, default is 86400 seconds(1 day).
A delivery provider is required for sending mails with Nodemailer. I mostly use SendGrid to send mails, however, Nodemailer can work with any service with SMTP transport.
To get a SendGrid API key:
Create a free account from https://signup.sendgrid.com/
Confirm your account via the activation email and login.
Create an API Key with mail sending capability.
Enter your API key and sender credentials to config.ts file. Sender credentials are the sender name and sender mail that will be seen by your users.
Mail templates are highly customizable and heavily depend on configurations. Enter your project's information to config.ts. Urls are used as references in the templates. If your mail verification logic is independent from your front-end application, you can use API's own mail verification endpoint, e.g. http://localhost:3000/auth/verify, as mailVerificationUrl. Otherwise, send a HTTP GET request to verification endpoint with token added as a parameter named token, e.g, http://localhost:3000/auth/verify?token=__VERIFICATION_TOKEN__
Please refer to the official Prisma Migrate Guide to get more info about Prisma migrations.
Thanks goes to these wonderful people (emoji key):
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><sub><b>Ahmet Uysal</b></sub>üíª üìñ ‚ö†Ô∏è</td>
    <td align=""center""><sub><b>Dimitrios Lytras</b></sub>üíª</td>
  </tr>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the all-contributors specification. Contributions of any kind welcome!
Nest is an MIT-licensed open source project. If you'd like to join support Nest, please read more here.
Licenced under MIT License. Nest is also MIT licensed."
647,"paljs,prisma-tools","Prisma tools to help you generate CRUD system for GraphQL servers. Pal.js I am your friend in your next NodeJS, Prisma, GraphQL, React project
To install @paljs/cli on your machine you need to have the following tools installed:
Git - https://git-scm.com
Node.js - https://nodejs.org Please note the version should be >=12
Yarn - https://classic.yarnpkg.com/en/docs/install Node.js package manager, comes with Node.js.
Prisma - CLI Modern Database Access for TypeScript & Node.js
This command installs PalJS CLI globally on your machine.
Will get 7 questions to help cli create what you want.
Look to our examples contains here
1 Go inside your project dir
Open README.md file to see next steps.
To build your schema.prisma file look here
Didn't find something here? Look through the issues or simply drop us a line at &#104;&#101;&#108;&#108;&#111;&#64;&#112;&#97;&#108;&#106;&#115;&#46;&#99;&#111;&#109;."
648,"typescript-eslint,tslint-to-eslint-config","Converts your TSLint configuration to the closest possible ESLint equivalent. üöÄ. Converts your TSLint configuration to the closest reasonable ESLint equivalent.
üëâ Did you know TSLint is deprecated?
Hooray!
Use tslint-to-eslint-config to expedite migrating your project onto ESLint.
Consider taking a peek at the relevant documentation: ü§î
ESLint itself
typescript-eslint, which allows TypeScript files to be linted by ESLint
‚ö† Coming from Angular? Use angular-eslint instead to coordinate around this tool and others.
‚ö° (wow, so simple!) ‚ö°
The tslint-to-eslint-config command reads in any existing linter, TypeScript, and package configuration files, then creates an .eslintrc.js result based on them.
For any TSLint rules with corresponding ESLint equivalents, those equivalents will be used in the new configuration.
TSLint rules without ESLint equivalents will be wrapped with eslint-plugin-tslint.
Requires Node 14+ (LTS) and TSLint 5.18+
We strongly advise reading docs/FAQs.md before planning your conversion from TSLint to ESLint.
Each of these flags is optional:
comments: TypeScript configuration or file glob path(s) to convert TSLint rule flags to ESLint within.
config: Path to print the generated ESLint configuration file to.
editor: Path to an editor configuration file to convert linter settings within.
eslint: Path to an ESLint configuration file to read settings from.
package: Path to a package.json file to read dependencies from.
prettier: Add eslint-config-prettier to the plugins list.
tslint: Path to a TSLint configuration file to read settings from.
typescript: Path to a TypeScript configuration file to read TypeScript compiler options from.
Default: none
Indicates to convert from TSLint rule flags to ESLint inline comments.
Comments such as // tslint:disable: tslint-rule-name will be converted to equivalents like // eslint-disable eslint-rule-name.
If passed without arguments, respects the excludes, files, and includes in your TypeScript configuration.
If passed a single file path ending with .json, that is treated as a TypeScript configuration file describing with files to convert.
If passed any other arguments, those are treated as glob paths for file paths to convert:
Default: .eslintrc.js
Path to print the generated ESLint configuration file to.
The file extension of this path will be used to determine the format of the created file:
.js file paths will be written module.exports = ... JavaScript
Other file paths will default to JSON
Default: .vscode/settings.json
Path to an editor configuration file to convert settings settings within.
Any VS Code style editor settings for TSLint will be converted to their ESLint equivalents.
Default: --config's value
Path to an ESLint configuration file to read settings from.
The generated ESLint configuration file will include any settings imported from this file.
Default: package.json
Path to a package.json file to read dependencies from.
This will help inform the generated ESLint configuration file's env settings.
Default: false
Add eslint-config-prettier to the list of ESLint plugins.
We highly recommend you use Prettier for code formatting.
When --prettier isn't enabled:
If the output configuration already doesn't enable any formatting rules, it'll extend from eslint-config-prettier.
Otherwise, a CLI message will suggest running with --prettier.
Default: tslint.json
Path to a TSLint configuration file to read settings from.
This file is piped into TSLint's --print-config to generate the list of rules to enable in the generated ESLint configuration file.
Default: tsconfig.json
Path to a TypeScript configuration file to read TypeScript compiler options from.
This will help inform the generated ESLint configuration file's env settings.
You can use tslint-to-eslint-config programmatically via its exported functions.
See docs/API for details.
See the Code of Conduct and general development docs. üíñ"
649,"react-hook-form,resolvers","üìã Validation resolvers: Yup, Zod, AJV, Joi, Superstruct, Vest, class-validator, io-ts, typanion, Ajv and nope.. 
    
        
            
        
    


Performant, flexible and extensible forms with easy to use validation.



[![npm downloads](https://img.shields.io/npm/dm/@hookform/resolvers.svg?style=for-the-badge)](https://www.npmjs.com/package/@hookform/resolvers)
[![npm](https://img.shields.io/npm/dt/@hookform/resolvers.svg?style=for-the-badge)](https://www.npmjs.com/package/@hookform/resolvers)
[![npm](https://img.shields.io/bundlephobia/minzip/@hookform/resolvers?style=for-the-badge)](https://bundlephobia.com/result?p=@hookform/resolvers)



Dead simple Object schema validation.

TypeScript-first schema validation with static type inference

‚ö†Ô∏è Example below uses the valueAsNumber, which requires react-hook-form v6.12.0 (released Nov 28, 2020) or later.
A simple and composable way to validate data in JavaScript (or TypeScript).

The most powerful data validation library for JS.

Vest ü¶∫ Declarative Validation Testing.

Decorator-based property validation for classes.

‚ö†Ô∏è Remember to add these options to your tsconfig.json!
Validate your data with powerful decoders.

A small, simple, and fast JS validator

TypeScript-first schema validation with static type inference

Static and runtime type assertion library with no dependencies

The fastest JSON validator for Node.js and browser

Thanks goes to all our backers! [Become a backer].

    

Thanks goes to these wonderful organizations! [Contribute].

    

Thanks goes to these wonderful people! [Become a contributor].

    
"
650,"evanshortiss,env-var","Verification, sanitization, and type coercion for environment variables in Node.js. 

[![NPM version](https://img.shields.io/npm/v/env-var.svg?style=flat)](https://www.npmjs.com/package/env-var)
[![TypeScript](https://badgen.net/npm/types/env-var)](http://www.typescriptlang.org/)
[![License](https://badgen.net/npm/license/env-var)](https://opensource.org/licenses/MIT)
[![Coverage Status](https://coveralls.io/repos/github/evanshortiss/env-var/badge.svg?branch=master)](https://coveralls.io/github/evanshortiss/env-var?branch=master)
[![npm downloads](https://img.shields.io/npm/dm/env-var.svg?style=flat)](https://www.npmjs.com/package/env-var)
[![Known Vulnerabilities](https://snyk.io//test/github/evanshortiss/env-var/badge.svg?targetFile=package.json)](https://snyk.io//test/github/evanshortiss/env-var?targetFile=package.json)

Verification, sanitization, and type coercion for environment variables in Node.js and web applications. Supports TypeScript!




üèã Lightweight. Zero dependencies and just ~4.7kB when minified!
üßπ Clean and simple code, as shown here.
üö´ Fails fast if your environment is misconfigured.
üë©‚Äçüíª Friendly error messages and example values for better debugging experience.
üéâ TypeScript support provides compile time safety and better developer experience.
üì¶ Support for frontend projects, e.g in React, React Native, Angular, etc.
API: The full API set for env-var
Examples: Example usage of env-var
You can use env-var in both JavaScript and TypeScript!
For more examples, refer to the /example directory and EXAMPLE.md. A summary of the examples available in /example is written in the 'Other examples' section of EXAMPLE.md.
The examples above only cover a very small set of env-var API calls. There are many others such as asFloatPositive(), asJson() and asRegExp(). For a full list of env-var API calls, check out API.md.
You can also create your own custom accessor; refer to the 'extraAccessors' section of API.md.
Logging is disabled by default in env-var to prevent accidental logging of secrets.
To enable logging, you need to create an env-var instance using the from() function that the API provides and pass in a logger.
A built-in logger is available, but a custom logger is also supported.
Always exercise caution when logging environment variables!
The built-in logger will print logs only when NODE_ENV is not set to either prod or production.
This is an example output from the built-in logger generated by running example/logging.js:

If you need to filter env-var logs based on log levels (e.g. trace logging only) or have your own preferred logger, you can use a custom logging solution such as pino easily.
See the 'Custom logging' section of EXAMPLE.md for more information.
You can optionally use dotenv with env-var.
There is no coupling between dotenv and env-var, but you can easily use them both together. This loose coupling reduces package bloat and allows you to start or stop using one without being forced to do the same for the other.
See the 'dotenv' section of EXAMPLE.md for more information.
Contributions are welcomed and discussed in CONTRIBUTING.md. If you would like to discuss an idea, open an issue or a PR with an initial implementation.
@aautio
@avocadomaster
@caccialdo
@ChibiBlasphem
@DigiPie
@evanshortiss
@gabrieloczkowski
@hhravn
@ineentho
@itavy
@jerome-fox
@joh-klein
@Lioness100
@MikeyBurkman
@pepakriz
@rmblstrp
@shawnmclean
@todofixthis
@xuo"
651,"garronej,evt","üíßEventEmitter's typesafe replacement. 
    


    üíß<i>EventEmitter's typesafe replacement</i>üíß
    
    
    
      
    
    
        
    
    
      
    
    
      
    
    
      
    
    
      
    


Documentation

'evt' is intended to be a replacement for 'events'.
It enables and encourages functional programming and makes heavy use of typescript's type inference features to provide type safety while keeping things concise and elegant üç∏.
<b>Suitable for any JS runtime env (deno, node, old browsers, react-native ...)</b>
‚úÖ It is both a Deno and an NPM module. ( Achieved with Denoify ) 
‚úÖ No external dependencies (tsafe, run-exclusive and minimal-polyfills are all from the same author as EVT).
‚úÖ Makes it easy to work with events in React.  
Can be imported in TypeScript projects using version TypeScript >= 3.8 (February 20th, 2020) and in any plain JS projects.
NOTE: There is very few breaking changes from v1 to v2. Check them out.  

    
        
    
    
         
    
    
    
         
    
    
         
    
    
         
    



      
    Playground


There are a lot of things that can't easily be done with EventEmitter:
Enforcing type safety.
Removing a particular listener ( if the callback is an anonymous function ).
Adding a one-time listener for the next event that meets a condition.
Waiting (via a Promise) for one thing or another to happen.
Example: waiting at most one second for the next message, stop waiting if the socket disconnects.
Why would someone pick EVT over RxJS:  
EVT's learning curve is not as steep as RxJS's. 
Generates code that is easier to grasp for people not familiar with reactive programming.
EVT is an attempt to address all these points while trying to remain as accessible as EventEmitter.  


  Get Started



      


    Shop
"
652,"ghaiklor,type-challenges-solutions","Solutions for the collection of TypeScript type challenges with explanations. High-quality types can help improve projects‚Äô maintainability while avoiding potential bugs.
There are a bunch of outstanding type utility libraries may boosting your works on types, like ts-toolbelt, utility-types, SimplyTyped, etc, which you can already use.
We aim this project at helping you better understand how the type system works, writing your own utilities, or just having fun with the challenges.
We are also trying to form a community that you can ask questions and get answers you have faced in the actual world - they may become part of the challenges!
You can find anything you need on the website.
This repository is just a source code and you don‚Äôt need to interact with it from here, actually.
But, in case you came here to contribute, then you came to the right place.
Easy!
Just spread the word that there is a project called type-challenges that gives a lot of interesting challenges to scratch your head on weekends.
In case you didn‚Äôt find the solution, there is another project type-challenges-solutions that explains how to solve them step by step.
If you are wondering how can you contribute to the repository, there are several ways we would like to get your help:
Do you know Italian, Brazilian, Korean, Chinese, etc? We would like to have another language here, why not?
Did you find a typo in existing content and want to fix it? Please do so!
If you are Russian and want to improve something for Russian language - don't.
For these and others matter, if you want to hack in the repository, refer to our contributing guide.
They inspired me to create this project, so give them some credits, would you?
type-challenges by Anthony Fu
These outstanding people created most content here!
Huge thanks to them and any contribution they made.

CC-BY-4.0"
653,"samchon,safe-typeorm","TypeORM helper library enhancing safety in the compilation level. The safe-typeorm is a helper library for typeorm, enhancing safety in the compilation level.
When writing SQL query,
Errors would be detected in the compilation level
Auto Completion would be provided
Type Hint would be supported
You can implement App-join very conveniently
When SELECTing for JSON conversion
App-Join with the related entities would be automatically done
Exact JSON type would be automatically deduced
The performance would be automatically tuned
When INSERTing records
Sequence of tables would be automatically sorted by analyzing dependencies
The performance would be automatically tuned

For demonstration, I've taken ORM model classes from the Test Automation Program of this safe-typeorm. The ORM model classes in the Test Automation Program represents a BBS (built-in bullet system) and its ERD (Entity Relationship Diagram) is like upper image.
Also, below is the list of ORM model classes used in the Test Automation Program. If you want to see the detailed code of the ORM model classes, click the below link. Traveling the ORM model classes, you would understand how to define the ORM model classes and their relationships through this safe-typeorm.
Sections
BbsCategory: To demonstrate the recursive 1: N relationship
Articles
BbsArticle: To demonstrate lots of relationships
BbsReviewArticle: To demonstrate super & sub type definition
BbsArticleTag: To demonstrate JsonSelectBuilder.Output.Mapper
BbsArticleContent: To demonstrate M: N relationship
BbsArticleContentFilePair: To resolve the M: N relatioship
Comments
BbsComment: To demonstrate M: N relationship
BbsCommentFilePair: To resolve the M: N relatioship
Miscellaneous

In safe-typeorm, you can write SQL query much safely and conveniently. 
If you take a mistake when writing an SQL query, the error would be occured in the compilation level. Therefore, you don't need to suffer by runtime error by mistaken SQL query. Also, if you're writing wrong SQL query, the IDE (like VSCode) will warn you with the red underlined emphasizing, to tell you there can be an SQL error.
Also, safe-typeorm supports type hinting with auto-completion when you're writing the SQL query. Therefore, you can write SQL query much faster than before. Of course, the fast-written SQL query would be ensured its safety by the compiler and IDE.

With the AppJoinBuilder class, you can implement application level joining very easily. 
Also, grammer of the AppJoinBuilder is exactly same with the JoinQueryBuilder. Therefore, you can swap JoinQueryBuilder and AppJoinBuilder very simply without any cost. Thus, you can just select one of them suitable for your case.
Furthermore, you've determined to using only the AppJoinBuilder, you can configure it much safely. With the AppJoinBuilder.initialize() method, you've configure all of the relationship accessors, and it prevents any type of ommission by your mistake.

In safe-typeorm, when you want to load DB records and convert them to a JSON data, you don't need to write any SELECT or JOIN query. You also do not need to consider any performance tuning. Just write down the ORM -&gt; JSON conversion plan, then safe-typeorm will do everything.
The JsonSelectBuilder is the class doing everything. It will analyze your JSON conversion plan, and compose the JSON conversion method automatically with the exact JSON type what you want. Furthermore, the JsonSelectBuilder finds the best (applicataion level) joining plan by itself, when being constructed.
Below code is an example converting ORM model class instances to JSON data with the JsonSelectBuilder. As you can see, there's no special script in the below code, but only the conversion plan is. As I've mentioned, JsonSelectBuilder will construct the exact JSON type by analyzing your conversion plan. Also, the performance tuning would be done automatically. 
Therefore, just enjoy the JsonSelectBuilder without any worry.
When you want to execute INSERT query for lots of records of plural tables, you've to consider dependency relationships. Also, you may construct extended SQL query manually by yourself, if you're interested in the performance tuning.
However, with the InsertCollection class provided by this safe-typeorm, you don't need to consider any dependcy relationship. You also do not need to consider any performance tuning. The InsertCollection will analyze the dependency relationships and orders the insertion sequence automatically. Also, the InsertCollection utilizes the extended insertion query for the optimizing performance.
I've awaited next version of the typeorm for many years, and I can't wait no more.
So I've decided to implement the next version by myself. I'd wanted to contribute to this typeorm after the next version implementation has been completed, but it was not possible by critical change on the relationship definition like Has.OneToMany or Belongs.ManyToOne. Therefore, I've published the next version as a helper library of thetypeorm.
I dedicate this safe-typeorm to the typeorm. If developers of the typeorm accept the critical change on the relationship definition, it would be the next version of the typeorm. Otherwise they reject, this safe-typeorm would be left as a helper library like now.
https://github.com/samchon/nestia
nestia is another library what I've developed, automatic SDK generator for the NestJS backend server. With those safe-typeorm and nestia, you can reduce lots of costs and time for developing the backend server.
When you're developing a backend server using the NestJS, you don't need any extra dedication, for delivering the Rest API to the client developers, like writing the swagger comments. You just run the nestia up, then nestia would generate the SDK automatically, by analyzing your controller classes in the compliation and runtime level.
With the automatically generated SDK through the nestia, client developer also does not need any extra work, like reading swagger and writing the duplicated interaction code. Client developer only needs to import the SDK and calls matched function with the await symbol.
https://www.archisketch.com/
I have special thanks to the Archidraw, where I'm working for.
The Archidraw is a great IT company developing 3D interior editor and lots of solutions based on the 3D assets. Also, the Archidraw is the first company who had adopted safe-typeorm on their commercial backend project, even safe-typeorm was in the alpha level."
654,"charliesbot,react-native-media-controls","A sweet UI component to manipulate your media. Strongly typed.. A sweet UI component to manipulate your media. Strongly typed using Typescript.

Refer to the example folder to find an implementation of this project"
655,"nuxt-community,composition-api","Composition API hooks for Nuxt.. üèóÔ∏è Nuxt Composition API
Composition API hooks for Nuxt



    


    


    


    


    


    



@nuxtjs/composition-api provides a way to use the Vue 3 Composition API in with Nuxt-specific features.
Nuxt Bridge has now been released in beta. It has full composition API support and it's strongly recommended to migrate from @nuxtjs/composition-api, if possible, by following the steps in the Bridge migration guide. Feedback welcome at https://github.com/nuxt-community/composition-api/discussions/585.
üèÉ Fetch: Support for the new Nuxt fetch() in v2.12+
‚ÑπÔ∏è Context: Easy access to router, app, store within setup()
üó∫Ô∏è Head: Interact directly with your vue-meta properties within setup()
‚ú® Automatic hydration: Drop-in replacement for ref with automatic SSR stringification and hydration (ssrRef)
üìù SSR support: Allows using the Composition API with SSR
üí™ TypeScript: Written in TypeScript

Read Documentation


Contributions are very welcome.
Clone this repo
Install dependencies and build project
Tip: You can also use yarn link to test the module locally with your Nuxt project.
MIT License - Copyright &copy; Daniel Roe"
745,"ExpDev07,coronavirus-tracker-api","ü¶† A simple and fast (< 200ms) API for tracking the global coronavirus (COVID-19, SARS-CoV-2) outbreak. It's written in python using the üî• FastAPI framework. Supports multiple sources!. 
    Coronavirus Tracker API


Provides up-to-date data about Coronavirus outbreak. Includes numbers about confirmed cases, deaths and recovered.
Support multiple data-sources.












Live global stats (provided by fight-covid19/bagdes) from this API:



Specify source parameter with ?source=nyt. NYT also provides a timeseries! To view timelines of cases by US counties use ?source=nyt&timelines=true
JHU (our main data provider) no longer provides data for amount of recoveries, and as a result, the API will be showing 0 for this statistic. Apologies for any inconvenience. Hopefully we'll be able to find an alternative data-source that offers this.
Currently 3 different data-sources are available to retrieve the data:
jhu - https://github.com/CSSEGISandData/COVID-19 - Worldwide Data repository operated by the Johns Hopkins University Center for Systems Science and Engineering (JHU CSSE).
csbs - https://www.csbs.org/information-covid-19-coronavirus - U.S. County data that comes from the Conference of State Bank Supervisors.
nyt - https://github.com/nytimes/covid-19-data - The New York Times is releasing a series of data files with cumulative counts of coronavirus cases in the United States. This API provides the timeseries at the US county level.
jhu data-source will be used as a default source if you don't specify a source parameter in your request.
All endpoints are located at coronavirus-tracker-api.herokuapp.com/v2/ and are accessible via https. For instance: you can get data per location by using this URL:
https://coronavirus-tracker-api.herokuapp.com/v2/locations
You can open the URL in your browser to further inspect the response. Or you can make this curl call in your terminal to see the prettified response:
Consume our API through our super awesome and interactive SwaggerUI (on mobile, use the mobile friendly ReDocs instead for the best experience).
The OpenAPI json definition can be downloaded at https://coronavirus-tracker-api.herokuapp.com/openapi.json
Getting the data-sources that are currently available to Coronavirus Tracker API to retrieve the data of the pandemic.
Sample response
Getting latest amount of total confirmed cases, deaths, and recovered.
Query String Parameters
Sample response
Getting latest amount of confirmed cases, deaths, and recovered per location.
Path Parameters
Query String Parameters
Sample response
Query String Parameters
Sample response
Response definitions
Parameter: country_code
Getting data for the Country specified by the country_code parameter, in this case Italy - IT
Sample Response
Parameter: source
Getting the data from the data-source specified by the source parameter, in this case csbs
Sample Response
Parameter: timelines
Getting the data for all the locations including the daily tracking of confirmed cases, deaths and recovered per location.
Explore the response by opening the URL in your browser https://coronavirus-tracker-api.herokuapp.com/v2/locations?timelines=1 or make the following curl call in your terminal:
NOTE: Timelines tracking starts from day 22nd January 2020 and ends to the last available day in the data-source.
These are the available API wrappers created by the community. They are not necessarily maintained by any of this project's authors or contributors.
CovidPHP by @o-ba.
Go-corona by @itsksaurabh.
COVID19Py by @Kamaropoulos.
Coronavirus by @mew.
jhucsse.covid by @Sem1084.
covid19-data-ruby by @jaerodyne.
lua-covid-data by @imolein.
You will need the following things properly installed on your computer.
Python 3 (with pip)
git clone https://github.com/ExpDev07/coronavirus-tracker-api.git
cd coronavirus-tracker-api
Make sure you have python3.8 installed and on your PATH.
with pipx $ pipx install pipenv
with Homebrew/Linuxbrew $ brew install pipenv
with pip/pip3 directly $ pip install --user pipenv
Create virtual environment and install all dependencies $ pipenv sync --dev
Activate/enter the virtual environment $ pipenv shell
And don't despair if don't get the python setup working on the first try. No one did. Guido got pretty close... once. But that's another story. Good luck.
For a live reloading on code changes.
pipenv run dev
Without live reloading.
pipenv run start
Visit your app at http://localhost:8000.
Alternatively run our API with Docker.
Pipfile.lock will be automatically updated during pipenv install.
Our Docker image is based on tiangolo/uvicorn-gunicorn-fastapi/.
Run with docker run or docker-compose
If a full gunicorn deployment is unnecessary or impractical on your hardware consider using our single instance Uvicorn based Dockerfile.
Additional developer commands can be run by calling them with the python invoke task runner.
Thanks goes to these wonderful people (emoji key):
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><sub><b>ExpDev</b></sub>üíª üìñ üöß</td>
    <td align=""center""><sub><b>bjarkimg</b></sub>üí¨</td>
    <td align=""center""><sub><b>Bost</b></sub>üìñ</td>
    <td align=""center""><sub><b>GRIBOK</b></sub>üíª ‚ö†Ô∏è</td>
    <td align=""center""><sub><b>Oliver Thamm</b></sub>üìñ</td>
    <td align=""center""><sub><b>Mauro M.</b></sub>üìñ</td>
    <td align=""center""><sub><b>JKSenthil</b></sub>üíª üìñ ‚ö†Ô∏è</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>SeanCena</b></sub>üíª üìñ ‚ö†Ô∏è</td>
    <td align=""center""><sub><b>Abdirahiim Yassin </b></sub>üìñ üîß üì¶</td>
    <td align=""center""><sub><b>Dar√≠o Here√±√∫</b></sub>üìñ</td>
    <td align=""center""><sub><b>Oliver</b></sub>üìñ</td>
    <td align=""center""><sub><b>carmelag</b></sub>üìñ</td>
    <td align=""center""><sub><b>Gabriel</b></sub>üíª üöá ‚ö†Ô∏è üìñ</td>
    <td align=""center""><sub><b>Kodjo Laurent Egbakou</b></sub>üìñ üîß üì¶</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Turreted</b></sub>üíª</td>
    <td align=""center""><sub><b>Ibtida Bhuiyan</b></sub>üíª üìñ</td>
    <td align=""center""><sub><b>James Gray</b></sub>üíª</td>
    <td align=""center""><sub><b>Nischal Shankar</b></sub>üíª üìñ</td>
  </tr>
</table>

<!-- markdownlint-enable -->
<!-- prettier-ignore-end -->
<!-- ALL-CONTRIBUTORS-LIST:END -->

See LICENSE.md for the license. Please link to this repo somewhere in your project :)."
746,"HolyBugx,HolyTips","A Collection of Notes, Checklists, Writeups on Bug Bounty Hunting and Web Application Security..   HolyTips  
A Collection of Notes, Checklists, Writeups on Bug Bounty Hunting and Web Application Security.


  
  
    
  
  
    
  
"
747,"smapiot,piral","Framework for next generation web apps using micro frontends. :rocket:. Easily build a next generation web application using microfrontends. Piral enables you to create a modular frontend application that is extended at runtime with decoupled modules called pilets leveraging a microfrontend architecture.
A pilet can be developed independently and ships with the necessary code, as well as all other relevant assets. Pilets are as independent of the host application as you want them to be - making them transferrable between different applications.
This makes Piral an ideal foundation for a mid-sized to large-scale applications developed by distributed teams.
:zap: A pilet is capable of dynamically extending other pilets or using such extension slots itself.
:zap: A pilet can provide or use shared dependencies from other pilets.
:zap: A pilet is isolated (developed and handled) and will never destroy your application.
:zap: A pilet can be developed with any technology using a standard IDE.
:zap: A pilet can be updated and published within seconds.
:zap: A pilet can be rolled out or disabled dynamically to create self-forming applications.
:zap: A pilet can be debugged seamlessly just as if you write a monolith.
üì¢ We are hiring! - work with us on Piral, its ecosystem and our users
üåç Website - learn more about Piral
üìñ Documentation - everything to get started and master micro frontends
üâê Help translating Piral! - making PRs in the documentation branch
üêû Issue Tracker - report bugs or suggest new features
üó®  Forums - use the community support on StackOverflow
üë™ Community Chat - ask questions and provide answers in our Gitter room
Piral itself is developed as a monorepo. As such this repository may contain an overwhelming amount of information.
Our recommendation is to start at the documentation available at docs.piral.io. Working through the available tutorials will give you the necessary information in the best possible order.
While the GitHub issues may be used in case of questions, we would prefer general usage questions to be raised either in our Gitter chat or at StackOverflow.
Be sure to check our FAQ and the official tutorials upfront!
The main purpose of this repository is to continue to evolve Piral and its core ecosystem, making it faster, more powerful, and easier to use. Development of Piral happens in the open on GitHub, and we are grateful to the community for contributing bugfixes, ideas, and improvements.
Read below to learn how you can take part in improving Piral.
docs contains the (user) documentation
src has the sources for all the developed packages, samples, and pages
test contains the test setup and (in the future) system tests
tools has some of the internal tooling for building the different components
Each subdirectory contains another README.md with more information regarding the contents of the specific folder.
We adopted a Code of Conduct that we expect project participants to adhere to. Please read the full text so that you can understand what actions will and will not be tolerated.
Read our contributing guide to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to Piral.
To help you get your feet wet and get you familiar with our contribution process, we have a list of good first issues that contain bugs which have a relatively limited scope. This is a great place to get started.
Piral is released using the MIT license. For more information see the license file."
748,"Yooooomi,your_spotify","Self hosted Spotify tracking dashboard. 
  


YourSpotify is a self-hosted application that tracks what you listen and offers you a dashboard to explore statistics about it!
It's composed of a web server which polls the Spotify API every now and then and a web application on which you can explore your statistics.
Prerequisites
Installation
Using docker
Installing locally
Environment
CORS
Creating the Spotify application
Importing past history
Supported import methods
Privacy data
Full privacy data
Troubleshoot
FAQ
External guides
Contributing
Sponsoring
You have to own a Spotify application ID that you can create through their dashboard.
You need to provide the Server environment the public AND secret key of the application (cf. Installation).
You need to provide an authorized redirect URI to the docker-compose file.
A tutorial is available at the end of this readme.
Follow the docker-compose-example.yml to host your application through docker.
services:
  server:
    image: yooooomi/your_spotify_server
    restart: always
    ports:
      - ""8080:8080""
    links:
      - mongo
    depends_on:
      - mongo
    environment:
      API_ENDPOINT: http://localhost:8080 # This MUST be included as a valid URL in the spotify dashboard (see below)
      CLIENT_ENDPOINT: http://localhost:3000
      SPOTIFY_PUBLIC: your_spotify_client_id
      SPOTIFY_SECRET: your_spotify_secret
  mongo:
    container_name: mongo
    image: mongo:4.4.8
    volumes:
      - ./your_spotify_db:/data/db
web:
    image: yooooomi/your_spotify_client
    restart: always
    ports:
      - ""3000:3000""
    environment:
      API_ENDPOINT: http://localhost:8080
Some ARM-based devices might have trouble with Mongo >= 5. I suggest you use the image mongo:4.4.
You can follow the instructions here. Note that you will still have to do the steps below.
You can edit the CORS for the server:
all will allow every source.
origin1,origin2 will allow origin1 and origin2.
For YourSpotify to work you need to provide a Spotify application public AND secret to the server environment.
To do so, you need to create a Spotify application here.
Click on Create a client ID.
Fill out all the informations.
Copy the public and the secret key into your docker-compose file under the name of SPOTIFY_PUBLIC and SPOTIFY_SECRET
respectively.
Add an authorized redirect URI corresponding to your server location on the internet adding the suffix /oauth/spotify/callback.
use the EDIT SETTINGS button on the top right corner of the page.
add your URI under the Redirect URIs section.
i.e: http://localhost:8080/oauth/spotify/callback or http://home.mydomain.com/your_spotify_backend/oauth/spotify/callback
Do not forget to hit the save button at the bottom of the popup.
Once you have created your application, Spotify wants you to register the users that will be able to access the application. (You don't need to do that for the account that created the application)
Click the Users and access button
Click the Add new user button
Enter the required information, a name and the email the user's spotify account has been created with.
(Optional) You can Request extension if you do not want to register the users by hand.
By default, YourSpotify will only retrieve data for the past 24 hours once registered. This is a technical limitation. However, you can import previous data by two ways.
The import process uses cache to limit requests to the Spotify API. By default, the cache size is unlimited, but you can limit is with the MAX_IMPORT_CACHE_SIZE env variable in the server.
Takes a maximum of 5 days.
Only gets you the last year of history.
Request your privacy data at Spotify to have access to your history for the past year here.
Head to the Settings page and choose the Account data method.
Input your files starting with StreamingHistoryX.json.
Start your import.
Takes a maximum of 30 days.
Gets you the whole history since the creation of your account.
Request your Full privacy data to have access to your history data since the creation of the account here.
Head to the Settings page and choose the Extended streaming history method.
Input your files starting with endsongX.json.
Start your import.
An import can fail:
If the server reboots.
If a request fails 10 times in a row.
A failed import can be retried in the Settings page. Be sure to clean your failed imports if you do not want to retry it as it will remove the files used for it.
It is safer to import data at account creation. Though YourSpotify detects duplicates, some may still be inserted.
How can I block new registrations?
From an admin account, go to the Settings page and hit the Disable new registrations button.
Songs don't seem to synchronize anymore.
This can happen if you revoked access on your Spotify account. To re-sync the songs, go to settings and hit the Relog to Spotify button.
The web application is telling me it cannot retrieve global preferences.
This means that your web application can't connect to the backend. Check that your API_ENDPOINT env variable is reachable from the device you're using the platform from.
A specific user does not use the application in the same timezone as the server, how can I set a specific timezone for him?
Any user can set his proper timezone in the settings, it will be used for any computed statistics. The timezone of the device will be used for everything else, such as song history.
BreadNet installation tutorial
If you have any issue or any idea that could make the project better, feel free to open an issue. I'd love to hear about new ideas or bugs you are encountering.
I work on this project on my spare time and try to fix issues as soon as I can. If you feel generous and think this project and my investment are worth a few cents, you can consider sponsoring it with the button on the right, many thanks."
749,"jrieke,traingenerator","üßô A web app to generate template code for machine learning. 
    Traingenerator



    <strong>üßô&nbsp; A web app to generate template code for machine learning ‚ú®</strong>



    <!--  -->
    
    <!--  -->
    <!--  -->
    




    




    üéâ Traingenerator is now live! üéâ
    
    Try it out: 
    https://traingenerator.streamlitapp.com/


<!--
<strong>
    Try it out: 
    >>> https://traingenerator.streamlitapp.com/ <<<</strong>

-->


Generate custom template code for PyTorch & sklearn, using a simple web UI built with streamlit. Traingenerator offers multiple options for preprocessing, model setup, training, and visualization (using Tensorboard or comet.ml). It exports to .py, Jupyter Notebook, or  Google Colab. The perfect tool to jumpstart your next machine learning project!

For updates, follow me on Twitter.


You can add your own template in 4 easy steps (see below), without changing any code 
in the app itself. Your new template will be automatically discovered by Traingenerator 
and shown in the sidebar. That's it! üéà
Want to share your magic? üßô PRs are welcome! Please have a look 
at CONTRIBUTING.md. 
Some ideas for new templates: Keras/Tensorflow, Pytorch Lightning, object detection, 
segmentation, text classification, ...

Create a folder under ./templates. 
The folder name should be the task that your template solves (e.g. 
Image classification). Optionally, you can add a framework name (e.g. 
Image classification_PyTorch). Both names are automatically shown in the first two 
dropdowns in the sidebar (see image). 
‚ú® Tip: Copy the example template to get started more quickly. 
Add a file sidebar.py to the folder (see example). 
It needs to contain a method show(), which displays all template-specific streamlit 
components in the sidebar (i.e. everything below Task) and returns a dictionary of 
user inputs.
Add a file code-template.py.jinja to the folder (see example). 
This Jinja2 template is used 
to generate the code. You can write normal Python code in it and modify it 
(through Jinja) based on the user inputs in the sidebar (e.g. insert a parameter 
value from the sidebar or show different code parts based on the user's selection). 
Optional: Add a file test-inputs.yml to the folder (see example). 
This simple YAML file should define a few possible user inputs that can be used for 
testing. If you run pytest (see below), it will automatically pick up this file, render 
the code template with its values, and check that the generated code runs without 
errors. This file is optional ‚Äì but it's required if you want to contribute your 
template to this repo. 
Note: You only need to install Traingenerator if you want to contribute or run it 
locally. If you just want to use it, go here.
Optional: For the ""Open in Colab"" button to work you need to set up a Github repo 
where the notebook files can be stored (Colab can only open public files if 
they are on Github). After setting up the repo, create a file .env with content:
If you don't set this up, the app will still work but the ""Open in Colab"" button 
will only show an error message.
Make sure to run always from the traingenerator dir (not from the app dir), 
otherwise the app will not be able to find the templates.
First, install heroku and login. 
To create a new deployment, run inside traingenerator:
To update the deployed app, commit your changes and run:
Optional: If you set up a Github repo to enable the ""Open in Colab"" button (see above),
you also need to run:
First, install pytest and required plugins via:
To run all tests: 
Note that this only tests the code templates (i.e. it renders them with different 
input values and makes sure that the code executes without error). The streamlit app 
itself is not tested at the moment.
You can also test an individual template by passing the name of the template dir to 
--template, e.g.:
The mage image used in Traingenerator is from 
Twitter's Twemoji library and 
released under Creative Commons Attribution 4.0 International Public License."
750,"treefrogframework,treefrog-framework","TreeFrog Framework : High-speed C++ MVC Framework for Web Application. TreeFrog Framework is a high-speed and full-stack web application framework
based on C++ and Qt, which supports HTTP and WebSocket protocol. Web
applications can run faster than that of lightweight programming language.
In application development, it provides an O/R mapping system and template
system on an MVC architecture, aims to achieve high productivity through the
policy of convention over configuration.
High performance - Highly optimized Application server engine of C++
O/R mapping - Conceals complex and troublesome database accesses
Template system - ERB-like template engine adopted
Supports for many DB - MySQL, PostgreSQL, ODBC, SQLite, Oracle, DB2,
InterBase, MongoDB, Memcached and Redis.
WebSocket support - Providing full-duplex communications channels
Generator - Generates scaffolds and Makefiles automatically
Supports various response types - JSON, XML and CBOR
Multi-platform - Windows, macOS, Linux, etc. Write once, compile anywhere.
OSS - New BSD License
TreeFrog uses the qt qmake build system.
http://www.treefrogframework.org/
https://github.com/treefrogframework/treefrog-framework/releases
Get additional information:
http://treefrogframework.github.io/treefrog-framework/
http://api-reference.treefrogframework.org/annotated.html
Discussion group for TreeFrog Framework:
https://groups.google.com/forum/#!forum/treefrogframework
https://hub.docker.com/r/treefrogframework/treefrog/
Docker files are stored in the 'dockerfiles' directory of the 'docker' branch, here.
TreeFrog Framework uses the 10gen-supported C driver to communicate with the
MongoDB server. The source code of the driver is included in this package.
See the README also."
751,"ArthurSonzogni,Diagon","Interactive ASCII art diagram generators. :star2:. Diagon is an interactive interpreter. It transforms markdown-style expression
into an ascii-art representation.
It is written in C++ and use WebAssembly, HTML and CSS to make a Web
Application.
We also expose a command line interface, for personal and 3rd party tools.
Diagon is also usable as a command line tool.
For instance:
To use it, you can either compile it from source or use the precompiled binaries published on the snapstore:
</details>
<details>
   <summary>Tree</summary>

Input

</details>

<details>
   <summary>GraphDAG</summary>

Input:

Output:

Input:

Output

Input:

Output:

</details>

<details>
   <summary>Flowchart</summary>

Input:

Output:

</details>

Binaries using multiple formats are provided in the release section.
This depends on cmake, uuid-dev and libboost-graph-dev
On Linux:
This project has been possible thanks to these great projects
WebAssembly"
752,"cybersecsi,HOUDINI","Hundreds of Offensive and Useful Docker Images for Network Intrusion. The name says it all.. HOUDINI is a curated list of Network Security related Docker Images for Network Intrusion purposes. A lot of images are created and kept updated through our RAUDI repository. Pretty dope, eh?




  


To use HOUDINI, click the link below: 
https://houdini.secsi.io
Other than listing a lot of tools we provide docker run commands for every one of them and useful Cheatsheets for some of them (You can also contribute by suggesting new commands to add). 

  


HOUDINI is created using:
And using the following packages:
A tool is composed by:
A markdown file in the /tools folder
An entry into a Javascript file (in /webapp/src/config/tools.ts)
We want people to contribute, so we created a script to automate the process of adding a new tool. All you have to do is add the description and (optionally) the cheatsheet. The command is bootstrap, here is an example:

  


To use the boostrap command you have to:
yarn install in the main directory
yarn run bootstrap in the main directory
Add the mandatory informations to add a new tool
The mandatory informations are the following:
Fancy name: The long version name of the tool
Docker Image: The Docker Image (in the format repo/image)
Official Doc: A link to the official documentation for the tool
Run Command: The run command
The last thing you have to do is to add the description and (optionally) the cheatsheet.
This section provides a set of commands to run the application locally. 
PLEASE use yarn over npm
This is a React based application. Before running it you have to install all the needed packages with the following command:
To build the app you have to run:
To execute the app locally you have to run:
Please note that the folder used for showing the Markdown files in the React application is not the /tools folder, but a directory inside the source code of the React app itself (/webapp/src/_tools). Every time you run yarn start from the main directory the /tools folder is copied in /webapp/src/_tools. So if you add a new tool while the app is running it won't show up until you update the /webapp/src/_tools folder. For this reason a command has been added to ease this work, you can easily copy the /tools folder by running the following command while in the main directory:
Here is the current roadmap:
[x] Responsive Design
[x] Add copy botton in &lt;code&gt; tags (make it a component)
[x] Check bootstrap command on Linux systems
[x] Fix margin, padding in tool pages to make it more readable
[x] Add tools (reach at least 100)
[x] Add labels [MUST]
[ ] Define customizable fields [COULD]
[ ] Add toolbox for customizing commands [COULD]
[ ] Add webapp snippet (to keep interesting commands) [COULD]
[ ] Add bashify script [COULD]
Everyone is invited to contribute!
We created a very detailed document to describe how to contribute to HOUDINI.
HOUDINI is an idea of Gaetano Perrone and is proudly developed @SecSI by:
HOUDINI is an open-source and free software released under the GNU GPL v3."
753,"holtwick,briefing","üîÆ Secure direct video group chat. Choose your language: en | de
 Privacy is the central idea behind this project. Only open technologies (such as WebRTC) are used, which work with all modern browsers. Thus, no installation of additional software is required, and the approach remains future-proof.
A conversation can be started immediately for free via Brie.fi/ng. A free iOS app is also available.
Features such as desktop sharing, text chat and simple invitation links are available. More can be easily added with knowledge of Javascript and Vue.
Download or clone the project to your local machine, and you are ready to go:
A WebRTC video chat application requires multiple components to work properly. Briefing includes everything you need to get started: User Interface, Signaling and STUN. 
Learn more about it in the ‚Üí documentation.

To use Briefing for your own project, the following options for all levels of experience are available:
create a room via Brie.fi/ng and copy the link into your website.
embed Briefing via 'frame' into your own site. Use the handy configurator.
start Briefing on your own server e.g. via Docker or use a service like fly.io, render.com, Google Cloud, AWS, Azure ... you name it.
customize the source code according to your needs. See the documentation for details.
Learn more at ‚Üí installation.
In general Briefing is free, however a commercial license is also available, which I ask you to purchase, especially for ""white labeling"" applications. Otherwise, I appreciate support for the project through sponsorship via GitHub to support further development. Thanks.
The terms of the EUPL (European Union Public License 1.2) must be followed, which are similar to those of the AGPL. Modifications must also be free and made available to the public under the same license. For a quick overview of the license, see https://choosealicense.com/licenses/eupl-1.2/. This license is also available in the European Community languages.
For commercial use or closed source projects / ""white labeling"" I offer a license with the following conditions:
Worldwide, non-exclusive, non-transferable, non-sublicensable license of Briefing, as found at https:// github.com/holtwick/briefing/, for use in purchaser's products, as long as the resulting software is not in competition with Briefing itself. Any liability is excluded. The law of the Federal Republic of Germany applies exclusively.
The one-time fee is 499 EUR net. Please contact license@holtwick.de or buy directly via Paddle.
My name is Dirk Holtwick. I am an independent software developer based in Germany. Learn more about my work at holtwick.de.
Contributions are always welcome. The best place to start is to add or respond to Issues.
To add or correct translations, start here: ‚Üí locales.
Full migration to Vue3 and Typescript. Localization using vue-i18n standard library. Modernization of many parts of the project. See ‚Üí blog post (de)
Introduced Typescript support. Migration to Vite. Replacing socket.io with reliable Zerva. Docker images. Reduction to the essential parts of the project. See ‚Üí blog post (de)
Based on Webpack and had examples for iOS, Android, Windows, and Electron, as well as a separate signal server. It also offered background blur and image backgrounds via Unsplash. All of these implementations were deprecated. However, the code is still accessible via the legacy branch, but is no longer maintained or supported.
This document is also available in German language."
754,"Rafostar,gnome-shell-extension-cast-to-tv","Cast files to Chromecast, web browser or media player app over local network.. 



Cast videos, music and pictures to:
Chromecast devices
Any device with web browser (other PC or smartphone)
Media player app (eg. MPV, VLC)
Supports external and built-in subtitles (along with custom fansubs)
Chromecast remote controller (control playback from gnome top bar)
Play on other device using integrated web player and change content without refreshing web page
Transcode videos to supported format on the fly
Optional VAAPI/NVENC video encoding for low cpu usage
Stream music with visualizations (requires fast cpu)
Nautilus right click menu integration
Media playlist with ""Drag and Drop"" support
Playercast app turns your media player on any other Linux device (e.g. HTPC, Raspberry Pi) into a media receiver that works similarly to Chromecast.
Expand extension functionality through Add-ons:
Links Add-on - cast media from web pages
Desktop Add-on - desktop streaming
Installation from source code is described in the wiki.
After enabling the extension, remember to install all requirements and npm dependencies.
Here is a list of required programs that Cast to TV depends on:
npm (for dependencies installation)
nodejs (v8.6 or newer)
ffmpeg (with ffprobe)
Please make sure you have all of the above installed.
nautilus-python (for nautilus integration)
Nautilus extension is included in Cast to TV (since version 9).
You can optionally use hardware VAAPI or NVENC encoding. This of course requires working drivers. More info and how to install hardware acceleration here.
Having enabled universe repo run:
Ubuntu is shipping wrong npm version for some reason.
Update it and clear bash cache:
Having enabled rpm fusion repos run:
Ubuntu: sudo apt install python3-nautilus python3-gi
Fedora: sudo dnf install nautilus-python python3-gobject
Arch: sudo pacman -S python-nautilus python-gobject
Ubuntu releases older than 20.04 require python-nautilus instead of python3-nautilus.
Older Fedora releases additionally require pygobject3.
Nautilus integration is disabled by default. Remember to turn it on in this extension settings.
Before using extension you also must install some additional npm packages.
You should also repeat this step when updating the extension to the new version, otherwise you may not have newly added or updated dependencies.
In version 9 and later this can be done from extension preferences.
Go to Cast Settings -&gt; Modules and click Install npm modules button.
You must have npm and nodejs installed prior to this step.
Run below code in terminal:
Detailed instructions related to configuration and using the extension are in the wiki.
You can also find some usage examples and firewall config there.
Check out FAQ, before asking questions.
Preferred translation method is to use Cast to TV Crowdin web page.
Crowdin does not require any additional tools and translating can be done through web browser. You can login using GitHub account or create a new one. Only I can add new languages to this project, so if your language is not available, please contact me first (you can leave comment here).
Alternatively you can still use Makefile and tools like Poedit to generate translations:
make potfile - generates updated POT file.
make mergepo - merges changes from POT file into all PO files.
make compilemo - compiles translation files.
After compiling restart gnome-shell for changes to be applied.
Special thanks go to Simon Kusterer (xat) for developing chromecast-player and Sam Potts for making Plyr, an awesome HTML5 video player.
Many thanks to Rendy Anthony for helping me make Nautilus integration based on his nautilus-cast extension.
Many thanks to everyone involved in translating this extension either through GitHub or Crowdin.
If you like my work please support it by buying me a cup of coffee :-)"
842,"naver,fe-news","FE Í∏∞Ïà† ÏÜåÏãù ÌÅêÎ†àÏù¥ÏÖò Îâ¥Ïä§Î†àÌÑ∞. 
FE NewsÎäî ÎÑ§Ïù¥Î≤Ñ FE ÏóîÏßÄÎãàÏñ¥Îì§Ïù¥ ÏóÑÏÑ†Ìïú ÏñëÏßàÏùò FE Î∞è Ï£ºÏöîÌïú Í∏∞Ïà† ÏÜåÏãùÎì§ÏùÑ ÌÅêÎ†àÏù¥ÏÖò Ìï¥ Í≥µÏú†ÌïòÎäî Í≤ÉÏùÑ Î™©ÌëúÎ°ú Ìï©ÎãàÎã§.
Ïù¥Î•º ÌÜµÌï¥ Íµ≠ÎÇ¥ Í∞úÎ∞úÏûêÎì§ÏóêÍ≤å ÏßÄÏãù Í≥µÏú†Ïóê ÎåÄÌïú Í∞ÄÏπò Ïù∏ÏãùÍ≥º ÏÑ±Ïû•Ïóê ÎèÑÏõÄÏùÑ Ï£ºÍ≥†Ïûê Ìï©ÎãàÎã§. :grin:
ÎÑ§Ïù¥Î≤Ñ Front-end Ï°∞ÏßÅÏù¥ Ïñ¥Îñ§ ÏùºÏùÑ ÌïòÍ≥†, Í∞úÎ∞úÏûêÎì§Ïù¥ Ïñ¥ÎñªÍ≤å ÏÑ±Ïû•ÌïòÍ≥† ÏûàÎäîÏßÄ Í∂ÅÍ∏àÌïòÏã†Í∞ÄÏöî?
Î∞úÌñâÏÜåÏãùÏùÄ /issues Ìè¥Îçî ÎÇ¥Ïùò yyyy-mm.md ÌååÏùºÏùÑ ÌÜµÌï¥ ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.
Îß§Ïõî Ï≤´Ïß∏ Ï£º ÏàòÏöîÏùº, Ïõî 1Ìöå Î∞úÌñâ
Îã§ÏùåÏùò 2Í∞ÄÏßÄ Î∞©Î≤ïÏùÑ ÌÜµÌï¥ Î∞úÌñâ ÏÜåÏãùÏùÑ Íµ¨ÎèÖÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§.
[Ï∞∏Í≥†] ÎåÄÎ∂ÄÎ∂ÑÏùò Ïª§Î∞ãÏùÄ ÏÜåÏãùÏùò Î∞úÌñâ ÎòêÎäî Ïò§ÌÉÄ, Ï†ïÎ≥¥ ÏàòÏ†ïÏóê ÎåÄÌïú PRÏùò Î®∏ÏßÄ ÏàòÏ§ÄÏóêÏÑú Î∞úÏÉùÌï©ÎãàÎã§.
ÌîÑÎ°úÏ†ùÌä∏ watchÎ•º ÌÜµÌï¥ Íµ¨ÎèÖÌïòÍ∏∞
Ï†ÄÏû•ÏÜå ÏÉÅÎã®Ïùò watch Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠Ìï¥ ÌîÑÎ°úÏ†ùÌä∏Î•º ÏßÄÏºúÎ≥¥Îäî Í≤ÉÏúºÎ°ú Íµ¨ÎèÖ
RSS Î¶¨ÎçîÎ•º ÌÜµÌï¥ Íµ¨ÎèÖÌïòÍ∏∞
RSS Î¶¨ÎçîÎ•º ÌÜµÌï¥ ÌîÑÎ°úÏ†ùÌä∏ Ïª§Î∞ãÏùÑ Íµ¨ÎèÖ
https://github.com/naver/fe-news/commits/master.atom
Ïù¥Ï†Ñ ÏÜåÏãùÎì§ÏùÄ 'Ïó∞ÎèÑ'Î•º ÌÅ¥Î¶≠ÌïòÎ©¥ Î≥¥Ïã§ Ïàò ÏûàÏäµÎãàÎã§.
<details>
  <summary>2022</summary>

</details>

<details>
  <summary>2021</summary>

[2021-01](/issues/2021-01.md)
</details>
<details>
<summary>2020</summary>

[2020-02](/issues/2020-02.md)
</details>"
843,"tinyhttp,tinyhttp","ü¶Ñ 0-legacy, tiny & fast web framework as a replacement of Express. 


<sub>‚ö° Tiny web framework as a replacement of Express</sub>

[![][site-badge]][site-url] [![npm][npm-img]][npm-url] [![GitHub Workflow Status][gh-actions-img]][github-actions] [![Coverage][cov-img]][cov-url] [![][code-quality-img]][code-quality]



tinyhttp is a modern Express-like web framework written in TypeScript and compiled to native ESM, that uses a bare minimum amount of dependencies trying to avoid legacy hell.
‚ö° 2x faster than Express
‚öô Express middleware compat
‚Ü™ Async middleware support
‚òë ESM-only
üöÄ No legacy dependencies, just the JavaScript itself
üî® Types out of the box
üî• Prebuilt middleware for modern Node.js
Visit tinyhttp website for docs, guides and middleware search.
Node.js 12.4+ is required.
You can donate with fiat or crypto here.
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><sub><b>Deta</b></sub></td> <td align=""center""><sub><b>molefrog</b></sub></td>
  </tr>

</table>
<!-- markdownlint-enable -->
<!-- prettier-ignore-end -->

Thanks goes to these wonderful people (emoji key):
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><sub><b>v 1 r t l</b></sub>üí° üîå üìÜ üöß üíª</td>
    <td align=""center""><sub><b>Matt</b></sub>üîå ‚ö†Ô∏è</td>
    <td align=""center""><sub><b>Nasmevka</b></sub>üìñ</td>
    <td align=""center""><sub><b>elianiva</b></sub>üí° üöß üíª ‚ö†Ô∏è</td>
    <td align=""center""><sub><b>Katja Lutz</b></sub>üí°</td>
    <td align=""center""><sub><b>Arnovsky</b></sub>üîå üíª</td>
    <td align=""center""><sub><b>Rocktim Saikia</b></sub>üöá üíª üí°</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Ahmad Reza</b></sub>üíª</td>
    <td align=""center""><sub><b>Ionel lupu</b></sub>üí°</td>
    <td align=""center""><sub><b>Tomi Kalmi</b></sub>üìñ</td>
    <td align=""center""><sub><b>Luiginator</b></sub>üí° üíª</td>
    <td align=""center""><sub><b>Aneesh Relan</b></sub>üí° ‚ö†Ô∏è</td>
    <td align=""center""><sub><b>Roberto Ortega</b></sub>üí°</td>
    <td align=""center""><sub><b>Barciet Ma√´lann</b></sub>üí°</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>shzmr</b></sub>üíª ‚ö†Ô∏è üí°</td>
    <td align=""center""><sub><b>Egor Avakumov</b></sub>üí°</td>
    <td align=""center""><sub><b>Rashmi K A</b></sub>üíª</td>
    <td align=""center""><sub><b>Shubhi Agarwal</b></sub>‚ö†Ô∏è</td>
    <td align=""center""><sub><b>Maurizio</b></sub>‚ö†Ô∏è üíª</td>
    <td align=""center""><sub><b>jkreller</b></sub>üí°</td>
    <td align=""center""><sub><b>Alan Carpilovsky</b></sub>‚ö†Ô∏è</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>KoljaTM</b></sub>‚ö†Ô∏è</td>
    <td align=""center""><sub><b>ike</b></sub>üìñ üí°</td>
    <td align=""center""><sub><b>Fabian Mor√≥n Zirfas</b></sub>üêõ</td>
    <td align=""center""><sub><b>Vitaly Baev</b></sub>‚ö†Ô∏è üêõ</td>
    <td align=""center""><sub><b>omrilotan</b></sub>üíª üìñ</td>
    <td align=""center""><sub><b>MVEMCJSUNPE</b></sub>üí° üêõ</td>
    <td align=""center""><sub><b>Leo Toneff</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Calum Knott</b></sub>üìñ üêõ</td>
    <td align=""center""><sub><b>Reinaldy Rafli</b></sub>üíª üêõ üí°</td>
    <td align=""center""><sub><b>Ganesh Pendyala</b></sub>üìñ</td>
    <td align=""center""><sub><b>Maxim</b></sub>üêõ</td>
    <td align=""center""><sub><b>wasd845</b></sub>üêõ</td>
    <td align=""center""><sub><b>Ikko Ashimine</b></sub>üìñ</td>
    <td align=""center""><sub><b>Stanislas</b></sub>üìñ</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Laurin Quast</b></sub>üíª</td>
    <td align=""center""><sub><b>Rohan Sharma</b></sub>üêõ</td>
    <td align=""center""><sub><b>tbhmens</b></sub>üíª üêõ</td>
    <td align=""center""><sub><b>Marcos Henrique</b></sub>üí°</td>
    <td align=""center""><sub><b>massivefermion</b></sub>üîå üí°</td>
    <td align=""center""><sub><b>Benjamin Selyem</b></sub>üêõ</td>
    <td align=""center""><sub><b>Aral Balkan</b></sub>üìñ</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Sonny Piers</b></sub>üìñ</td>
    <td align=""center""><sub><b>paolotiu</b></sub>üíª</td>
    <td align=""center""><sub><b>Anton Trofimenko</b></sub>üíª</td>
    <td align=""center""><sub><b>tomhooijenga</b></sub>üíª</td>
    <td align=""center""><sub><b>Sai Kiran Mukka</b></sub>üíª</td>
    <td align=""center""><sub><b>Oskari Groenroos</b></sub>üíª</td>
  </tr>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the all-contributors specification. Contributions of any kind welcome!"
844,"welaika,wordless","All the power of Pug, Sass, Coffeescript and WebPack in your WordPress theme. Stop writing themes like it's 1998.. Wordless is a junction between a WordPress plugin and a theme boilerplate that dramatically speeds up and enhances your custom theme creation. Some of its features are:
A structured, organized and clean theme organization
Bootstrap a new theme directly within wp-cli
Write PHP templates with Pug templating system
Write CSS stylesheets using the awesome SCSS syntax
Out-of-the-box support to Stylelint configured for SCSS syntax.
Write Javascript logic using modern syntax thanks to Babel
Automatically polyfill (with core-js) and transpile Javascript based on your support inside .browserslistrc
A growing set of handy and documented PHP helper functions ready to be used within your views
Preconfigured support to MailHog mail-catcher in development.
Development workflow backed by WebPack, BrowserSync (with live reload), WP-CLI, Yarn. All the standards you already know, all the customizations you may need.


Read the complete Wordless documentation at wordless.readthedocs.io where you'll find - hopefully - all the informations about installation, usage guide, in depth explanation about the stack.
If you want to contribute to the documentation.
Have docker started
docker build -t wordless_docs rtfm
make documentation
open rtfm/build/html/index.html
update the doc; documentation about the RST syntax can be found at https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html
commit and push; the rtfm/ folder on master will be auto-deployed on https://wordless.readthedocs.io/
Every subsequent make documentation will refresh your HTML.
You can find it at http://welaika.github.io/wordless/docs/latest/html/index.html.
If you are interested in contributing to the documentation:
we are documenting php files in
here is a list of documentation gaps :9
brew install doxygen
go and add doc following the doxygen conventions
compile the new doc with doxygen docs/Doxyfile (from project's root)
you'll have an untracked folder docs/build in GiT. Leave it alone and git checkout gh-pages instead.
mv docs/build docs/latest overwriting the old one
commit and push the branch
Merge your feature branch - with passing tests - in master with
git checkout master &amp;&amp; git merge --no-ff feature or by pull request
On master update the plugin version (SEMVER) in ./wordless.php (""Version"")
and readme.txt (""Stable tag"") files and commit the updated files.
do git tag x.y.x where x.y.z equals to the previously written version.
git push origin master --tags to push both commits and tags
update the changelog for the new release at https://github.com/welaika/wordless/releases
Automations will do the leftovers, including to publish updated documentation on ReadTheDocs and
the plugin on https://wordpress.org/plugins/wordless/
A changelog for each tag/relase is mandatory to be compiled at
https://github.com/welaika/wordless/releases.

Wordmove: a great gem (from yours truly) to automatically mirror local WordPress installations and DB data back and forth from your local development machine to the remote staging server;
Wordless has not been tested on Windows
Default configuration has dropped support for CoffeeScritp and for SASS indented syntax. Obviously you are free to change Webpack's config once you've created the theme, but now we officially support ES2015 and SCSS instead.
Ruby-based preprocessors and the WORDLESS_LEGACY configuration are definitely dropped.
Theme's folder structure changed.
Wordless 2.5 deprecates the old ruby preprocessor support. It is disabled by default. If you need to develop an old theme you need to explicitely activate them by setting the following in your wp-config.php:
We plan to completely remove this support in Wordless 3.
Wordless is available in English, German, Greek, Italian and Spanish, at the moment.
The user interface was translated by Wasilis Mandratzis-Walz (German and Greek), David Mejorado (Spanish).
Your help is welcome! Add your own language using Transifex.
Visit WordPress Tools.
made with ‚ù§Ô∏è and ‚òïÔ∏è by weLaika
(The MIT License)
Copyright ¬© 2011-2019 weLaika
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄòSoftware‚Äô), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED ‚ÄòAS IS‚Äô, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
845,"salgum1114,react-design-editor","React Design Editor has started to developed direct manipulation of editable design tools like Powerpoint, We've developed it with reactjs, ant.design, fabricjs . React Design Editor is a module for React, written in Javascript/Typescript which provides two primary features:
Image Editor - Create images in React, draw diagrams and arrange compositions using the image editor and save the result to one of several export formats, provides functionality similar to Powerpoint.
Business Process Modelling (BPM) - Design flowcharts and process workflows in React and export the model to JSON, which can be imported into the tool (load/save).
The module primarily uses the Ant Design, Fabric.js and React libraries, but a full list of required dependencies can be found below.
Try it out today - the project is being continually developed to support a variety of different functions.
[x] Add, remove, resize, reorder, clone, copy/paste and drag/drop elements
[x] Drawing capability, with polygon, line, arrows and link support
[x] Preview mode, tooltips, group/ungroup and zoom functionality
[x] Upload (with drag/drop), import and export to JSON or image
[x] Image cropping, Image filters, alignment, alignment guides
[x] Snap to grid, context menu, animation and video element
[x] Various icons in icon picker and fonts from Google Fonts (20)
[x] HTML/CSS/JS Element, iFrame element
[x] Animation support, with Fade / Bounce / Shake / Scaling / Rotation / Flash effects
[x] Code Editor with HTML / CSS / JS / Preview
[x] Various interaction modes, including grasp, selection, ctrl + drag grab
[x] Multiple layouts, with fixed, responsive, fullscreen and grid modes
[x] SVG, Chart and GIF elements
[x] Undo/Redo support
[ ] Wireframes - in development
[ ] Multiple Map - in development
[ ] Ruler - in development
Run npm install react-design-editor or yarn add react-design-editor
Clone this Project with git clone https://github.com/salgum1114/react-design-editor.git
Install dependencies with npm install or yarn
Run the App with npm start or yarn start
Open your web browser to http://localhost:4000"
846,"maitraysuthar,rest-api-nodejs-mongodb","A boilerplate for REST API Development with  Node.js, Express, and MongoDB. A ready-to-use boilerplate for REST API Development with Node.js, Express, and MongoDB
This is a basic API skeleton written in JavaScript ES2015. Very useful to building a RESTful web APIs for your front-end platforms like Android, iOS or JavaScript frameworks (Angular, Reactjs, etc).
This project will run on NodeJs using MongoDB as database. I had tried to maintain the code structure easy as any beginner can also adopt the flow and start building an API. Project is open for suggestions, Bug reports and pull requests.
I am open for a good job or work contract. You can contact me directly on my email (maitraysuthar@gmail.com) or you can download my CV from my personal website.
If you consider my project as helpful stuff, You can appreciate me or my hard work and time spent to create this helpful structure with buying me a coffee.

Basic Authentication (Register/Login with hashed password)
Account confirmation with 4 (Changeable) digit OTP.
Email helper ready just import and use.
JWT Tokens, make requests with a token after login with Authorization header with value Bearer yourToken where yourToken will be returned in Login response.
Pre-defined response structures with proper status codes.
Included CORS.
Book example with CRUD operations.
Validations added.
Included API collection for Postman.
Light-weight project.
Test cases with Mocha and Chai.
Code coverage with Istanbuljs (nyc).
Included CI (Continuous Integration) with Travis CI.
Linting with Eslint.
Node.js 8+
MongoDB 3.6+ (Recommended 4+)
Clone the project from github. Change ""myproject"" to your project name.
Download repository
Uncompress to your desired directory
You will find a file named .env.example on root directory of project.
Create a new file by copying and pasting the file and then renaming it to just .env
The file .env is already ignored, so you never commit your credentials.
Change the values of the file to your environment. Helpful comments added to .env.example file to understand the constants.
You will know server is running by checking the output of the command npm run dev
Note: YOUR_DB_CONNECTION_STRING will be your MongoDB connection string.
If you need to add more models to the project just create a new file in /models/ and use them in the controllers.
If you need to add more routes to the project just create a new file in /routes/ and add it in /routes/api.js it will be loaded dynamically.
If you need to add more controllers to the project just create a new file in /controllers/ and use them in the routes.
You can set custom command for test at package.json file inside scripts property. You can also change timeout for each assertion with --timeout parameter of mocha command.
If you need to add more test cases to the project just create a new file in /test/ and run the command.
You can set custom rules for eslint in .eslintrc.json file, Added at project root.
Every project needs improvements, Feel free to report any bugs or improvements. Pull requests are always welcome.
This project is open-sourced software licensed under the MIT License. See the LICENSE file for more information."
847,"andreknieriem,simplelightbox","Touch-friendly image lightbox for mobile and desktop. Touch-friendly image lightbox for mobile and desktop
Responsive
Touch friendly
Swipe gestures for next/previous image
Easy to install, easy to use
Minimalistic
Only some css is included. You can change the style like you want!
Lots of options
Preloading next and previous image
Android, iOs and Windows phone support
CSS3 Transitions with fallback for older browsers
Works in every modern Browser, even in IE 11
Can use jQuery 1.x, 2.x and 3.x. This is not required.
Keyboard support
Pinch to zoom
Double-tap to zoom
// Bower
bower install simplelightbox
// NPM
npm install simplelightbox
After that include simple-lightbox(.min).css and simple-lightbox(.min).js to your page.
When using the standalone variant (simple-lightbox(.min).js)
The jQuery-compatible (simple-lightbox.jquery(.min).js) variant works as before (v1.x):
Choose the module file you want to import or require.
Module with Babel tranformation
Plain ES Module without Babel
For the default setup, you just need links that are pointing to images.
The markup inside the A-Tags can be whatever you want. In this example thumbnails of the big images. The 'title' tag is used by default to show a caption.
For a complete example just look at the demo folder.
Example  
gallery.on('error.simplelightbox', function (e) {
    console.log(e); // Some usefull information
});
// with jQuery nearly the same
let gallery = $('.gallery a').simpleLightbox();
gallery.on('show.simplelightbox', function () {
    // Do something‚Ä¶
});
Example  
gallery.next(); // Next Image
You can have multiple lightboxes on one page if you give them different selectors. Here is a small example:
You can customize Simplelightbox by changing the style in simplelightbox.css.
If you are using SASS, you can customize Simplelightbox with the following variables
$sl-counter-fontsize: 1rem;
$sl-caption-fontsize: 1rem;
$sl-close-fontsize: 3rem;
$sl-breakpoint-medium: 35.5em; // 568px, when 1rem == 16px
$sl-breakpoint-large:  50em;   // 800px, when 1rem == 16px
$sl-arrow-fontsize-small:  2rem;
$sl-arrow-fontsize-medium: 3rem;
$sl-arrow-fontsize-large:  3rem;
$sl-img-border-small:  0 none;
$sl-img-border-medium: 0 none;
$sl-img-border-large:  0 none;
$sl-iframe-border-small:  0 none;
$sl-iframe-border-medium: 0 none;
$sl-iframe-border-large:  0 none;
$add-vendor-prefixes: true !default;
using gulp
Run gulp watch to enable continous watching of both src/simple-lightbox.js and src/simple-lightbox.scss. Both files will be compiled to dist/simple-lightbox.js and dist/simple-lightbox.css respectively. Open dist/index.html in your browser to inspect your changes...
Building
Just call gulp build to have all files and variants created inside dist!
2.13.0 - Fixing #281 close lightbox on load,#311 caption not working, #307 second time opening not working with download option, #310 - passive scroll event default warning in console.
2.12.1 - Fixing #292. Error with download-link
2.12.0 - Merging #283. Fixing className whitespace error. Thanks to @MVogge. Merging #287, which fixes #286 thanks to @majid-1xinternet. Added download option. Thanks to @cnotin  
2.11.0 - Added possibility to add multiple classes to captions #280, added possibility for better selectors which fixes #62 again, fixed #268 lightbox not centered with scrolling  
2.10.4 - Fixed #277 - add passive listener for scroll events, #276 mistake z-index  
2.10.3 - Fixed #264 - Fixed wrong mouse-zoom when the page is scrolled  
2.10.2 - Fixed #258 with opacity flicker on overlay. For this, moved style option captionOpacity to js plugin  
2.10.1 - Fixed #255 fast switching photos and #256 for hiding back and next buttons on loop: false  
2.10.0 - Fixed #254 - Nav Buttons disappear and adding new method getLighboxData so get some useful data for #251  
2.9.0 - Added mousescroll function with new options mouseScroll and mouseScrollFactor
2.8.1 - Fixed #250 - No closing if image load fails. #249 Disable scroll on Mac works now
2.8.0 - Fixed #235 - legacy file too big. #236 bad package.json and added support for passive event listeners #240. Thanks to @coderars for the issues and some code
2.7.3 - Fixed #232 - sourceAttr does not work. Thanks to @bivisual for the issue
2.7.2 - Fixed #231 - disableRightClick doesn't. Thanks to @DrMint for the fix
2.7.1 - Fixed #228 - no mouse swiping in firefox. Thanks to @DrMint for the fix
2.7.0 - Merged #206 which fixes #205. Thanks to @ocean90 for the idea and PR
2.6.0 - Added new option uniqueImages for #156, focus for #190 and fixed bug #200 issue closing during animation
2.5.0 - Added new option fadeSpeed. This will fix #147 and #186
2.4.1 - Added new simple-lightbox.legacy.js with IE 11 Support. Fixes #175, #178, #183 and some other bugs from 2.4.0
2.4.0 - Added new option for fixed elements class #195
2.3.0 - Merged Feature for ESM Modules. Thanks to Dmytro Hrynevych #180
2.2.2 - Fixed direct closing on load error #182
2.2.1 - Fixed bug #174 and problem with ES Modules
2.2.0 - Added ES Modules support, thanks to @seralichtenhahn for the PR. This fixed #164
2.1.5 - Fixed bug #169 open method with jQuery and #171 error while pan on mobile devices
2.1.4 - Fixed bug #168 doubletap zoom on touch devices
2.1.3 - Fixed bug in destroy method #167 and bug with html in  navText #165
2.1.2 - Fixed additionalHtml bug #163    
2.1.1 - Fixed captions bug #162    
2.1.0 - Added rel grouping feature #16 and added rtl support #161    
2.0.0 - Complete rewrite. Now uses modern ES6 javascript, without the need of jQuery. Can use jQuery anyway. Developers can use gulp with babel to contribute. Thanks to Mtillmann #129 for the implementation  
1.17.3 - Fixed new chrome passive error #155
1.17.2 - Fixed caption keeps disappeared on double click #139 and added better close symbol #133
1.17.1 - Added webp in fileExt list #135, removed hardcoded a-tag in isValidLink function #134
1.17.0 - Merged pull request #132. Added double click to zoom for desktop browsers - Thanks to coderkan
1.16.3 - Merged pull request #126,#127 - Thanks to jieter
1.16.2 - Added featured #124 - Add a class to html element if lightbox is open
1.16.1 - Fixed pinch to zoom offset error on scrolling #123
1.16.0 - Pinch to Zoom feature for touch devices with new options doubleTapZoom and maxZoom #79
1.15.1 - Merged pull request #113,#114,#115 - Thanks to RaphaelHaettich and celsius-jochen
1.15.0 - Merged pull request #111, fixed #101 and added possibility to close lightbox on load #74
1.14.0 - Merged pull request #107 and #108. Thanks to RaphaelHaettich
1.13.0 - Added featured #92 and merged pull request #98 and #99. Thanks to RaphaelHaettich
1.12.2 - Bugfix for #89
1.12.1 - Bugfix for #88,#87 and remove bind/unbind #84
1.12.0 - New option captionClass #81, bugfix for #82
1.11.1 - Merged pull request #76. Thanks to walterebert, added support for images with parameters and file extension check #59
1.11.0 - New option for src of image. e.g data attribute #70
1.10.7 - Added Bootstrap compatibility #69
1.10.6 - Merged pull requests #65. Thanks to mstaniuk
1.10.5 - Merged pull requests #60 and #61. Thanks to slavanga
1.10.4 - Bugfix von #58
1.10.3 - Merged pull requests #55, #56 and #57. Thanks to karland
1.10.2 - Aligned navigation and close buttons #51, fixed image error bug #52
1.10.1 - Added support for jQuery 3.x #50
1.10.0 - Implemented feature-request #48, history back, some bugfixing and code styling
1.9.0 - Implemented feature-request #16, added rel option for grouping images
1.8.6 - Implemented feature-request #46, added refresh method
1.8.5 - Implemented feature-request #44
1.8.4 - Bugfix for #41 and added option for additional html inside images #40
1.8.3 - Bugfix for #38 and small other fix for loop false option
1.8.2 - Better bugfix for #33, finally fixing multiple lightbox on one page slowness issues!
1.8.1 - Bugfix for #31, #32 and #33
1.8.0 - New API Events (changed open to show) and little fix in function open() brought by Geoffrey Crofte and some other small bugfixes
1.7.2 - Bugfix von #25 and #27
1.7.1 - Bugfix von #22 with new option alertError and merged pull request #23
1.7.0 - Add support for fading between photos, Bugfix for single image navigation, option for caption delay
1.6.0 - Option for caption position. Disable prev or next arrow if loop is false and position is first or last.
1.5.1 - Bugfix for multiple lightboxes on one page
1.5.0 - Added options for disabling rightclick and scrolling, changed default prev- and next-button text
1.4.6 - Option for fileExt can now be false to enable pictures like example.com/pic/200/100
1.4.5 - Bugfix lightbox opening does not work on mobile devices
1.4.4 - Bugfix no drag&drop in FF, changed default close text, only output data if lightbox is opened
1.4.3 - Bugfix z-index for spinner to low, added sass files
1.4.2 - Bugfix for issue #2 - Drop Event does not fire when mouse leaves window
1.4.1 - The whole caption Selector is rewritten. You can now select an element and get its text, use data or attribute
1.4.0 - Caption Attribute can now be what, you want, or data-title. Fixed some small issues
1.3.1 - Bugfix: disable keyboard control if lightbox is closed
1.3.0 - Added current index indicator/counter
1.2.0 - Added option for captions attribute (title or data-title)
1.1.2 - Bugfix for looping images
1.1.1 - Bugfix for loading indicator and removed a log-event
1.1.0 - Added classname for lightbox wrapper and width/height ratio
1.0.0 - Initial Release
Andre Rinas - Github
Martin Tillmann
nicekiwi
helloilya
bitstarr
Geoffrey Crofte - Github
Karl Anders - Github
Raphael H√§ttich
Serafin Lichtenhahn
Jochen Sengier - Github
Dmytro Hrynevych
Dominik Schilling - Github
DrMint"
848,"crizstian,data-structure-and-algorithms-with-ES6","Data Structures and Algorithms using ES6. NodeJS Installed
Open Any Terminal and position it to the folder where the files are located
execute the tests: $ npm install then node_modules/.bin/qunit -t path/test.js -c path/tests.js
Some exercises are based from the book Data Structures and Algorithms with JavaScript - by Michael McMillian (O‚ÄôReilly) ISBN - 978-1-449-36493-9."
849,"grimmdude,MidiPlayerJS","‚ô¨ MIDI parser & player engine for browser or Node.  As a parser converts MIDI events into JSON.  Works well with single or multitrack MIDI files.. MidiPlayerJS is a JavaScript library which reads standard MIDI files and emits JSON events in real time.  This player does not generate any audio, but by attaching a handler to the event emitter you can trigger any code you like which could play audio, control visualizations, feed into a MIDI interface, etc.
Neopixel Music by robertvorthman @robertvorthman
Autocomposer by RJ Salvador @rjsalvadorr
Simple Browser Player by Garrett Grimm @grimmdude
Orchestra by Daniel Alejandro Cast @lexcast
Using MidiWriterJS is pretty simple.  Create a new player by instantiating MidiPlayer.Player with an event handler to be called for every MIDI event.  Then you can load and play a MIDI file.
There are a handful of events on the Player object which you can subscribe to using the Player.on() method.  Some events pass data as the first argument of the callback as described below:
Note that because of a common practice called ""running status"" many MIDI files may use Note on events with 0 velocity in place of Note off events.
http://grimmdude.com/MidiPlayerJS/docs/"
936,"zaaack,koa-joi-swagger","An opinionated koa validation & swagger library, letting you write one Joi schema for both validation & generating swagger ui.. Using joi schema to validate request & response, and generate swagger document to create beautiful API documents.
  
Router agnostic.
Using your favorite library for validation, and generate swagger document for develop.
Serving Swagger UI in your koa project.
...
or
for v3, install optional dependencies
Now open http://127.0.0.1:3456/swagger!
app.js
""I see the api is simple, but how to write the joi schema and the swagger document?""
That's the point, you don't need to write a joi schema to validation and a swagger document to create API documents.
""Oh, no, Should I learn a new schema?""
Of cause not, I hate new schemas, too, especially those made by someone or some company without long support, it's just a waste of time and my brain cell.
Therefore, to make this library simple and reliable, I just mixed joi and swagger document, and using joi-to-json-schema to transform joi schema to swagger schema. You don't have to learn a new schema, just replace the JSON schema in your swagger document to joi schema, then let this library to do the rest.
I call it mixed document, here is an example.
You can see the differences between this and the real swagger document, just replace parameters and responses to joi schema instead of JSON schema,
Here is the swagger document that generate from mixed document above.
I have think it before, but hit some problems like validating javascript date object, remove additionalProperties, etc. And writing JSON schema is too verbose. Joi is the best validation library in NodeJS, we should take the advantage.
YAML is not easy to reuse, although JSON schema can reuse model, and how to reuse shared properties between models? I can't find a way. Pure javascrip can easily reuse or wrap model schema, and you can wrap each final schema with a function, don't feel pain when adding properties for each request schema in the future.
Sorry, joi's philosophy is too strict for me, I really don't need to explicit declare the string could be empty, so I override the original Joi.string() to make Joi.string().empty('') is a default behavior.
Also, add a .force() method for string/number type, to coerce the field to string/number regardless of the original type, it's really useful when validating some bson type like Long, Deciaml or Custom object.
Added a Joi.object().json() to coerce object with toJSON method to a plain JSON object. This would useful when validation some ORM/ODM's model object (like mongorito).
And I highly recommend using this extended joi to write your schemas, and adding your extension if you need.
You can also using other version of Joi to validate."
937,"swimlane,trafficlight","üö¶ Flexible NodeJS Routing Decorators for API Routing. A flexible NodeJS Routing Decorators for API Routing. Features include:
Built for KOA2
Bring-your-own router
Bring-your-own body parser
TypeScript and ES7 Support
DI compatible
npm run build
npm i trafficlight --S
Note: You must have reflect-metadata installed as a peer dependency
bindRoutes(routerTable, controllers, getter) - Binds the controller to the route table.
Controller(url?) - Top level controller decorator. Optional root url
Route(method, url?) - Abstract method decorator, accepts method type, url
Get(url?) - Http GET method, accepts URL
Post(url?) - Http Post method, accepts URL
Put(url?) - Http Put method, accepts URL
Delete(url?) - Http Delete method, accepts URL
Params() - Returns all the parameters passed in the request
Param(val) - Returns a specific parameter passed in the request
File() - Returns a single file in the request body
Files() - Returns all files in the request body
QueryParams() - Returns all the query parameters passed in the request url as an object
QueryParam(val) - Returns a specific query parameter passed in the request url
Ctx() - Returns the KOA context object
Req() - Returns the Node request object
Request() - Returns the KOA request object
Res() - Returns the Node response object
Response() - Returns the KOA response object
Body() - Returns the request body object
Fields() - Returns the request fields object
Use() - Middleware decorator for class and functions
Since typescript doesn't allow decorators on return types. Certain type
has been added to indicate and allow for file download.
FileDownload: {fileName: string, mimeType: string, stream: ReadStream}
trafficlight is a Swimlane open-source project; we believe in giving back to the open-source community by sharing some of the projects we build for our application. Swimlane is an automated cyber security operations and incident response platform that enables cyber security teams to leverage threat intelligence, speed up incident response and automate security operations."
938,"leemonade,leemons","üöÄ  The Powerful, flexible, user-friendly and open source Learning Experience Platform built entirely in Javascript üòé. The powerful flexible friendly Learning Experience Platform you‚Äôre waiting for.
Keep control over your data. With Leemons, you know where your data is stored, and you keep full control at all times.
Self-hosted. You can host and scale Leemons the way you want. You can choose any hosting platform you want: AWS, Render, Netlify, Heroku, a VPS, or a dedicated server. You can scale as you grow, 100% independent.
Customizable. You can quickly build your logic by fully customizing plugins to fit your needs perfectly.
Complete installation and requirements can be found in the documentation under Installation
Supported operating systems:
Ubuntu LTS/Debian 9.x
CentOS/RHEL 8
macOS Mojave
Windows 10
Docker - Coming soon
(Please note that Leemons may work on other operating systems, but these are not tested nor officially supported at this time.)
Node:
NodeJS >= 16.x
NPM >= 7.x
Database:
MySQL >= 5.6
MariaDB >= 10.1
PostgreSQL >= 10
MongoDB (comming soon)
See feature list at Overview

  

Please read our Contributing Guide before submitting a Pull Request to the project.
For general help using Leemons, please refer to - the official Leemons documentation (Coming soon) -. For additional help, you can use one of these channels to ask a question:
GitHub (Bug reports, Contributions)
MIT"
939,"nswbmw,paloma","An angular-like MVC framework, based on koa@2 & bottlejs.. An angular-like MVC framework, based on:
koa@2: Next generation web framework for node.js.
bottlejs: A powerful dependency injection micro container.
If you use async function as controller, you may need node v7.6.0+ or babel.
see create-paloma-app.
Common function
When a route is matched, its path is available at ctx._matchedRoute.
Async function
or
routerName
Validator
More validators usage see another-json-schema.
Array controllers
More examples see test and paloma-examples.
Load all files by require-directory.
Register a route. route use app.use internally, so pay attention to the middleware load order.
Register or get a controller. If fn missing, return a controller by name.
Register a service constructor or get a service instance. If fn missing, return a service instance by name.
Register a service factory.
Register a service provider.
Register a read only value as a service.
Register an arbitrary value as a service.
Register a decorator function that the provider will use to modify your services at creation time.
Register a middleware function. This function will be executed every time the service is accessed. Distinguish with koa's middleware.
see koa.
MIT"
940,"johndatserakis,koa-react-notes-web","ü§ì This is a simple SPA built using Koa as the backend, Vue as the first frontend, and React as the second frontend. Features MySQL integration, user authentication, CRUD note actions, and more. . 


  
  
  


This is a simple SPA built using Koa as the backend, Vue as the first frontend, and React as the second frontend.
React 16.13.1 (Initialized by create-react-app)
Fully written in TypeScript
Functional Components
Storybook
Redux 4.0.1
React-Router 5.1.2
Redux-Thunks
Axios
React-Bootstrap
Eslint
Formik
And more...
For more information on this project you can check out koa-vue-notes-api or koa-vue-notes-web. The project's general concept is to create a simple notes in using modern technologies. Initially, Koa-Vue-Notes was an app that used Koa on the backend and Vue on the frontend.
This project changes that up a bit - it's the same koa-vue-notes-web app, but written in React. This is perfect for someone who wants to take a good look at both frameworks a little bit more in depth than the usually tutoral blog posts.
This frontend is fully built in TypeScript which hopefully helps others who are looking for a working example of some different components. Even though I've been using JavaScript for about 10 years now, I only recently started using TypeScript over the past year or so. In the most recent revamp of this project I decided to rewrite it completely in TypeScript due to how much safety it brings - it really make me feel better about the foundation of the app. I really like TypeScript and will definitely be using it in all my JavaScript projects going forward - the only tough part is integrating third-party libraries (event those written in TypeScript), although after a few you get used to it.
After using Vuex for about 2 years now, Redux wasn't really to hard to wrap my head around. Users and Notes each have their own action and reducer files. I'm utilizing redux-thunk in the project to allow action creators to return functions.
As mentioned in the vue/koa code, the user authentication process is this:
User create an account
User logs in
The server sends and accessToken and a refreshToken back
We take the accessToken and decode it using jwt-decode. This gets us the logged in user's information. We stick this in the Vuex/Redux user store. Then we store the refreshToken and accessToken in the user's localStorage.
Each protected endpoint will be expecting you to attach the accessToken you have to the call (using Authentication: Bearer)
After a short amount of time, the server will respond with 401 TOKEN EXPIRED. When you see this - that means you need to send your refreshToken and user.email to the endpoint that deals with accessToken refreshing.
Once you do that, you'll received a brand new accessToken and refreshToken
Repeat the process as needed
Here's where a chunk of the app takes place. The routes are declared in the render function. You'll also notice a few routes only allow entry if the user is logged in. That can be useful if you're trying to protect some routes - like we are here with Dashboard, CreateNote, and EditNote. Also you'll find some code that handles the initial page load. In some cases, you'll want to load data there, but in this case, I only want to load the user's notes if the load happens on the Dashboard page.
There's a bunch more in the app:
Storybook support because a lot of times I like to create my components independently from the actual app.
Craco integration so we can stretch our legs a bit without having to eject from create-react-app.
netlify.toml support - you can take a look at how I serve the site on Netlify - very simple, and includes a rewrite for the API call.
Formik integration, plus lots of input components that work directly with Formik - of course fully written in TypeScript and Functional Components.
Plus more, as I set this up like a real app I'd use in production.
Google Analytics integration with helper functions for triggering events - I set those triggers to run on actions like signup, login, creating a note, stuff like that.
Let me know if there's anything you'd like me to expand on as far as why I chose to use it in the app, glad to explain further.
Go ahead and fork the project! Message me here if you have questions or submit an issue if needed. I'll be making touch-ups as time goes on. Have fun with this!
Copyright 2018 John Datserakis
MIT"
941,"ditojs,dito"," Dito.js is a declarative and modern web framework with a focus on API driven development, based on Objection.js, Koa.js and Vue.js ‚Äì Developed at Lineto by J√ºrg Lehni and made available by Lineto in 2018 under the MIT license. Dito.js is a declarative and modern web framework with a focus on API driven
development, based on Koa.js, Objection.js and Vue.js
Dito.js consists of two main components: Dito.js Server, providing all
classes and methods to build the server architecture, and Dito.js Admin, a
Vue.js library that can be used to build views and forms for administration of
the Dito.js models in a very efficient fashion.
Both components share the key philosophy of the Dito.js framework: The use of
declarative descriptions not only of the data structures themselves (the
models), but also of the way they are remotely interacted with (the
controllers), as well as the way they are edited (the admin views and forms).
This is then also the reason for the name Dito.js itself:
Ditto originally comes from the Latin word dictus, ""having been said,"" the
past participle of the verb dƒ´cere, ""to say.""
https://www.thefreedictionary.com/ditto
Dito.js was developed at Lineto by J√ºrg
Lehni, and was made available by Lineto in 2018 under
the MIT license.
Unlike other frameworks, Dito.js is not opinionated about its folder structures
and file naming, and does not deduce any information from such structures. With
the exception of the creation of migration files, there aren't any generators
that automatically create files for you.
There is however a recommended way to structure a Dito.js application, by
dividing it into the following folder structure:
src/server: This folder contains the admin Dito.js Server app, along with all
models and controllers in sub-folders:
src/server/models: The place where for the model classes.
src/server/controllers: The place for the controller classes.
src/admin: This folder contains a declarations of all admin views and forms
src/config: The application configuration files.
migrations: The folder holding all migration files.
seeds: The folder holding all seeds files.
This structure will be explained in more detail in the documentation of each
these aspects separately:
Dito.js server comes with its own CLI program, but it is rare to call it
directly: Normally you simply set up a set of package.json scripts through
which a selection of predefined tasks are executed:
Note that in order to work, each of these scripts require either the path to the
application, or the path to the application's configuration, as specified above.
Here a brief description of each script's purpose:
yarn console: Starts an interactive Read-Eval-Print-Loop console in which
all Dito.js models can be directly used.
yarn db:seed: Seeds the configured database with the data provided in
seeds. See Seeds for more information.
yarn db:create_migration: Creates migration files for the specified models.
 See Migrations for more information.
yarn db:migrate: Migrates to the latest state of migrations.
 See Migrations for more information.
yarn db:rollback: Rolls back the last batch of applied migrations.
 See Migrations for more information.
yarn db:reset: Resets the database by rolling back all applied migrations,
 and then reapplying all available migrations.
 See Migrations for more information."
942,"ladjs,i18n-locales","List of locales for i18n. List of locales for i18n
npm:
yarn:
Use country-language or @cospired/i18n-iso-languages packages for further insight into localization and languages.
MIT ¬© Nick Baugh"
943,"H4ad,serverless-adapter","Run REST APIs and other web applications using your existing Node.js application framework (NestJS, Express, Koa, tRPC, Fastify and many others), on top of AWS, Azure, Huawei and many other clouds.. 
  üöÄ Serverless Adapter



  Install&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
  Usage&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
  Support&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
  Examples&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
  Benchmark&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
  Architecture&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
  Credits









Run REST APIs and other web applications using your existing Node.js application framework (NestJS, Deepkit, Express, Koa, Hapi,
Fastify, tRPC and Apollo Server), on top of AWS Lambda, Azure, Digital Ocean and many other clouds.
This library was a refactored version of @vendia/serverless-express, I
create a new way to interact and extend event sources by creating contracts to abstract the integrations between each
library layer.
Why you would use this libray instead of @vendia/serverless-express?
Better APIs to extend library functionality.
You don't need me to release a new version to integrate with the new event source, you can create an adapter and
just call the addAdapter method when building your handler.
All code can be extended, if you want to modify the current behavior you can.
This is important because if you find a bug, you can quickly resolve it by extending the class, and then you can
submit a PR to fix the bug.
All code was written in Typescript.
Well documented, any method, class, or interface has comments to explain the behavior.
We have >99% coverage.
To be able to use, first install the library:
To start to use, first you need to know what you need to import, let's start showing the ServerlessAdapter.
We need to pass to Serverless Adapter the instance of your api, let's look an example with:
Framework: Express.
Adapters: AWS Api Gateway V2 Adapter.
Handler: Default Handler.
Resolver: Promise Resolver.
See how to use this library here.
You can see some examples of how to use this library here.
See the speed comparison between other libraries that have the same purpose in the Benchmark Section.
Honestly, I just refactored all the code that the @vendia team and many other contributors wrote, thanks so much to them
for existing and giving us a brilliant library that is the core of my current company."
944,"rvboris,koa-useragent","Koa user-agent middleware. Fast Middleware exposing user-agent for koa.js based on express-useragent
Module provides details such as the following:
From version 2.1.0 the library has rewritten in typescript. Definitions files distribute with source files.
From version 1.2.0, the library has type typescript definition file. You can install them from npm.
Boris Ryabov (contact@bsryabov.ru).
Based on express-useragent by Aleksej Gordejev (aleksej@gordejev.lv).
(The MIT License)
Copyright (c) 2019 Boris Ryabov &#99;&#111;&#110;&#116;&#97;&#99;&#116;&#64;&#98;&#115;&#114;&#121;&#97;&#98;&#111;&#118;&#46;&#114;&#117;
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Visit the author website.
Report issues on the github issues page."
945,"koajs,koa","Expressive middleware for node.js using ES2017 async functions. 

  
  
  
  
  
  
Expressive HTTP middleware framework for node.js to make web applications and APIs more enjoyable to write. Koa's middleware stack flows in a stack-like manner, allowing you to perform actions downstream then filter and manipulate the response upstream.
Only methods that are common to nearly all HTTP servers are integrated directly into Koa's small ~570 SLOC codebase. This
  includes things like content negotiation, normalization of node inconsistencies, redirection, and a few others.
Koa is not bundled with any middleware.
Koa requires node v12.17.0 or higher for ES2015 and async function support.
Kick-Off-Koa - An intro to Koa via a set of self-guided workshops.
Guide - Go straight to the docs.
Koa is a middleware framework that can take two different kinds of functions as middleware:
async function
common function
Here is an example of logger middleware with each of the different functions:
The middleware signature changed between v1.x and v2.x.  The older signature is deprecated.
Old signature middleware support will be removed in v3
Please see the Migration Guide for more information on upgrading from v1.x and
using v1.x middleware with v2.x.
Each middleware receives a Koa Context object that encapsulates an incoming
http message and the corresponding response to that message.  ctx is often used
as the parameter name for the context object.
Koa provides a Request object as the request property of the Context.
Koa's Request object provides helpful methods for working with
http requests which delegate to an IncomingMessage
from the node http module.
Here is an example of checking that a requesting client supports xml.
Koa provides a Response object as the response property of the Context.
Koa's Response object provides helpful methods for working with
http responses which delegate to a ServerResponse
.  
Koa's pattern of delegating to Node's request and response objects rather than extending them
provides a cleaner interface and reduces conflicts between different middleware and with Node
itself as well as providing better support for stream handling.  The IncomingMessage can still be
directly accessed as the req property on the Context and ServerResponse can be directly
accessed as the res property on the Context.
Here is an example using Koa's Response object to stream a file as the response body.
The Context object also provides shortcuts for methods on its request and response.  In the prior
examples,  ctx.type can be used instead of ctx.response.type and ctx.accepts can be used
instead of ctx.request.accepts.
For more information on Request, Response and Context, see the Request API Reference,
Response API Reference and Context API Reference.
The object created when executing new Koa() is known as the Koa application object.
The application object is Koa's interface with node's http server and handles the registration
of middleware, dispatching to the middleware from http, default error handling, as well as
configuration of the context, request and response objects.
Learn more about the application object in the Application API Reference.
Check the Troubleshooting Guide or Debugging Koa in
the general Koa guide.
To report a security vulnerability, please do not open an issue, as this notifies attackers of the vulnerability. Instead, please email dead_horse, jonathanong, and niftylettuce to disclose.
See AUTHORS.
Badgeboard and list of official modules
Middleware list
#koajs on freenode
Looking for a career upgrade?



Support us with a monthly donation and help us continue our activities.






























Become a sponsor and get your logo on our README on Github with a link to your site.






























MIT"
1010,"panshak,accountill","Fullstack open source Invoicing application made with MongoDB, Express, React & Nodejs (MERN). Built with the MERN stack (MongoDB, Express, React and NodeJS).

I am pleased to inform you that the name of this repository has been changed from Arc Invoice to Accountill.
There are so many things coming! Stay tuned!!
Introduction
This is a side project I've been working on. A full stack invoicing application made using the MERN stack (MongoDB, Express, React & Nodejs), specially designed for freelancers and small businesses, but can be used for almost any type of business need. With this application, you can send beautiful invoices, receipts, estimates, quotes, bills etc to your clients. Jump right off the Live App and start sending invoice or download the entire Source code and run it on your server. This project is something I've been working on in my free time so I cannot be sure that everything will work out correctly. But I'll appreciate you if can report any issue.

Send invoices, receipts, estimates, quotations and bills via email
Generate and send/download pdf invoices, receipts, estimates, quotations and bills via email
Set due date.
Automatic status change when payment record is added
Payment history section for each invoice with record about payment date, payment method and extra note.
Record partial payment of invoice.
Clean admin dashboard for displaying all invoice statistics including total amount received, total pending, recent payments, total invoice paid, total unpaid and partially paid invoices. 
Multiple user registration.
Authentication using jsonwebtoken (jwt) and Google auth
This project was created using the following technologies.
React JS
Redux (for managing and centralizing application state)
React-router-dom (To handle routing)
Axios (for making api calls)
Material UI & CSS Module (for User Interface)
React simple Snackbar (To display success/error notifications)
Cloudinary (to allows users to upload their business logo)
Apex Charts (to display payment history)
React-google-login (To enable authentication using Google)
Express
Mongoose
JWT (For authentication)
bcryptjs (for data encryption)
Nodemailer (for sending invoice via email)
html-pdf (for generating invoice PDFs)
MongoDB (MongoDB Atlas)
In order to run this project locally, simply fork and clone the repository or download as zip and unzip on your machine. 
Open the project in your prefered code editor.
Go to terminal -> New terminal (If you are using VS code)
Split your terminal into two (run the client on one terminal and the server on the other terminal)
In the first terminal
cd client and create a .env file in the root of your client directory.
Supply the following credentials
To get your Google ClientID for authentication, go to the credential Page  (if you are new, then create a new project first and follow the following steps;
Click Create credentials > OAuth client ID.
Select the Web application type.
Name your OAuth client and click Create
Remember to provide your domain and redirect URL so that Google identifies the origin domain to which it can display the consent screen. In development, that is going to be http://localhost:3000 and http://localhost:3000/login
Copy the Client ID and assign it to the variable REACT_APP_GOOGLE_CLIENT_ID in your .env file
In the second terminal
cd server and create a .env file in the root of your server directory.
Supply the following credentials
Please follow This tutorial to create your mongoDB connection url, which you'll use as your DB_URL
If you're getting error while trying to send or download PDF,
please run the following in your server terminal.
Using docker is simple. Just add the .env contextualized with the docker network.
e.g:
goes to path ""server/.env""
goes to path ""client/.env""
And run
I intend to keep adding more features to this application, so if you like it, please give it a star, that will encourage me to 
to keep improving the project.
Twitter: @panshak_
Github: @panshak
Linkedin: @panshak
Email: @ipanshak
This project is MIT licensed."
1011,"fhsinchy,docker-handbook-projects","Project codes used in ""The Docker Handbook"". This repository holds the code for my Docker Handbook article on freeCodecamp. In the article the readers work through six projects with increasing complexity. These projects are as follows:
custom-nginx - A custom NGINX image based on the official alpine image.
rmbyext - An executable image project.
hello-dock - A single container Vue application.
notes-api - A multi container Express API.
fullstack-notes-application - A full-stack CRUD application with nginx as a reverse proxy.
Familiarity with the Linux Terminal.
Familiarity with JavaScript (some of the later projects use JavaScript).
It's fine if you haven't worked with JavaScript that much. Having a basic knowledge of executing scripts with npm will suffice."
1012,"bbc,simorgh","The BBC's Open Source Single Page Application. Contributions welcome! Used on some of our biggest websites, e.g.. BBC World Service News websites are rendered using Simorgh, a ReactJS based Single Page Application which also builds Accelerated Mobile Pages (AMP) for every regular HTML page that it renders. Simorgh also renders AMP pages for BBC Public Service News and BBC Sport.
Simorgh provides a fast and accessible web experience used by millions of people around the world each month (see list of websites using Simorgh). It is regularly maintained and well documented, and we welcome open source contributors.
Simorgh is primarily maintained by the BBC News Web Engineering teams. It delivers highly trusted news to readers all over the world, currently in (41 languages). We support a wide range of devices and care deeply about scale, performance, and accessibility. We work in agile, flexible teams, and have an exciting roadmap for future development.
We use an open source component library called Psammead that we also maintain.
Please familiarise yourself with our:
Primary README (you are here)
NB there is further documentation colocated with relevant code. The above list is an index of the top-level documentation of our repo.
A request to a BBC article (https://www.bbc.co.uk/news/articles/clldg965yzjo) is passed on to the Simorgh application from a proprietary routing and caching service (called Mozart).
The request matches a route in our express server using a regex match (articleRegexPath || frontPageRegexPath). If the URL matches the pre-defined regex pattern for an article or a front page we fetch some params from the route using the getRouteProps function. This returns the service, isAmp, route and match properties. Route is a react-router route that defines a method to fetch the initial JSON used to render the page and the react container in which to render i.e. ArticleContainer, this is typically called getInitialData
Once data is returned we pull the status code and pass all of this data as props to our main document using renderDocument.
The Document passes the URL, JSON data, BBC Origin, isAmp and the service to the main App container and the result is rendered to a string using reacts own renderToString method. This string is then passed to DocumentComponent as the main app along with the assets array, style tags (the output from styled components) and any scripts/links that need to be added to the head. This is then rendered to static HTML markup using reacts own renderToStaticMarkup and sent back to the user as static HTML. Included in this response are links to our JS bundles which a users device will download to bootstrap the single page application (SPA) for subsequent journeys.
Now that the raw HTML has been downloaded, the client-side JS file kicks in and hydrates the initial response with the client side application. During this process react uses the initial JSON payload (available on the global window object SIMORGH_DATA) to hydrate the original markup returned by ReactDOMServer. React expects that the rendered content is identical between the server and the client (This is why we send the initial JSON payload with the SSR page, so the hydration phase runs with the same data that the server render used).
Now that the SPA is bootstrapped on the users device, onward journeys to further Simorgh pages are captured by react-router and rendered entirely on the client.
Clicking on an onward journey triggers the useEffect hook in the main App container as the URL path has changed. This effect uses getRouteProps again to match the new path against a react-router route, gaining access to the; service and isAmp props, the react container to render and the getInitialData function.
The local state is now updated, setting loading to true and data to null. This update to state triggers the App container to re-render passing the state values as props to the main container, in this case either ArticlesContainer or FrontPageContainer. These containers compose a set of higher order components (HOC) and each one handles the values from a given props. Currently the loading prop is set to true so the withLoading HOC will return the loading component showing a visual loading state to the user.
During this time the App container has finished fetching the JSON payload for the onward journey and the state is updated again. Loading is now set to false and data is set to the returned JSON data.
The routes container is rendered again, this time loading is set to false so the withData HOC can run some validation against the JSON payload and return either an error component or the original page container e.g. ArticleContainer passing in the JSON data with the pageData prop.
The JSON payload for an article consists of a number of Blocks. Each block is an object which represents an element on the page, this could be a Heading, an Image, a Paragraph etc. Each of these blocks has a block type and a block type will match up to a specific container in Simorgh e.g. blockType: image will match to the Image container.
The ArticleMain container will iterate over each JSON block, match it against its corresponding react container and pass the data via props. These containers are where the logic for rendering each block type sits. It is at this point where we use the installed frontend components from the Psammead component library. For example the Image container will import the Figure container, and Figure will import and use the psammead-image and the psammead-image-placeholder components. An image on an article will generally have a caption, so the Figure container will import the caption container which may include more frontend components from Psammead to render a caption on top of the image.
This process is repeated for each block within an article, ultimately rendering the main body of a news article using a combination of React containers for the business logic and React components for the frontend markup.
Each render is passed through a set of HOC's (Higher Order Components) to enhance the page, these HOC's are;
withVariant
withContexts
withPageWrapper
withLoading
withError
withData
withHashChangeHandler
With a selection of page types passed through withOptimizelyProvider, currently Article and Story pages.
The variant HOC ensures that services that have variants (e.g. simp, lat) always redirects to a url that renders the appropriate variant.
If a user navigates to a url without providing the variant, and variant is set in cookie, the cookie variant page is rendered. Otherwise, the default variant page is rendered
If a user navigates to a url with a variant, and variant is set in cookie, the cookie variant page is rendered. Otherwise, the requested variant page is rendered.
The withContexts HOC is a wrapper that provides access to the different context providers available in the application. Any child component inside of these context providers has access to the context data via the useContexts hook.
The page wrapper HOC simply wraps the Article or FrontPage containers with a layout, at present we only have a single page layout. This layout includes the header, footer and context providers rendering the main body as a child between the header and the footer.
The loading HOC checks the value of the loading props, if it is false the Article or FrontPage container is simply returned.
If loading is set to true, the Loading component is returned instead rendering a visual loading view for the user.
The error HOC checks the error prop passed in, if error is set to null the Article or FrontPage container is simply returned.
If error is set to true the Error component is returned, giving the user a visual indication of the error e.g. a 500 error page.
Assuming the other HOC's have returned the original Article or FrontPage container the data HOC will run some validation checks on the JSON data passed in via the data prop. If all of the checks are satisfied the ArticleContainer will be returned with a single pageData prop. This pageData props will house the JSON data to be rendered e.g. the Optimo blocks for a given article.
The withHashChangeHandler HOC is a wrapper applied to all pages that checks for changes to the URL hash value. Pages include accessibility controls to skip content should the user choose to do so, this utilises the URL hash to skip users to specific areas of the page. Due to the nature of the client side routing, changes to the URL results in a re-render. This causes some unsightly UI flickering for some components, specifically media and social embeds. This HOC applies checks to the URL so see if a re-render is necessary, or if not preventing a re-render using React.memo.
The withOptimizelyProvider HOC returns components that have been enhanced with access to an Optimizely client, that is used to run our A/B testing. This is done to limit bundle sizes, as we seperate some of our bundles by page type, that means if we're only running A/B testing on certain page types, we can prevent polluting page type bundles with the weight of the SDK library we use for Optimizely.
When adding a new page type there are several parts required.
This should be done for each service using the page type.
The fixture data for the page type should be available on the same route as the page with a .json suffix
EG: The localhost:7080/igbo.json should have the data to build the index page localhost:7080/igbo
To match the correct route we will need a new regex here
Then we need to add an Express route similar to this
Similar to this we require a top level container that will act as the entry point for the page routing. Each page type should have its own container.
The container should render a main element with a flex-grow: 1; css declaration, this is to ensure it grows to fill the space between the visual header and footer, the root div using a flexbox 'sticky footer' implementation.
If required for the new page type you can add pre-processing rules here. These are needed for use cases where we want to manipulate the data before it is received by the container for the page.
EG: On the articles routes unique ID's are added to each block in the payload
This should be done for AMP and Canonical pages together
This requires config in cypress/support/config/settings.js for every service (even if to set the new page type to undefined)
If required bespoke tests for the page type should be added inside of cypress/integration/pages/
If bespoke tests are added under cypress/integration/pages/ you must ensure the e2e pipelines are updated to run the new spec Test e2e Pipeline & Live e2e Pipeline
NB: With this many steps it is suggested to have multiple PRs when adding a new page type as to not have a singular huge PR. However, if Cypress tests (#6) are not added in the same PR as the page routing (#5) they should immediately follow the page routing PR, ideally these should be handled in a single PR.
Please read:
CONTRIBUTING.md
Install Node. https://nodejs.org/en/. We use the version specified in .nvmrc and if you have a node version manager (nvm) you can run the following script to automatically change to the project supported version.
The Simorgh project uses Yarn for package management. It is recommended to install Yarn through the npm package manager, which comes bundled with Node.js when you install it on your system. To install Yarn, run this command:
Then you can run the following commands to install Simorgh
To run this application locally, with hot-reloading, run
The application will start on http://localhost:7080.
Article pages are served at routes of the format /news/articles/:id where id is the asset ID generated by the Content Management System.
FYI: Article explaining the BBC's use of ids in URL
These two News articles are available on the Test environment of our CMS, as well as locally, so are often used for testing:
http://localhost:7080/persian/articles/c4vlle3q337o.
We are also serving AMP HTML pages at the route /news/articles/:id.amp https://www.ampproject.org
http://localhost:7080/persian/articles/c4vlle3q337o.amp.
Services with variants can't be accessed using the format above, instead the variant must be provided in the URL.
http://localhost:7080/zhongwen/articles/c3xd4x9prgyo/simp.amp.
World Service front pages are served in the format /:service where service represents a World Service site:
The World Service front pages follow the article format for AMP too, being available at /:service.amp:
Services with variants can't be accessed using the format above, instead the variant must be provided in the URL.
http://localhost:7080/zhongwen/simp.amp.
Topic pages use internal BBC APIs that are not publicly accessible. This can cause the following warnings to appear when developing locally:
Internal developers who need to work on topic pages locally should contact the team for access.
Recommendations in story pages also use internal BBC data labs API's. It requires adding the key/value pair in envConfig/secret.env file for them to appear locally.
Internal developers who need to work on article pages locally should contact the team for access.
You can find other pages types by looking through our routes and their associates regexes, but we suggest you start with the above then have a look at the core of the application to understand and find the other routes.
We use Storybook for developing components in isolation from the Simorgh Application. You can access this at https://bbc.github.io/simorgh/
To run locally yarn storybook, it will then be available at http://localhost:9001/. Introduction to and documentation for Storybook is here: https://storybook.js.org/basics/introduction/.
When viewing Video stories locally, make sure to use a BBC domain, as outlined in the changing request location section. Video will not work in the hosted version of Storybook linked above for this reason.
We also use Chromatic QA to run cross-browser testing on our stories.
Please also note that if you would like to see the components rendered with our fonts, you will need to force a repaint of the canvas. This is because our fonts all have the font-display property of optional or swap in accordance with the respective loading strategies here: https://ws-downloads.files.bbci.co.uk/fonts/index.html. The easiest way to force a repaint is just to move the divider between the preview window the and Knobs section or resize the browser window.
If you want to host the application to be accessible through your local network, follow the instructions here.
To run this application locally with a production build, run:
yarn build &amp;&amp; yarn start.
We use yarn build locally which bundles the application pointing at localhost for data and static assets.
This is mainly used for debugging latest using the TEST and LIVE environment bundles. Ensure that the bundles exist in the static asset location for the correct environment before starting to debug.
To run TEST bundles on localhost:
In envConfig/test.env change the values of:
LOG_DIR='/var/log/simorgh' to LOG_DIR='log'
Then run rm -rf build &amp;&amp; yarn build:test &amp;&amp; yarn start
Visit a test article: http://localhost:7080/news/articles/c0g992jmmkko
To run LIVE bundles on localhost:
In envConfig/live.env change the values of:
LOG_DIR='/var/log/simorgh' to LOG_DIR='log'
Then run rm -rf build &amp;&amp; yarn build:live &amp;&amp; yarn start
Visit a live article: http://localhost:7080/news/articles/c8xxl4l3dzeo
Some features perform differently dependant on whether a user is located within the UK or internationally. You can explicitly request a specific version by accessing Simorgh via a specific localhost BBC domain:
UK version: http://localhost.bbc.co.uk:7080/news/articles/c0000000001o
International version: http://localhost.bbc.com:7080/news/articles/c0000000001o
If these urls do not work, you may need to add a hosts file entry (/etc/hosts or C:\Windows\System32\drivers\etc\hosts):
On deployment make buildCi is run in the CI environment which creates bundles for both the test and live environments. On the two environments the .env.test or .env.live files overwrite the .env file which is used to run the application with the correct bundles.
Every run of yarn build will update the bundle analysis files in the repo. To view a breakdown of the bundle size, open the generated html report in a browser ./reports/webpackBundleReport.html This is generated via webpack-bundle-analyzer. The data is also available as json ./reports/webpackBundleReport.json.
We have linting with the Airbnb styleguide and we use Prettier as a code formatter. They can be run with yarn test:lint.
We have Jest unit tests that can be run with yarn test:unit.
yarn test runs both sets of these.
We use Cypress for our end-to-end tests. To run the smoke tests locally, run this single command:
It will spin up a production server on port 7080 and run the Cypress tests against that.
To run the smoke tests interactively, run:
This loads a user interface which easily allows for individual tests to be run alongside a visual stream of the browser, as the tests run.
There are several environment variables you can use with our test suite, which are:
These commands can be run in combination.
The default way to run the e2e suite aka yarn test:e2e or yarn test:e2e:interactive runs a subset of our tests, otherwise know as smoke tests. To run the full suite:
CYPRESS_SMOKE=false yarn test:e2e
Tests can be restricted to only run for a single service by specifying it using the CYPRESS_ONLY_SERVICE environment variable. For example:
To run only a particular spec it is necessary to invoke Cypress directly. First ensure Simorgh is already running in another tab and then run (for example, to only run article tests):
Further details on using the Cypress CLI can be found at https://docs.cypress.io/guides/guides/command-line.html
This affects developers based in the UK only (but may affect you if you're using a VPN routing through the UK)
Cypress .visit() function is locked to visiting a single domain per test. This becomes problematic when you launch the e2e tests from within the UK, due to redirects from .com to .co.uk. By default cypress tests will run as if they were ran outside of the uk. In order to run these tests from the UK you have to pass in the UK Cypress environment variable to the tests. This will replace the URL endings to .co.uk, which will allow you to run these tests successfully.
Here is an example command:
This affects developers based out of the EU (but may affect you if you're using a VPN routing through a country not in the EU)
Running Cypress tests outside the EU will not show the EU consent banners on AMP, and this may cause some tests to fail. Set CYPRESS_SKIP_EU=true to prevent these tests from running when outside the EU.
An example command will be:
The following command runs both simorgh and cypress:
CYPRESS_APP_ENV can also be set equal to 'test' and 'live'.
CYPRESS_SMOKE can be true or false. It is true by default and runs a specific subset of tests.
We use Lighthouse to test the performance of our page. However these have been moved out of Simorgh down to our own internal CD processes. This allows us to run these tests on a more accurate depiction of Simorgh. You are free to run lighthouse on your own from your Chrome browser or use the Node Lighthouse CLI.
Named Simorgh after the Persian mythological bird. The Simorgh is the amalgam of many birds (and in some accounts other animals) into one.
Happily, a metaphor which seemed apt for offering all BBC articles in one solution is perhaps now even more appropriate as the application evolves to support more content types. It‚Äôs also a clear reference to the international nature of our teams, but also to the desire to ensure articles (and everything which has followed) works for users in all languages the BBC supports.
It is also a unique name which is practical and, more superficially, the bird is very pretty."
1013,"heroku,node-js-getting-started","Getting Started with Node on Heroku. A barebones Node.js app using Express 4.
This application supports the Getting Started on Heroku with Node.js article - check it out.
Make sure you have Node.js and the Heroku CLI installed.
Your app should now be running on localhost:5000.
Using resources for this example app counts towards your usage. Delete your app and database as soon as you are done experimenting to control costs.
By default, apps use Eco dynos if you are subscribed to Eco. Otherwise, it defaults to Basic dynos. The Eco dynos plan is shared across all Eco dynos in your account and is recommended if you plan on deploying many small apps to Heroku. Learn more about our low-cost plans here.
Eligible students can apply for platform credits through our new Heroku for GitHub Students program.
or

For more information about using Node.js on Heroku, see these Dev Center articles:
Using WebSockets on Heroku with Node.js"
1014,"geekcell,docker-compose-nodejs-examples","Finally some real world examples on getting started with Docker Compose and Nodejs. Docker Compose is an awesome tool for creating isolated development environments with Docker by using simple configurations with YAML. It's clean and easy enough to wrap your head around, even if you are new to Docker.
If you're like us, you're using a development server like nodemon that watches all your file changes and reloads your app. Bringing this workflow over to Docker Compose is a bit tricky. We hope the following real world examples will save you from headaches while trying to figure out how to (pragmatically) use Docker Compose for your Nodejs apps.
https://github.com/geekcell/docker-compose-nodejs-examples/tree/main/00-basic-express-generator
https://github.com/geekcell/docker-compose-nodejs-examples/tree/main/01-express-nodemon
https://github.com/geekcell/docker-compose-nodejs-examples/tree/main/02-express-redis-nodemon
Geek Cell
Twitter: @thegeekcell
Web: https://geekcell.io
Pascal Cremer
Email: &#104;&#101;&#108;&#108;&#111;&#64;&#99;&#111;&#100;&#101;&#110;&#117;&#103;&#103;&#101;&#116;&#46;&#99;&#111;
Twitter: @b00gizm
Web: http://codenugget.co
MIT"
1015,"mohamedsamara,mern-ecommerce",":balloon: Fullstack MERN Ecommerce Application. An ecommerce store built with MERN stack, and utilizes third party API's. This ecommerce store enable three main different flows or implementations:
Buyers browse the store categories, products and brands
Sellers or Merchants manage their own brand component
Admins manage and control the entire store components 
features:
Node provides the backend environment for this application
Express middleware is used to handle requests, routes
Mongoose schemas to model the application data
React for displaying UI components
Redux to manage application's state
Redux Thunk middleware to handle asynchronous redux actions
The seed command will create an admin user in the database
The email and password are passed with the command as arguments
Like below command, replace brackets with email and password. 
For more information, see code here
This application is deployed on Render Please check it out :smile: here.
See admin dashboard demo
Some basic Git commands are:
Add a .vscode directory
Create a file settings.json inside .vscode
Install Prettier - Code formatter in VSCode
Add the following snippet:"
1016,"bufbuild,connect-es","Type-safe APIs with Protobuf and TypeScript.. 
  
Connect is a family of libraries for building type-safe APIs with different languages and platforms.
@bufbuild/connect brings them to TypeScript,
the web browser, and to Node.js.
With Connect, you define your schema first:
And with the magic of code generation, this schema produces servers and clients:
Unlike REST, the Remote Procedure Call are type-safe, but they are regular HTTP 
under the hood. You can see all requests in the network inspector, and you 
can curl them if you want:
Connect uses Protocol Buffers for the 
schema, and implements RPC with three protocols: The widely available gRPC and 
gRPC-web protocols, and Connect's own protocol,
optimized for the web. This gives you unparalleled interoperability across many
platforms and languages, with type-safety end-to-end.
Follow our 10 minute tutorial where
we use Vite and React to create a
web interface for ELIZA.
React, Svelte, Vue, Next.js and Angular are supported (see examples), 
and we have an expansion pack for TanStack Query.
We support all modern web browsers that implement the widely available
fetch API
and the Encoding API.
Follow our 10 minute tutorial
to spin up a service in Node.js, and call it from the web, and from a gRPC client 
in your terminal.
You can serve your Connect RPCs with vanilla Node.js, or use our server plugins
for Fastify, Next.js, and Express. We support Node.js v16 and later with 
the builtin http and http2 modules.
Would you like to use Connect on other platforms like Bun, Deno, Vercel‚Äôs Edge Runtime,
or Cloudflare Workers? We‚Äôd love to learn about your use cases and what you‚Äôd like to do
with Connect. You can reach us either through the Buf Slack
or by filing a GitHub issue and we‚Äôd
be more than happy to chat!
@bufbuild/connect:
RPC clients and servers for your schema (source code).
@bufbuild/protoc-gen-connect-es:
Code generator plugin for the services in your schema (source code).
@bufbuild/connect-web:
Adapters for web browsers, and any other platform that has the fetch API on board.
@bufbuild/connect-node:
Serve RPCs on vanilla Node.js servers. Call RPCs with any protocol.
@bufbuild/connect-fastify:
Plug your services into a Fastify server.
@bufbuild/connect-next:
Serve your RPCs with Next.js API routes.
@bufbuild/connect-express:
Adds your services to an Express server.
The libraries and the generated code are compatible with ES2017 and TypeScript 4.1.
connect-es-integration:
Examples for using Connect with various TypeScript web frameworks and tooling
connect-query:
TypeScript-first expansion pack for TanStack Query that gives you Protobuf superpowers
connect-swift:
Idiomatic gRPC & Connect RPCs for Swift.
connect-go:
Go implementation of gRPC, gRPC-Web, and Connect
connect-demo:
demonstration service powering demo.connect.build
connect-crosstest:
gRPC-Web and Connect interoperability tests
Buf Studio: web UI for ad-hoc RPCs
This project is a beta: we rely on it in production, but we may make a few
changes as we gather feedback from early adopters. Join us on Slack
or see the roadmap discussion for details.
Offered under the Apache 2 license."
1017,"cmorten,opine","Minimalist web framework for Deno ported from ExpressJS.. 
  
  Opine


A minimalist web framework for Deno ported from ExpressJS.

   
   
   
   
   
   
   
   
   
   


   
   
   
   
   


Now in maintenance mode: Deno has introduced Node and NPM compat, considering using Express itself in
Deno!
Express not working for you? Raise an issue on Deno and keep reading for Opine usage :tada:
This is a Deno module available to import direct from this
repo and via the Deno Registry.
Before importing, download and install Deno.
You can then import Opine straight into your project:
Opine is also available on nest.land, a
package registry for Deno on the Blockchain.
Robust routing
Large selection of HTTP helpers including support for downloading / sending
files, etags, Content-Disposition, cookies, JSONP etc.
Support for static serving of assets
View system supporting template engines
Content negotiation
Opine Docs -
usually the best place when getting started ‚ú®
The quickest way to get started with Opine is to utilize the
Opine CLI to generate an application as
shown below:
Install the executable. The executable's major version will match Opine's:
And follow any suggestions to update your PATH environment variable.
Create the app:
Start your Opine app at http://localhost:3000/:
The Express philosophy is to provide
small, robust tooling for HTTP servers, making it a great solution for single
page applications, web sites, hybrids, or public HTTP APIs.
Opine aimed to achieve these same great goals, focussing on providing equivalent
robust tooling and features for Deno uses.
Now Deno's Node compatibility layer is
maturing sufficiently to support Express out of the box, Opine is operating
maintenance mode.
To run the examples, you have two choices:
Run the example using Deno directly from GitHub, for example:
Clone the Opine repo locally:
Then run the example you want:
All the examples contain example commands in their READMEs to help
get you started for either of the above methods.
There are several third party modules that have been ported into this module.
Each third party module has maintained it's license and copyrights. The only
exception is for Express, from which this entire module has been ported, whose
license and copyrights are available at EXPRESS_LICENSE
in the root of this repository, and cover all files within the source
directory which not been explicitly licensed otherwise.
All modules adapted into this module are licensed under the MIT License.
Opine is licensed under the MIT License.
Icon designed and created by
Hannah Morten."
1083,"moufette-tools,moufette","ü¶® Moufette is developer-friendly, open-source set of tools to collect users feedback. Find us on Twitter @MoufetteHQ. <!--  -->

Capture feedback in one organized place to inform your product decisions. Let users help you decide, persevere or pivot!
Moufette is built of 2 parts:
A fully customizable embedable JS widget, to collect user feedback with screenshots, also allows your users to vote on upcoming features
Dashboard to control the widget, customize it and review feedbacks and votes.




1 click Heroku deploy:

Join our Moufette Slack if you need help, want to chat, or are thinking of a new feature idea.
[x] Lightweight embeddable widget built with React and highly customizable.
[x] Super Easy to integrate into any website with a tiny js snippet. 
[x] Clean & simple Dashboard to review feedback with screenshots from your users.
[x] Super easy deploy using Heroku, and Docker coming soon.
[x] Visitors can vote for upcoming features.
[x] Customize widget from dashboard.
[ ] Embeddable Survey
[ ] Support Docker
[ ] Allow users to add comments/select area on the screenshot or attach certain element of the page
[ ] Analytics
[ ] Live view and feedback session
[ ] Track visitors VS users
Many engineers struggle to get the critical early feedback they need to help them navigate the product development and prioritize a long list of features. Moufette is here to solve that.
Moufette is not an analytics tool replacement but rather a complementary. It's important to understand how users behave on your website but in many cases you can't make any sense of their random clicks and scrolling. So why not just ask them! People love to tell what they think or even criticise especially if they think you're wrong (Cunningham's Law). And this is exactly what you need at this stage.
This repo is MIT licensed. Some time in the future will have a paid plan for things like a/b testing and dedicated support. Please reach out for more details.
"
1084,"yuvraj24,WhatsApp-Clone","WhatsApp Clone provides an in-depth view of implementation on how to create a full-stack, mobile, hybrid web application from scratch using React Native, ReactJs, Typescript, NodeJs, ExpressJs, MongoDB, Socket.io, Heroku & Firebase Deployment. üî•üî•. Whatsapp Clone provides an in depth view of implementation on how to create a full-stack, mobile, hybrid web application from scratch. This repository covers implementation of 3 major platform's mainly Android, IOS & Web using React Native & MERN stack üî•. 
Instant & Realtime textual One to One chat
User's Online/Offline availability
Last Seen time
Unread Message count indicator
Realtime Status update
Multiple Status view along with progress
Web Login via QR code scan
WhatsApp Web with realtime chat & status
  

The project includes Mobile app developed for Android & IOS platform along with a Website similar to WhatsApp Web. 
Refer the following links for platform specific implementation,
Mobile App Client (Android & IOS)
Web App Client (WhatsApp Clone Web)
Web Server (Backend)
Refer the following links for platform specific screenshots,
Android
IOS
Website
I am a passionate Engineer which likes to push himself on various fronts of technologies.  
For more exciting updates follow me,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
1085,"WaftTech,WaftEngine","MERN Stack Framework. WaftEngine is an open source platform for developers to create enterprise level web application in MERN stack. This platform already contains components like user management, roles management, module management, access management, content management with production ready setup which helps developers to develop their application in minimum cost.


WaftEngine core features include:
User Manage and Login flow
Role Manage
Module Manage with Access level Definition
Access Management associated with roles
Email Template and settings
Media Manage and server side processing
Error handling and log Management
Authentication and Authorization
Content Management
State Management using redux
Development ready setup
Production ready setup
Since anything in our codebase can be extended, overwritten, or installed as a package, you may also develop, scale, and customize anything on our platform.
git clone &lt;this_url&gt; &amp;&amp; cd &lt;repo_name&gt;
install npm on client and server
cd client
npm install
cd ../server
npm install
Import Default data into MongoDB server from database folder
cd ../database
run mongorestore to import all BSON/json files
Configure Server
Create .env file in server
Update .env file with MONGODB_URI=mongodb://localhost:27017/waft-engine
Configure Client
Create .env file in client
Update .env file with VITE_API_BASE=http://localhost:5050/api/
Running the application in development mode
Development Mode (Client only): cd client then npm run start then open http://localhost:5051 in a browser
Development Mode (Server only): cd server then npm run start then open http://localhost:5050 in a browser
Default Credentials : Email : admin@waftengine.org , Password : Test@1234
For more Getting started
Read documentation & tutorials
Developer Documentation
Architecture
Become a backer and show your support to our open source project on our site.

Does your company use WaftEngine? Ask your manager or marketing team if your company would be interested in supporting our project. Support will allow the maintainers to dedicate more time for maintenance and new features for everyone. Also, your company's logo will show on GitHub and on our site - who doesn't want a little extra exposure? Here's the info.
WaftEngine Gitter Chat
Report security vulnerabilities to &#104;&#101;&#108;&#108;&#111;&#64;&#119;&#97;&#102;&#116;&#116;&#101;&#99;&#104;&#46;&#99;&#111;&#109;.
Bug Post and Feature Request
:star: Star us on GitHub ‚Äî it helps!
We love your pull requests! Check out our Good First Issue and Help Wanted tags for good issues to tackle.
Copyright ¬© The MIT License (MIT)"
1086,"andrechristikan,ack-nestjs-boilerplate","NestJs v9.x Boilerplate. Repository Design Pattern. MongoDB (Mongoose). Containerization.. This repo will representative of authentication service and authorization service
ACK NestJs is a Http NestJs v9.x boilerplate. Best uses for backend service.
You can request feature or report bug with following this link
Kafka Integration : Hybrid Between HTTP and Microservice (Apache Kafka Integration)
Typeorm Integration : Typeorm integration (Outdated)
The features will replated with AWS Features
If you want to implement¬†database transactions, you must run MongoDB as a¬†replication set.
If you change the environment value of APP_ENV to production, that will trigger.
CorsMiddleware will implement src/configs/middleware.config.ts.
Documentation will disable.
Next development
[ ] Google SSO
[ ] Background export/import from/to CSV and Excel
[ ] Update Documentation, include an diagram for easier comprehension
Describes which version.
Easy to maintenance
NestJs Habit
Component based folder structure
Stateless authentication and authorization
Repository Design Pattern or Data Access Layer Design Pattern
Follow Community Guide Line
Follow The Twelve-Factor App
Adopt SOLID and KISS principle
Support Microservice Architecture, Serverless Architecture, Clean Architecture, and/or Hexagonal Architecture
NestJs v9.x ü•≥
Typescript üöÄ
Production ready üî•
Repository Design Pattern (Multi Repository, can mix with TypeORM)
Swagger / OpenAPI 3 included
Authentication (Access Token, Refresh Token, API Key, and Google SSO)
Authorization, Role and Permission Management (PermissionToken)
Support multi-language i18n üó£, can controllable with request header x-custom-lang
Request validation for all request params, query, dan body with class-validation
Serialization with class-transformer
Url Versioning, default version is 1
Server Side Pagination
Import and export data with CSV or Excel by using decorator
MongoDB integrate by using mongoose üéâ
Multi Database
Database Transaction
Database Soft Delete
Database Migration
Logger with Morgan
Debugger with Winston üìù
Apply helmet, cors, and rate-limit
Timeout awareness and can override ‚åõÔ∏è
User agent awareness, and can whitelist user agent
Support environment file
Centralize configuration ü§ñ
Centralize response
Centralize exception filter
Setting from database üóø
Storage integration with AwsS3
Upload file single and multipart to AwsS3
Support Docker installation
Support CI/CD with Github Action or Jenkins
Husky GitHook for check source code, and run test before commit üê∂
Linter with EsLint for Typescript
/app The final wrapper module
/common The common module
/configs The configurations for this project
/health health check module for every service integrated
/jobs cron job or schedule task
/language json languages
/migration migrate all init data
/modules other modules based on service based on project
/router endpoint router. Controller will put in this
Full structure of module
This section will describe the structure of the response.
Default response for the response
Default response for pagination.
This is useful when we need to give the frontend some information that is related / not related with the endpoint.
We assume that everyone who comes here is programmer with intermediate knowledge and we also need to understand more before we begin in order to reduce the knowledge gap.
Understand NestJs Fundamental, Main Framework. NodeJs Framework with support fully TypeScript.
UnderstandTypescript Fundamental, Programming Language. It will help us to write and read the code.
Understand ExpressJs Fundamental, NodeJs Base Framework. It will help us in understanding how the NestJs Framework works.
Understand what NoSql is and how it works as a database, especially MongoDB.
Understand Repository Design Pattern or Data Access Object Design Pattern. It will help to read, and write the source code
Understand The SOLID Principle and KISS Principle for better write the code.
Optional. Understand Microservice Architecture, Clean Architecture, and/or Hexagonal Architecture. It can help to serve the project.
Optional. Understanding The Twelve Factor Apps. It can help to serve the project.
Optional. Understanding Docker. It can help to run the project.
Before start, we need to install some packages and tools.
The recommended version is the LTS version for every tool and package.
Make sure to check that the tools have been installed successfully.
NodeJs
MongoDB
Yarn
Git
Clone the project with git.
This project needs some dependencies. Let's go install it.
Make your own environment file with a copy of env.example and adjust values to suit your own environment.
To know the details, you can read the documentation. Jump to document section
The migration will do data seeding to MongoDB. Make sure to check the value of the DATABASE_ prefix in your.env file.
The Database migration used NestJs-Command
For seeding
For remove all data do
The test is still not good net. I'm still lazy too do that.
The project provide 3 automation testing unit testing, integration testing, and e2e testing.
For specific test do this
Unit testing
Integration testing
E2E testing
Finally, Cheers üçªüçª !!! you passed all steps.
Now you can run the project.
For docker installation, we need more tools to be installed in our instance.
Docker
Docker-Compose
Then run
You can check The ApiSpec after running this project. here
Ongoing update
Optional, if your mongodb version is < 5
Go to file src/common/database/services/database.options.service.ts and add useMongoClient to mongooseOptions then set value to true.
Distributed under MIT licensed.
How to contribute in this repo
Fork the project with click Fork button of this repo.
Clone the fork project
Make necessary changes and commit those changes
Commit the changes
Push changes to fork project
Back to browser, goto your fork repo github. Then, click Compare &amp; pull request
If your code behind commit with the original, please update your code and resolve the conflict. Then, repeat from number 6.
Avoid Circular Dependency
Consume component folder structure, and repository design pattern
Always make service for every module is independently.
Do not put controller into service modules, cause this will break the dependency. Only put the controller into router and then inject the dependency.
Put the config in /configs folder, and for dynamic config put as environment variable
CommonModule only for main package, and put the module that related of service/project into /src/modules. So, if we want to clear the unnecessary module, we just need to delete the src/modules/**
If there a new service in CommonModule. Make sure to create the unit test in /test/unit.
If there a new controller, make sure to create the e2e testing in test/e2e
Andre Christi kan


<!-- BADGE LINKS -->
<!-- CONTACTS -->
<!-- Repo LINKS -->
<!-- Other Repo Links -->
<!-- license -->
<!-- Reference -->
<!-- API Reference -->"
1087,"MoathShraim,Nodejs-rest-api-project-structure-Express","Nodejs project structure practices for building RESTful APIs using Express framework and MongoDB.. This is a basic project structure to help you to start building your own RESTful web APIs (for Android, IOS, or JavaScript framworks) using Express framework and MongoDB with a good structure practices based on clean MVC Architecture.
Fundamental of Express: routing, middleware, sending response and more
Fundamental of Mongoose: Data models, data validation and middleware
RESTful API including pagination,sorting and limiting fields
CRUD operations with MongoDB
Security: encyption, sanitization and more
Authentication with JWT : login and signup
Authorization (User roles and permissions)
Error handling
Enviroment Varaibles
handling error outside Express
Catching Uncaught Exception
server.js : Responsible for connecting the MongoDB and starting the server.
app.js : Configure everything that has to do with Express application. 
config.env: for Enviroment Varaiables
routes -> userRoutes.js: The goal of the route is to guide the request to the correct handler function which will be in one of the controllers
controllers -> userController.js: Handle the application request, interact with models and send back the response to the client 
models -> userModel.js: (Business logic) related to business rules, how the business works and business needs ( Creating new user in the database, checking if the user password is correct, validating user input data)"
1088,"hantsy,nestjs-rest-sample","NestJS RESTful APIs Sample. A NestJS RESTful APIs sample project, including:
Restful APIs satisfies Richardson Maturity Model(Level 2)
Custom Mongoose integration module instead of @nestjs/mongoose
Passport/Jwt authentication with simple text secrets
Fully testing codes with Jest, jest-mock-extended, ts-mockito, @golevelup/ts-jest etc.
Github actions workflow for continuous testing, code coverage report, docker image building, etc.
Install the dependencies.
Running the app
Test
Modern Full-Stack Development with Nest.js, React, TypeScript, and MongoDB: Part 1, Part 2
There is a collection of courses from https://wanago.io/ which is very helpful for building applications with NestJS:
Series: JavaScript testing tutorial"
1089,"nemanjam,mern-boilerplate","Full stack boilerplate with React, Redux, Express, Mongoose, Passport Local, JWT, Facebook and Google OAuth out of the box.. This is full stack boilerplate with React, Redux, Express, Mongoose and Passport. Skip the tedious part and get straight to developing your app.
Live demo is available here: Demo
Since Heroku is no longer free I made Docker production deployment that you can use on any Linux VPS.
original mern-docker-prod repository with Docker code and instructions that you can reuse to deploy your own Mern apps
Traefik part of the deployment traefik-proxy and traefik-proxy/apps/mern-boilerplate
Server
User and Message models with 1:N relation
Full CRUD REST API operations for both Message and User models
Passport authentication with local email/password, Facebook and Google OAuth strategies and JWT protected APIs
User and Admin roles
NodeJS server with Babel for new JS syntax unified with React client
async/await syntax across whole app
Joi server side validation of user's input
Single .env file configuration
Image upload with Multer
Database seed
Client
React client with functional components and Hooks
Redux state management with Thunk for async actions
CSS agnostic, so you don't waste your time replacing my CSS framework with yours
Home, Users, Profile, Admin, Notfound, Login and Register pages
Protected routes with Higher order components
Different views for unauthenticated, authenticated and admin user
Edit/Delete forms for Message and User with Formik and Yup validation
Admin has privileges to edit and delete other users and their messages
Layout component, so you can have pages without Navbar
Loading states with Loader component
Single config file within /constants folder
Read on on how to set up this for development. Clone the repo.
Rename .env.example to .env and fill in database connection strings, Google and Facebook tokens, JWT secret and your client and server production URLs.
Facebook OAuth requires that your server runs on https in development as well, so you need to generate certificates. Go to /server/security folder and run this.
You are good to go, server will be available on https://localhost:5000
Just install the dependencies and run the dev server. App will load on https://localhost:3000.
That's it as far for development setup. For production check the Deployment on Heroku section.






This project is already all set up for deployment on Heroku, you just need to create Heroku application add heroku remote to this repo and push it to heroku origin.
But before that you need MongoDB database, so go to MongoDB Atlas, create cluster, whitelist all IPs and get database URL. Set that URL in .env file as MONGO_URI_PROD.
If you don't insert environment variables in Heroku manually via web interface or console you'll need to remove .env file from server/.gitignore and push it to Heroku. Never push .env file to development repo though.
In the following section you can read detailed instructions about Heroku deployment process.
Server uses Babel so that we can use the same newer JavaScript syntax like the one used on the Client. In development we are passing server/src/index.js file to babel-node executable along with nodemon daemon. We run that with npm run server script.
That is fine for development, we compile the source on every run but for production we want to avoid that and to compile and build code once to JavaScript version which Node.JS can execute. So we take all the code from /server/src folder compile it and put the output into /server/build destination folder. -d is short for destination, and -s flag is for sourcemaps for debugging. We make that into build-babel script.
We also need to delete and make build folder on every deployment, so we do that with this simple script.
Now we have everything to build our server code. We do that by calling 2 last scripts.
Now we just need to call build script and run compiled file with node. Make sure Babel is in the production dependencies in the server/package.json or you'll get ""babel is not defined"" error on Heroku.
Our server is now all set up, all we need is to call start-prod script. Heroku infers runtime he needs to run the application by the type of dependencies file in the root folder, so for Node.JS we need another package.json. Heroku will call start script after building phase so we just need to pass our start-prod script to spin up the server with the --prefix server where server is folder in which package.json with that script is located.
Before all this happens Heroku needs to install the dependencies for both server and client, heroku-postbuild script is meant for that. NPM_CONFIG_PRODUCTION=false variable is there to disable production environment while dependencies are being installed. Again --prefix flag is specifying the folder of the script being run. In this script we build our React client as well.
Before you push to production you'll need to set your URLs in client/constants. That's it.
Brad Traversy Dev connector 2.0
Brad Traversy Learn The MERN Stack Youtube playlist
Thinkster react-redux-realworld-example-app
Thinkster 
node-express-realworld-example-app 
Quinston Pimenta Deploy React with Node (Express, configured for ES6, Babel) to Heroku (without babel-node)
Kim Nguyen How to Deploy ES6 Node.js & Express back-end to Heroku"
1090,"foyzulkarim,mernboilerplate-antd","A MERN boilerplate repository using Antd-Pro with RBAC feature, following all production best practices.. In this repository I will keep adding the production best practices we should follow in a MERN (MongoDB, Express.js, React.js, and Node.js) project. Also for better UX I am using Antd Pro for the UI. May be later I will use MUI as well.
Below are the sample of a sample list page:


As the name suggests, this repository is built on top of Express.js and React.js, however in the implementation detail, we will find other supporting technologies as well.
React - A JavaScript library for building user interfaces
Ant Design Pro - A design system for enterprise-level products. Create an efficient and enjoyable work experience
Testing Library - React Testing Library
Umi Request - HTTP client for the executing HTTP request from browser to server.
Node.js - evented I/O for the backend
Express.js - Fast, unopinionated, minimalist web framework for Node.js
MongoDB - The application data platform for NoSQL databases
Mongoose - mongoose
Swagger - Swagger (Not done yet)
Jest - JavaScript testing framework
Super Test - Super test API testing framework
Details frameworks and packages can be found in the package.json files in server and client directory.
This project can be run basically in two ways. One is using docker, other way is to run manually via vscode.
Depending on the MongoDB hosting option, we choose the appropriate docker-compose file.
Currently we have two docker-compose files:
docker-compose.mongocloud.yml - MongoDB.com hosted cluster
docker-compose.yml - Local MongoDB container
We need to change the MONGODB_CLOUD_URL in docker-compose.mongocloud.yml to the appropriate MongoDB URL.
We need to change the REACT_APP_API_URL in docker-compose.yml to the appropriate API URL. If we want to expose our client to the internet, we need to change the REACT_APP_API_URL to the appropriate API URL. Otherwise keep REACT_APP_API_URL as http://localhost:8002.
Run docker-compose commands
It is expected that the machine must have docker and docker-compose installed. Go to the root of the repository and execute appropriate commands. This will spin up the server and client containers along with the MongoDB container (if we are using local MongoDB server) inside of Docker environment.
Using docker containers with cloud hosted MongoDB
Using docker containers with local MongoDB
The client and server both are up and running and we should see the following screen if we navigate to the client url.

seed data
 Go inside of the docker container and execute below commands. These will seed the database with roles, users and products data.
You should see the following output:



You should be now login to the application and see the products list.
Node.js : To run npm packages
MongoDB : As a database for the application
To run via vscode, we should run the server and client side projects separately, and also make sure mongodb is up and running.
Create a .env file inside of the server directory. Add the below entries or change accordingly. You can follow the .env.sample file to see the format.
We assume we run the MongoDB in the docker container.
To seed the database, we need to run the following commands in the docker container. You can run these commands in the terminal as well if you are running the server and client outside of the docker environment.
I assume we are running appserver in the docker container.
You should be able to see the username and password in the /server/setup/users.json file.
I have introduced a permission management ui for the application. Sample image is given below.

We can also send the logs to sentry.io. To use this feature, we need to add the dsn entry into client/src/env.config.js.
Setup snippet is like below in index.js file
~~To view the api, open your browser and visit http://localhost:5000/api-docs
Ideally we should add all of the API endpoints into the swagger, but for the demo purpose, we only added Products API endpoint.
To test the APIs, we can reuse the postman collection. Open docs/rbac-mern-boilerplate.postman_collection.json into Postman and you should see the endpoints with appropriate payloads.~~
In this repository, we have included both unit testing and integration testing. For now, the code coverage is very low, but we are working on it to make it more than 90% somewhere in the future
We incorporated only unit tests in client side, and mock all the externals dependencies like localStorage and axios.
To run the tests, we can run npm run test command.
Integration testing: We have integrated the Jest as the testing library, and we have added supertest and mongodb-memory-server packages to make the integration testing easier.
Unit testing: We have used Jest to test the service layers and mock the external dependencies like MongoDB.
To run the tests, we can run npm run test command.
This project is MIT licensed.
For now, I am not taking any community contritutions in terms of code.  But if you have any suggestions or you found any bugs, please feel free to open an issue or a pull request.
On the other hand, if you want to know something, or want to start a discussion about this  project, please start a discussion in our GitHub's discussion board.
I have been screen recording the coding steps of this project. You can find the videos in the YouTube playlist. These  videos are only in Bangla, but I am happy to take special dedicated+paid sessions in English for international intersted audience. Feel free to reach out to me at foyzulkarim@gmail.com for any kind of help.
Thanks. Cheers."
1091,"bezkoder,node-js-jwt-auth-mongodb","Node.js + MongoDB: User Authentication & Authorization with JWT. The diagram shows flow of how we implement User Registration, User Login and Authorization process.

For more detail, please visit:
You may need to implement Refresh Token:

Working with Front-end:
Angular 8 / Angular 10 / Angular 11 / Angular 12 / Angular 13
React / React + Redux
Associations:
Fullstack:
Integration on same Server/Port:
Integrate React with Node.js Express"
1092,"mongodb-js,mongoose-autopopulate","Always populate() certain fields in your mongoose schemas. Always populate() certain fields in your mongoose schemas


Read the docs here.
Note: This plugin will only work with mongoose >= 4.0. Do NOT use
this plugin with mongoose 3.x. You have been warned.
Note: population is a powerful feature, but it has limitations and
helps you get away with poor schema design.  In particular, it is usually
bad MongoDB schema design to include arrays that grow without bound in
your documents. Do not include a constantly-growing array of ObjectIds
in your schema - your data will become unwieldy as the array grows and
you will eventually hit the 16 MB document size limit.
In general, think carefully when designing your schemas.
The mongoose-autopopulate module exposes a single function that you can
pass to Mongoose schema's plugin() function.
Only apply this plugin to top-level schemas. Don't apply this plugin to child schemas."
1181,"Praful932,Kitabe","Book Recommendation System built for Book Loversüìñ. Simply Rate ‚≠ê some books and get immediate recommendationsü§©. Kitabe (Book in Hindi) is a Book Recommendation System built for all you Book Loversüìñ.
Simply Rate ‚≠ê some books and get immediate recommendations tailored for you ü§©.
See Demo üé•



 


  
For Contributing üíú and setting Up head here.
Demo üé•
Approach üßê
Objective ‚úç
Dataset üßæ
PreProcessing üõ†
Model Exploration ü§Ø
Final Result üòÅ
Project Structure üíÅ‚Äç‚ôÄÔ∏è
To Do üéØ
Contribute üßè‚Äç‚ôÇÔ∏è
Notebooks and Files üìì
References üòá
Contributors ü§ó
License ‚úç

Live Application üåê
Our objective is to build an application for all Book Lovers ‚ô• like us out there where all you have to
do is rate some of your favorite books and the application will do it's voodoo magic üßô‚Äç‚ôÇÔ∏è and give you some more books that you may loveüòç to read.
The Dataset that we used for this task is the goodbooks-10k dataset. It consists of 10k books with a total of 6 million ratings. That's huge right! üòÆ. There are some more huge datasets such as Book-Crossings but they are kinda old üò¨.
Dataset Structure
Since this is a recommendation problem, we have to make sure that the books.csv is as clean as possible and only consider those ratings whose book-id is present, same goes for vice versa.
More Cleaning for books.csv
Missing Book Image URLs
Book & Rating Duplicates
For Recommendation Problems there are multiple approaches that are possible:
Embedding Matrix
Singular Matrix Decomposition
Term Frequency
We experimented with several methods and chose Embedding Matrix & Term Frequency.
Embedding Matrix - This method is often called FunkSVD which won the Netflix Prize back in 2004. Since it is a gradient based function minimization approach we like to call it as Embedding Matrix. Calling it SVD confuses it with the one in Linear Algebra. This Embedding Matrix constructs a vector for each user and each book, such that when the product is applied with additional constraints it gives us the rating. For more elaborate info on FunkSVD refer this.
We used the book embedding as a representation of the books to infer underlying patterns. This led to the embedding able to detect books from the same authors and also infer genres such as Fiction, Autobiography and more.
Term Frequency - This method is like a helper function to above, it shines where embedding fails. Term Frequency takes into account the tokens in a book title be it the book title itself, the name of authors and also rating. Taking into consideration it finds books which match closely with the tokens in the rated book.
üõ† Code for every step can be found in the Notebooks and Files Section.
The Image says it All.

[X] Display Popular Books Among Users
[X] Add AJAX View Tests
[X] Add Model Tests
[X] Use a Better Approach than Count Vectorizer"
1182,"dlerm,shopify-wishlist","üíô A set of files used to implement a simple customer wishlist on a Shopify store. A set of files used to implement a simple customer wishlist on a Shopify store.
Version: 2.3.0 - Compatible with Online Store 2.0
Previous Versions:
To begin using Shopify Wishlist, you must copy some of the files in this repo into your Shopify theme code.
Note: This setup assumes that you have a snippet for displaying a product card.
Files to copy:
Place the button-wishlist.liquid snippet inside your existing product card snippet, or on the product.liquid template
{%- render 'button-wishlist', product: product -%}
This will allow customer's to add/remove items to/from their wishlist
Replace the snippet in the product-card-template.liquid section with your existing product card snippet
Same snippet from step 1
Create a new page in the Shopify admin:
Admin > Online Store > Pages > Add Page
Set the new page's template to page.wishlist
This page will display a customer's saved wishlist items
Place the script in theme.liquid before the closing &lt;/head&gt; tag
&lt;script src=""{{ 'Wishlist.js' | asset_url }}"" defer=""defer""&gt;&lt;/script&gt;
That's it! When viewing your Shopify store, you should see the wishlist buttons inside your product cards (likely on collections pages) or on the product template. A click on the wishlist button will add/remove the item from the customer's wishlist and trigger active styling on the button. After adding wishlist items, you can view your wishlist by navigating to the page created in step 3.
This wishlist uses Javascript and localStorage to save the customer's wishlist on their browser. The localStorage will not persist if the user clears browser storage or browses in incognito mode.
As customers browser products and adds them to their wishlist, the script will automatically set any wishlist buttons to active state if the corresponding product is already included in the wishlist.
These files come with no styling or structure so that you can customize as needed. This is intended to bring you the base functionality of a wishlist with no frills.
If you are working in an unpublished theme, you will need to create the new templates on the published theme as well. The Shopify admin will only allow you to assign a page to a template if the template exists on the published theme.
If you are upgrading to the Online Store 2.0 version, you will be required to delete the older .liquid wishlist and product card templates."
1183,"ateliee,jquery.schedule","jquery and html schedule calendar. jquery and html schedule calendar
Drag and Drop Support
Resize Schedule
Ajax Get Data
append head css
insert body
on change schedule bar callback
initialize data
on click bar callback
on add schedule row callback
on add schedule bar callback
on click schedule row callback
run server browser-sync"
1184,"Sany07,Job-Portal-Django","DJobPortal is a job posting site developed in Django. Where Employer can Register their Company profile, Login Then add Job Post. Employee  can bookmark & apply for the Job. There is a dashboard section where Employer can check his job posting list & applicants details also can delete and update his job post. Employee can see his job bookmark list & can update his profile.. Django Job Portal.       







    ========Thank You=========
"
1185,"shubham1710,ByteWalk","A social media photo-sharing website built on the Django Framework.. A social media photo sharing website built on Django Framework.
The features available to users :-
Post images.  A short description and tags can be included if desired by user.
can check everyone's post and also like and comment on the photos.
Users can edit or delete their photos too.
Users can search for posts by tags and for other users by their username.
Without authentication, users can view the posts but cannot like or comment.
Registeration system is complete with password reset option also available to users.
Users can edit their profile including profile pic and a short bio about them.
Users can view profile of others users and can send them friend requests.
Users can send friend request, cancel requests, accept requests, reject requests or even unfriend their friends.
Users are given suggestions for new friends based on mutual friendships.
Technologies used :-
Frontend: HTML5, CSS (Bootstrap4 + Custom CSS), AJAX
Backend: Django
Storage: Google Cloud Storage
Deployment: Heroku
To try out the website, please download the repository in your local system and provide all the local variables as per your requirements. Switch to your local storage or keep using Google Cloud but make sure to create an account on Google Cloud Storage and create buckets and put in the id wherever needed in the code (settings.py file).
In this way, you would be able to run it in your local machine! Do try it out!
This repository is open for contribution. If you have any improvement in mind, you should make the pull request with relevant details and I shall add it."
1186,"shahroznawaz,php-notifications",Basic PHP Notification system with Ajax. For detailed explaination head over to : https://www.cloudways.com/blog/real-time-php-notification-system/
1187,"harismuneer,Flight-Booking-System-JavaServlets_App","‚úàÔ∏è An enterprise level Flight Booking System for Turkish Airlines (web-application) based on the Model View Controller (MVC) Architecture made using Java Servlets, Java Server Pages (JSPs). Moreover authentication and authorization for users is implemented. The web-application is also secured against SQL Injection and Cross-Site Scripting attacks.. 




A fully responsive web-based Flight Booking System for Turkish Airlines based on the Model View Controller (MVC) Architecture made using Java Servlets, Java Server Pages (JSPs). Moreover authentication and authorization for users is implemented using Tomcat Roles. The web-application is also secured against SQL Injection and Cross-Site Scripting attacks.
Frontend: HTML, CSS, JavaScript, Jquery, Bootstrap, Java Server Pages (JSPs), AJAX (for a Flight Search Widget)
Backend: Java Servlets, Java Models, Microsoft Access (Database)
Webservices: SOAP Web Services (to get price and number of seats)
Security Features: SQL Injection, Cross-Site Scripting (XSS), Tomcat Roles
Following roles are implemented:
Airline Admin
Airline Manager
Customer
This is for just one airline who wants to sell seats to their customers via internet. 
Following are the steps of work flow:
Airline Admin will set the prices of the seats. There should be three types of seats:
First Class
Business
Economy
The Airline Admin should be able to create and update the features of each type of seat. 
The Airline Admin should be able to set the total number of seats for each flight.
Airline Manager should see a list of seats which the Admin has added or edited when he/she logs in.
Airline Manager then needs to approve the new price or updates.
When the price and update is approved by the manager only then it should be available for the customer to buy.  
The Customer should be able to buy seats based on availability.
When a customer buys a ticket the system should be able to calculate how many seats are left. If all seats are bought the application should not let the customers buy 
more seats. 
The Customer should be able to select the following, to select a seat:
origin and destination cities
dates of travel
number of people traveling
When the customer selects the seat and confirms the booking flight Itinerary should 
be shown to the customer. 
When the customer approves the itinerary the customer should be taken to a payment page where the total price should be shown. When the customer presses 
the pay button consider the transaction done and mark the seat sold. 
Once the seat is sold, send out an email to the customer with the flight itinerary.

   
   



   
   



   
   



   
   


1- Install these:
After installing JDK 8, install NetBeans IDE with all the features including Tomcat Apache Server. 
2- Open Netbeans IDE and go to Services > Servers > Apache Tomcat. Right click ""Apache Tomcat"" and select Properties. Copy the Catalina Base Path and open it. Open the ""conf"" folder and then the ""tomcat-users.xml"" file there. Copy the following lines and paste them in the tomcat-users.xml file before closing tag </tomcat-users>

   
   


Morever, open and read the file. Only the users authenticated in this file are allowed to login and use the Booking System. Use above mentioned credentials to login through the Login Page.
3- Restart NetBeans IDE. Click on File -> Open Project and browse to the downloaded folder named ""Project"". There will be two projects there ""Turkish Airlines"" and ""WSTester"" (which is basically a project to test the Web Services). Select both and open them.
Both projects will be loaded. Now first run the Turkish Airlines project, then to test the web services run WSTester project. 

<hr>
Hey there, I'm Haris  
  - Maker of Things

<hr>

üåê Connect

  
  
  
  
  
  
  


Stuck with some problem? Need help in solution development, guidance, training or capacity building? I am a Full Stack Engineer turned Project Manager with years of technical and leadership experience in a diverse range of technologies and domains. Let me know what problem you are facing at <b>haris.muneer5@gmail.com</b> and we can schedule a consultation meeting to help you get through it.
Development of Web Applications, Mobile Applications, and Desktop Applications
Development of Machine Learning/Deep Learning models, and deployment 
Web Scraping, Browser Automation, Python Scripting
<hr>

If you or your company use any of my projects, like what I‚Äôm doing or have benefited from my projects in any way then kindly consider backing my efforts.
For donations, you can follow these simple steps:
<b>1)</b> Free signup at <b>TransferWise</b> using this link: https://transferwise.com/invite/u/harism95</li>. (Signing up through this link will save you from any transcation fee on the donation)
<b>2)</b> Select the amount e.g (15$) and choose the receiving/recipient's currency to be PKR. It supports multiple payment options (credit card, debit card, wire transfer etc)
<b>3)</b> Then it will show my info as the recipient, select it. If my name isn't shown, then type my email haris.muneer5@gmail.com in recipients.
<b>4)</b> Choose the reason for transfer to the one that suits you the most (in this case it could be 'General expenses') and in the reference section, you can mention 'Support'
If you face any issue in sending donation then feel free to get in touch with me at haris.muneer5@gmail.com 
Thank you for your contribution!
You can get in touch with me on my LinkedIn Profile: 
You can also follow my GitHub Profile to stay updated about my latest projects: 
If you liked the repo then kindly support it by giving it a star ‚≠ê and share in your circles so more people can benefit from the effort.

If you find any bug in the code or have any improvements in mind then feel free to generate a pull request.

If you face any issue, you can create a new issue in the Issues Tab and I will be glad to help you out.

Copyright (c) 2018-present, harismuneer"
1188,"girishsaraf,Online-Appointment-Booking-System","An Online Appointment Booking System for Retail Chain Clinics with both the User as well as the Admin Side.. An Online Appointment Booking System for Retail Chain Clinics with both the User as well as the Admin Side.
Purpose  
In traditional appointment system patients has to come to the hospital and queue at the appointment window to make the appointment. But they usually end up waiting for very long periods of time. The patient can, however decide to schedule an appointment, but this option does not usually work well for all parties involved. Parties involved includes: the patient, the medical personnel and the hospital. Thus, this project focuses on making a system which helps customers to book appointments online along with other useful features. 
Product Scope 
Online appointment scheduling system is a system through which a user or simply, a patient can access the website of the doctor, and through the online software, the patient can easily make their appointments. Manager of the clinic can update the appointment status of the patients making it more informative. 
Overall Description: 
Product Perspective 
There is several online appointment scheduling tools in the marketplace, some of which are feature-loaded, easy to setup and cheap. For doctors, online appointment scheduling brings a lot of value add services and benefits, like engaging the patient, making the patient feel appreciated, and being able to store patients‚Äô data securely for future reference. But the most wonderful and useful advantage is that online appointment scheduling is amazingly low cost. 
Product Functions 
Online appointment system with the key features listed below:-  
For patients: 
-Register as an patient account 
-Booking an appointment 
-Cancelling an appointment 
-See their booking status 
-See doctor availability 
-Search clinic and doctor 
For Manager: 
-Update status of appointments 
-See appointment list 
For Admin: 
-Add doctor/clinic/manager in database 
-Delete doctor/clinic/manager from database 
-Show all doctors/clinic/manager 
-Assign doctor to a clinic 
-Assign Manager to a clinic 
Technologies used: 
-HTML 5 
-CSS3 
-PHP 
-JavaScript 
-AJAX 
-SQL 
-jQuery 
Software Requirement: 
-Php server like (XAMPP, WAMP) etc. 
-MySQL for database 
-Web Browser supporting HTML5 : Google Chrome(recommended) / Firefox  
Step-wise Instructions:
Open the wt_database.sql file given in the zip folder. 
Import it to the wamp/xampp folder  (Note: Username for phpmyadmin is ‚Äòroot‚Äô; password is ‚Äò‚Äô) 
The opening file for the website is the cover.php file. 
Admin login and manager login can be done through the same page. Login credentials: User Username Password Admin admin admin Patient user user Manager manager manager 
User sign up option is also available at the main page i.e. cover.php 
Log out will directly redirect the user to the main page. 
dbconfig.php contains the data for the connection of the localhost to the database of phpmyadmin. Login credentials for phpmyadmin can be restructured there as well."
1189,"alanjones2,Flask-Plotly","Interactive Web Apps and Dashboards. 
Why use Dash when Plotly plus Flask is easy and more flexible? Add a little bit of AJAX and you can add interactivity.
This repo contains the code for the articles listed, below.
If you find this content useful, please consider this... 

<hr width=""100%""/>

[Article] [Code]

This article explores using Flask and Plotly as an alternative to using Dash when creating Web apps. It compares a simple Dash app with a Flask/Plotly one and finds that the latter is easy and more flexible than it's Dash counterpart. You can find the code for the article in the Plotly folder.
<hr width=""100%""/>

[Article] [Code]

This article shows how to create a truly interactive app as you might with Dash with callbacks but using Plotly and Flask and a bit of AJAX. The code for this is in 
plotlycallback-gm.
A slightly modified version of the code above can be found here:
plotlycallback-gm2. In this version no parameters are passed to the template and the chart is always loaded using Ajax. It also has the benefit of labelling the chart! 
<hr width=""100%""/>

[Article] [Code]

The finance library for Python gives you access to Yahoo Finance data and Plotly and Flask let you build a stunning dashboard. 
With a Flask back end thaat leverages the yfinance library and Plotly, and a web front end that plots a Plotly chart loaded from the server,this article shows you how to create a simple finance web app that produces impressive results.
<hr width=""100%""/>

<hr width=""100%""/>

If you have found this content useful, please consider this... 

Please note that all the software in this repo is written for educational purposes and should not be considered suitable for production code"
1190,"kylelobo,Hydroponics","üå± Automated Hydroponics (a method of growing plants without soil) using Arduino Mega.. 
  
 


Automated Hydroponics using Arduino Mega



  [![Status](https://img.shields.io/badge/status-active-success.svg)]()
  [![GitHub Issues](https://img.shields.io/github/issues/kylelobo/Hydroponics.svg)](https://github.com/kylelobo/Hydroponics/issues)
  [![GitHub Pull Requests](https://img.shields.io/github/issues-pr/kylelobo/Hydroponics.svg)](https://github.com/kylelobo/Hydroponics/pulls)
  [![License](https://img.shields.io/badge/license-MIT-blue.svg)](/LICENSE)

  [![Tweet](https://img.shields.io/twitter/url/https/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=Automated%20Hydroponics%20using%20Arduino%20Mega&url=https://github.com/kylelobo/Hydroponics)



 üå± Hydroponics is a subset of hydroculture, the method of growing plants without soil, using mineral nutrient solutions in a water solvent. 

Hydroponics is a subset of hydroculture, the method of growing plants without soil, using mineral nutrient solutions in a water solvent. Terrestrial plants may be grown with only their roots exposed to the mineral solution, or the roots may be supported by an inert medium, such as perlite or gravel.The nutrients in hydroponics can come from an array of different sources; these can include but are not limited to byproduct from fish waste, duck manure, or commercial fertilisers. <sup>1</sup>
Growing with hydroponics comes with many advantages, the biggest of which is a greatly increased rate of growth in your plants. With a proper setup, your plants will mature up to 25% faster and produce up to 30% more than the same plants grown in soil. <sup>2</sup>
Plants in a hydroponic system grow more quickly because they have food and water available to them all the time. They produce bigger crops because they can devote their energy to producing their crop rather than producing large roots such as would be needed in soil to seek out water and nutrients. Hydroponically-grown plants have smaller root systems because the roots do not need to go out looking for nutrients and water.
All of this is possible through careful control of the nutrient solution and pH levels. A hydroponic system will also use 70-90% less water than soil based plants because the system is enclosed, which results in less evaporation. Hydroponics is better for the environment because it reduces waste and pollution from soil runoff. <sup>2</sup>
Traditional agriculture isn‚Äôt possible in places with arid climates such as Arizona, Israel.
Similarly, hydroponics is useful in dense urban areas, where land is at a premium. In Tokyo, hydroponics is used in lieu of traditional soil-based plant growth.
Hydroponics is also useful in places which have land shortage problems, such as Singapore. With so little space available for planting, hydroponic systems take around 20 percent of the land usually required for crop growth. This allows the citizens to enjoy year-round local produce without the expense and delay of importation.
Finally, areas that don't receive consistent sunlight or warm weather can benefit from hydroponics. Places like Alaska and Russia, where growing seasons are shorter, can use hydroponic greenhouses, where light and temperature can be controlled to produce higher crop yields. <sup>[3]</sup>
Hydroponics allows farmers to adapt to any situation, whether it‚Äôs Antarctica‚Äôs frozen tundra, Saudi Arabia‚Äôs windswept and barren deserts, southern Arizona‚Äôs Sonoran Desert, or even a space station.
The entire system mainly consists of a grow box, a reservoir and a water reservoir.
The DC water pumps are attached to the nutrient solution, reservoir, water reservoir and the pH up down solutions. The water level sensor, temperature sensor, EC sensor, pH sensor are installed in the reservoir.
When the EC sensor detects low-salt levels it indicates nutrient deficiencies. Therefore, in such situations, the DC water pump pumps the nutrient solution to the reservoir. The presence of high salt levels / low water levels indicates that fresh water needs to be pumped to the reservoir.
Overlooking pH control can be perilous for plants, particularly those that rely on water supplies with high alkalinity. The pH of the nutrient solution is a major factor in determining the uptake rate of many essential nutrient ions. Run pH too high and the dreaded nutrient lockout looms. The pH sensor detects the pH level of the water and prompts the pH up / pH down pump to balance out the pH levels in the reservoir.
The grow box has a drainage system which allows continous flow of nutrient solution runs over the plants roots.
This type of system works very well because the roots of a plant absorb more oxygen from the air than from the nutrient solution itself. Since only the tips of the roots come in contact with the nutrient solution, the plant is able to get more oxygen which fascilitates a faster rate of growth.
All this can be monitored on the website for this project.
The below video shows a brief working of this project: (üí° PS - Due to financial constraints, we have not used the EC sensor & pH up / down solutions)


  [![Video Demonstration](http://img.youtube.com/vi/mIO8MYL-RWc/0.jpg)](http://www.youtube.com/watch?v=mIO8MYL-RWc ""Video Demonstration"")















Arduino Mega 2560 - The hardware will most likely fit perfectly in the UNO, the problem will be the program size that may not fit in the UNOs 32kB. Plus, such a project might be increased and a mega board will allow that more easily.
Water-Level Sensor - A water-level sensor is a device used in the detection of the water level.
pH Sensor - Optimal pH levels are critical to healthy plants and high yields in both soil and hydroponics gardening. Maintaining those optimal levels, especially in soilless growing systems, calls for frequent, accurate pH testing. Ideal pH levels maximize a plant‚Äôs nutrient uptake. Those nutrients, in turn, increase a plant‚Äôs vigor and productivity.
EC Sensor - To maximize the benefits of growing hydroponically, it‚Äôs important to know how to fine-tune your nutrient regimen to ensure your plants are getting everything they need, in the right doses. To do that, you need to learn how to measure EC, or electrical conductivity, which tells you the amounts of fertilizer salts in your water, and use those readings to feed your plants the right mix of elements for optimal growth and yields.
Water Temperature Sensor - The pH value of the solution changes with the temperature i.e. an increase in any solutions‚Äô temperature will cause a decrease in it‚Äôs viscosity and an increase in the mobility of its ions in solution. An increase in temperature may also lead to an increase in the number of ions in solution due to the dissociation of molecules. As pH is a measure of the hydrogen ion concentration, a change in the temperature of the solution will be reflected by a subsequent
change in pH. <sup>[4]</sup>
Soil Moisture Sensor - This soil moisture sensor can be used to detect the moisture of soil or judge if there is water around the sensor, let's you know if the plants in the mesh pot require water or not.
DHT22 Temperature/Humidity Sensor - The DHT22 is a humidity and temperature sensor with a single wire digital interface. The sensor is calibrated so you can get right to measuring relative humidity and temperature.
ESP8266 - ESP8266 is a WiFi module which helps us track all the sensor data on the website.
DC Water Pump - A DC Water Pump is used to pump water from the water reservoir to the substrate.
5V Relay - A relay is an electromagnetic switch operated by a relatively small electric current that can turn on or off a much larger electric current. It is going to be used to control the DC Water Pump
Arduino IDE
A Linux Environment
Git Version Control
Editor
ThingSpeak
DHT Sensor Library
ThingSpeak
WiFi101
Adafruit_IO_Arduino
Install Apache
Install MySQL
Install PHP
Clone or Download the repository
Move the Hydroponics folder to /var/www/
In your browser, open localhost
The aim of this project is to:
Reduction of water wastage caused by traditional agriculture systems
Providing a scaled down solution for urban gardening
Growing healthier plants at a faster rate due to a controlled growing environment
Simplifying the process of Hydroponics using IOT and Internet Programming
1<a name=""1""> Hydroponics - Wikipedia 
2<a name=""2""> Hydroponic Systems 101 - Fullbloom Hydroponics 
[3]<a name=""3""> How Hydroponics Works - Bambi Turner 
[4]<a name=""4""> pH Meters in Hydroponics - Med-Tek 
[5]<a name=""5""> Urban Hydroponic Oasis - Paul Langdon
@chaitanyadukkipaty"
1267,"facebook,create-react-app","Set up a modern web app by running one command.. 
Create React apps with no build configuration.
Creating an App ‚Äì How to create a new app.
User Guide ‚Äì How to develop apps bootstrapped with Create React App.
Create React App works on macOS, Windows, and Linux.
If something doesn‚Äôt work, please file an issue.
If you have questions or need help, please ask in GitHub Discussions.
If you've previously installed create-react-app globally via npm install -g create-react-app, we recommend you uninstall the package using npm uninstall -g create-react-app or yarn global remove create-react-app to ensure that npx always uses the latest version.
(npx comes with npm 5.2+ and higher, see instructions for older npm versions)
Then open http://localhost:3000/ to see your app.
When you‚Äôre ready to deploy to production, create a minified bundle with npm run build.




You don‚Äôt need to install or configure tools like webpack or Babel.
They are preconfigured and hidden so that you can focus on the code.
Create a project, and you‚Äôre good to go.
You‚Äôll need to have Node 14.0.0 or later version on your local development machine (but it‚Äôs not required on the server). We recommend using the latest LTS version. You can use nvm (macOS/Linux) or nvm-windows to switch Node versions between different projects.
To create a new app, you may choose one of the following methods:
(npx is a package runner tool that comes with npm 5.2+ and higher, see instructions for older npm versions)
npm init &lt;initializer&gt; is available in npm 6+
yarn create &lt;starter-kit-package&gt; is available in Yarn 0.25+
It will create a directory called my-app inside the current folder.
Inside that directory, it will generate the initial project structure and install the transitive dependencies:
No configuration or complicated folder structures, only the files you need to build your app.
Once the installation is done, you can open your project folder:
Inside the newly created project, you can run some built-in commands:
Runs the app in development mode.
Open http://localhost:3000 to view it in the browser.
The page will automatically reload if you make changes to the code.
You will see the build errors and lint warnings in the console.




Runs the test watcher in an interactive mode.
By default, runs tests related to files changed since the last commit.
Builds the app for production to the build folder.
It correctly bundles React in production mode and optimizes the build for the best performance.
The build is minified and the filenames include the hashes.
Your app is ready to be deployed.
You can find detailed instructions on using Create React App and many tips in its documentation.
Please refer to the User Guide for this and other information.
One Dependency: There is only one build dependency. It uses webpack, Babel, ESLint, and other amazing projects, but provides a cohesive curated experience on top of them.
No Configuration Required: You don't need to configure anything. A reasonably good configuration of both development and production builds is handled for you so you can focus on writing code.
No Lock-In: You can ‚Äúeject‚Äù to a custom setup at any time. Run a single command, and all the configuration and build dependencies will be moved directly into your project, so you can pick up right where you left off.
Your environment will have everything you need to build a modern single-page React app:
React, JSX, ES6, TypeScript and Flow syntax support.
Language extras beyond ES6 like the object spread operator.
Autoprefixed CSS, so you don‚Äôt need -webkit- or other prefixes.
A fast interactive unit test runner with built-in support for coverage reporting.
A live development server that warns about common mistakes.
A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps.
An offline-first service worker and a web app manifest, meeting all the Progressive Web App criteria. (Note: Using the service worker is opt-in as of react-scripts@2.0.0 and higher)
Hassle-free updates for the above tools with a single dependency.
Check out this guide for an overview of how these tools fit together.
The tradeoff is that these tools are preconfigured to work in a specific way. If your project needs more customization, you can ""eject"" and customize it, but then you will need to maintain this configuration.
Create React App is a great fit for:
Learning React in a comfortable and feature-rich development environment.
Starting new single-page React applications.
Creating examples with React for your libraries and components.
Here are a few common cases where you might want to try something else:
If you want to try React without hundreds of transitive build tool dependencies, consider using a single HTML file or an online sandbox instead.
If you need to integrate React code with a server-side template framework like Rails, Django or Symfony, or if you‚Äôre not building a single-page app, consider using nwb, or Neutrino which are more flexible. For Rails specifically, you can use Rails Webpacker. For Symfony, try Symfony's webpack Encore.
If you need to publish a React component, nwb can also do this, as well as Neutrino's react-components preset.
If you want to do server rendering with React and Node.js, check out Next.js or Razzle. Create React App is agnostic of the backend, and only produces static HTML/JS/CSS bundles.
If your website is mostly static (for example, a portfolio or a blog), consider using Gatsby or Next.js. Unlike Create React App, Gatsby pre-renders the website into HTML at build time. Next.js supports both server rendering and pre-rendering.
Finally, if you need more customization, check out Neutrino and its React preset.
All of the above tools can work with little to no configuration.
If you prefer configuring the build yourself, follow this guide.
Looking for something similar, but for React Native?
Check out Expo CLI.
We'd love to have your helping hand on create-react-app! See CONTRIBUTING.md for more information on what we're looking for and how to get started.
Create React App is a community maintained project and all contributors are volunteers. If you'd like to support the future development of Create React App then please consider donating to our Open Collective.
This project exists thanks to all the people who contribute.

Thanks to Netlify for hosting our documentation.
We are grateful to the authors of existing related projects for their ideas and collaboration:
Create React App is open source software licensed as MIT. The Create React App logo is licensed under a Creative Commons Attribution 4.0 International license."
1268,"storybookjs,storybook","Storybook is a frontend workshop for building UI components and pages in isolation. Made for UI development, testing, and documentation. . 
  
    
      <source media=""(prefers-color-scheme: dark)"" srcset=""https://user-images.githubusercontent.com/263385/199832481-bbbf5961-6a26-481d-8224-51258cce9b33.png"">
      
    </picture>

  



Build bulletproof UI components faster



  
    
  
  
    
  
  
    
  
  
  
    
  
  
    
  
  
    
  
  
    
  
  
    
  
  
    
  



Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. Find out more at https://storybook.js.org.


<center>
  
</center>

  View README for:
  
  
  


üöÄ Getting Started
üìí Projects
üõ† Supported Frameworks & Examples
üöá Sub Projects
üîóAddons
üèÖ Badges & Presentation materials
üë• Community
üëè Contributing
üë®‚Äçüíª Development scripts
üíµ Backers
üí∏ Sponsors
:memo: License
Visit Storybook's website to learn more about Storybook and to get started.
Documentation can be found on Storybook's docs site.
View Component Encyclopedia to see how leading teams use Storybook.
Storybook comes with a lot of addons for component design, documentation, testing, interactivity, and so on. Storybook's API makes it possible to configure and extend in various ways. It has even been extended to support React Native, Android, iOS, and Flutter development for mobile.
For additional help, join us in the Storybook Discord.
CLI - Streamlined installation for a variety of app types
examples - Code examples to illustrate different Storybook use cases
See Addon / Framework Support Table
To continue improving your experience, we have to eventually deprecate certain addons in favor of new and better tools.
If you're using info/notes, we highly recommend you migrate to docs instead, and here is a guide to help you.
If you're using contexts, we highly recommend you migrate to toolbars and here is a guide to help you.
We have a badge! Link it to your live Storybook example.

If you're looking for material to use in your Storybook presentation, such as logos, video material, and the colors we use, you can find it all on our brand repo.
Tweeting via @storybookjs
Blogging at storybook.js.org and Medium
Chatting on Discord
Videos and streams at YouTube
Contributions to Storybook are always welcome!
üì• Pull requests and üåü Stars are always welcome.
Read our contributing guide to get started,
or find us on Discord, we will take the time to guide you.
Looking for a first issue to tackle?
We tag issues with  when we think they are well suited for people who are new to the codebase or OSS in general.
Talk to us, we'll find something that suits your skills and learning interest.
Storybook is organized as a monorepo using Lerna. Useful scripts include:
Runs a sandbox template storybook with test stories
As above, but gives you options to customize the sandbox (e.g. selecting other frameworks)
boolean check if code conforms to linting rules - uses remark & eslint
yarn lint:js - will check js
yarn lint:md - will check markdown + code samples
yarn lint:js --fix - will automatically fix js
boolean check if unit tests all pass - uses jest
yarn run test --core --watch - will run core tests in watch-mode
Become a sponsor to have your logo and website URL on our README on Github. [Become a sponsor]






























By making a recurring donation, you can support us and our work. [Become a backer]






























-the end-"
1269,"enaqx,awesome-react","A collection of awesome things regarding React ecosystem. A collection of awesome things regarding the React ecosystem.
JavaScript Library for building User Interfaces
react-devtools - Inspection of React component hierarchy in the Chrome and Firefox Developer Tools
react-hot-loader - Tweak React components in real time
react-loadable - A higher order component for loading components with promises
loadable-components - React code splitting made easy
reactotron - A desktop app for inspecting your React and React Native projects
storybook - UI component dev & test
docz - Zero Config, live-reloading documentation with Markdown + JSX
react-styleguidist - Isolated React component development environment with a living style guide
react-cosmos - Dev tool for creating reusable React components
eslint-plugin-react - React specific linting rules for ESLint
eslint-plugin-jsx-a11y - Static AST checker for a11y rules on JSX elements
@axe-core/react - Accessibility auditing for React applications
DataFormsJS JSX Loader - Small JavaScript Compiler for quickly converting JSX to JS directly on a web page
Why Did You Render - Monkey patches React to notify you about avoidable re-renders.
Divjoy - React codebase and UI generator to speed up development (paid)
Plasmic - Powerful design tool for building your React components visually.
jsx-ast-utils - AST utility module for statically analyzing JSX
react-scanner - Extract React components and props usage from code
create-react-app - Set up a modern Web app by running one command
Razzle - Build production ready React applications. Razzle is toolchain for modern static and dynamic websites and web applications
Neutrino React Preset - @neutrinojs/react is a Neutrino preset that supports building React web applications
react-starter-kit - Isomorphic Web app boilerplate
create-react-library - CLI for creating reusable, modern React libraries using Rollup and create-react-app.
tsdx - Zero-config CLI for TypeScript package development
next.js - The React Framework
gatsby.js - Free and open source framework based on React
react-admin - Frontend Framework for building B2B applications on top of REST/GraphQL APIs
remix - Finally, a killer React framework from the creators of React Router
Blitz - The Fullstack React Framework
aleph.js - The React Framework in Deno
refine - A React-based framework for building data-intensive applications in no time.
styled-components - Visual primitives for the component age
emotion - Library designed for writing CSS styles with JavaScript
radium - A toolchain for React component styling
jss - Authoring tool for CSS
aphrodite - Framework-agnostic CSS-in-JS with support for server-side rendering, browser prefixing, and minimum CSS generation
linaria - Zero-Runtime CSS in JS
stitches - CSS-in-JS with near-zero runtime, SSR, multi-variant support, and a best-in-class developer experience
vanilla-extract - Zero-runtime Stylesheets-in-TypeScript
react-location - Enterprise Client-Side Routing for React
react-router - Declarative routing for React
navi - Declarative, asynchronous routing for React
curi - JavaScript router for single-page applications
reach - Next Generation Routing for React
universal-router - A simple middleware-style router for isomorphic JavaScript web apps
wouter - A minimalist-friendly ~1.3KB routing library
material-ui - React components for faster and easier web development
blueprint - A React-based UI toolkit for the webs
Fluent UI - A set of React components for building Microsoft web experiences
react-bootstrap - Bootstrap components built with React
reactstrap - Simple React Bootstrap 4 components
ant-design - A design system with values of Nature and Determinacy
chakra-ui - Simple, Modular & Accessible UI Components for your React Applications
semantic-ui-react - The official Semantic-UI-React integration
evergreen - Evergreen React UI Framework by Segment
grommet - A react-based framework that provides accessibility, modularity, responsiveness, and theming in a tidy package
rebass - React primitive UI components built with styled-system
reakit - Accessible, Composable and Customizable components for React
rsuite - A suite of React components
atlaskit - Atlassian's official UI library, built according to the Atlassian Design Guidelines.
baseweb - Base Web is a foundation for initiating, evolving, and unifying web products.
primereact - A complete UI Framework for React with 50+ components featuring material, bootstrap and custom themes.
eui - Elastic UI Framework
react-spectrum - Adobe's collection of libraries and tools that help you build adaptive, accessible, and robust user experiences
ring-ui - JetBrains Web UI components
react-bulma-components - React components for Bulma framework
react-bulma - React.js components for Modern CSS framework based on Flexbox
trunx - Super Saiyan React components, son of awesome Bulma, implemented in TypeScript
bumbag-ui - Build accessible & themeable React applications with your Bumbag
Mantine ‚Äì A fully featured React library with 100+ hooks and components with native dark theme support
radix - An open-source UI component library for building high-quality, accessible design systems and web apps
react-select - The Select Component for React
react-beautiful-dnd - Beautiful and accessible drag and drop for lists with React
react-dnd - Drag and Drop for React
react-grid-layout - A draggable and resizable grid layout with responsive breakpoints
react-table - A lightweight, fast and extendable datagrid for React
react-data-grid - Excel-like grid component built with React
react-draggable - React draggable component
react-resizable-and-movable - A resizable and draggable component for React
react-resizable - A simple React component that is resizable with a handle
react-resizable-box - A resizable component for React
react-searchbox-awesome - Minimalistic searchbox
react-sortable-pane - A sortable and resizable pane component for React
react-spaces - Nestable resizable, anchored, scrollable components
react-dates - An easily internationalizable, mobile-friendly datepicker library for the web
react-big-calendar - Calendar component
react-datepicker - ReactJS Datepicker
react-list - A versatile infinite scroll React component
react-intl - Internationalize React apps
react-i18next - Internationalization for React done right
react-aria-modal - A fully accessible React modal
react-hotkeys - Declarative hotkey and focus area management for React
react-keydown - Lightweight keydown wrapper for React components
react-joyride - Create guided tours for your apps
react-virtualized - React components for efficiently rendering large lists and tabular data
react-window - React components for efficiently rendering large lists and tabular data
data-source - Library to power streaming data visualisations as used in Facebook's Flipper
react-text-mask - Input mask for React
react-loading-skeleton - Create skeleton screens that automatically adapt to your app
react-spinkit - A collection of loading indicators animated with CSS for React
rheostat - Accessible slider component built with React
qrcode.react - QR component for use with React
react-archer - Draw arrows between React elements
react-pdf-viewer - A PDF viewer made for React
react-parallax-tilt - Easily apply tilt hover effect on React components
react-popper - Position tooltips and popovers in an elegant, performant manner
react-tsparticles - Easily create highly customizable particles animations
react-spring - Spring-physics based animation library for React applications
framer-motion - A React library to power production-ready animations
react-accessible-accordion - React Component for creating an 'Accordion' that adheres to the WAI ARIA spec for accessibility.
react-truncate-markup - React component for truncating JSX markup.
react-cookie - Universal cookies for React
react-slick - Carousel component built with React
react-gtm-module - Google Tag Manager Module for React
react-device-detect - Detect device for React
react-colorful - A tiny (2,5 KB), dependency-free, fast and accessible color picker component
react-modal - Accessible modal dialog component for React
cleave.js - Format input text content when you are typing
react-fontawesome - Font Awesome 5 React component
react-advanced-cropper - An advanced React component for image cropping
swiper - modern mobile touch slider
jest - Delightful JavaScript Testing Framework
enzyme - JavaScript Testing utilities for React
react-testing-library - Simple and complete React DOM testing utilities
react-hooks-testing-library - React hooks testing utilities that encourage good testing practices
majestic - Zero config GUI for Jest
react-border-wrapper - A wrapper for placing elements along div borders in React.
react-magic - Automatically AJAXify plain HTML with the power of React
react-toolbox - A set of React components implementing Google's Material Design specification
tcomb-react - Library allowing you to check all the props of your React components
react-responsive - Media queries in react for responsive design
preact - Fast 3kb React alternative with the same ES6 API.
riotjs - A React-like, 3.5KB user interface library
Maple.js - Bringing the concept of web-components to React
react-i13n - A performant, scalable and pluggable approach to instrumenting your React application
react-icons - svg react icons of popular icon packs
react-open-doodles - Awesome free illustrations as react components.
Keo - Plain functions for a more functional Deku approach to creating React components, with functional goodies such as pipe, memoize, etc...
Bit - A virtual repository for managing and using react and other web components across applications
AtlasKit - Atlassian's React UI library
ReactiveSearch - UI components library for Elasticsearch
Slate - A completely customizable framework for building rich text editors.
react-json-schema - Construct React elements from JSON by mapping JSON definitions to React components that you expose.
react-lodash - Lodash as React components
react-helmet - A document head manager for React
react-snap - Zero-configuration framework-agnostic static prerendering for SPAs
Draft.js - A React framework for building text editors
refract - Harness the power of reactive programming to supercharge your components
react-desktop - OS X and Windows UI components built with React
reapop - A simple and customizable React notifications system
react-extras - Useful components and utilities for working with React
react-instantsearch - Lightning-fast search for React and React Native applications, by Algolia
uppy - The next open source file uploader for web browsers
react-motion - A spring that solves your animation problems
react-esi - React Edge Side Includes
react-aria - Adobe's library of React Hooks that provides accessible UI primitives for your design system
react-uploady - Modern file-upload components & hooks for React.
om - ClojureScript interface
Reagent - A minimalistic ClojureScript interface to React.js
ngReact - React Components in Angular
coffee-react-transform - Provides React JSX support for Coffeescript
sprockets-coffee-react - Sprockets preprocessor for CJSX
react-kup - A simple, non-intrusive alternative to jsx for coffeescript
turbo-react - Combine Turbolinks and React to apply DOM diffs
react-bacon - A little module for using React with Bacon.js
msx - React's JSX Transformer, tweaked to output calls to Mithril
react-backbone - Backbone-aware mixins for react
NestedReact - transparent integration with Backbone Views and NestedTypes models
backbone-reaction - React, Backbone and then some
react.backbone - Plugin for React to make Backbone migration easier
reactbone - React extensions for Backbone
backbone-react-ui - React components for use with backbone and backbone paginator
react-events - Declarative managed event bindings for react components
react-mixin-manager - React mixin registration manager
react-topcoat by @plaxdan - Topcoat CSS components built with the React library
react-topcoat by @arnemart - A collection of React components for Topcoat
reactdown - Write React components using markdown syntax
react-jade - Compile Jade to React JavaScript
jade-react - Compile Jade templates to React.DOM expressions
gulp-jade-react - Compile Jade templates into React de-sugared JSX with Gulp
sbt-reactjs - React SBT Plugin using npm
scalajs-react - A guilty affair between Scala.js and Facebook's React
react-xtags - Using React to implement xtags
jreact - React on server-side Java (with Rhino or Nashorn)
React.hiccup - A complete replacement for JSX written in sweet.js
react-play - Rendering React components in the Play Framework with JDK8's Nashorn
rx-react - Utilities to works with React in a RxJS
react-with-di - A hacked prototype of React.js with DI
reactfire - ReactJS mixin for easy Firebase integration
react-clickdrag-mixin - ClickDrag mixin for React component
react-masonry-mixin - Standalone mixin for Masonry (@desandro)
react-packery-mixin - Standalone mixin for Packery (Metafizzy)
react-dropzone - Simple HTML5 drag-drop zone with React.js.
aframe-react - A-Frame VR + React
react-three-fiber - A react reconciler for threejs (web and react-native)
react-three - React bindings to create and control a 3D scene using three.js
react-three-renderer - Render into a three.js canvas using React
react-threejs - Simplest bindings between React & Three.js
react-masonry-css - Fast Masonry layout powered by CSS, dependency free
react-captcha - A react.js reCAPTCHA for Google
reaptcha - Clean, modern and simple React wrapper for Google reCAPTCHA
react-recaptcha-that-works - A reCAPTCHA bridge for React that works
redux - Predictable State Container for JavaScript Apps
mobx - Simple, scalable state management
react-query - Hooks for fetching, caching and updating asynchronous data in React
flux - Application architecture for building user interfaces
recoil - Experimental state management library for React apps
jotai - Bottom-up approach to React state management with an atomic model
xstate-react - State machines and statecharts for the modern web
zustand - Bear necessities for state management in React
easy-peasy - Vegetarian friendly state for React
hookstate - The simple but very powerful and incredibly fast state management for React that is based on hooks
effector - Fast and powerful reactive state manager
reactn - React, but with built-in global state management
react-facet - Observable-based state management for performant game UIs built in React
Viro React - Platform for rapidly building AR/VR applications using React Native
react-three-fiber - A React renderer for Three.js
react-pdf - Create PDF files using React
ink - React for interactive command-line apps
react-blessed - A React renderer for blessed terminal interface library
react-sketchapp - Render React components to Sketch
react-figma - A React renderer for Figma
react-nil - A react null renderer
remotion - Create videos programmatically in React
formik - Build forms in React, without the tears
react-hook-form - React Hooks for forms validation
react-jsonschema-form - A React component for building Web forms from JSON Schema
react-final-form - High performance subscription-based form state management for React
unform - Performance-focused API for React forms
formily - Alibaba Group Unified Form Solution
uniforms - A React library for building forms from any schema
formsy-react - A form input builder and validator for React
react-formal - Sophisticated HTML form management for React
vest - Declarative form validation framework inspired by unit testing syntax.
react-autocomplete by @rackt - WAI-ARIA compliant React autocomplete (Archived, read-only)
react-autosuggest by @moroshko - WAI-ARIA compliant React autosuggest component
react-autocomplete by @eliseumds - Just tasting some ReactJS + RxJS
react-autocomplete by @prometheusresearch - Autocomplete widget based on React
instatype by @gragland - Simple react autocomplete component
downshift - üèé Primitives to build simple, flexible, WAI-ARIA compliant enhanced input React components
React Bootstrap Typeahead - A React-based typeahead that relies on Bootstrap for styling and was originally inspired by Twitter's typeahead.js.
react-art - React Bridge to the ART Drawing Library
react-canvas - High performance &lt;canvas&gt; rendering for React components
react-famous - Complex 3D animations UI at 60 FPS with Famo.us
react-kinetic - HTML5 Canvas via KineticJS using React
react-svg-morph - morph your svg components one into another
react-hooks-svgdrawing - SVG Drawing with React hooks
react-svg-pan-zoom - A React component that adds pan and zoom features to SVG.
immer - Create the next immutable state by mutating the current one
ReSub - A library for writing better React components and data stores
immutable-js - Immutable Data Collections for Javascript
baobab - JavaScript & TypeScript persistent and optionally immutable data tree with cursors
WatermelonDB - üçâ Reactive & asynchronous database for powerful React and React Native apps ‚ö°Ô∏è
RxDB - A realtime Database for JavaScript Applications
react-googlemaps - React interface to Google maps
react-maps - A map component for React
react-google-maps - React.js Google Maps integration component
react-gmaps - A Google Maps component for React.js
react-map-gl - A React wrapper for MapboxGL-js plus overlay API
google-map-react - Isomorphic google map React component
react-mapbox-gl - A mapbox-gl-js wrapper to make the API react friendly
google-maps-react - A declarative Google Map React component using React, lazy-loading dependencies, current-location finder and a test-driven approach by the Fullstack React team.
react-leaflet - React components for Leaflet maps
react-geo - A set of geo-related components using react, antd, and ol
pigeon-maps - ReactJS maps without external dependencies
vx - Visualization components
victory - A collection of composable React components for building interactive data visualizations
react-vis - Data Visualization Components
recharts - Redefined chart library built with React and D3
nivo - Provides a rich set of data visualization components, built on top of the D3 and React libraries
echarts-for-react - Apache ECharts components for React wrapper
react-apexcharts - React Component for ApexCharts
chartify - React plugin for building charts using CSS
Framework for building native apps using React
react-native-code-push - React Native module for CodePush
Create React Native App - Create React Native apps that run on iOS, Android, and web
Ignite - The hottest CLI for React Native, boilerplates, plugins, generators, and more!
Expo - The Expo platform for making cross-platform mobile apps
react-navigation - Routing and navigation for your React Native apps
react-native-social-share - Use the iOS and Android native Twitter and Facebook share popup with React Native
react-native-fbsdk - A wrapper around the iOS Facebook SDK
react-native-side-menu - Simple customizable component to create side menu
react-native-mapbox-gl - A Mapbox GL react native module
react-native-icons - Quick and easy icons in React Native
react-native-vector-icons - 3000 Customizable Icons for React Native with support for NavBar/TabBar
react-native-google-signin - Google Signin for React Native
react-native-gifted-chat - The most complete chat UI for React Native
react-native-fast-image - FastImage, performant React Native image component
recyclerlistview - High performance listview for React Native and web!
react-native-largelist - The best large list component for React Native
react-native-gesture-handler - Declarative API exposing platform native touch and gesture system to React Native
rn-placeholder - Display some placeholder stuff before rendering your text or media content in React Native
sentry-react-native - Real-time crash reporting for your web apps, mobile apps, and games.
realm-js - Realm is a mobile database: an alternative to SQLite & key-value stores
react-native-device-info - Device Information for React Native iOS and Android
react-native-react-bridge - A toolset to run React web app in React Native and handle communication between them.
uncompress-react-native - Simple library to decompress files .zip, .rar, .cbz, .cbr in React Native.
Predictable State Container for JavaScript Apps
react-redux - Official React bindings for Redux
redux-toolkit - The official, opinionated, batteries-included toolset for efficient Redux development
redux-devtools - DevTools for Redux with hot reloading, action replay, and customizable UI
reselect - Selector library for Redux
redux-thunk - Thunk middleware for redux
redux-saga - An alternative side effect model for Redux apps
connected-react-router - A Redux binding for React Router
redux-form - A Higher Order Component using react-redux to keep form state
normalizr - Normalizes nested JSON according to a schema
redux-observable - RxJS middleware for Redux
redux-undo - Higher order reducer to add undo/redo functionality to redux state containers
redux-persist - Persist and rehydrate a redux store
Rematch - Redux made easy
A query language for your API
graphql-js - A reference implementation of GraphQL for JavaScript
express-graphql - Create a GraphQL HTTP server with Express
Apollo - Industry-standard GraphQL implementation
graphql-ruby - Ruby implementation of GraphQL
graphql-java - GraphQL Java implementation
sangria - Scala GraphQL client and server library
graphql-php - A PHP port of GraphQL reference implementation
graphene - GraphQL framework for Python
graphql-dotnet - GraphQL for .NET
graphql-go - GraphQL for Go
juniper - GraphQL server library for Rust
Hasura - Instant GraphQL for all your data
Prisma - Next-generation ORM
for Node.js and TypeScript
graphql-sequelize - GraphQL & Relay for MySQL & Postgres via Sequelize
Data-Driven React Applications
graphql-relay-js - A library to help construct a graphql-js server supporting react-relay
react-router-relay - Relay integration for React Router
relay-local-schema - Use Relay without a GraphQL server
relay-codemod - Codemod scripts based for on jsodeshift to update Relay APIs
hackernews-react-graphql - Hacker News clone rewritten with universal JavaScript, using React and GraphQL
react-reduction - Free Admin Template Built with React and Bootstrap4
reactjs-tmdb-app - Responsive React The Movie Database App
react-shopping-cart - Simple ecommerce cart application built with React Redux
kibana - Your window into the Elastic Stack
firefox debugger - The Firefox debugger that works anywhere
spectrum ‚Äì Simple, powerful online communities
mattermost - Open source Slack alternative
overreacted - Personal blog by Dan Abramov
winamp2-js - Winamp 2 reimplemented for the browser
This list started as personal collection of interesting things about React. At the time it started React was in beta, there was special script to transform JSX to JS and even Flux was not yet published. React is mainstream now, lots of things happened. Please, do not try to use this list as advertisement board or place for public push of your experiments. Only fully free resources here, please. Do not hesitate to suggest cleaning PRs for outdated projects and articles along with new contributions. Your contributions and suggestions are heartily‚ô° welcome, though. (‚úø‚ó†‚Äø‚ó†)"
1270,"gatsbyjs,gatsby","The fastest frontend for the headless web. Build modern websites with React.. 
  
    
  


  Gatsby



  <strong>
    The future of web development is here.
  </strong>


  Gatsby is a free and open source framework based on React that helps developers build blazing fast websites and apps.  It combines the control and scalability of dynamically rendered sites with the speed of static-site generation, creating a whole new web of possibilities.


  
    
  
  
    
  
  
    
  
  
    
  
  
    
  
  
    
  
  
    
  



  Quickstart
  <span> ¬∑ </span>
  Tutorial
  <span> ¬∑ </span>
  Plugins
  <span> ¬∑ </span>
  Starters
  <span> ¬∑ </span>
  Showcase
  <span> ¬∑ </span>
  Contribute
  
  Support: Twitter, Discussions
  <span> & </span>
  Discord


Gatsby helps professional developers efficiently create maintainable, highly-performant, content-rich websites.
Load Data From Anywhere. Gatsby pulls in data from any data source, whether it‚Äôs Markdown files, a headless CMS like Contentful or WordPress, or a REST or GraphQL API. Use source plugins to load your data, then develop using Gatsby‚Äôs uniform GraphQL interface.
Go Beyond Static Websites. Get all the benefits of static websites with none of the limitations. Gatsby sites are fully functional React apps, so you can create high-quality, dynamic web apps, from blogs to e-commerce sites to user dashboards.
Choose your Rendering Options. You can choose alternative rendering options, namely Deferred Static Generation (DSG) and Server-Side Rendering (SSR), in addition to Static Site Generation (SSG) ‚Äî on a per-page basis. This type of granular control allows you to optimize for performance and productivity without sacrificing one for the other.
Performance Is Baked In. Ace your performance audits by default. Gatsby automates code splitting, image optimization, inlining critical styles, lazy-loading, prefetching resources, and more to ensure your site is fast ‚Äî no manual tuning required.
Use a Modern Stack for Every Site. No matter where the data comes from, Gatsby sites are built using React and GraphQL. Build a uniform workflow for you and your team, regardless of whether the data is coming from the same backend.
Host at Scale for Pennies. Gatsby sites don‚Äôt require servers, so you can host your entire site on a CDN for a fraction of the cost of a server-rendered site. Many Gatsby sites can be hosted entirely free on Gatsby Cloud and other similar services.
Use Gatsby's Centralized Data Layer Everywhere. With Gatsby's Valhalla Content Hub you can bring Gatsby's data layer to any project. Making it accessible via a unified GraphQL API for building content sites, eCommerce platforms, and both native and web applications.
Click the link below to quickly try the workflow of developing, building, and deploying websites with Gatsby and Gatsby Cloud.
At the end of this process, you'll have
a site working on Gatsby Cloud
a new repository that is linked to that new site
as you push changes to your new repository, Gatsby Cloud will automatically rebuild and redeploy your site!
You can get a new Gatsby site up and running on your local dev environment in 5 minutes with these four steps:
Initialize a new project.
Give it the name ""My Gatsby Site"".
Start the site in develop mode.
Next, move into your new site‚Äôs directory and start it up:
Open the source code and start editing!
Your site is now running at http://localhost:8000. Open the my-gatsby-site directory in your code editor of choice and edit src/pages/index.js. Save your changes, and the browser will update in real time!
At this point, you‚Äôve got a fully functional Gatsby website. For additional information on how you can customize your Gatsby site, see our plugins and the official tutorial.
Full documentation for Gatsby lives on the website.
For most developers, we recommend starting with our in-depth tutorial for creating a site with Gatsby. It starts with zero assumptions about your level of ability and walks through every step of the process.
To dive straight into code samples head to our documentation. In particular, check out the ‚Äú<i>How-to Guides</i>‚Äù, ‚Äú<i>Reference</i>‚Äù, and ‚Äú<i>Conceptual Guides</i>‚Äù sections in the sidebar.
We welcome suggestions for improving our docs. See the ‚Äúhow to contribute‚Äù documentation for more details.
Start Learning Gatsby: Follow the Tutorial ¬∑ Read the Docs
Wondering what we've shipped recently? Check out our release notes for key highlights, performance improvements, new features, and notable bugfixes.
Also, read our documentation on version support to understand our plans for each version of Gatsby.
Already have a Gatsby site? These handy guides will help you add the improvements of Gatsby v5 to your site without starting from scratch!
Gatsby is dedicated to building a welcoming, diverse, safe community. We expect everyone participating in the Gatsby community to abide by our Code of Conduct. Please read it. Please follow it. In the Gatsby community, we work hard to build each other up and create amazing things together. üí™üíú
Whether you're helping us fix bugs, improve the docs, or spread the word, we'd love to have you as part of the Gatsby community!
Check out our Contributing Guide for ideas on contributing and setup steps for getting our repositories up and running on your local machine.
This repository is a monorepo managed using Lerna. This means there are multiple packages managed in this codebase, even though we publish them to NPM as separate packages.
Licensed under the MIT License.
Thanks go out to all our many contributors creating plugins, starters, videos, and blog posts. And a special appreciation for our community members helping with issues and PRs, or answering questions on Discord and GitHub Discussions.
A big part of what makes Gatsby great is each and every one of you in the community. Your contributions enrich the Gatsby experience and make it better every day."
1271,"apache,superset","Apache Superset is a Data Visualization and Data Exploration Platform. <!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
""License""); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->










A modern, enterprise-ready business intelligence web application.
Why Superset? |
Supported Databases |
Installation and Configuration |
Release Notes |
Get Involved |
Contributor Guide |
Resources |
Organizations Using Superset
Superset is a modern data exploration and data visualization platform. Superset can replace or augment proprietary business intelligence tools for many teams. Superset integrates well with a variety of data sources.
Superset provides:
A no-code interface for building charts quickly
A powerful, web-based SQL Editor for advanced querying
A lightweight semantic layer for quickly defining custom dimensions and metrics
Out of the box support for nearly any SQL database or data engine
A wide array of beautiful visualizations to showcase your data, ranging from simple bar charts to geospatial visualizations
Lightweight, configurable caching layer to help ease database load
Highly extensible security roles and authentication options
An API for programmatic customization
A cloud-native architecture designed from the ground up for scale
Large Gallery of Visualizations
<kbd></kbd>
Craft Beautiful, Dynamic Dashboards
<kbd></kbd>
No-Code Chart Builder
<kbd></kbd>
Powerful SQL Editor
<kbd></kbd>
Superset can query data from any SQL-speaking datastore or data engine (Presto, Trino, Athena, and more) that has a Python DB-API driver and a SQLAlchemy dialect.
Here are some of the major database solutions that are supported:

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  


A more comprehensive list of supported databases along with the configuration instructions can be found here.
Want to add support for your datastore or data engine? Read more here about the technical requirements.
Ask and answer questions on StackOverflow using the apache-superset tag
Join our community's Slack
and please read our Slack Community Guidelines
Interested in contributing? Check out our
CONTRIBUTING.md
to find resources around contributing along with a detailed guide on
how to set up a development environment.
Superset 2.0!
Understanding the Superset Points of View
Getting Started with Superset
Comprehensive Tutorial for Contributing Code to Apache Superset

Deploying Superset
Recordings of Past Superset Community Events
Mixed Time Series Charts  
Visualizations
Superset API"
1272,"facebook,docusaurus","Easy to maintain open source documentation websites.. 
  Docusaurus
  



  
  
  
  
  
  
  
  
  
  
  
  
  
  
  


We are working hard on Docusaurus v2. If you are new to Docusaurus, try using the new version instead of v1. See the Docusaurus v2 website for more details.
Docusaurus v1 doc is available at v1.docusaurus.io and code is available on branch docusaurus-v1
Docusaurus is a project for building, deploying, and maintaining open source project websites easily.
Short on time? Check out our 5-minute tutorial ‚è±Ô∏è!
Tip: use docusaurus.new to test Docusaurus immediately in a playground.
Simple to Start
Docusaurus is built in a way so that it can get running in as little time as possible. We've built Docusaurus to handle the website build process so you can focus on your project.
Localizable
Docusaurus ships with localization support via CrowdIn. Empower and grow your international community by translating your documentation.
Customizable
While Docusaurus ships with the key pages and sections you need to get started, including a home page, a docs section, a blog, and additional support pages, it is also customizable as well to ensure you have a site that is uniquely yours.
Use the initialization CLI to create your site:
Read the docs for any further information.
We've released Docusaurus because it helps us better scale and supports the many OSS projects at Facebook. We hope that other organizations can benefit from the project. We are thankful for any contributions from the community.
Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read the full text so that you can understand what actions will and will not be tolerated.
Read our contributing guide to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to Docusaurus.
To help you get your feet wet and get you familiar with our contribution process, we have a list of beginner-friendly bugs that might contain smaller issues to tackle first. This is a great place to get started.
We have a few channels for contact:
Discord:
#general for those using Docusaurus.
#contributors for those wanting to contribute to the Docusaurus core.
@docusaurus on Twitter
This project exists thanks to all the people who contribute. [Contribute]. 
Thank you to all our backers! üôè Become a backer

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. Become a sponsor
 
Docusaurus is MIT licensed.
The Docusaurus documentation (e.g., .md files in the /docs folder) is Creative Commons licensed.

  
    
      <source media=""(prefers-color-scheme: dark)"" srcset=""./admin/img/browserstack-dark-mode-logo.svg#gh-dark-mode-only"">
      
    </picture>
  


BrowserStack supports us with free access for open source.

Rocket Validator helps us find HTML markup or accessibility issues."
1273,"typescript-cheatsheets,react","Cheatsheets for experienced React developers getting started with TypeScript. Cheatsheets for experienced React developers getting started with TypeScript

  

Web docs |
Espa√±ol |
Portugu√™s |
Contribute! |
Ask!
:wave: This repo is maintained by @swyx, @eps1lon and @filiptammergard. We're so happy you want to try out TypeScript with React! If you see anything wrong or missing, please file an issue! :+1:
 |  | 
The Basic Cheatsheet is focused on helping React devs just start using TS in React apps
Focus on opinionated best practices, copy+pastable examples.
Explains some basic TS types usage and setup along the way.
Answers the most Frequently Asked Questions.
Does not cover generic type logic in detail. Instead we prefer to teach simple troubleshooting techniques for newbies.
The goal is to get effective with TS without learning too much TS.
The Advanced Cheatsheet helps show and explain advanced usage of generic types for people writing reusable type utilities/functions/render prop/higher order components and TS+React libraries.
It also has miscellaneous tips and tricks for pro users.
Advice for contributing to DefinitelyTyped.
The goal is to take full advantage of TypeScript.
The Migrating Cheatsheet helps collate advice for incrementally migrating large codebases from JS or Flow, from people who have done it.
We do not try to convince people to switch, only to help people who have already decided.
‚ö†Ô∏èThis is a new cheatsheet, all assistance is welcome.
The HOC Cheatsheet) specifically teaches people to write HOCs with examples.
Familiarity with Generics is necessary.
‚ö†Ô∏èThis is the newest cheatsheet, all assistance is welcome.
<details>

<summary><b>Expand Table of Contents</b></summary>

[Section 1: Setup TypeScript with React](#section-1-setup-typescript-with-react)
<!--START-SECTION:setup-toc-->

[Video Tutorial](#video-tutorial)<!--END-SECTION:setup-toc-->

[Troubleshooting Handbook: Types](#troubleshooting-handbook-types)
<!--START-SECTION:types-toc-->

[TypeScript doesn't let you restrict the type of children](#typescript-doesnt-let-you-restrict-the-type-of-children)<!--END-SECTION:types-toc-->

  </details>

<!--START-SECTION:setup-->

You can use this cheatsheet for reference at any skill level, but basic understanding of React and TypeScript is assumed. Here is a list of prerequisites:
Good understanding of React.
Familiarity with TypeScript Basics and Everyday Types.
Having read the TypeScript section in the official React docs.
Having read the React section of the TypeScript playground.
This guide will always assume you are starting with the latest TypeScript and React versions. Notes for older versions will be in expandable &lt;details&gt; tags.
Refactoring help https://marketplace.visualstudio.com/items?itemName=paulshen.paul-typescript-toolkit
R+TS Code Snippets (there are a few...)
https://marketplace.visualstudio.com/items?itemName=infeng.vscode-react-typescript
https://www.digitalocean.com/community/tutorials/the-best-react-extension-for-vs-code
TypeScript official extension https://code.visualstudio.com/docs/languages/typescript
JavaScript and TypeScript Nightly https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next
Cloud setups:
TypeScript Playground with React just if you are debugging types (and reporting issues), not for running code
CodeSandbox - cloud IDE, boots up super fast
Stackblitz - cloud IDE, boots up super fast
Local dev setups:
Next.js: npx create-next-app@latest --ts will create in your current folder
Create React App: npx create-react-app name-of-app --template typescript will create in new folder
Vite: npm create vite@latest my-react-ts-app -- --template react-ts
Meteor: meteor create --typescript name-of-my-new-typescript-app
Ignite for React Native: ignite new myapp
TSDX: npx tsdx create mylib for Creating React+TS libraries. (in future: TurboRepo)
<details>
<summary><b>Other tools</b></summary>

Less mature tools still worth checking out:

[Snowpack](<https://www.snowpack.dev/#create-snowpack-app-(csa)>): `npx create-snowpack-app my-app --template app-template-react-typescript`

[Docusaurus v2](https://v2.docusaurus.io/docs/installation) with [TypeScript Support](https://v2.docusaurus.io/docs/typescript-support)

[JP Morgan's `modular`](https://github.com/jpmorganchase/modular): CRA + TS + Yarn Workspaces toolkit. `yarn create modular-react-app `

Manual setup:

[Basarat's guide](https://github.com/basarat/typescript-react/tree/master/01%20bootstrap) for **manual setup** of React + TypeScript + Webpack + Babel

In particular, make sure that you have `@types/react` and `@types/react-dom` installed ([Read more about the DefinitelyTyped project if you are unfamiliar](https://definitelytyped.org/))

There are also many React + TypeScript boilerplates, please see [our Other Resources list](https://react-typescript-cheatsheet.netlify.app/docs/basic/recommended/resources/).

</details>

Have a look at the 7-part ""React Typescript Course"" video series below for an introduction to TypeScript with React.

    

<!--END-SECTION:setup-->

<!--START-SECTION:function-components-->

These can be written as normal functions that take a props argument and return a JSX element.
Tip: You might use Paul Shen's VS Code Extension to automate the type destructure declaration (incl a keyboard shortcut).
<details>

<summary><b>Why is <code>React.FC</code> discouraged? What about <code>React.FunctionComponent</code>/<code>React.VoidFunctionComponent</code>?</b></summary>

You may see this in many React+TypeScript codebases:

However, the general consensus today is that `React.FunctionComponent` (or the shorthand `React.FC`) is [discouraged](https://github.com/facebook/create-react-app/pull/8177). This is a nuanced opinion of course, but if you agree and want to remove `React.FC` from your codebase, you can use [this jscodeshift codemod](https://github.com/gndelia/codemod-replace-react-fc-typescript).

Some differences from the ""normal function"" version:

`React.FunctionComponent` is explicit about the return type, while the normal function version is implicit (or else needs additional annotation).

It provides typechecking and autocomplete for static properties like `displayName`, `propTypes`, and `defaultProps`.

Note that there are some known issues using `defaultProps` with `React.FunctionComponent`. See [this issue for details](https://github.com/typescript-cheatsheets/react/issues/87). We maintain a separate `defaultProps` section you can also look up.

Before the [React 18 type updates](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/56210), `React.FunctionComponent` provided an implicit definition of `children` (see below), which was heavily debated and is one of the reasons [`React.FC` was removed from the Create React App TypeScript template](https://github.com/facebook/create-react-app/pull/8177).

<details>
<summary>(Deprecated)<b>Using <code>React.VoidFunctionComponent</code> or <code>React.VFC</code> instead</b></summary>

In [@types/react 16.9.48](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46643), the `React.VoidFunctionComponent` or `React.VFC` type was added for typing `children` explicitly.
However, please be aware that `React.VFC` and `React.VoidFunctionComponent` were deprecated in React 18 (https://github.com/DefinitelyTyped/DefinitelyTyped/pull/59882), so this interim solution is no longer necessary or recommended in React 18+.

Please use regular function components or `React.FC` instead.

</details>

_In the future_, it may¬†automatically mark props as `readonly`, though that's a moot point if the props object is destructured in the parameter list.

In most cases it makes very little difference which syntax is used, but you may prefer the more explicit nature of `React.FunctionComponent`.

</details>

<details>
<summary><b>Minor Pitfalls</b></summary>

These patterns are not supported:

**Conditional rendering**

This is because due to limitations in the compiler, function components cannot return anything other than a JSX expression or `null`, otherwise it complains with a cryptic error message saying that the other type is not assignable to `Element`.

**Array.fill**

Unfortunately just annotating the function type will not help so if you really need to return other exotic types that React supports, you'd need to perform a type assertion:

[See commentary by @ferdaber here](https://github.com/typescript-cheatsheets/react/issues/57).

</details>

<!--END-SECTION:function-components-->

<!--START-SECTION:hooks-->

Hooks are supported in @types/react from v16.8 up.
Type inference works very well for simple values:
See also the Using Inferred Types section if you need to use a complex type that you've relied on inference for.
However, many hooks are initialized with null-ish default values, and you may wonder how to provide types. Explicitly declare the type, and use a union type:
You can also use type assertions if a state is initialized soon after setup and always has a value after:
This temporarily ""lies"" to the TypeScript compiler that {} is of type User. You should follow up by setting the user state ‚Äî if you don't, the rest of your code may rely on the fact that user is of type User and that may lead to runtime errors.
You can type the useCallback just like any other function.
Note that for React < 18, the function signature of useCallback typed arguments as any[] by default:
In React >= 18, the function signature of useCallback changed to the following:
Therefore, the following code will yield ""Parameter 'e' implicitly has an 'any' type."" error in React >= 18, but not <17.
You can use Discriminated Unions for reducer actions. Don't forget to define the return type of reducer, otherwise TypeScript will infer it.
<details>

<summary><b>Usage with <code>Reducer</code> from <code>redux</code></b></summary>

In case you use the [redux](https://github.com/reduxjs/redux) library to write reducer function, It provides a convenient helper of the format `Reducer<State, Action>` which takes care of the return type for you.

So the above reducer example becomes:

</details>

Both of useEffect and useLayoutEffect are used for performing <b>side effects</b> and return an optional cleanup function which means if they don't deal with returning values, no types are necessary. When using useEffect, take care not to return anything other than a function or undefined, otherwise both TypeScript and React will yell at you. This can be subtle when using arrow functions:
<details>
<summary><b>Solution to the above example</b></summary>

</details>

In TypeScript, useRef returns a reference that is either read-only or mutable, depends on whether your type argument fully covers the initial value or not. Choose one that suits your use case.
To access a DOM element: provide only the element type as argument, and use null as initial value. In this case, the returned reference will have a read-only .current that is managed by React. TypeScript expects you to give this ref to an element's ref prop:
If you are sure that divRef.current will never be null, it is also possible to use the non-null assertion operator !:
Note that you are opting out of type safety here - you will have a runtime error if you forget to assign the ref to an element in the render, or if the ref-ed element is conditionally rendered.
<details>
<summary><b>Tip: Choosing which <code>HTMLElement</code> to use</b></summary>

Refs demand specificity - it is not enough to just specify any old `HTMLElement`. If you don't know the name of the element type you need, you can check [lib.dom.ts](https://github.com/microsoft/TypeScript/blob/v3.9.5/lib/lib.dom.d.ts#L19224-L19343) or make an intentional type error and let the language service tell you:

![image](https://user-images.githubusercontent.com/6764957/116914284-1c436380-ac7d-11eb-9150-f52c571c5f07.png)

</details>

To have a mutable value: provide the type you want, and make sure the initial value fully belongs to that type:
Related issue by @rajivpunjabi - Playground
Example from Stefan Baumgartner - Playground
Based on this Stackoverflow answer:
If you are returning an array in your Custom Hook, you will want to avoid type inference as TypeScript will infer a union type (when you actually want different types in each position of the array). Instead, use TS 3.4 const assertions:
This way, when you destructure you actually get the right types based on destructure position.
<details>
<summary><b>Alternative: Asserting a tuple return type</b></summary>

If you are [having trouble with const assertions](https://github.com/babel/babel/issues/9800), you can also assert or define the function return types:

A helper function that automatically types tuples can also be helpful if you write a lot of custom hooks:

</details>

Note that the React team recommends that custom hooks that return more than two values should use proper objects instead of tuples, however.
https://medium.com/@jrwebdev/react-hooks-in-typescript-88fce7001d0d
https://fettblog.eu/typescript-react/hooks/#useref
If you are writing a React Hooks library, don't forget that you should also expose your types for users to use.
https://github.com/mweststrate/use-st8
https://github.com/palmerhq/the-platform
https://github.com/sw-yx/hooks
Something to add? File an issue.
<!--END-SECTION:hooks-->

<!--START-SECTION:class-components-->

Within TypeScript, React.Component is a generic type (aka React.Component&lt;PropType, StateType&gt;), so you want to provide it with (optional) prop and state type parameters:
Don't forget that you can export/import/extend these types/interfaces for reuse.
<details>
<summary><b>Why annotate <code>state</code> twice?</b></summary>

It isn't strictly necessary to annotate the `state` class property, but it allows better type inference when accessing `this.state` and also initializing the state.

This is because they work in two different ways, the 2nd generic type parameter will allow `this.setState()` to work correctly, because that method comes from the base class, but initializing `state` inside the component overrides the base implementation so you have to make sure that you tell the compiler that you're not actually doing anything different.

[See commentary by @ferdaber here](https://github.com/typescript-cheatsheets/react/issues/57).

</details>

<details>
  <summary><b>No need for <code>readonly</code></b></summary>

You often see sample code include `readonly` to mark props and state immutable:

This is not necessary as `React.Component<P,S>` already marks them as immutable. ([See PR and discussion!](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26813))

</details>

Class Methods: Do it like normal, but just remember any arguments for your functions also need to be typed:
Class Properties: If you need to declare class properties for later use, just declare it like state, but without assignment:
Something to add? File an issue.
Before you start using getDerivedStateFromProps, please go through the documentation and You Probably Don't Need Derived State. Derived State can be implemented using hooks which can also help set up memoization.
Here are a few ways in which you can annotate getDerivedStateFromProps
If you have explicitly typed your derived state and want to make sure that the return value from getDerivedStateFromProps conforms to it.
When you want the function's return value to determine your state.
When you want derived state with other state fields and memoization
<!--END-SECTION:class-components-->

<!--START-SECTION:default-props-->

As per this tweet, defaultProps will eventually be deprecated. You can check the discussions here:
More info can also be found in this article
The consensus is to use object default values.
Function Components:
Class Components:
Type inference improved greatly for defaultProps in TypeScript 3.0+, although some edge cases are still problematic.
Function Components
See this in TS Playground
For Class components, there are a couple ways to do it (including using the Pick utility type) but the recommendation is to ""reverse"" the props definition:
<details>
<summary><b><code>JSX.LibraryManagedAttributes</code> nuance for library authors</b></summary>

The above implementations work fine for App creators, but sometimes you want to be able to export `GreetProps` so that others can consume it. The problem here is that the way `GreetProps` is defined, `age` is a required prop when it isn't because of `defaultProps`.

The insight to have here is that [`GreetProps` is the _internal_ contract for your component, not the _external_, consumer facing contract](https://github.com/typescript-cheatsheets/react/issues/66#issuecomment-453878710). You could create a separate type specifically for export, or you could make use of the `JSX.LibraryManagedAttributes` utility:

This will work properly, although hovering over`ApparentGreetProps`may be a little intimidating. You can reduce this boilerplate with the`ComponentProps` utility detailed below.

</details>

A component with defaultProps may seem to have some required props that actually aren't.
Here's what you want to do:
Define a utility that applies JSX.LibraryManagedAttributes:
<details>
<summary><b>Why does <code>React.FC</code> break <code>defaultProps</code>?</b></summary>

You can check the discussions here:

https://medium.com/@martin_hotell/10-typescript-pro-tips-patterns-with-or-without-react-5799488d6680

https://github.com/DefinitelyTyped/DefinitelyTyped/issues/30695

https://github.com/typescript-cheatsheets/react/issues/87

This is just the current state and may be fixed in future.

</details>

<details>
<summary><b>TypeScript 2.9 and earlier</b></summary>

For TypeScript 2.9 and earlier, there's more than one way to do it, but this is the best advice we've yet seen:

Our former recommendation used the `Partial type` feature in TypeScript, which means that the current interface will fulfill a partial version on the wrapped interface. In that way we can extend defaultProps without any changes in the types!

The problem with this approach is it causes complex issues with the type inference working with `JSX.LibraryManagedAttributes`. Basically it causes the compiler to think that when creating a JSX expression with that component, that all of its props are optional.

[See commentary by @ferdaber here](https://github.com/typescript-cheatsheets/react/issues/57) and [here](https://github.com/typescript-cheatsheets/react/issues/61).

</details>

Something to add? File an issue.
<!--END-SECTION:default-props-->

<!--START-SECTION:basic-type-examples-->

This is intended as a basic orientation and reference for React developers familiarizing with TypeScript.
A list of TypeScript types you will likely use in a React+TypeScript app:
Notice we have used the TSDoc /** comment */ style here on each prop. You can and are encouraged to leave descriptive comments on reusable components. For a fuller example and discussion, see our Commenting Components section in the Advanced Cheatsheet.
<details>
<summary>More on object types: <code>object</code>, <code>{""{}""}</code>, etc</summary>

In Typescript, it's generally best to use specific types for objects. In most cases, this means a literal type like <code>{ id: string; name: string }</code>. In cases where there isn't a fixed structure for an object, you likely either want an index signature (possibly with the <code>Record</code> shorthand) - if there are values of a certain type, but the keys can change - or else generics - if the object structure is more-or-less an arbitrary black-box.

Another approach to objects is the <code>Map</code> data structure, but this is somewhat uncommon to use in React, because React prefers data to be changed immutably (e.g. <code>setUser({...user, name: newName})</code>), while Maps are mutable data structures.

""Vague"" object types like <code>object</code>, <code>{}</code> are fairly niche and should be rarely used, and may function differently than you expect. <code>object</code> is any non-primitive value: this includes things like functions and arrays and constructors, not just ""simple"" objects. And <code>{}</code> is perhaps better thought of as ""an interface with no required properties"", not ""an empty object"" - in practice this type allows anything except <code>null</code> or <code>undefined</code>. <code>Object</code> behaves the same as <code>{}</code> and is basically never used.

</details>

Relevant for components that accept other React components as props.
<details>
<summary><b>Small <code>React.ReactNode</code> edge case before React 18</b></summary>

Before the [React 18 type updates](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/56210), this code typechecked but had a runtime error:

This is because `ReactNode` includes `ReactFragment` which allowed type `{}` before React 18.

</details>

<details>
 <summary><b>JSX.Element vs React.ReactNode?</b></summary>

Quote [@ferdaber](https://github.com/typescript-cheatsheets/react/issues/57): A more technical explanation is that a valid React node is not the same thing as what is returned by `React.createElement`. Regardless of what a component ends up rendering, `React.createElement` always returns an object, which is the `JSX.Element` interface, but `React.ReactNode` is the set of all possible return values of a component.

`JSX.Element` -> Return value of `React.createElement`

`React.ReactNode` -> Return value of a component

</details>

Something to add? File an issue.
You can use either Types or Interfaces to type Props and State, so naturally the question arises - which do you use?
Use Interface until You Need Type - orta.
Here's a helpful rule of thumb:
always use interface for public API's definition when authoring a library or 3rd party ambient type definitions, as this allows a consumer to extend them via declaration merging if some definitions are missing.
consider using type for your React Component Props and State, for consistency and because it is more constrained.
You can read more about the reasoning behind this rule of thumb in Interface vs Type alias in TypeScript 2.7.
The TypeScript Handbook now also includes guidance on Differences Between Type Aliases and Interfaces.
Note: At scale, there are performance reasons to prefer interfaces (see official Microsoft notes on this) but take this with a grain of salt
Types are useful for union types (e.g. type MyType = TypeA | TypeB) whereas Interfaces are better for declaring dictionary shapes and then implementing or extending them.
It's a nuanced topic, don't get too hung up on it. Here's a handy table:
‚ö†Ô∏è In some cases
(source: Karol Majewski)
Something to add? File an issue.
<!--END-SECTION:basic-type-examples-->

<!--START-SECTION:get-derived-state-from-props-->

Before you start using getDerivedStateFromProps, please go through the documentation and You Probably Don't Need Derived State. Derived State can be easily achieved using hooks which can also help set up memoization easily.
Here are a few ways in which you can annotate getDerivedStateFromProps
If you have explicitly typed your derived state and want to make sure that the return value from getDerivedStateFromProps conforms to it.
When you want the function's return value to determine your state.
When you want derived state with other state fields and memoization
<!--END-SECTION:get-derived-state-from-props-->

<!--START-SECTION:forms-and-events-->

If performance is not an issue (and it usually isn't!), inlining handlers is easiest as you can just use type inference and contextual typing:
But if you need to define your event handler separately, IDE tooling really comes in handy here, as the @type definitions come with a wealth of typing. Type what you are looking for and usually the autocomplete will help you out. Here is what it looks like for an onChange for a form event:
Instead of typing the arguments and return values with React.FormEvent&lt;&gt; and void, you may alternatively apply types to the event handler itself (contributed by @TomasHubelbauer):
<details>

<summary><b>Why two ways to do the same thing?</b></summary>

The first method uses an inferred method signature `(e: React.FormEvent<HTMLInputElement>): void` and the second method enforces a type of the delegate provided by `@types/react`. So `React.ChangeEventHandler<>` is simply a ""blessed"" typing by `@types/react`, whereas you can think of the inferred method as more... _artisanally hand-rolled_. Either way it's a good pattern to know. [See our Github PR for more](https://github.com/typescript-cheatsheets/react/pull/24).

</details>

Typing onSubmit, with Uncontrolled components in a Form
If you don't quite care about the type of the event, you can just use React.SyntheticEvent. If your target form has custom named inputs that you'd like to access, you can use a type assertion:
Of course, if you're making any sort of significant form, you should use Formik or React Hook Form, which are written in TypeScript.
<details>
<summary><b>What about <code>InputEvent</code>?</b></summary>

You've probably noticed that there is no `InputEvent`. This is because it is not supported by Typescript as the event itself has no fully browser support and may behave differently in different browsers. You can use `KeyboardEvent` instead.

Sources:

https://github.com/microsoft/TypeScript/issues/29441

https://developer.mozilla.org/en-US/docs/Web/API/InputEvent

https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event

</details>

<!--END-SECTION:forms-and-events-->

<!--START-SECTION:context-->

Here's a basic example of creating a context containing the active theme.
Wrap the components that need the context with a context provider:
Call useContext to read and subscribe to the context.
If you don't have any meaningful default value, specify null:
Now that the type of the context can be null, you'll notice that you'll get a 'currentUser' is possibly 'null' TypeScript error if you try to access the username property. You can use optional chaining to access username:
However, it would be preferrable to not have to check for null, since we know that the context won't be null. One way to do that is to provide a custom hook to use the context, where an error is thrown if the context is not provided:
Using a runtime type check in this will has the benefit of printing a clear error message in the console when a provider is not wrapping the components properly. Now it's possible to access currentUser.username without checking for null:
Another way to avoid having to check for null is to use type assertion to tell TypeScript you know the context is not null:
Another option is to use an empty object as default value and cast it to the expected context type:
You can also use non-null assertion to get the same result:
When you don't know what to choose, prefer runtime checking and throwing over type asserting.
<!--END-SECTION:context-->

<!--START-SECTION:forward-create-ref-->

Check the Hooks section for useRef.
createRef:
forwardRef:
<details>
<summary><b>Side note: the <code>ref</code> you get from <code>forwardRef</code> is mutable so you can assign to it if needed.</b></summary>

This was done [on purpose](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43265/). You can make it immutable if you have to - assign `React.Ref` if you want to ensure nobody reassigns it:

</details>

If you are grabbing the props of a component that forwards refs, use ComponentPropsWithRef.
Read more context in https://fettblog.eu/typescript-react-generic-forward-refs/:
https://medium.com/@martin_hotell/react-refs-with-typescript-a32d56c4d315
You may also wish to do Conditional Rendering with forwardRef.
Something to add? File an issue.
<!--END-SECTION:forward-create-ref-->

<!--START-SECTION:portals-->

Using ReactDOM.createPortal:
<details>
  <summary><b>Using hooks</b></summary>

Same as above but using hooks

</details>

Modal Component Usage Example:
<details>

<summary><b>Context of Example</b></summary>

This example is based on the [Event Bubbling Through Portal](https://reactjs.org/docs/portals.html#event-bubbling-through-portals) example of React docs.

</details>

<!--END-SECTION:portals-->

<!--START-SECTION:error-boundaries-->

React-error-boundary - is a lightweight package ready to use for this scenario with TS support built-in.
This approach also lets you avoid class components that are not that popular anymore.
If you don't want to add a new npm package for this, you can also write your own ErrorBoundary component.
Something to add? File an issue.
<!--END-SECTION:error-boundaries-->

<!--START-SECTION:concurrent-->

Not written yet. watch https://github.com/sw-yx/fresh-async-react for more on React Suspense and Time Slicing.
Something to add? File an issue.
<!--END-SECTION:concurrent-->

<!--START-SECTION:types-->

‚ö†Ô∏è Have you read the TypeScript FAQ Your answer might be there!
Facing weird type errors? You aren't alone. This is the hardest part of using TypeScript with React. Be patient - you are learning a new language after all. However, the more you get good at this, the less time you'll be working against the compiler and the more the compiler will be working for you!
Try to avoid typing with any as much as possible to experience the full benefits of TypeScript. Instead, let's try to be familiar with some of the common strategies to solve these issues.
Union types are handy for solving some of these typing problems:
Type Guarding: Sometimes Union Types solve a problem in one area but create another downstream. If A and B are both object types, A | B isn't ""either A or B"", it is ""A or B or both at once"", which causes some confusion if you expected it to be the former. Learn how to write checks, guards, and assertions (also see the Conditional Rendering section below). For example:
Method 2 is also known as User-Defined Type Guards and can be really handy for readable code. This is how TS itself refines types with typeof and instanceof.
If you need if...else chains or the switch statement instead, it should ""just work"", but look up Discriminated Unions if you need help. (See also: Basarat's writeup). This is handy in typing reducers for useReducer or Redux.
If a component has an optional prop, add a question mark and assign during destructure (or use defaultProps).
You can also use a ! character to assert that something is not undefined, but this is not encouraged.
Something to add? File an issue with your suggestions!
We recommend avoiding using enums as far as possible.
Enums have a few documented issues (the TS team agrees). A simpler alternative to enums is just declaring a union type of string literals:
If you must use enums, remember that enums in TypeScript default to numbers. You will usually want to use them as strings instead:
Sometimes you know better than TypeScript that the type you're using is narrower than it thinks, or union types need to be asserted to a more specific type to work with other APIs, so assert with the as keyword. This tells the compiler you know better than it does.
Note that you cannot assert your way to anything - basically it is only for refining types. Therefore it is not the same as ""casting"" a type.
You can also assert a property is non-null, when accessing it:
Of course, try to actually handle the null case instead of asserting :)
TS' structural typing is handy, until it is inconvenient. However you can simulate nominal typing with type branding:
We can create these values with the Companion Object Pattern:
Now TypeScript will disallow you from using the wrong ID in the wrong place:
In future you can use the unique keyword to brand. See this PR.
Adding two types together can be handy, for example when your component is supposed to mirror the props of a native component like a button:
Playground here
You can also use Intersection Types to make reusable subsets of props for similar components:
Make sure not to confuse Intersection Types (which are and operations) with Union Types (which are or operations).
This section is yet to be written (please contribute!). Meanwhile, see our commentary on Union Types usecases.
The ADVANCED cheatsheet also has information on Discriminated Union Types, which are helpful when TypeScript doesn't seem to be narrowing your union type as you expect.
Specifically when it comes to functions, you may need to overload instead of union type. The most common way function types are written uses the shorthand:
But this doesn't let you do any overloading. If you have the implementation, you can put them after each other with the function keyword:
However, if you don't have an implementation and are just writing a .d.ts definition file, this won't help you either. In this case you can forego any shorthand and write them the old-school way. The key thing to remember here is as far as TypeScript is concerned, functions are just callable objects with no key:
Note that when you implement the actual overloaded function, the implementation will need to declare the combined call signature that you'll be handling, it won't be inferred for you. You can readily see examples of overloads in DOM APIs, e.g. createElement.
Leaning on TypeScript's Type Inference is great... until you realize you need a type that was inferred, and have to go back and explicitly declare types/interfaces so you can export them for reuse.
Fortunately, with typeof, you won't have to do that. Just use it on any value:
Working with slicing state and props is common in React. Again, you don't really have to go and explicitly redefine your types if you use the Partial generic type:
<details>
<summary><b>Minor caveats on using <code>Partial</code></b></summary>

Note that there are some TS users who don't agree with using `Partial` as it behaves today. See [subtle pitfalls of the above example here](https://twitter.com/ferdaber/status/1084798596027957248), and check out this long discussion on [why @types/react uses Pick instead of Partial](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365).

</details>

This can be annoying but here are ways to grab the types!
Grabbing the Prop types of a component: Use React.ComponentProps and typeof, and optionally Omit any overlapping types
You may also use ComponentPropsWithoutRef (instead of ComponentProps) and ComponentPropsWithRef (if your component specifically forwards refs)
Grabbing the return type of a function: use ReturnType:
In fact you can grab virtually anything public: see this blogpost from Ivan Koshelev
TS also ships with a Parameters utility type for extracting the parameters of a function
for anything more ""custom"", the infer keyword is the basic building block for this, but takes a bit of getting used to. Look at the source code for the above utility types, and this example to get the idea. Basarat also has a good video on infer.
What's more annoying than modules with unexported types? Modules that are untyped!
Before you proceed - make sure you have checked that types don't exist in DefinitelyTyped or TypeSearch
Fret not! There are more than a couple of ways in which you can solve this problem.
A lazier way would be to create a new type declaration file, say typedec.d.ts‚Äì if you don't already have one. Ensure that the path to file is resolvable by TypeScript by checking the include array in the tsconfig.json file at the root of your directory.
Within this file, add the declare syntax for your desired module, say my-untyped-module‚Äì to the declaration file:
This one-liner alone is enough if you just need it to work without errors. A even hackier, write-once-and-forget way would be to use ""*"" instead which would then apply the Any type for all existing and future untyped modules.
This solution works well as a workaround if you have less than a couple untyped modules. Anything more, you now have a ticking type-bomb in your hands. The only way of circumventing this problem would be to define the missing types for those untyped modules as explained in the following sections.
You can use TypeScript with --allowJs and --declaration to see TypeScript's ""best guess"" at the types of the library.
If this doesn't work well enough, use dts-gen to use the runtime shape of the object to accurately enumerate all available properties. This tends to be very accurate, BUT the tool does not yet support scraping JSDoc comments to populate additional types.
There are other automated JS to TS conversion tools and migration strategies - see our MIGRATION cheatsheet.
Typing Hooks is just like typing pure functions.
The following steps work under two assumptions:
You have already created a type declaration file as stated earlier in the section.
You have access to the source code - specifically the code that directly exports the functions you will be using. In most cases, it would be housed in an index.js file.
Typically you need a minimum of two type declarations (one for Input Prop and the other for Return Prop) to define a hook completely. Suppose the hook you wish to type follows the following structure,
then, your type declaration should most likely follow the following syntax.
<details>
<summary><b>For instance, the useDarkMode hook exports the functions that follows a similar structure.</b></summary>

As the comments suggest, exporting these config props and return props following the aforementioned structure will result in the following type export.

</details>

In case of typing untyped class components, there's almost no difference in approach except for the fact that after declaring the types, you export the extend the type using class UntypedClassComponent extends React.Component&lt;UntypedClassComponentProps, any&gt; {} where UntypedClassComponentProps holds the type declaration.
For instance, sw-yx's Gist on React Router 6 types implemented a similar method for typing the then untyped RR6.
For more information on creating type definitions for class components, you can refer to this post for reference.
Just a list of stuff that React developers frequently run into, that TS has no solution for. Not necessarily TSX only.

Ref: https://mobile.twitter.com/tannerlinsley/status/1390409931627499523. see also https://github.com/microsoft/TypeScript/issues/9998
Guaranteeing typesafety for this kind of API isn't possible:
Source: https://twitter.com/ryanflorence/status/1085745787982700544?s=20
<!--END-SECTION:types-->

<!--START-SECTION:operators-->

typeof and instanceof: type query used for refinement
keyof: get keys of an object. keyof T is an operator to tell you what values of k can be used for obj[k].
Some misconceptions here.
O[K]: property lookup
[K in O]: mapped types
+ or - or readonly or ?: addition and subtraction and readonly and optional modifiers
x ? Y : Z: Conditional types for generic types, type aliases, function parameter types
!: Nonnull assertion for nullable types
=: Generic type parameter default for generic types
as: type assertion
is: type guard for function return types
Conditional Types are a difficult topic to get around so here are some extra resources:
fully walked through explanation https://artsy.github.io/blog/2018/11/21/conditional-types-in-typescript/
Bailing out and other advanced topics https://github.com/sw-yx/ts-spec/blob/master/conditional-types.md
Basarat's video https://www.youtube.com/watch?v=SbVgPQDealg&list=PLYvdvJlnTOjF6aJsWWAt7kZRJvzw-en8B&index=2&t=0s
<!--END-SECTION:operators-->

<!--START-SECTION:utilities-->

These are all built in, see source in es5.d.ts:
Awaited: emulate the behavior of await
Capitalize: convert first character of string literal type to uppercase
ConstructorParameters: a tuple of class constructor's parameter types
Exclude: exclude a type from another type
Extract: select a subtype that is assignable to another type
InstanceType: the instance type you get from a newing a class constructor
Lowercase: convert string literal type to lowercase
NonNullable: exclude null and undefined from a type
Omit: construct a type with the properties of another type.
OmitThisParameter: remove the 'this' parameter from a function type.
Parameters: a tuple of a function's parameter types
Partial: Make all properties in an object optional
Readonly: Make all properties in an object readonly
ReadonlyArray: Make an immutable array of the given type
Pick: A subtype of an object type with a subset of its keys
Record: A map from a key type to a value type
Required: Make all properties in an object required
ReturnType: A function's return type
ThisParameterType: extract the type of the 'this' parameter of a function type
ThisType: marker for contextual 'this' type
Uncapitalize: convert first character of string literal type to lowercase
Uppercase: convert string literal type to uppercase
<!--END-SECTION:utilities-->

<!--START-SECTION:ts-config-->

You can find all the Compiler options in the TypeScript docs. The new TS docs also has per-flag annotations of what each does. This is the setup I roll with for APPS (not libraries - for libraries you may wish to see the settings we use in tsdx):
You can find more recommended TS config here.
Please open an issue and discuss if there are better recommended choices for React.
Selected flags and why we like them:
esModuleInterop: disables namespace imports (import * as foo from ""foo"") and enables CJS/AMD/UMD style imports (import fs from ""fs"")
strict: strictPropertyInitialization forces you to initialize class properties or explicitly declare that they can be undefined. You can opt out of this with a definite assignment assertion.
""typeRoots"": [""./typings"", ""./node_modules/@types""]: By default, TypeScript looks in node_modules/@types and parent folders for third party type declarations. You may wish to override this default resolution so you can put all your global type declarations in a special typings folder.
Compilation time grows linearly with size of codebase. For large projects, you will want to use Project References. See our ADVANCED cheatsheet for commentary.
<!--END-SECTION:ts-config-->

<!--START-SECTION:official-typings-bugs-->

If you run into bugs with your library's official typings, you can copy them locally and tell TypeScript to use your local version using the ""paths"" field. In your tsconfig.json:
If you just need to add an interface, or add missing members to an existing interface, you don't need to copy the whole typing package. Instead, you can use declaration merging:
You dont always have to implement the module, you can simply import the module as any for a quick start:
Because you don't have to explicitly import this, this is known as an ambient module declaration. You can do AMD's in a script-mode .ts file (no imports or exports), or a .d.ts file anywhere in your project.
You can also do ambient variable and ambient type declarations:
You can see examples of these included in the built in type declarations in the lib field of tsconfig.json
<!--END-SECTION:official-typings-bugs-->

<!--START-SECTION:non-ts-files-->

Use declaration merging.
If, say, you are using a third party JS script that attaches on to the window global, you can extend Window:
Likewise if you wish to ""import"" an image or other non TS/TSX file:
Note that tsc cannot bundle these files for you, you will have to use Webpack or Parcel.
Related issue: https://github.com/Microsoft/TypeScript-React-Starter/issues/12 and StackOverflow
<!--END-SECTION:non-ts-files-->

<!--START-SECTION:editor-integration-->

VSCode
swyx's VSCode Extension: https://github.com/sw-yx/swyx-react-typescript-snippets
amVim: https://marketplace.visualstudio.com/items?itemName=auiworks.amvim
VIM
https://github.com/Quramy/tsuquyomi
nvim-typescript?
https://github.com/leafgarland/typescript-vim
peitalin/vim-jsx-typescript
NeoVim: https://github.com/neoclide/coc.nvim
other discussion: https://mobile.twitter.com/ryanflorence/status/1085715595994095620
You are free to use this repo's TSX logo if you wish:

You may also wish to use alternative logos - jsx-tsx-logos

<!--END-SECTION:editor-integration-->

<!--START-SECTION:linting-->

‚ö†Ô∏èNote that TSLint is now in maintenance and you should try to use ESLint instead. If you are interested in TSLint tips, please check this PR from @azdanov. The rest of this section just focuses on ESLint. You can convert TSlint to ESlint with this tool.
‚ö†Ô∏èThis is an evolving topic. typescript-eslint-parser is no longer maintained and work has recently begun on typescript-eslint in the ESLint community to bring ESLint up to full parity and interop with TSLint.
Follow the TypeScript + ESLint docs at https://github.com/typescript-eslint/typescript-eslint:
add a lint script to your package.json:
and a suitable .eslintrc.js (using .js over .json here so we can add comments):
Most of this is taken from the tsdx PR which is for libraries.
More .eslintrc.json options to consider with more options you may want for apps:
You can read a fuller TypeScript + ESLint setup guide here from Matterhorn, in particular check https://github.com/MatterhornDev/learn-typescript-linting.
Another great resource is ""Using ESLint and Prettier in a TypeScript Project"" by @robertcoopercode.
Wes Bos is also working on TypeScript support for his eslint+prettier config.
If you're looking for information on Prettier, check out the Prettier guide.
<!--END-SECTION:linting-->

<!--START-SECTION:resources-->

me! https://twitter.com/swyx
https://www.freecodecamp.org/news/how-to-build-a-todo-app-with-react-typescript-nodejs-and-mongodb/
https://github.com/piotrwitek/react-redux-typescript-guide - HIGHLY HIGHLY RECOMMENDED, i wrote this repo before knowing about this one, this has a lot of stuff I don't cover, including REDUX and JEST.
10 Bad TypeScript Habits:
not using ""strict"": true
using || for default values when we have ??
Using any instead of unknown for API responses
using as assertion instead of Type Guards (function isFoo(obj: unknown): obj is Foo {})
as any in tests
Marking optional properties instead of modeling which combinations exist by extending interfaces
One letter generics
Non-boolean if (nonboolean) checks
bangbang checks if (!!nonboolean)
!= null to check for null and undefined
Basarat's TypeScript gitbook has a React section with an Egghead.io course as well.
Palmer Group's TypeScript + React Guidelines as well as Jared's other work like disco.chat
TypeScript React Starter Template by Microsoft A starter template for TypeScript and React with a detailed README describing how to use the two together. Note: this doesn't seem to be frequently updated anymore.
Brian Holt's Intermediate React course on Frontend Masters (paid) - Converting App To TypeScript Section
TSX Guide by gojutin
TypeScript conversion:
You?.
<!--END-SECTION:resources-->

<!--START-SECTION:talks-->

Ultimate React Component Patterns with TypeScript, by Martin Hochel, GeeCon Prague 2018
Please help contribute this new section!
<!--END-SECTION:talks-->

<!--START-SECTION:learn-ts-->

Believe it or not, we have only barely introduced TypeScript here in this cheatsheet. If you are still facing TypeScript troubleshooting issues, it is likely that your understanding of TS is still too superficial.
There is a whole world of generic type logic that you will eventually get into, however it becomes far less dealing with React than just getting good at TypeScript so it is out of scope here. But at least you can get productive in React now :)
It is worth mentioning some resources to help you get started:
Step through the 40+ examples under the playground's Examples section, written by @Orta
Anders Hejlsberg's overview of TS: https://www.youtube.com/watch?v=ET4kT88JRXs
Marius Schultz: https://blog.mariusschulz.com/series/typescript-evolution with an Egghead.io course
Basarat's Deep Dive: https://basarat.gitbook.io/typescript/
Axel Rauschmeyer's Tackling TypeScript
Rares Matei: Egghead.io course's advanced TypeScript course on Egghead.io is great for newer typescript features and practical type logic applications (e.g. recursively making all properties of a type readonly)
Learn about Generics, Conditional types and Mapped types
Shu Uesugi: TypeScript for Beginner Programmers
Here is another TypeScript Error Guide that you can check for your errors.
<!--END-SECTION:learn-ts-->

<!--START-SECTION:examples-->

<!--END-SECTION:examples-->

File an issue.
This project follows the all-contributors specification. See CONTRIBUTORS.md for the full list. Contributions of any kind welcome!"
1274,"styled-components,styled-components","Visual primitives for the component age. Use the best bits of ES6 and CSS to style your apps without stress üíÖ. 
  
    
  




  <strong>Visual primitives for the component age. Use the best bits of ES6 and CSS to style your apps without stress üíÖ</strong>
  
  
  
    
        
  
  
  


The main branch is under development of the upcoming v6 major version of styled-components. For changes targeting v5, please point your PRs at the legacy-v5 branch.
Utilizing tagged template literals (a recent addition to JavaScript) and the power of CSS, styled-components allow you to write actual CSS code to style your components. It also removes the mapping between components and styles ‚Äì using components as a low-level styling construct could not be easier!
Alternatively, you may use style objects. This allows for easy porting of CSS from inline styles, while still supporting the more advanced styled-components capabilities like component selectors and media queries.
Equivalent to:
styled-components is compatible with both React (for web) and React Native ‚Äì meaning it's the perfect choice even for truly universal apps! See the documentation about React Native for more information.
Supported by Front End Center. Thank you for making this possible!
npm install styled-components@^5.0.0 react@^16.8 react-dom@^16.8 react-is@^16.8
??
Profit!
If you use jest-styled-components, make sure you update that too.
See the documentation at styled-components.com/docs for more information about using styled-components!
Quicklinks to some of the most-visited pages:
<!-- prettier-ignore -->

This is what you'll see in your browser:

  
    
  


If you're using tooling that has babel-plugin-macros set up, you can switch to the styled-components/macro import path instead to gain the effects of the babel plugin without further setup.
If you wish to provide configuration options to the babel plugin similar to how you would in a .babelrc, see this guide. The config name is ""styledComponents"".
A lot of hard work goes into community libraries, projects, and guides. A lot of them make it easier to get started or help you with your next project! There are also a whole lot of interesting apps and sites that people have built using styled-components.
Make sure to head over to awesome-styled-components to see them all! And please contribute and add your own work to the list so others can find it.
If you want to contribute to styled-components please see our contributing and community guidelines, they'll help you get set up locally and explain the whole process.
Please also note that all repositories under the styled-components organization follow our Code of Conduct, make sure to review and follow it.
Let everyone know you're using styled-components ‚Üí 
This project exists thanks to all the people who contribute. [Contribute].

Thank you to all our backers! üôè [Become a backer]

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor]










Licensed under the MIT License, Copyright ¬© 2016-present Glen Maddern and Maximilian Stoiber.
See LICENSE for more information.
This project builds on a long line of earlier work by clever folks all around the world. We'd like to thank Charlie Somerville, Nik Graf, Sunil Pai, Michael Chan, Andrey Popp, Jed Watson & Andrey Sitnik who contributed ideas, code or inspiration.
Special thanks to @okonet for the fantastic logo."
1345,"reduxjs,react-redux","Official React bindings for Redux. Official React bindings for Redux.
Performant and flexible.
 


The recommended way to start new apps with React Redux is by using the official Redux+JS/TS templates for Create React App, which takes advantage of Redux Toolkit.
React Redux 8.0 requires React 16.8.3 or later (or React Native 0.59 or later).
To use React Redux with your React app, install it as a dependency:
You'll also need to install Redux and set up a Redux store in your app.
This assumes that you‚Äôre using npm package manager
with a module bundler like Webpack or
Browserify to consume CommonJS
modules.
If you don‚Äôt yet use npm or a modern module bundler, and would rather prefer a single-file UMD build that makes ReactRedux available as a global object, you can grab a pre-built version from cdnjs. We don‚Äôt recommend this approach for any serious application, as most of the libraries complementary to Redux are only available on npm.
The React Redux docs are published at https://react-redux.js.org .
The post The History and Implementation of React-Redux
explains what it does, how it works, and how the API and implementation have evolved over time.
There's also a Deep Dive into React-Redux talk that covers some of the same material at a higher level.
MIT"
1346,"redux-saga,redux-saga","An alternative side effect model for Redux apps. 






redux-saga is a library that aims to make application side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) easier to manage, more efficient to execute, easy to test, and better at handling failures.
The mental model is that a saga is like a separate thread in your application that's solely responsible for side effects. redux-saga is a redux middleware, which means this thread can be started, paused and cancelled from the main application with normal redux actions, it has access to the full redux application state and it can dispatch redux actions as well.
It uses an ES6 feature called Generators to make those asynchronous flows easy to read, write and test. (if you're not familiar with them here are some introductory links) By doing so, these asynchronous flows look like your standard synchronous JavaScript code. (kind of like async/await, but generators have a few more awesome features we need)
You might've used redux-thunk before to handle your data fetching. Contrary to redux thunk, you don't end up in callback hell, you can test your asynchronous flows easily and your actions stay pure.
or
Alternatively, you may use the provided UMD builds directly in the &lt;script&gt; tag of an HTML page. See this section.
Suppose we have a UI to fetch some user data from a remote server when a button is clicked. (For brevity, we'll just show the action triggering code.)
The Component dispatches a plain Object action to the Store. We'll create a Saga that watches for all USER_FETCH_REQUESTED actions and triggers an API call to fetch the user data.
To run our Saga, we'll have to connect it to the Redux Store using the redux-saga middleware.
There is also a umd build of redux-saga available in the dist/ folder. When using the umd build redux-saga is available as ReduxSaga in the window object. This enables you to create Saga middleware without using ES6 import syntax like this:
The umd version is useful if you don't use Webpack or Browserify. You can access it directly from unpkg.
The following builds are available:
Important! If the browser you are targeting doesn't support ES2015 generators, you must transpile them (i.e. with babel plugin) and provide a valid runtime, such as the one here. The runtime must be imported before redux-saga:
Below are the examples ported (so far) from the Redux repos.
There are three counter examples.
Demo using vanilla JavaScript and UMD builds. All source is inlined in index.html.
To launch the example, open index.html in your browser.
Important: your browser must support Generators. Latest versions of Chrome/Firefox/Edge are suitable.
Demo using webpack and high-level API takeEvery.
Demo using low-level API to demonstrate task cancellation.
Redux-Saga with TypeScript requires DOM.Iterable or ES2015.Iterable. If your target is ES6, you are likely already set, however, for ES5, you will need to add it yourself.
Check your tsconfig.json file, and the official compiler options documentation.
You can find the official Redux-Saga logo with different flavors in the logo directory.
A few issues have been raised asking whether Redux saga plans to use async/await syntax instead of generators.
We will continue to use generators. The primary mechanism of async/await is Promises and it is very difficult to retain the scheduling simplicity and semantics of existing Saga concepts using Promises. async/await simply don't allow for certain things - like i.e. cancellation. With generators we have full power over how & when effects are executed.
Support us with a monthly donation and help us continue our activities. [Become a backer]






























Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor]






























Copyright (c) 2015 Yassine Elouafi.
Licensed under The MIT License (MIT)."
1347,"verekia,js-stack-from-scratch","üõ†Ô∏è‚ö° Step-by-step tutorial to build a modern JavaScript stack.. Welcome to my modern JavaScript stack tutorial: JavaScript Stack from Scratch.
üéâ This is the V2 of the tutorial, major changes happened since the 2016 release. Check the Change Log!
This is a straight-to-the-point guide to assembling a JavaScript stack. It requires some general programming knowledge, and JavaScript basics. It focuses on wiring tools together and giving you the simplest possible example for each tool. You can see this tutorial as a way to write your own boilerplate from scratch. Since the goal of this tutorial is to assemble various tools, I do not go into details about how these tools work individually. Refer to their documentation or find other tutorials if you want to acquire deeper knowledge in them.
You don't need to use this entire stack if you build a simple web page with a few JS interactions of course (a combination of Browserify/Webpack + Babel + jQuery is enough to be able to write ES6 code in different files), but if you want to build a web app that scales, and need help setting things up, this tutorial will work great for you.
A big chunk of the stack described in this tutorial uses React. If you are beginning and just want to learn React, create-react-app will get you up and running with a React environment very quickly with a pre-made configuration. I would for instance recommend this approach to someone who arrives in a team that's using React and needs to catch up with a learning playground. In this tutorial you won't use a pre-made configuration, because I want you to understand everything that's happening under the hood.
Code examples are available for each chapter, and you can run them all with yarn &amp;&amp; yarn start. I recommend writing everything from scratch yourself by following the step-by-step instructions though.
Final code available in the JS-Stack-Boilerplate repository, and in the releases. There is a live demo too.
Works on Linux, macOS, and Windows.
Note: Since the tutorial was last edited in May 2017, a few libraries have slightly changed their APIs. 95% of the tutorial is still perfectly valid, but if you run into something weird, make sure to check out the open issues.
Setting up your editor (Atom first), MongoDB, Progressive Web App, E2E testing.
If you want to add your translation, please read the translation recommendations to get started!
Bulgarian by mihailgaberov
Chinese (simplified) by @yepbug
French by Naomi Hauret
Italian by Fabrizio Bertone - fbertone.it
Polish by @mbiesiad
Check out the ongoing translations.
Chinese (simplified) by @pd4d10
Italian by Fabrizio Bertone
Japanese by @takahashim
Russian by React Theming
Thai by MicroBenz
Created by @verekia ‚Äì verekia.com.
License: MIT"
1348,"responsively-org,responsively-app","A modified web browser that helps in responsive web development. A web developer's must have dev-tool.. 
  
  Responsively App 
  <strong>A must-have devtool for web developers for quicker responsive web development. üöÄ</strong>
  <h6>Save time by becoming 5x faster!</h6>



  
    
  

  
    
  

  
    
  

  
    
  

  
    
  

   
    
  



  
    
  



  Download Now (free!): 
    responsively.app
  


A modified browser built using Electron that helps in responsive web development. 


Mirrored User-interactions across all devices.
Customizable preview layout to suit all your needs.
One handy elements inspector for all devices in preview.
30+ built-in device profiles with option to add custom devices.
One-click screenshot all your devices.
Hot reloading supported for developers.
Please visit the website to know more about the application - https://responsively.app
The application is available for Mac, Windows and Linux platforms. Please download it from the releases page
Alternatively, MacOS users can use brew  
Also, Windows users can use chocolatey   
or winget:
Linux users using an RPM Package Manager can use rpm
otherwise download an AppImage from the releases page
Follow us on Twitter for future updates - 
Install the handy browser extension to easily send links from your browser to the app and preview instantly.
Download for Chrome 
Download for Firefox 
If you face any problems while using the application, please open an issue here - https://github.com/responsively-org/responsively-app/issues
Here is the roadmap of the desktop app - https://github.com/responsively-org/responsively-app/projects/12?fullscreen=true.
&nbsp;


  
    
  


Ensure you have installed node and yarn
Go to desktop-app folder
Run yarn to install dependencies
Run yarn dev. This will start the app for local development with live reloading.
Come say hi to us on Discord! :wave:
Thanks go to these wonderful people (emoji key):
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Manoj Vivek</b></sub>üíª ‚ö†Ô∏è üìÜ</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Suresh P</b></sub>üíª ‚ö†Ô∏è üìÜ</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Sigit Prabowo</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Leon Feng</b></sub>üìñ</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Kishore S</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Jos√© Javier Rodr√≠guez Zas</b></sub>üíª ‚ö†Ô∏è</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Roman Akash</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Romain Francony</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>AARYAN-MAHENDRA</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Andy</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Ryan Pais</b></sub>üíª ‚ö†Ô∏è</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Jonathan</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Gema Anggada ‚úåÔ∏é</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>jonathanurias96</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Federico Alecci</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Abduraimov Muminjon</b></sub>üìñ</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>V√≠ctor L√°zaro</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Kavita Nambissan</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Prashant Palikhe</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Jaune Sarmiento</b></sub>üñã</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Diego Vieira</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Ajaykumar</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Kiruba Karan</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Sebasti√°n Rodr√≠guez</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Karthick Raja</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Johnny Zabala</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Ross Moody</b></sub>üé®</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Mehrdad Shokri</b></sub>üöá</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Abdelhak Akermi</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Carlos Perez</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Jayant Arya</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>John Rawlins</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>lepasq</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>mrfelfel</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>gorogoroumaru</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Rui Saraiva</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Mehmet Bakirci</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Julien Bertazzo Lambert</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Dinesh Balaji</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>MedBMoussa</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Lucie Vrsovska</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Jakub Cabak</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Palakurthi Durga Kiran Kumar</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Karl Labrador</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Rishi Kumar Chawda</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Carlos Rafael de Oliveira Carneiro</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Zach Hoskins</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>KIWAN KIM</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Andreas</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Panu Valtanen</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Dustin Dauncey</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>heagan01</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Sahil Jangra</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Jay Carlson</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Michael Padilla</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><sub><b>Andreas Steinkellner</b></sub>üíª</td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the all-contributors specification. Contributions of any kind welcome!"
1349,"redux-form,redux-form","A Higher Order Component using react-redux to keep form state in a Redux store. 
 You build great forms, but do you know HOW users use your forms? Find out with Form Nerd! Professional analytics from the creator of Redux Form.










redux-form works with React Redux to
enable an html form in React to use
Redux to store all of its state.
üí∞Psst!! Do you know React and Redux? Sign up with Triplebyte to get offers from top tech companies! üí∞
If you're just getting started with your application and are looking for a form solution, the general consensus of the community is that you should not put your form state in Redux. The author of Redux Form took all of the lessons he learned about form use cases from maintaining Redux Form and built üèÅ React Final Form, which he recommends you use if you are just starting your project. It's also pretty easy to migrate to from Redux Form, because the &lt;Field&gt; component APIs are so similar. Here is a blog post where he explains his reasoning, or there are two talks if you prefer video. Formik is also a nice solution.
The only good reason, in the author's view, to use Redux Form in your application is if you need really tight coupling of your form data with Redux, specifically if you need to subscribe to it and modify it from parts of your application far from your form component, e.g. on another route. If you don't have that requirement, use üèÅ React Final Form.
npm install --save redux-form
You can play around with redux-form in these sandbox versions of the Examples.
This project exists thanks to all the people who contribute.

Thank you to all our backers! üôè [Become a backer]

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor]










"
1350,"xgrommx,awesome-redux","Awesome list of Redux examples and middlewares. <!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
Table of Contents  generated with DocToc
<!-- END doctoc generated TOC please keep comment here to allow auto update -->

List of repositories which use Redux
Predictable state container for JavaScript apps
Universal (Isomorphic) - :metal:
Hot Reload - :fire:
Several videos about Redux + Falcor and Example code
Full-Stack Redux Tutorial - A Comprehensive Guide to Test-First Development with Redux, React, and Immutable Source Server + Client
Building a boilerplate for a Koa, Redux, React application including Webpack, Mocha and SASS - This article explains in detail how this koa-redux-react-boilerplate was built and the technologies it uses.
Modern and Scalable React/Redux Boilerplate - Flexible starter kit using Webpack 2 (tree-shaking) / React Hot Loader v3 / Code Splitting for React Router / PostCSS / CSS Modules / custom Ducks pattern app architecture / best practices / Sentry error tracking / Enzyme test environment :rocket:
react-production-starter - React boilerplate with isomorphic rendering, async react-router routes, async redux reducers, async data fetching, and code-splitting. :metal: :fire:
mern.io - Simple full-stack boilerplate to get started with building isomorphic/universal apps, handles api part and also offers a cli to generate the boilerplate :metal: :fire:
universal-react-redux - Opinionated Universal React/Redux/Webpack with HMR. Continually updated. :metal: :fire:
react-redux-universal-hot-example - A starter boilerplate for a universal webapp using express, react, redux, webpack, and react-hot-loader :metal:
Documented Koa Redux React Webpack boilerplate- The building process of this boilerplate is deeply documented from 0 for learning purposes. You can find the docs here.
Examples
Containers
Middlewares
re-notif A notification center based on React & Redux.
redux-debounce - Debounce your actions!
redux-cycles - Handle async actions with functional and reactive programming.
Tools
simple-redux-form - A tiny redux-form alternative Higher Order Component for forms.
Frameworks
kea - Well-readable, self-documenting and easily refactorable framework that brings your data to life! Comes with scaffolding tools :bird:
Examples
deku-redux - Bindings for redux in deku (Standalone plugin)
)
Examples
Examples
Examples
Examples
Examples
Examples
Examples
Examples
Examples
Tools
Examples
Examples
Examples
.NET
Java
Swift
https://github.com/ReSwift/ReSwift and docs
Purescript
https://github.com/faber/purescript-purdux"
1351,"microsoft,frontend-bootcamp","Frontend Workshop from HTML/CSS/JS to TypeScript/React/Redux. In this two-day workshop you'll learn the basics of frontend development while building a working web app.
The first day provides an introduction to the fundamentals of the web: HTML, CSS and JavaScript. This is targeted at new and experienced developers alike. On the second day we'll dive into more advanced topics like TypeScript, state management, and testing. While the examples should be accessible to anyone, you'll get the most out of it if you have some prior experience with programming and web technologies.
Before starting, make sure your computer has up-to-date versions of the following installed:
Node/NPM (choose the LTS option, which should be version 10)
If using a Mac, also follow these steps to install the code terminal command.
If you already had VS Code installed, check for updates!
React Developer Tools for Chrome or Firefox
Open VS Code and then press ctrl + ` (backtick, in top left corner of keyboard) to open the built-in terminal
Use the cd (change directory) command to find an appropriate place for your code
Type git clone https://github.com/Microsoft/frontend-bootcamp.git into the terminal to pull down a copy of the workshop code
Type cd frontend-bootcamp to change your current directory to the bootcamp folder
Type npm install to install all of the project dependencies
Type code -r . to open the bootcamp code in VS Code
If on a Mac, be sure you've followed these steps first to make the code command available.
At this point, your VS Code window should look something like this:

To start the dev ""inner loop,"" run:
This will load the site shown below.

Demos will either be via CodePen (Steps 1, 2 and 3) or done in the step folder. Follow the step README to walkthrough the demo.
Much like demos, exercises are done via CodePen or in the project step folders. These exercises will give you an opportunity to try what was demonstrated in the first step.
For each lesson, the presenter will walk through some demo code to teach core concepts about the topic. Don't worry about writing code at this point. Just follow along via the readmes linked below.
Most lessons also have an exercise portion. Exercise instructions are usually found in the readme for each step's ""exercise"" folder.
Day one covers the basics of HTML, CSS and JavaScript, as well as an introduction to React and Typescript.
If you are interested in JavaScript, TypeScript, React, Redux, or Design Systems, follow us on Twitter:
This project welcomes contributions and suggestions. Most contributions require you to agree to a
Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us
the rights to use your contribution. For details, visit https://cla.microsoft.com.
When you submit a pull request, a CLA-bot will automatically determine whether you need to provide
a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions
provided by the bot. You will only need to do this once across all repos using our CLA.
This project has adopted the Microsoft Open Source Code of Conduct.
For more information see the Code of Conduct FAQ or
contact opencode@microsoft.com with any additional questions or comments.
Microsoft and any contributors grant you a license to the Microsoft documentation and other content
in this repository under the Creative Commons Attribution 4.0 International Public License,
see the LICENSE file, and grant you a license to any code in the repository under the MIT License, see the
LICENSE-CODE file.
Microsoft, Windows, Microsoft Azure and/or other Microsoft products and services referenced in the documentation
may be either trademarks or registered trademarks of Microsoft in the United States and/or other countries.
The licenses for this project do not grant you rights to use any Microsoft names, logos, or trademarks.
Microsoft's general trademark guidelines can be found at http://go.microsoft.com/fwlink/?LinkID=254653.
Privacy information can be found at https://privacy.microsoft.com/en-us/
Microsoft and any contributors reserve all other rights, whether under their respective copyrights, patents,
or trademarks, whether by implication, estoppel or otherwise."
1352,"coryhouse,react-slingshot","React + Redux starter kit / boilerplate with Babel, hot reloading, testing, linting and a working example app built in. 
  






A comprehensive starter kit for rapid application development using React.
Why Slingshot?
One command to get started - Type npm start to start development in your default browser.
Rapid feedback - Each time you hit save, changes hot reload and linting and automated tests run.
One command line to check - All feedback is displayed on a single command line.
No more JavaScript fatigue - Slingshot uses the most popular and powerful libraries for working with React.
Working example app - The included example app shows how this all works together.
Automated production build - Type npm run build to do all this:

Initial Machine Setup
First time running the starter kit? Then complete the Initial Machine Setup.
Click ""Use this template""
Click the green ""Use this template"" button at the top of this page and enter a name and description for your repo.
Run the setup script
npm run setup
Run the example app
npm start -s
This will run the automated build process, start up a webserver, and open the application in your default browser. When doing development with this kit, this command will continue watching all your files. Every time you hit save the code is rebuilt, linting runs, and tests run automatically. Note: The -s flag is optional. It enables silent mode which suppresses unnecessary messages during the build.
Review the example app.
This starter kit includes a working example app that calculates fuel savings. Note how all source code is placed under /src. Tests are placed alongside the file under test. The final built app is placed under /dist. These are the files you run in production.
Delete the example app files.
Once you're comfortable with how the example app works, you can delete those files and begin creating your own app.
Having issues? See Having Issues?.
Install Node 8.0.0 or greater
Need to run multiple versions of Node? Use nvm.
Install Git.
Disable safe write in your editor to assure hot reloading works properly.
Complete the steps below for your operating system:
Install watchman via brew install watchman or fswatch via brew install fswatch to avoid this issue which occurs if your macOS has no appropriate file watching service installed.
Run this to increase the limit on the number of files Linux will watch. Here's why.
echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p.
Install Python 2.7. Some node modules may rely on node-gyp, which requires Python on Windows.
Install C++ Compiler. Browser-sync requires a C++ compiler on Windows.
Visual Studio Express comes bundled with a free C++ compiler.
If you already have Visual Studio installed:
Open Visual Studio and go to File -> New -> Project -> Visual C++ -> Install Visual C++ Tools for Windows Desktop.
The C++ compiler is used to compile browser-sync (and perhaps other Node modules).
Make sure you ran all steps in Get started including the initial machine setup.
Run npm install - If you forget to do this, you'll see this: babel-node: command not found.
Install the latest version of Node.
Make sure files with names that begin with a dot (.editorconfig, .gitignore, .npmrc) are copied to the project directory root. This is easy to overlook if you copy this repository manually.
Don't run the project from a symbolic link. It may cause issues with file watches.
Delete any .eslintrc that you're storing in your user directory. Also, disable any ESLint plugin / custom rules that you've enabled within your editor. These will conflict with the ESLint rules defined in this project.
Make sure you don't have NODE_ENV set to production on your machine. If you do then the development dependencies won't be installed. Here's how to check.
Install watchman with brew install watchman if you are having the following error after an initial npm start -s:
Error: Error watching file for changes: EMFILE
     at exports._errnoException (util.js:1022:11)
     at FSEvent.FSWatcher._handle.onchange (fs.js:1406:11)
Tip: Things to check if you get an npm run lint error or build error:
If ESW found an error or warning in your project (e.g. console statement or a missing semi-colon), the lint thread will exit with Exit status 1. To fix:
Change the npm run lint script to ""esw webpack.config.* src tools; exit 0""
Change the npm run lint:watch script to ""esw webpack.config.* src tools --watch; exit 0""
Note: Adding exit 0 will allow the npm scripts to ignore the status 1 and allow ESW to print all warnings and errors.
Ensure the eslint/esw globally installed version matches the version used in the project. This will ensure the esw keyword is resolved.
Rebuild node-sass with npm rebuild node-sass if you are having and error like Node Sass does not yet support your current environment on macOS XXX after an initial npm start -s.
Slingshot offers a rich development experience using the following technologies:
The starter kit includes a working example app that puts all of the above to use.
Check out the FAQ"
1440,"Xammie,mailbook","‚úâÔ∏è Laravel Mail Explorer. Mailbook is a Laravel package that lets you easily inspect your mails without having to actually trigger it in your
application.

View demo

You can install the package via composer:
Next install mailbook into your application
The mailbook:install command will create a route file named routes/mailbook.php. In this file you can register your
emails.
Next head over to /mailbook to preview the mailables.
You can both register mailables that live in App\Mails and email notifications in App\Notifications.
You can also use dependency injection in the closure.
A notification will most of the time need a user (also called notifiable in the notification class).
You can set the desired user with the ::to() method.
If you don't need a user you can also pass an e-mail address.
To avoid having to pass the same ::to() to every mailable that needs it you can use the ::group() method. This will
automatically pass the notifiable to every mailable inside the group.
When creating mails you might have a couple of different scenario's that you want to test for one mail, you can use
variants to solve this.
When your application supports multiple languages you need to easily preview your mails in these languages. To enable
this feature you have to add the following code to the mailbook.php config file.
This will display a dropdown in mailbook which you can use to switch to a different language.

Most of the time your mailables will need database models. Sometimes you will even preform queries when rendering these
mailables. Mailbook can automatically rollback database changes after rendering. You can enable it in the config with.
You can now safely use factories and other queries when registering your mailables.
Database rollback is disabled by default.
Testing your mails outside the browser is important if you want to make sure that everything is displayed correctly.
You can use Mailbook to send mails to an email address of your choice using your default mail driver. This will show a
button in the top-right corner which when pressed will send the currently selected email to the speecified addresses.
You can enable this in the config:
You can publish the config file with:
Optionally, you can publish the views using
Please see CHANGELOG for more information on what has changed recently.
Please see CONTRIBUTING for details.
Please review our security policy on how to report security vulnerabilities.
The MIT License (MIT). Please see License File for more information."
1441,"HelipengTony,ouorz-mono",":rocket: A Monorepo for My Personal Website and Related Projects. 
  OUORZ-MONO
  Front-end code & Docker image that power www.ouorz.com and other related projects

  
    
  

  
    
  





<hr/>

Antony-Nuxt (Nuxt.js / Vue.js v2) https://github.com/HelipengTony/antony-nuxt ‚Üí
Antony (Vue.js v2) https://github.com/HelipengTony/antony ‚Üí
Tony (Vue.js v2 / PHP) https://github.com/HelipengTony/tony ‚Üí

SSR/SSG/On-demand ISR
Command palette
Redux + Redux Saga state management
Nexment comment system
Dynamic table of contents sidebar
Personal dashboard
Dark mode

Super opinionated, completely overkill.
TypeScript
Framework
React (Next.js)
Foundation/Adaptor implementation coming soon
Storybook
Turborepo
Data Fetching
swr
Infinite Loading
Revalidation
Suspense
fetch (API Routes)
State Management
Redux Toolkit
Redux Saga
Styling:
styled-components
Tailwind CSS
Content Management:
WordPress (Qiniu - Static file storage)
WP REST API (GraphQL implementation coming soon)
Tencent Cloud CVM (CentOS/Nginx/MySQL/PHP)
Nexment (LeanCloud)
Newsletter (Buttondown)
Error Logging & Web Vitals Metric
Sentry
Linters
ESLint
Prettier
CommitLint
CI/CD
Github Actions
Vercel

Create a .env file with your configuration, see below for a list of environment variables used in this project:
LeanCloud:
NEXT_PUBLIC_LC_KEY
NEXT_PUBLIC_LC_ID
Buttondown:
NEXT_PUBLIC_BUTTONDOWN_TOKEN
Sentry:
NEXT_PUBLIC_SENTRY_DSN
SENTRY_AUTH_TOKEN
SENTRY_PROJECT
SENTRY_ORG
On-demand ISR:
REVALIDATION_REQUEST_TOKEN

<hr/>

Warning
Running WordPress in a Docker container is extremely slow on lower-spec machines
>=1 GB of RAM without MySQL 8, or >=2 GB of RAM with MySQL 8 is recommended
This project is wrapped up in a Docker container built based on the official WordPress Docker image: wordpress:php8.0-apache.

Each build outputs a static Docker image (similar to a typical containerized application) which means updating WordPress itself or adding new themes/plugins requires redeployment.

All uploads are stored in an external store (Qiniu, similar to AWS S3), therefore wp-content/uploads can be treated as temporary data.

main app uses WordPress REST API to fetch data, wordpress app functions as a headless CMS. The theme peg is used to customize the behaviour of the REST API endpoints, therefore peg/functions.php should be the main focus when it comes to the development of wordpress app.

MySQL Database:
WORDPRESS_DB_HOST
WORDPRESS_DB_NAME
WORDPRESS_DB_PASSWORD
WORDPRESS_DB_USER
WORDPRESS_TABLE_PREFIX
Settings:
WORDPRESS_DEBUG
Optionally, WORDPRESS_CONFIG_EXTRA can be set to include other configurations:
MySQL SSL Connection:
define(""MYSQL_CLIENT_FLAGS"", MYSQLI_CLIENT_SSL);
Turn Off PHP Warnings & Notices:
ini_set(""error_reporting"", E_ALL &amp; ~E_NOTICE);
ini_set(""display_errors"",""Off"")
Redis Object Cache:
define(""WP_REDIS_HOST"", ""redis_database_host"");
define(""WP_REDIS_PASSWORD"", ""redis_database_pwd"");""
define(""WP_REDIS_PORT"", ""redis_database_port"")


<hr/>

This project is based on Umami
Follow the instructions here ‚Üí to sign up for Maxmind GeoLite2, and retrieve a license key

Create a .env file with your configuration, see below for a list of environment variables used in this project:
DATABASE_URL
HASH_SALT
MAXMIND_LICENSE_KEY

<hr/>

A super opinionated front-end toolkit library

Storybook: https://ui.twilight-toolkit.ouorz.com ‚Üí
Currently only available in React, Foundation/Adaptor implementation is coming soon.

Work in progress

<hr/>

Build system: Turborepo with Remote Caching
Monorepo Manager: Yarn Workspaces

Use project aliases to run commands in different packages more easily:
Use pre-defined Turborepo scripts whenever content awareness (i.e. caching) is needed:
Root package.json should only contain development dependencies
Use yarn's nohoist option to avoid version conflicts of dependencies in different packages
WIP



<hr/>

Not really following this though...


Test runner: Cypress
Start server:
Run tests:
apps/main uses Cypress Dashboard, disable it by changing the configuration file accordingly.

<hr/>

Build then deploy the Docker image via apps/wordpress/Dockerfile.
Note: by default, the image listens on port 80, rather than the more common 8080

This project utilizes a combination of Server-side Rendering (SSR) and (On-demand) Incremental Static Generation (ISG):


To deploy the storybook, export it as a static web app:

Configuration file fly.toml can be found under apps/wordpress. Persistent storage should mount to /var/www/html/wp-content.
Optionally, volumes with the same name can be created in multiple Fly.io regions which allows Fly to run one or more instances of the app in multiple regions:
Optionally, Fly.io offers full-managed Redis databases which can be created using the following commands:
Traffic is automatically routed through a private IPv6 address restricted to your Fly organization.

Make sure to set root directory path to apps/&lt;project-name&gt;, then update build command to the following:



Enabling diff-based deployment is highly recommended:
"
1442,"jerriclynsjohn,svelte-storybook-tailwind","A starter template for Svelte, TailwindCSS and Storybook. You can easily start your project with this template, instead of wasting time figuring out configurations for each integration.. Visit the website to see the outcome: Svelte + Storybook + TailwindCSS
This has improved a lot since I started this repo, but I feel that there is still a need to just clone the repo and kickstart the project, so here I am again updating this and I'll keep this repo updated. I also feel that there is a need for a repo which shows some best practices.
You can easily start your project with this template, instead of wasting time figuring out configurations for each integration.
Storybook is an open source tool for developing JavaScript UI components in isolation
Svelte is a component framework that allows you to write highly-efficient, imperative code, that surgically updates the DOM to maintain performance.
TailwindCSS is a highly customizable, low-level CSS framework that gives you all of the building blocks you need to build bespoke designs without any annoying opinionated styles you have to fight to override.
Initiate the project using npm create vite@latest
Select Svelte + Javascript from the CLI
You have a basic Svelte + Vite app ready
Install dependencies npm install -D tailwindcss postcss autoprefixer
Instantiate the tailwind and postcss config files using npx tailwindcss init -p
Update the tailwind config as shown below to accomodate for Svelte components
Add Tailwind directive to your CSS at ./src/index.css
Import CSS into ./src/main.js
With this we have tailwind setup in the project
Instantiate by running npx storybook@next init
Hook up TailwindCSS by importing the CSS into ./.storybook/preview.js
This completes the setup required for the project
Watchout for this space for more, will be updatin with some good best practises till then do feel free to explore the example UI components used for this website."
1443,"connect-foundation,2019-12","üéü Í∏âÏ¶ùÌïòÎäî Ìä∏ÎûòÌîΩÏóêÎèÑ ÏïàÏ†ïÏ†ÅÏù∏ ÏòàÏïΩ ÏÑúÎπÑÏä§, Atomic PatternÏùÑ Ï†ÅÏö©Ìïú Ïû¨ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïª¥Ìè¨ÎÑåÌä∏, Ïã§Ïö©Ï†ÅÏù∏ TestingÏùÑ Ï£ºÏ†úÎ°ú ÌïòÎäî Ïù¥Î≤§Ìä∏ ÏÑúÎπÑÏä§. BookUs!

    
    
    
    
    
    


Bookus!Îäî Ïù¥Î≤§Ìä∏ ÏòàÏïΩ ÏÑúÎπÑÏä§ Festa! ÌÅ¥Î°† ÌîÑÎ°úÏ†ùÌä∏ÏûÖÎãàÎã§. ÏàúÍ∞ÑÏ†ÅÏúºÎ°ú ÎßéÏùÄ Ìä∏ÎûòÌîΩÏù¥ Î™∞Î¶¨ÎçîÎùºÎèÑ Ï§ëÎã®ÎêòÏßÄ ÏïäÎäî ÏïàÏ†ïÏ†ÅÏù∏ ÏÑ†Ï∞©Ïàú ÏòàÏïΩ ÏÑúÎπÑÏä§Î•º Î™©ÌëúÎ°ú ÌïòÍ≥† ÏûàÏäµÎãàÎã§. Îî∞ÎùºÏÑú Îã§ÏùåÍ≥º Í∞ôÏùÄ ÎèÑÏ†ÑÍ≥ºÏ†úÎ•º Í∞ñÍ≥† ÏûàÏäµÎãàÎã§.

Í∞ÄÏû• ÏûëÏùÄ Îã®ÏúÑÏùò Ïª¥Ìè¨ÎÑåÌä∏Î•º ÎßåÎì§Ïñ¥, ÌÅ∞ Îã®ÏúÑÎ°ú ÏåìÏïÑÎÇòÍ∞ÄÎ©∞ Í∞ÅÍ∞ÅÏùò UI Îã®ÏúÑÎ•º ÎßåÎì§Ïñ¥ ÎÇòÍ∞ÄÎäî ÎîîÏûêÏù∏ Ìå®ÌÑ¥ÏûÖÎãàÎã§. Ïù¥Î≤à ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑúÎäî Ïû¨ÏÇ¨Ïö©ÏÑ±Ïù¥ Îõ∞Ïñ¥ÎÇú UIÎ•º ÏúÑÌï¥ ÏïÑÌÜ†ÎØπ ÎîîÏûêÏù∏ Ìå®ÌÑ¥ÏùÑ Ï†ÅÏö©ÌñàÏäµÎãàÎã§.
1. Custom Hooks Testing
ÎπÑÎèôÍ∏∞Î°ú API ÏöîÏ≤≠Ïóê ÎåÄÌïú Ï≤òÎ¶¨Í∞Ä Ï£ºÍ∞Ä ÎêòÎäî ÏÉÅÌÉú Í¥ÄÎ¶¨Ïóê ÎåÄÌïú ÌÖåÏä§Ìä∏
2. Playground for UI components of Storybook
StorybookÏùÑ ÌÜµÌïú ÎèÖÎ¶ΩÎêú ÌôòÍ≤ΩÏóêÏÑúÏùò Ïª¥Ìè¨ÎÑåÌä∏ ÌÖåÏä§Ìä∏
3. CypressÎ•º Ïù¥Ïö©Ìïú End-to-End Testing
Í∞Å ÌéòÏù¥ÏßÄÏôÄ Ïª¥Ìè¨ÎÑåÌä∏ UI ÌÖåÏä§Ìä∏
ÏòàÏïΩÏù¥ ÌïÑÏöîÌïú ÏãúÏ†êÎßàÎã§ ÎäòÏñ¥ÎÇòÎäî Ìä∏ÎûòÌîΩÏùÑ Í∞êÎãπÌïòÍ∏∞ ÏúÑÌïú Container Orchestration Ìà¥Î°ú KubernetesÎ•º ÏÑ†ÌÉùÌñàÏäµÎãàÎã§.
ÏÑ§Ï†ïÌååÏùº


Travis CI
Docker hub
ÌÖåÏä§Ìä∏ Ïª§Î≤ÑÎ¶¨ÏßÄ 80Î•º Î™©ÌëúÎ°ú ÌïòÎäî Í≤ÄÏ¶ùÎêú ÏΩîÎìúÎ•º ÌÜµÌïú ÏïàÏ†ïÏ†ÅÏù∏ ÏÑúÎπÑÏä§Î•º Î™©ÌëúÎ°ú Ìï©ÎãàÎã§.
Front-End : Jest + Enzyme + Stroybook + Cypress
Back-End : Jest + Supertest

Î¨∏Ï¢ÖÌòÑ @dobest27
Ïú°ÏßÑÌòÅ @FullOfOrange
Ïù¥Ïö©Ìò∏ @inthewalter
Ï°∞ÏÑ±Îèô @doong-jo"
1444,"storybook-eol,addon-smart-knobs","üß† This Storybook plugin uses @storybook/addon-knobs but creates the knobs automatically based on PropTypes.. This Storybook plugin uses @storybook/addon-knobs but creates the knobs automatically based on PropTypes, Flow and Typescript.
ignoreProps
Type: Array
Will not automatically create knobs for props whose name is in this array. Example:
This plugin has a peer dependency on babel-plugin-react-docgen
. As a result, babel-plugin-react-docgen needs to be added to your Storybook Babel configuration.
For a standard Storybook configuration, add react-docgen to your plugins in an appropriate .babelrc file.
Custom Babel Config | Storybook.
If you have created a webpack.config.js file for Storybook, you may need to configure the plugin in there.
Use react-docgen-typescript-loader to generate docgen info from Typescript types. This docgen info will be used to automatically create knobs."
1445,"Shiyan7,kinomore","Front-end –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤. Front-end –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤. –î–µ–º–æ: https://kinomore.netlify.com/
React + React Hooks
TypeScript
Redux Toolkit, RTK Query
Sass, CSS modules
Jest
NextJS
PWA
React-hook-form, Yup
Testing Library
Storybook
–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è https://kinopoisk.dev/documentation.html"
1446,"area17,blast","Storybook for Laravel Blade üöÄ. 


Blast is a low maintenance component library using Storybook Server, built to integrate into your Laravel apps.
Blast allows you to render examples of your app's components using the blade templating engine using Storybook Server within your Laravel app.
We've published some articles to help you get started with Blast and it's features:
You may need to configure your app's assets in config/blast.php after install. To publish the configuration file, use:
From your app's root directory run:
This will install all of the dependencies, generate stories and start a Storybook instance, as well as a watch task so updates to .md and .blade.php files in resources/views/stories and .php files in resources/views/stories/data will automatically regenerate the stories and update Storybook.
--install - force install dependencies
--noGenerate - skip auto-generating stories based on existing components
Blast can also generate stories outside of the launch task. You can do this by running:
--watch - watches the story blade files and updates stories
Global configuration can be done through the config/blast.php.
Blast uses the public_path() to reference any static assets. This means that any assets in that directory will be available during developement as well as static builds published to the public directory using the blast:publish task.
The route Storybook Server uses to render components. You shouldn't need to change this as it isn't ever visible on the FE.
Default: config('app.url') . '/storybook_preview'
Blast can automatically generate documentation pages in the form of stories based on your Tailwind config. Use this array to specify which documentation pages to generate. All options are loaded by default.
Default:
The path to your Tailwind config file. Used to parse the auto-documentation.
Default: base_path('tailwind.config.js')
See https://storybook.js.org/docs/react/essentials/controls Set to true to enable full documentation on the controls tab.
Enabling this feature will require configuration in the @storybook blade directive, see description, defaultValue and table array keys in the blade directive configuration.
Default: true
The array of theme options used by Storybook. More info here.
The options are normal, dark or custom. Normal and dark themes are out of the box from the @storybook-theming addon.
To add a custom theme edit values in the storybook_custom_theme array in config/blast.php.
Default: 'normal'
With the same options as storybook_theme this configures the theme applied to the docs tab.
Default: 'normal'
An array passed to the @storybook-theming addon to create a custom theme. HTML color names, RGB and HEX colors are all supported.
Set the background color of the component canvas area. The Storybook theme doesn't allow this without also changing the background of other areas of the UI.
Default: ''
Blast will attempt to autoload assets from a mix-manifest.json (Laravel Mix) or manifest.json (Vite - added in 1.7) if the assets arrays are empty. This option allows you to disable that functionality. Note that the Vite assets are only auto loaded from a prod build. If you want to use it with Vite's hot reloading, you will need to manually define it in the asset array using the full local url (eg. http://127.0.0.1:5173/resources/css/app.css), or you can publish and modify the storybook.blade.php view to use Laravel's @vite helper.
Default: true
An array of urls to the css and js used by your components. The css and js urls are seperated out as the css is included in the head and the js is included before the closing body tag.
You can also group assets and specify which to use for different components.
In your story blade file you would select the assets to use with assetGroup.
Default: [ 'css' =&gt; [], 'js' =&gt; [], ]
Blast ships with the Status Addon by Etch. This allows you to add custom status indicators to each component. This option allows you to customise these status indicators. More information on this can be found in the Custom Status section below.
Default:
Define a custom order for the stories. Accepts an array of story names and can contain nested arrays to set the order of 2nd tier stories. More information can be found in the official Storybook Docs.
Default: [] (alphabetical)
The Global Types can be used, for example, to extend and edit the toolbar. The array of toolbars and globals options used by Storybook. More info here.
Default: []
Set the default view for each story to either the Canvas or Docs view. This can be overridden in each story using the viewMode prop in the @storybook directive. Use the value story for the canvas view and docs for the docs view. If set to false it will use the last used view when changing between stories.
Default: false
Set a custom timeout for tasks in launch and generate-stories
Default: 300
The relative path to the Blast package directory
Default: vendor/area17/blast
An array of custom components used by Blast.
Default: [ 'docs-page' =&gt; Components\DocsPages\DocsPage::class ]
There are certain Storybook elements you can configure from within your story blade files. You can do this by adding the @storybook directive to the top of your files:
The supported options for this directive are:
preset - Use a preset as the base for the component story. Setting options in this directive will override the preset
name - Overrides the auto generated name in the Storybook sidebar.
layout - Set the component layout in canvas area. Options are fullscreen, padded, centered (default).
status - adds a status badge to the component story. Can be configured in the package config. See below for more info.
order - Customize the order of each story. Supports float values. Defaults to alphabetical order.
design - a Figma url for the component
args - an array of static data used to create storybook fields. You can read more about that here. The keys in the array are passed to the blade view and updated when the fields are updated in storybook.
argTypes - an array to define the args used for the controls. You can read more about them here
actions.handles - an array defining the events that are passed to the @storybook-actions addon. You can read more about actions here - See the Action Event Handlers heading.
You can customize a lot of the story component view from within config/blast.php but if you need to take it a step futher you can publish the view to your application folder and modify it there.
This will publish storybook.blade.php and all of the ui-docs components to resources/views/vendor/blast.
Running php artisan blast:demo will create all the files needed to display a demo component. It creates files in your resources/views/components and resources/views/stories directories and generates the stories.
It can be run alongside the php artisan blast:launch task or you can run the demo task and then the launch task after to init Storybook.
You can create preset options for components to reuse throughtout your storybook instance.
The preset options use the same structure as Laravel config files:
You can preset any of the options available in the @storybook directive.
To use the preset, set the preset option to the array path (using ""dot"" notation) where the first part is the name of the file followed by the option you wish to access.
In this example it would update the label from 'Primary' to 'Read More'.
In some instances it is beneficial to reuse data from other components in a new component. For example, a post list may use data for multiple post components.
To do this, you can reference the data in your new component's data file in a similar way to how you would set the preset in your story.
Use the presetArgs key to define the args with which you would like to data from another component. You can set the presets to either an array of references, or a single reference.
The example below creates the items array used in a card-list component using data from the card stories.
Blast comes with 4 preset statuses to use in your stories - deprecated, wip, readyForQA and stable. You can define custom statuses in config/blast.php by passing and array of statuses the storybook_statuses config. For example:
More infomation on this addon can be found here.
Note: Defining custom statuses will override the existing statuses.
Adding a README.md to your storybook blade directory will allow you to add notes to the Docs tab for each component in Storybook. The content of the markdown file will be output above the auto-generated Storybook content.
Blast can build a static Storybook app and publish it to your public folder. You do this by running:
Blast can automatically generate stories to visualize your Tailwind configuration. See 'auto_documentation' above to see how to configure which stories to generate.
You can pass the option --force to automatically overwrite existing documenation stories or use the --update-data option to update the story data without copying any files (this option only works if you have already run the task before).
--o, --output-dir - the directory where to store built files relative to your public directory
If you see a Failed to fetch message when viewing your stories you will need to go to the path that Storybook is trying to load (open dev tools > network and right click the failed path and open in a new tab) and debug there. Any php errors or dd will trigger the Failed to fetch message.
Renaming the story blade files can sometimes result in the story for that component being duplicated. You can work around this by running php artisan blast:generate-stories"
1447,"atolye15,crna-recipe","Step-by-step guide to bootstrap a React Native app from scratch. This is a step-by-step guide to create React Native app for Atolye15 projects. You can review React Native App Starter project to see how your application looks like when all steps followed.
You will get an application which has;
TypeScript
Linting
Formatting
Testing
CI/CD
Storybook
First of all, we need to install the React Native command line interface.
Use the React Native command line interface to generate a new React Native project called ""AwesomeProject"":
NOTE: Project name should be alphanumeric!
We want to keep type safety as strict as possibble. In order to do that, we update tsconfig.json with the settings below. Also we prefer to disable isolatedModules and activate skipLibCheck.
We want to format our code automatically. So, we need to install Prettier.
Also, we want to enable format on save on VSCode.
React Native CLI adds .vscode to .gitignore, but we prefer not to ignore. So remove it from .gitignore.
Finally, we update package.json with related format scripts.
We want to have consistency in our codebase and also want to catch mistakes. So, we need to install ESLint.
also ignore some files/folders;
We need to update package.json for ESLint scripts.
Finally, we need to enable prettier ESLint integration on VSCode.
We'll use jest with react-native-testing-library.
Add the following script into package.json
and then update jest.config.js as follows to complete jest configuration.
Let's add a simple test to verify our setup.
Also, verify coverage report with yarn coverage.
When you run yarn coverage, a folder named coverage will be created in the root directory. This folder is auto-generated file. We should add it to .gitignore
We use the react-native-config package to expose config variables to our javascript code in React Native.
Follow these steps to install.
Our folder structure should look like this;
We need to initialize the Storybook on our project. We'll use automatic setup with a few edits:
Warning: Probably after you have run the command above, you'll be asked to select a version. Cancel it.
Storybook CLI automatically installs v5.0.x, however v5.0.x is an unpublished version for react-native, therefore problems arise during installation. In order to avoid this problem we're going to fix our storybook packages in our package.json file to latest stable version 4.1.x. (Check this issue for more information.)
thereafter in order to activate the changes and update yarn.lock file we'll run code below;
After completing steps above you'll notice that storybook CLI have created storybook folder on your project's root folder. We'll customize this folder structure according to our use case.
Firstly change the name of index.js file in storybook folder to storybook.ts. Also change file extensions of other files from js to ts, except the addons.js file (https://github.com/storybooks/storybook/issues/3970).
After that, we create a new file named index.ts to expose StorybookUI in your app.
We finished the storybook installation but we are not done yet;
The stories for our app will be inside the src/components directory with the .stories.tsx extension.The React Native packager resolves all the imports at build-time, so it's not possible to load modules dynamically. we need to use a third party loader react-native-storybook-loader to automatically generate the import statements for all stories.
You need to update storybook.ts as follows:
Note: Do not forget to replace %APP_NAME% with your app name
The file storyLoader.js that we imported above is an auto-generated file. We should add it to .gitignore.
After you install storybook loader, you should run the following command once to avoid typescript errors.
Update the storybook script into package.json as follows:
Add the following config into package.json:
Warning: If you get typescript errors related with the storybook, you should disable isolatedModules in tsconfig.json
Lastly, because we use typescript in the project, we need to install the type definition for storybook.
Let's create an example story for our Button component.
We can create a CircleCI pipeline in order to CI / CD.
After that we need to enable CircleCI for our repository.
We want to protect our develop and master branches. Also, we want to make sure our test passes and at lest one person reviewed the PR. In order to do that, we need to update branch protection rules like this in GitHub;

We are ready to develop our application. Just a final step, we need to update our README.md to explain what we add a script so far.
Everything is done! You can start to develop your next awesome React Native application now on üöÄ
rn alias for react-native allows to run react-native CLI command via locally installed react-native.
NOTE: Only works with yarn.
ios and android aliases are helpful when we need to pass different parameter for our project and provides single point entry.
If we want to run our app on iPhone X as default and with scheme just specify that in the alias.
cra-recipe - CRA Recipe"
1448,"srigar,multiselect-react-dropdown","React multiselect dropdown with search and various options. üí•üí•üí• React Library for Component Lazyloading. Tiny and Efficient. Check it Out üí•üí•üí•
A React component which provides multi select functionality with various features like selection limit, CSS customization, checkbox, search option, disable preselected values, flat array, keyboard navigation for accessibility and grouping features. Also it has feature to behave like normal dropdown(means single select dropdown).

‚ú® SSR Support
üçÉ Light weight
üöÄ Typescript  
By using React.createRef() or useRef(), able to access below methods to get or reset selected values
MIT"
1449,"leotm,react-native-template-new-architecture","React Native 0.71 ‚ö° M1, Ubuntu üíª Hermes ‚öôÔ∏è Fabric üöÖ  Turbo Modules üí® TypeScript 5b ‚úÖ Gradle 7.6, JDK 19, NDK 25, CMake 3.25 üçé Xcode 14.3rc, Ventura 13.3, Ruby 3 üíé Bison 2.3 ü¶¨ ccache ‚ôªÔ∏è Yarn 4rc üì¶  ESLint üßπ Prettier ‚ú® Buck2 üöß Babel üóº GitHub Actions ‚úîÔ∏è Node 19 ‚¨¢ Storybook 6.5rc üìì libs üìö for curious early adopters :suspect: #RNEU #APPJS. 
  


React Native Template / Boilerplate
Bleeding üî™ Edge üåâ Night<s>ly</s>mare üåÉ Edition
<h6 align=""center"">‚Äú‚Äú‚ÄùÃø Ãø Ãø Ãø Ãø‚ÄôÃø‚ÄôÃµÕáÃøÃø–∑=(*‚ñΩ*)=Œµ/ÃµÕáÃøÃø/Ãø Ãø Ãø Ãø Ãø‚Äô‚Äú‚Äú</h6>
<h6 align=""center"">IDKFA</h6>



[![NPM RN pkg ver](https://img.shields.io/badge/React%20Native-0.71.1-red.svg)](https://github.com/facebook/react-native/releases)
[![TypeScript](https://img.shields.io/badge/%3C%2F%3E-TypeScript-%230074c1.svg)](#)
[![Linter](https://badges.aleen42.com/src/eslint.svg)](#)
[![Formatter: prettier](https://img.shields.io/badge/Formatter-Prettier-f8bc45.svg)](#)
[![CI](https://github.com/leotm/react-native-template-new-architecture/actions/workflows/main.yml/badge.svg)](https://github.com/leotm/react-native-template-new-architecture/actions/workflows/main.yml)
[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://github.com/leotm/react-native-template-new-architecture/pulse)
[![Docs](https://img.shields.io/badge/Docs%3F-yes-green.svg)](https://github.com/leotm/react-native-template-new-architecture/wiki)
[![Project](https://img.shields.io/badge/Proj%3F-yes-green.svg)](https://github.com/leotm/react-native-template-new-architecture/projects/1)



Fresh M1/M2
Upgrading from v1 classic or v3 latest / berry / stable
Clear generated files
ü§ñ Why versioned
Old Rosetta 2 Intel x86_64 way
<details>

_<summary>Old manual setup</summary>_

[Building-from-source#prerequisites](https://github.com/facebook/react-native/wiki/Building-from-source#prerequisites), but with NDK 25.0.8775105

_Strip: ` rcX` suffix / (trailing) spaces / final final linebreak - otherwise `fcntl(): Bad file descriptor`_

</details>

Fat M1 components: ndk-build, LLVM, CMake, Make, Python, Ninja, shader-tools, simpleperf - yasm remaining
<details>

_<summary>Old manual setup</summary>_

Open [Android Studio - Preview release - Canary build](https://developer.android.com/studio/preview)

Open Project, set the [JDK](https://github.com/leotm/react-native-template-new-architecture/wiki/Android#jdk)

Build [all 4 default ABIs](https://github.com/leotm/react-native-template-new-architecture/blob/master/android/gradle.properties#L33) first with other libraries

Open an arm64 AVD e.g. `Pixel_3a_API_31_arm64-v8a` <s>[Initial Preview v3: Google APIs System Image](https://github.com/google/android-emulator-m1-preview)</s>

Make Project

</details>

Add stories to src/components/**/*.stories.(ts|tsx)
Keep in sync with .storybook and storybook_server /main.js
https://github.com/leotm/react-native-template-new-architecture/blob/01f1c9864f55367004effbe26d3f33590784704b/src/index.tsx#L132
<details>

_<summary>Old v5 setup</summary>_

https://github.com/leotm/react-native-template-new-architecture/blob/01f1c9864f55367004effbe26d3f33590784704b/metro.config.js#L16

https://github.com/facebook/hermes/issues/135

https://github.com/facebook/react-native/issues/31969

</details>

With ts-node and curveball"
1540,"willianjusten,will-jekyll-template","A simple Jekyll theme.. This is a simple and minimalist template for Jekyll designed for developers that want to write blog posts but don't want to care about frontend stuff.
The Theme features:
Gulp
Stylus (Jeet, Rupture, Kouto Swiss)
Smoothscroll
Live Search
Offcanvas Menu
SVG icons
Very very small and fast!
Shell Script to create posts
Tags page
Series page
About Me page
Feed RSS
Sitemap.xml
Color Customization
Info Customization
Fork the Will Jekyll Template
Clone the repo you just forked.
Edit _config.yml to personalize your site.
Check out the sample posts in _posts to see examples for assigning categories and tags, and other YAML data.
Read the documentation below for further customization pointers and documentation.
Remember to compile your assets files with Gulp.
You have to fill some informations on _config.yml to customize your site.
Don't forget to change your baseurl before build your site!
All color variables are in src/styl/variable. To change the main color, just set the new value at main assignment. Another colors are for texts and the code background color.
You can use the initpost.sh to create your new posts. Just follow the command:
The new file will be created at _posts with this format date-title.md.
When you create a new post, you need to fill the post information in the front-matter, follow this example:
In order to compile the assets and run Jekyll on local you need to follow those steps:
Install NodeJS
Run npm install 
Run gulp
Having a problem getting something to work or want to know why I setup something in a certain way? Ping me on Twitter @willian_justen or file a GitHub Issue.
If you liked my work, buy me a coffee <3

This theme is free and open source software, distributed under the The MIT License. So feel free to use this Jekyll theme on your site without linking back to me or using a disclaimer.
If you‚Äôd like to give me credit somewhere on your blog or tweet a shout out to @willian_justen, that would be pretty sweet."
1541,"wowthemesnet,mediumish-theme-jekyll","Jekyll Template - Mediumish. Live Demo &nbsp; | &nbsp; Download &nbsp; | &nbsp; Documentation &nbsp; | &nbsp; Buy me a coffee

Copyright (C) 2019 Sal, https://www.wowthemes.net
Mediumish for Jekyll is designed and developed by Sal and it is free under MIT license. 

Fork the repo.
Clone a copy of your fork on your local
Create a branch off of master and give it a meaningful name (e.g. my-new-mediumish-feature).
Make necessary changes, commit, push and open a pull request on GitHub.
Thank you!"
1542,"yous,whiteglass","Minimal, responsive Jekyll theme for hackers. Minimal, responsive Jekyll theme for hackers.

Add this line to your Jekyll site's Gemfile:
And add this line to your Jekyll site's _config.yml:
And then execute:
Or install it yourself as:
Generate a new Jekyll blog:
Edit Gemfile to use whiteglass theme:
Edit _config.yml to use whiteglass theme and its plugins:
permalink: /:year/:month/:day/:title/
paginate_path: /posts/:num/
paginate: 5
jekyll-archives:
  enabled:
    - categories
    - tags
  layout: category_archives
  permalinks:
    category: /categories/:name/
    tag: /tags/:name/
Copy
index.html,
about.md,
archives.md,
feed.xml, and
_data/navigation.yml
from the theme:
Install gems and you're good to go! The blog will be available on
http://127.0.0.1:4000.
This theme uses jekyll-archives gem
which is not supported by GitHub Pages.
If you want to use full features like categories and tags, I recommend you to
use Travis CI or other CI services.
To deploy using Travis CI, first copy the .travis.yml
of this repository. You can change target-branch (gh-pages by default) and
on.branch (master by default) as you want. If you want further
customization, see Travis CI's documentation page.
You'll see there's github-token: $GITHUB_TOKEN, and this is what you should
configure. Go to your personal access tokens
page, and generate new token with public_repo or repo permission as you
need. Then go to Travis CI's settings page of your repository, and add a new
environment variable GITHUB_TOKEN with the value of the token you generated.
To override the default structure and style of whiteglass, simply create the
concerned directory at the root of your site, copy the file you wish to
customize to that directory, and then edit the file. e.g., to override the
_includes/footer_content.html file to add
contents to footer, create an _includes directory, copy
_includes/footer_content.html from jekyll-whiteglass gem folder to
&lt;your-site&gt;/_includes and start editing that file.
For example, you can add favicons to _includes/head_custom.html:
The site's default CSS is in the gem itself,
assets/main.scss. To override the default CSS, the file
has to exist at your site source. Do either of the following:
Create a new instance of main.scss at site source
Create a new file main.scss at &lt;your-site&gt;/assets/
Add the frontmatter dashes, and
Add @import ""whiteglass"";, to &lt;your-site&gt;/assets/main.scss
Add your custom CSS
Download the file from this repo
Create a new file main.scss at &lt;your-site&gt;/assets/
Copy the contents at assets/main.scss onto the main.scss you just created, and edit away
Copy directly from jekyll-whiteglass gem
Go to your local jekyll-whiteglass gem installation directory (run bundle show jekyll-whiteglass to get the path to it)
Copy the assets/ folder from there into the root of &lt;your-site&gt;
Change whatever values you want, inside &lt;your-site&gt;/assets/main.scss
site.lang is used to declare the primary language for each web page within the
site.
lang: en-US sets the lang attribute for the site to the United States flavor
of English, while en-GB would be for the United Kingdom style of English.
Country codes are optional and the shorter variation lang: en is also
acceptable. You may want to write a post in different language, then add lang
attribute to the frontmatter of that post:
site.description describes the site. This is mainly used in meta descriptions
for improving SEO. Also, you can set description attribute for each post:
If you don't specify post.description, then post.excerpt will be used if it
exist.
external-url turns the title of your post to a link. Specify a URL which you
want to link to.
Then the title of your post would look like a link with text
Jekyll whiteglass theme ‚Üí. This also applies to your blog feed.
Each post can have categories attribute. It can be a string or an array. This
will be displayed on index, archive and each post, and provide a link to the
archive of category.
Each post can have tags attribute. It can be a string or an array. This will
be displayed on index, archive and each post, and provide a link to the archive
of tag.
Create &lt;your-site&gt;/feed.xml with:
If you want to use another path for feed, you can specify a non-default path via
your site's config.
Then create &lt;your-site&gt;/atom.xml with the same content of feed.xml above.
whiteglass provides the ability to include your favourite commenting service, like Disqus or Isso.
To enable comments on pages and posts:
Overwrite the _includes/custom_comments_provider.html with your custom provider of comments.
Add comments: true to your _config.yml.
To disable comments on certain pages or posts specify comments: false in the front matter of the page or post.
Each post can have keywords attribute. This is a comma-separated list which is
used in meta descriptions for improving SEO.
YAML list is also available:
site.twitter_username sets twitter:site and twitter:creator meta tag
site.twitter_image sets twitter:image:src meta tag
page.twitter_card.type sets twitter:card meta tag (default: summary)
If page.twitter_card.type is gallery, it sets twitter:image0, twitter:image1, twitter:image2 and twitter:image3 meta tags with page.twitter_card.image, page.twitter_card.image1, page.twitter_card.image2 and page.twitter_card.image3, respectively
If page.twitter_card.type is photo, page.twitter_card.width sets twitter:image:width meta tag and page.twitter_card.height sets twitter:image:height meta tag
page.twitter_card.creator sets twitter:creator meta tag. It overrides site.twitter_username
page.twitter_card.image sets twitter:image:src meta tag if page.twitter_card.type is not gallery. It overrides site.twitter_image
site.facebook_app_id sets fb:admins meta tag
site.facebook_page sets article:author meta tag
site.facebook_image sets og:image meta tag
page.facebook.image sets og:image meta tag. It overrides site.facebook_image
To define header links, add titles and URLs under the main key in
_data/navigation.yml:
To enable Google Analytics, add the following lines to your Jekyll site:
Bug reports and pull requests are welcome on GitHub at
https://github.com/yous/whiteglass. This project is intended to be a safe,
welcoming space for collaboration, and contributors are expected to adhere to
the Contributor Covenant code of conduct.
To set up your environment to develop this theme, run bundle install.
Your theme is setup just like a normal Jekyll site! To test your theme, run
bundle exec jekyll serve and open your browser at
http://localhost:4000/whiteglass/. This starts a Jekyll server using your
theme. Add pages, documents, data, etc. like normal to test your theme's
contents. As you make modifications to your theme and to your content, your site
will regenerate and you should see the changes in the browser after a refresh,
just like normal.
The theme is available as open source under the terms of the
MIT License."
1543,"just-the-docs,just-the-docs","A modern, high customizable, responsive Jekyll theme for documentation with built-in search.. 
      



    Just the Docs
    A modern, highly customizable, and responsive Jekyll theme for documentation with built-in search.Easily hosted on GitHub Pages with few dependencies.
    <strong>See it in action!</strong>
    


A video walkthrough of various Just the Docs features

https://user-images.githubusercontent.com/85418632/211225192-7e5d1116-2f4f-4305-bb9b-437fe47df071.mp4
The Just the Docs Template provides the simplest, quickest, and easiest way to create a new website that uses the Just the Docs theme. To get started with creating a site, just click ""use the template""!
Note: To use the theme, you do not need to clone or fork the Just the Docs repo! You should do that only if you intend to browse the theme docs locally, contribute to the development of the theme, or develop a new theme based on Just the Docs.
You can easily set the site created by the template to be published on GitHub Pages ‚Äì the template README file explains how to do that, along with other details.
If Jekyll is installed on your computer, you can also build and preview the created site locally. This lets you test changes before committing them, and avoids waiting for GitHub Pages.[^2] And you will be able to deploy your local build to a different platform than GitHub Pages.
More specifically, the created site:
uses a gem-based approach, i.e. uses a Gemfile and loads the just-the-docs gem
uses the GitHub Pages / Actions workflow to build and publish the site on GitHub Pages
Other than that, you're free to customize sites that you create with the template, however you like. You can easily change the versions of just-the-docs and Jekyll it uses, as well as adding further plugins.
Alternatively, you can install the theme as a Ruby Gem, without creating a new site.
Add this line to your Jekyll site's Gemfile:
And add this line to your Jekyll site's _config.yml:
And then execute:
Or install it yourself as:
Alternatively, you can run it inside Docker while developing your site
View the documentation for usage information.
Bug reports, proposals of new features, and pull requests are welcome on GitHub at https://github.com/just-the-docs/just-the-docs. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the Contributor Covenant code of conduct.
Submit an Issue that motivates the changes, using the appropriate template
Discuss the proposed changes with other users and the maintainers
Open a Pull Request
Ensure all CI tests pass
Provide instructions to check the effect of the changes
Await code review
As few dependencies as possible
No build script needed
First class mobile experience
Make the content shine
To set up your environment to develop this theme: fork this repo, the run bundle install from the root directory.
A modern devcontainer configuration for VSCode is included.
Your theme is set up just like a normal Jekyll site! To test your theme, run bundle exec jekyll serve and open your browser at http://localhost:4000. This starts a Jekyll server using your theme. Add pages, documents, data, etc. like normal to test your theme's contents. As you make modifications to your theme and to your content, your site will regenerate and you should see the changes in the browser after a refresh, just like normal.
When this theme is released, only the files in _layouts, _includes, and _sass tracked with Git will be included in the gem.
The theme is available as open source under the terms of the MIT License.
[^2]: It can take up to 10 minutes for changes to your site to publish after you push the changes to GitHub."
1544,"mqtt,mqtt.org","The mqtt.org website. Redesign for MQTT.org
$bundle exec jekyll serve
$bundle update"
1545,"fastai,fastpages","An easy to use blogging platform, with enhanced support for Jupyter Notebooks.. More information on why we deprecated this project is here.
An easy to use blogging platform, with support for Jupyter notebooks, Word docs, and Markdown.

fastpages uses GitHub Actions to simplify the process of creating Jekyll blog posts on GitHub Pages from a variety of input formats.
Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; Notebook posts support features such as:
Interactive visualizations made with Altair remain interactive.
Hide or show cell input and output.
Collapsable code cells that are either open or closed by default.
Define the Title, Summary and other metadata via a special markdown cells
Ability to add links to Colab, Deepnote and GitHub automatically.
Support for comments, supported natively through GitHub Issues.
Built-in search.
Support for customizing the styling of your site.
Embed Twitter cards and YouTube videos.
Categorization of blog posts by user-supplied tags for discoverability.
Create and edit Markdown posts.
Create posts, including formatting and images, directly from Microsoft Word documents.
Write posts on your local machine and preview them with live reload.
See below for a more detailed list of features.
See the demo site
<!-- TOC depthFrom:1 depthTo:6 withLinks:1 updateOnSave:1 orderedList:0 -->

<!-- /TOC -->

Generate a copy of this repo by clicking on this link. Make sure to sign in to your account, or you will see a 404 error. Name your repo anything you like except {your-username}.github.io.
GitHub Actions will automatically open a PR on your new repository ~ 30 seconds after the copy is created.  Follow the instructions in that PR to continue.
If you are not seeing a PR, please make sure you have third party actions enabled in your organization: Settings -> Actions -> Actions Permissions -> Enable local and third party Actions for this repository
For a live walk-through of the setup steps (with some additional tips) see this video tutorial of setting up a fastpages blog by Abdul Majed.
In some cases because of permissions step 2 may fail to create a Pull Request.  If this occurs, go to your repository settings and in the Actions section, grant Read and Write permissions and check Allow GitHub Actions to create and approve pull requests.  

Once you have granted permissions, go to the Actions tab at the top of your repository home page, where you will be presented with a list of Actions runs.  First click on the failed run (the item with the red X):

You will be taken to a screen where there will be a button on the upper right hand side allowing you to re-run jobs.

After doing this, a pull request should appear.
To create your first post, add content in the _posts, _notebooks or _word directories.  You can follow examples of content in those folders in this repo of how to structure the content.  The most important thing to pay attention to is the front matter, which is discussed in more detail below.  Furthermore, you can add additional pages that will appear on your blog's navbar in the _pages directory.  Note that content in the _word directory does not support front matter.
Front matter allows you to toggle various options on/off for each blog post, as well as pass metadata to various features of fastpages.
In a notebook, front matter is defined as a markdown cell at the beginning of the notebook with the following contents:
Similarly, in a markdown document the same front matter would be defined like this at the beginning of the document:
Additional metadata is optional and allows you to set custom front matter.  
Note that anything defined in front matter must be valid YAML.  Failure to provide valid YAML could result in your page not rendering in your blog.  For example, if you want a colon in your title you must escape it with double quotes like this:
- title: ""Deep learning: A tutorial""
See this tutorial on YAML for more information.
Replace Title, with your desired title, and Awesome summary with your desired summary.
Note: It is recommended to enclose these values in double quotes, so that you can escape colons and other characters that may break the YAML parser.
fast_template will automatically generate a table of contents for you based on markdown headers!  You can toggle this feature on or off by setting toc: to either true or false.
This option works for notebooks only
The branch field is used to optionally render a link your notebook to Colab and GitHub in your blog post. It'll default to master if you don't specify it in the notebook.
If you do not want to show Colab / GitHub badges on your blog post (perhaps because your repo is private and the links would be broken) set badges to false.  This defaults to true
By default, when you omit this parameter from your front matter, or you set badges: true, all four badges (GitHub, Binder, Deepnote, Colab) will appear by default. You can adjust these defaults in with the default_badges parameter in Site Wide Configuration Options.
If only want to hide a badge on an individual post, you can set the front matter hide_{github,colab,binder,deepnote}_badge: true.  For example, if you wanted to hide the Binder badge for an individual notebook but you want the other badges to show up, you can set this in your front matter:
Note about Binder: Binder allows you to customize the dependencies and other aspects of the Jupyter Notebook environment for your readers. The easiest way is to add a requirements.txt file with common packages you use for all your notebooks at the root of your repository, you can learn more on the official Binder docs.
You can have a comma seperated list inside square brackets of categories for a blog post, which will make the post visible on the tags page of your blog's site.  For example:
In a notebook:
In a markdown document:
You can see a preview of what this looks like here.
You can toggle the display of tags on/off by setting show_tags to true or false in _config.yml:
Commenting on blog posts is powered by Utterances, an open-source and ad-free way of implementing comments.  All comments are stored in issues on your blog's GitHub repo.  You can turn this on setting comments to  true.  This defaults to false.
To enable comments with Utterances you will need to do the following:
Make sure the repo is public, otherwise your readers will not be able to view the issues/comments.
Make sure the utterances app is installed on the repo, otherwise users will not be able to post comments.
If your repo is a fork, navigate to it's settings tab and confirm the issues feature is turned on.
On social media sites like Twitter, an image preview can be automatically shown with your URL.  Specifying the front matter image provides this metadata to social media sites to render this image for you.  You can set this value as follows:
- image: images/diagram.png
Note: for this setting you can only reference image files and folders in the /images folder of your repo.
You may want to prevent a blog post from being listed on the home page, but still have a public url that you can preview or share discreetly.  You can hide a blog post from the home page by setting the front matter hide to true.  This is set to false by default.
It is recommended that you use permalinks in order to generate a predictable url for hidden blog posts.  You can also set the front matter search_exclude to true if you don't want users to find your hidden post in a search.
By default, posts are sorted by date on your homepage. However, you may want one or more blog posts to always appear at the very top of your homepage.  In other words, you may want certain posts to be ""pinned"" or ""sticky"".  To accomplish this, specify the sticky_rank front matter in the order you would like your sticky posts to appear.  Blog posts that do not set this parameter are sorted in the default way by date after the sticky posts.
For example, consider these three markdown posts (also works for notebooks).
2020-01-01-Post-One.md
2020-02-01-Post-Two.md
2020-04-01-Post-Three.md
However, since sticky_rank is specified, blog posts will first be sorted by sticky_rank in ascending order, then by date in descending order, so the order of these posts will appear like so:
Post One
Post Two
Post Three
Without sticky_rank the above posts would actually be sorted in reverse order due to the dates associated with each post.
Note: pinning also works for notebooks:
fastpages comes with built in keyword search powered by lunr.js.  You can prevent a blog post or page from appearing in search results by setting the front matter search_exclude to false.  This is set to true by default.
It is recommended that everyone personalizes their blogging site by setting site-wide configration options. These options can be found in /_config.yml.  Below is a description of various options that are available.
title: this is the title that appears on the upper left hand corner on the header of all your pages.  
description: this description will show up in various places when a preview for your site is generated (for example, on social media).
github_username: this allows your site to display a link to your GitHub page in the footer.
github_repo: this allows your site to render links back to your repository for various features such as links to GitHub, Colab and Deepnote for notebooks.
url: This does not need to be changed unless you have a custom domain.  Note: leave out the trailing / from this value.
baseurl: See the comments in /_config.yml for instructions ( ""Special Instructions for baseurl"" on setting this value properly.  If you do not have a custom domain, then you can likely ignore this option.
email: this is currently unused.  Ignore.
twitter_username: creates a link in your footer to your twitter page.
use_math: Set this to true to get LaTeX math equation support.  This is off by default as it otherwhise loads javascript into each page that may not be used.
show_description: This shows a description under the title of your blog posts on your homepage that contains a list of your blog posts.  Set to true by default.
google_analytics: Optionally use a Google Analytics ID for tracking if desired.
show_image: If set to true, this uses the image parameter in the front matter of your blog posts to render a preview of your blogs as shown below.  This is set to false by default.
When show_image is set to true your homepage will look like this:

show_tags: You can toggle the display of tags on your blog posts on or off by setting this value to false.  This is set to true by default, which which renders the following links for tags on your blog posts like this:

pagination: This is the maximum number of posts to show on each page of your home page.  Any posts exceeding this amount will be paginated onto another page.  This is set to 15 by default.  When this is triggered, you will see pagination at the bottom of your home page appear like this:

Note: if you are using an older version of fastpages, you cannot use the automated upgrade process to get pagination.  Instead you must follow these steps:
Rename your index.md file to index.html
mv index.md index.html
Replace the Gemfile and Gemfile.lock in the root of your repo with the files in this repo.
Edit your _config.yml as follows (look at _config.yml for an example):
paginate: 10
 paginate_path: /page:num/
Alternatively, you can copy all of your posts over to a newly created  repository created from the fastpages template.
default_badges: By default GitHub, Binder, Deepnote, and Colab badges will show up on notebook blog posts. You can adjust these defaults by setting the appropriate value in default_badges to false.  For example, if you wanted to turn Binder badges off by default, you would change default_badges to this:
html_escape: this allows you to toggle escaping of HTML in various components of blog posts on or off.  At this moment, you can only toggle this for the description field in your posts.
This is set to false by default.
You can adjust the page width of fastpages on various devices by editing /_sass/minima/custom-variables.scss.
These are the default values, which can be adjusted to suit your preferences:
hypothes.is is an open platform that provides a way to annotate and higlight pages, which can be either public or private.  When this feature is enabled, readers of your blog will be presented with the following tooltip when highlighting text:

This is disabled by default in fastpages. You can enable or disable this in your _config.yml file by setting annotations to true or false:
You can customize hypothes.is by reading these configuration options.  It is also a good idea to read these docs if you want to do more with hypothes.is.  However, before trying to customize this feature you should read the customizing fastpages section for important caveats.
You can direct your readers to subscribe with RSS feeds.  There are many RSS subscription services available on the internet.  Some examples include:
fastpages overrides the default syntax highlighting of minima with the Dracula theme.  
The default highlighting in fastpages looks like this:

However, you can make the syntax highlighting to look like this, if you choose:

If you wish to revert to the light theme above, you can remove the below line in _sass/minima/custom-styles.scss
If you don't like either of these themes, you can add your own CSS in _sass/minima/custom-styles.scss.  See customizing fastpages for more details.
This blog post describes how to enable Dark Mode for fastpages.
Users who prefer to use the citation system BibTeX may do so; it requires enabling the jekyll-scholar plugin. Please see Citations in Fastpages via BibTeX and jekyll-scholar for instructions on implementing this.
Place the comment #hide at the beginning of a code cell and it wil hide both the input and the output of that cell.
A #hide_input comment at the top of any cell will only hide the input.
Furthermore, the hide input Jupyter Extension can be used to hide cell inputs or outputs, which will be respected by fastpages.
You may want some code to be hidden in a collapsed element that the user can expand, rather than completely hiding the code from the reader.
To include code in a collapsable cell that is collapsed by default, place the comment #collapse at the top of the code cell.
To include code in a collapsable cell that is open by default, place the comment #collapse_show or #collapse-show at the top of the code cell.
To include the output under a collapsable element that is closed by default, place the comment #collapse_output or #collapse-output at the top of the code cell.
In a markdown cell in your notebook, use the following markdown shortcuts to embed Twitter cards and YouTube Videos.
Adding footnotes in notebooks is a bit different than markdown.  Please see the Detailed Guide To Footnotes in Notebooks.
Save your notebook with the naming convention YYYY-MM-DD-*. into the /_notebooks or /_word folder of this repo, respectively.  For example 2020-01-28-My-First-Post.ipynb.  This naming convention is required by Jekyll to render your blog post.
Be careful to name your file correctly!  It is easy to forget the last dash in YYYY-MM-DD-. Furthermore, the character immediately following the dash should only be an alphabetical letter.  Examples of valid filenames are:
If you fail to name your file correctly, fastpages will automatically attempt to fix the problem by prepending the last modified date of your file to your generated blog post, however, it is recommended that you name your files properly yourself for more transparency.
Commit and push your file(s) to GitHub in your repository's master branch.
GitHub will automatically convert your files to blog posts.  It will take ~5 minutes for the conversion process to take place.  You can click on the Actions tab of your repo to view the logs of this process. There will be two workflows that are triggered with each push you make to your master branch: (1) ""CI"" and (2) ""GH Pages Status"".  Both workflows must complete with a green checkmark for your latest commit before your site is updated.
If you wish, you can preview how your blog will look locally before commiting to GitHub. See this section for a detailed guide on running the preview locally.
If you are writing your blog post in markdown, save your .md file into the /_posts folder with the same naming convention (YYYY-MM-DD-*.md) specified for notebooks.
Save your Microsoft Word documents into the /_word folder with the same naming convention (YYYY-MM-DD-*.docx) specified for notebooks.
Note: alt text in Word documents are not yet supported by fastpages, and will break links to images.
fastpages does not have a robust way to specify front matter for Word documents.  At the moment, you can only specify front matter globally for all Word documents by editing _action_files/word_front_matter.txt.  
To specify unique front matter per Word document, you will need to convert Word to markdown files manually. You can follow the steps in this blog post, which walk you through how to use pandoc to do the conversion.  Note: If you wish to customize your Word generated blog post in markdown, make sure you delete your Word document from the _word directory so your markdown file doesn‚Äôt get overwritten!  
If your primary method of writing blog posts is Word documents, and you plan on always manually editing markdown files converted from Word, you are probably better off using fast_template instead of fastpages.
See the development guide.
The fastpages action allows you to convert notebooks from /_notebooks and word documents from /_word directories in your repo into Jekyll compliant blog post markdown files located in /_posts.  Note: This directory structure is currently inflexible for this Action, as it is designed to be used with Jekyll.
If you already have sufficient familiarity with Jekyll and wish to use this automation in your own theme,  you can use this GitHub Action by referencing fastai/fastpages@master as follows:
An illustrative example of what a complete workflow may look like:
Note that this Action does not have any required inputs, and has no output variables.  
BOOL_SAVE_MARKDOWN:  Either 'true' or 'false'.  Whether or not to commit converted markdown files from notebooks and word documents into the posts directory in your repo.  This is useful for debugging. _default: false
SSH_DEPLOY_KEY: a ssh deploy key is required if BOOL_SAVE_MARKDOWN = 'true'
See the API spec for this action in action.yml
Detailed instructions on how to customize this blog are beyond the scope of this README.  ( We invite someone from the community to contribute a blog post on how to do this in this repo! )
Please see the contributing guide.
Please see the upgrading guide.
Q: Where are the markdown files in _posts/ that are generated from my Jupyter notebooks or word documents?  A: The GitHub Actions workflow in this repo converts your notebook and word documents to markdown on the fly before building your site, but never commits these intermediate markdown files to this repo.  This is in order to save you from the annoyance of your local environment being constantly out of sync with your repository.  You can optionally see these intermediate markdown files by setting the BOOL_SAVE_MARKDOWN and SSH_DEPLOY_KEY inputs to the fastpages action in your .github/workflows/ci.yaml file as follows:
Q: Can I use fastpages for Jekyll docs sites or for things that are not Jekyll blog posts?  A: At the moment, fastpages is a highly opinionated solution that works only for Jekyll blog posts.  If you want to write documentation for your module or library with Jupyter notebooks, we suggest you use fastai/nbdev which is expressly built for this purpose.
Q: What is the difference between fast_template and fastpages?  Which one should I use?  A: Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github's integrated online editor.
fastpages builds upon the minima theme.  If you want to customize the styling or layout of fastpages, you can find instructions in minima's README.  It is a good idea to read the full contents of the README to understand the directory structure.  Furthermore, it is a good idea to have a basic understanding of Jekyll before customizing your theme.  For those new to Jekyll, the official docs are a good place to start.  Concretely, you can override css in fastpages in _sass/minima/custom-styles.scss. NOTE that minima's ""skins"" feature is currently incompatible with fastpages' css settings.
If you choose to make customizations to fastpages  It is possible that customizations you make could collide with current or future versions of fastpages and we recommend doing so only if you feel sufficiently comfortable with HTML and CSS.
Please see the troubleshooting guide."
1546,"poole,hyde","A brazen two-column theme for Jekyll.. Hyde is a brazen two-column Jekyll theme that pairs a prominent sidebar with uncomplicated content. It's based on Poole, the Jekyll butler.

Hyde is a theme built on top of Poole, which provides a fully furnished Jekyll setup‚Äîjust download and start the Jekyll server. See the Poole usage guidelines for how to install and use Jekyll.
Hyde includes some customizable options, typically applied via classes on the &lt;body&gt; element.
Create a list of nav links in the sidebar by assigning each Jekyll page the correct layout in the page's front-matter.
Why require a specific layout? Jekyll will return all pages, including the atom.xml, and with an alphabetical sort order. To ensure the first link is Home, we exclude the index.html page from this list by specifying the page layout.
By default Hyde ships with a sidebar that affixes it's content to the bottom of the sidebar. You can optionally disable this by removing the .sidebar-sticky class from the sidebar's .container. Sidebar content will then normally flow from top to bottom.
Hyde ships with eight optional themes based on the base16 color scheme. Apply a theme to change the color scheme (mostly applies to sidebar and links).

There are eight themes available at this time.

To use a theme, add anyone of the available theme classes to the &lt;body&gt; element in the default.html layout, like so:
To create your own theme, look to the Themes section of included CSS file. Copy any existing theme (they're only a few lines of CSS), rename it, and change the provided colors.

Hyde's page orientation can be reversed with a single class.
Hyde has two branches, but only one is used for active development.
master for development.  All pull requests should be submitted against master.
gh-pages for our hosted site, which includes our analytics tracking code. Please avoid using this branch.
Mark Otto
https://github.com/mdo
https://twitter.com/mdo
Open sourced under the MIT license.
<3"
1547,"poole,lanyon","A content-first, sliding sidebar theme for Jekyll.. Lanyon is an unassuming Jekyll theme that places content first by tucking away navigation in a hidden drawer. It's based on Poole, the Jekyll butler.


Lanyon is a theme built on top of Poole, which provides a fully furnished Jekyll setup‚Äîjust download and start the Jekyll server. See the Poole usage guidelines for how to install and use Jekyll.
Lanyon includes some customizable options, typically applied via classes on the &lt;body&gt; element.
Create a list of nav links in the sidebar by assigning each Jekyll page the correct layout in the page's front-matter.
Why require a specific layout? Jekyll will return all pages, including the atom.xml, and with an alphabetical sort order. To ensure the first link is Home, we exclude the index.html page from this list by specifying the page layout.
Lanyon ships with eight optional themes based on the base16 color scheme. Apply a theme to change the color scheme (mostly applies to sidebar and links).


There are eight themes available at this time.

To use a theme, add any one of the available theme classes to the &lt;body&gt; element in the default.html layout, like so:
To create your own theme, look to the Themes section of included CSS file. Copy any existing theme (they're only a few lines of CSS), rename it, and change the provided colors.


Reverse the page orientation with a single class.
Make the sidebar overlap the viewport content with a single class:
This will keep the content stationary and slide in the sidebar over the side content. It also adds a box-shadow based outline to the toggle for contrast against backgrounds, as well as a box-shadow on the sidebar for depth.
It's also available for a reversed layout when you add both classes:
Show an open sidebar on page load by modifying the &lt;input&gt; tag within the sidebar.html layout to add the checked boolean attribute:
Using Liquid you can also conditionally show the sidebar open on a per-page basis. For example, here's how you could have it open on the homepage only:
Lanyon has two branches, but only one is used for active development.
master for development.  All pull requests should be to submitted against master.
gh-pages for our hosted site, which includes our analytics tracking code. Please avoid using this branch.
Mark Otto
https://github.com/mdo
https://twitter.com/mdo
Open sourced under the MIT license.
<3"
1548,"poole,poole","The Jekyll Butler. A no frills responsive Jekyll blog theme.. The Strange Case of Dr. Jekyll and Mr. Hyde tells the story of a lawyer investigating the connection of two persons, Dr. Henry Jekyll and Mr. Edward Hyde. Chief among the novel's supporting cast is a man by the name of Mr. Poole, Dr. Jekyll's loyal butler.
Poole is the butler for Jekyll, the static site generator. It's designed and developed by @mdo to provide a clear and concise foundational setup for any Jekyll site. It does so by furnishing a full vanilla Jekyll install with example templates, pages, posts, and styles.

See Poole in action with the demo site.
There are currently two official themes built on Poole:
Individual theme feedback and bug reports should be submitted to the theme's individual repository.
Poole is built on Jekyll and uses its built-in SCSS compiler to generate our CSS. Before getting started, you'll need to install the Jekyll gem and related dependencies:
Windows users: Windows users have a bit more work to do, but luckily @juthilo has your back with his Run Jekyll on Windows guide.
Need syntax highlighting? Poole includes support for Pygments or Rouge, so install your gem of choice to make use of the built-in styling. Read more about this in the Jekyll docs.
To help anyone with any level of familiarity with Jekyll quickly get started, Poole includes everything you need for a basic Jekyll site. To that end, just download Poole and start up Jekyll.
Folks wishing to use Jekyll's templates and styles can do so with a little bit of manual labor. Download Poole and then copy what you need (likely _layouts/, *.html files, atom.xml for RSS, and assets/ for CSS, JS, etc.).
To see your Jekyll site with Poole applied, start a Jekyll server. In Terminal, from /poole (or whatever your Jekyll site's root directory is named):
Open http://localhost:4000 in your browser, and voil√†.
If you host your code on GitHub, you can use GitHub Pages to host your project.
Fork this repo and switch to the gh-pages branch.
If you're using a custom domain name, modify the CNAME file to point to your new domain.
If you're not using a custom domain name, modify the baseurl in _config.yml to point to your GitHub Pages URL. Example: for a repo at github.com/username/poole, use http://username.github.io/poole/. Be sure to include the trailing slash.
Done! Head to your GitHub Pages URL or custom domain.
No matter your production or hosting setup, be sure to verify the baseurl option file and CNAME settings. Not applying this correctly can mean broken styles on your site.
Poole has two branches, but only one is used for active development.
master for development.  All pull requests should be to submitted against master.
gh-pages for our hosted site, which includes our analytics tracking code. Please avoid using this branch.
CSS is handled via Jeykll's built-in Sass compiler. Source Sass files are located in _sass/, included into styles.scss, and compile to styles.css.
Mark Otto
https://github.com/mdo
https://twitter.com/mdo
Open sourced under the MIT license.
<3"
1549,"sharu725,online-cv","A minimal Jekyll Theme to host your resume (CV). 


This theme is designed by Xiaoying Riley at 3rd Wave Media.
Visit her website for more themes.
I have made this into a Jekyll Theme. Checkout the live demo here.
<table>
  <tr>
    <th>Desktop</th>
    <th>Mobile</th>
  </tr>
  <tr>
    <td>
        
    </td>
    <td>
        
    </td>
  </tr>
</table>

Fork the repository
Go to settings and set master branch as Github Pages source.
Your new site should be ready at https://&lt;username&gt;.github.io/online-cv/
Printable version of the site can be found at https://&lt;username&gt;.github.io/online-cv/print. Use a third party link https://pdflayer.com/, https://www.web2pdfconvert.com/ etc to get the printable PDF.
Change all the details from one place: _data/data.yml
docker-compose.yml file is used to create a container that is reachable under http://localhost:4000.
Changes _data/data.yml will be visible after a while.
Get the repo into your machine 
Install required ruby gems
Serve the site locally
Navigate to http://localhost:4000
There are 6 color schemes available:
Thanks to Nelson Estev√£o for all the contributions.
Thanks to t-h-e(sfrost) for all the contributions.
Check out for more themes: Jekyll Themes."
1638,"wdiazux,cusca","A ghost theme. A responsive theme for Ghost 3.x.
What that mean CUSCA?
Is the abbreviation for Cuscatl√°n, it was the name of El Salvador before the conquest and means ""the land of precious things"" in Nahuatl.
Cusca was development using Foundation as base, the style is generated with
Sass and the javascript is generated with Typescript and
other cool stuff that comes from different libraries:
All the help to contribute to the development or improvement of the theme is welcomed.
Inside the Ghost themes folder (content/themes) you have to clone the repository or download the last version:
:anchor: Last release
Inside the post.hbs file you need to replace [your-disqus-name] with your Disqus name:
Do the same for partials/loop.hbs:
The new release of the Ghost API v3, require extra steps that are NECESSARY for the
search functionality:
Go in your Ghost's dashboard -> Integrations -> Add custom integration
Set a name: Themes Search
Get the Content API Key and replace the demo key with this one
Do the same with the API URL
The file to modify with this credentials is src/scripts/app.ts
and at the end of the document is the Search section, and the parameter you
need to change are the URL and Key from the GhostSearch class.
You will need to rebuild the theme to make it work after modifying the parameters. In
the end of this page you will find the commands that you need to do it.
Inside the partials/footer.hbs file replace [your-user] with your user names for each social network:
Inside the partials/google_analytics.hbs file replace [your-ga-id] with your google analytics id:
You need to run a ghost instance in the port 2368 it is the default ghost port,
the theme was development using Webpack, so first you need to install it and
their dependencies with this command:
You also can use yarn instead of npm:
Then you have four commands provided by the Webpack configuration file:
npm run dev to compile files in development.
npm run start for live development.
npm run build to build a production environment.
npm run test to test the theme with gscan.
If you are using yarn:
yarn dev to compile files in development.
yarn start for live development.
yarn build to build a production environment.
yarn test to test the theme with gscan.
If you are looking to modify the style or something in the scripts, the source
files are in the src directory assets is the destination directory and it
shouldn't be modified.
This version use Typescript for javascript and SASS to generate CSS.
Copyright (c) 2017-2019 William Diaz - Released under the MIT license.
This version is using the MIT license and the libraries are also MIT or compatibles with it."
1639,"wecobble,Subtitles","Add subtitles into your WordPress posts, pages, custom post types, and themes. No coding required. Simply activate Subtitles and you're ready to go.. Add subtitles into your WordPress posts, pages, custom post types, and themes. No coding required. Simply activate Subtitles and you're ready to go.
Right now WordPress currently presents no easy way for web publishers to add subtitles into their posts, pages, and other custom post types. This leaves users and developers in a bit of a quandary, trying to figure out how best to present subtitles in a beautiful and sensible way. Post excerpts are a very poor choice for subtitles and the only available option outside of custom fields, but custom fields aren't entirely self-explanatory or user-friendly. This simple, straightforward plugin aims to solve this issue.
Simply download Subtitles, activate it, and begin adding subtitles into your posts and pages today. For more advanced usage of the plugin, please see the Frequently Asked Questions.
If you like Subtitles, thank us with coffee :coffee:. If you find it buggy, tell us on GitHub :beetle:. And if you have a cool example of how you're using Subtitles on your website, let us know on Twitter :bird:.
By default the Subtitles plugin just works. All you should need to do in order to begin using it is activate the plugin and begin adding subtitles into your posts, pages, and Subtitles-enabled custom post types.
There are no custom template tags to add into your theme and, outside of advanced use, there is nothing you need to do to your theme in order to begin using this plugin.
What follows are instructions on how to install the plugin and get it working.
Navigate to Plugins ‚Üí Add New from within the WordPress Dashboard.
Search for subtitles.
Click Install Now on Subtitles by We Cobble.
Activate the plugin.
Navigate to Plugins ‚Üí Add New from within the WordPress Dashboard.
Click on the Upload link underneath the Install Plugins page title.
Click the Browse... button and choose subtitles.zip in its download location on your computer.
Click the Install Now button.
Activate the plugin.
Download subtitles.zip.
Extract the subtitles directory to your computer.
Upload the subtitles directory to your /wp-content/plugins/ directory.
Navigate to Plugins ‚Üí Installed Plugins and activate the plugin.
There are two types of questions that are anticipated: user questions and developer questions. I'll address the user questions first, and then dive into more detailed information about customizing Subtitles.
Subtitles lets you easily add subtitles into your WordPress posts, pages, custom post types, and themes.

After plugin activation, you should see an input field labeled Enter subtitle here immediately under your Enter title here input field. After adding a subtitle into your post, simply hit publish and then view your post. There's nothing else to do.
When you uninstall Subtitles, nothing will happen to your subtitles post meta. They'll still be retained in your database, so if you ever decide to use Subtitles again, you'll be able to activate the plugin and have your subtitles show up. In a future release, there may be the option to clean subtitles out of your database, but it didn't make the cut for the initial release, and auto-deleting the data on uninstallation would have been a bad move, as subtitles are non-trivial post meta.
There are two primary issues that may cause users to think that Subtitles doesn't work: 1) no subtitles show on the site or 2) weird HTML begins to appear around titles on a site. We will address both of those here.
Subtitles relies on two things to work properly: 1) the_title being present in your theme and 2) the WordPress Loop. This plugin works by automatically filtering all appropriate post titles so that you are not put in the position of needing to open your theme files manually and using the custom template tags that are available in this plugin.
Some themes use titles outside of the standard WordPress Loop, which means that Subtitles won't touch those. If you would like to use subtitles in a non-standard area of your site, outside of the Loop, then you can either change the views that are supported by the plugin or manually use the template tags that are available to you in this plugin.
The reason this approach has been taken is because if titles outside of the Loop were touched so liberally, you would end up seeing subtitles in places on your site that you wouldn't want them, like in sidebars, navigation menus, and admin screens.
I can almost guarantee that the reason this is happening is because your theme developer is using either the_title or get_the_title in places where they should not be used. This is a theme bug, not a plugin bug. When titles are used as attributes, the appropriate template tag to use is the_title_attribute, never the_title.
Please see these long threads as examples of what happens when themes conflict with Subtitles.
Will Subtitles ruin your SEO? That's a fair question. The answer is no. We've made a note of exactly why &lt;spans&gt; are the default wrappers for subtitles in the inline developer docs for the plugin, which I'll reiterate here:
If you're worried about SEO and the markup of Subtitles, then roll your own markup.
As of version 2.0.0, Subtitles outputs its CSS via wp_head. This is to load sensible CSS that will ensure your subtitle is always scaled properly alongside your website title and never shown in comment areas.
If you'd like to remove this additional CSS, then simply add a similar function to the following in your plugin or theme's primary setup file:
After doing this, no styling should be loaded on the front end of your site and you'll need to style subtitles using your own CSS.
If you'd like to add Subtitles support into a custom post type, use add_post_type_support in a function hooked to init, for example:
This should also work on core-supported post types, like attachment.
If you'd like to remove Subtitles support from posts or pages, use remove_post_type_support in a function hooked to init, for example:
This will work on any post type that may have had Subtitles support added into it elsewhere.
HTML does not have a dedicated mechanism for marking up subheadings, alternative titles, or taglines. There are suggested alternatives from the World Wide Web Consortium (W3C); among them are spans, which work well for what we're trying to do with titles in WordPress.
If for some reason you'd like to change the markup, hook a custom output function to subtitle_markup, for example:
I do not suggest using headings tags for subtitles.
By default subtitles do not show in RSS feeds. If you'd like to show them then the following snippet should help:
By default, subtitles appear on most views throughout a site. This includes single post views, single page views, archive views, and search results pages.
If you'd like to change this behavior, you can do so by taking advantage of subtitle_view_supported. For example, if you'd like to hide subtitles on all archive pages, the following code would work:
By default, the plugin will bail out early if no subtitle is present on a post. As of version 2.2.0, this behavior can be modified. The sample code snippet below will work just fine:
If you'd like to change the output of all subtitles throughout your site, use a function hooked to the_subtitle, for example:
This will filter both the title and subtitle output after Subtitles has done all of its magic.
I very much hope that you do not need to use these template tags, because all of the above methods for handling subtitles should be enough. That said, in the event that you do need to use either the_subtitle() or get_the_subtitle(), they exist in the plugin and will give you a little bit more flexibility over your theme.
They work in the same way that the_title() and get_the_title() work, for example:
Here's how using get_the_subtitle would look:
An ID isn't necessary for get_the_subtitle, but will work for retrieving subtitles from posts that aren't currently being viewed.
By default Subtitles supports both bold and italicized text. If you want more control over this, you can take advantage of the subtitles_allowed_tags filter.
Proceed with caution here. In some cases getting too cavalier with this may introduce HTML issues into your site.
All versions of Subtitles can be found on the Releases page.
TBD
Version Bump: Fix all WordPress Coding Standards errors and update Tested Up To version.
Patch: Transfer ownership of plugin to We Cobble
Patch: Change plugin donation link to point to We Cobble PayPal account.
Version Bump: Fix wonky 2.2.0 release. No changes here; just a version bump to fix the last release package.
Extra: Allow theme and plugin authors to override the early return if no subtitle exists (see issue).
Extra: Automatically enable subtitles support for Jetpack Testimonials (see issue).
Patch: Remove French language packs so that they are able to be directly pulled from WordPress.org (see issue).
Patch: Change jetpack.me links to jetpack.com.
Patch: Change plugin donation link to point to Professional Themes PayPal account.
Bug Fix: Remove redundant htmlspecialchars from admin input (see issue).
Patch: Transfer ownership of plugin to Professional Themes.
Patch: Give developers the option to show subtitles in RSS feeds (see issue).
Extra: Lithuanian (lt_LT) language packs added.
Extra: Add a Subtitle column into the Posts and Pages admin screens.
Extra: We have added in a way for developers to allow more tags in subtitles input.
Extra: Update plugin POT.
Patch: Remove font sizing from hidden entry subtitle in comments area (see issue).
Bug Fix: Do not show subtitles in RSS feeds (see issue).
Extra: Russian (ru_RU) language packs added
Extra: Better WordPress Coding Standards
Extra: WordPress 4.1 introduced a new hook called edit_form_before_permalink that allows us to move Subtitles into a more natural position, just underneath the post title. Let's use that and preserve backwards compatibility for older versions of WordPress (see issue).
Performance Fix: Better CSS Handling for better overall plugin performance (see issue).
Bug Fix: Better backend tabbing from the title to the subtitle input field (see issue).
Extra: Add default support for Jetpack Portfolios (see issue).
Bug Fix: Better visual styling in the back end to keep up with WordPress 4.0
Bug Fix: If subtitles are shown in comment areas, we'll hide them by default.
Bug Fix: Better security for nonce checking after update to the WordPress VIP Coding Standards. See this discussion for more information.
Extra: Wrap primary entry title parts in spans that theme authors can take advantage of for more fine-grained styling when a post has a subtitle.
Extra: French (fr_FR) language packs added (see issue).
Bug Fix: Make sure that other plugins that try to mess with titles do not cause Subtitles to throw PHP warnings due to the second optional $id parameter not being sent to the primary the_subtitles method used throughout sites (see issue).
Bug Fix: Ensure that Subtitles works in PHP 5.2.4 environments (see issue).
Bug Fix: Check if $post is set before proceeding with any title filtering for subtitles (see issue).
Bug Fix: Add a single space between titles and subtitles so that they look sensible when being output as a title attribute (see commit).
Extra: Catalan (ca) language packs added (see issue).
Extra: Korean (ko_KR) language packs added (see issue).
Extra: Spanish (es_ES) language packs added (see issue).
Extra: Begin preparing plugin for better automated testing via Travis CI, phpunit, WordPress Coding Standards, and CodeSniffer
Bug Fix: Make sure that the plugin automatically works with single_post_title (see issue).
Bug Fix: Ensure that special characters in post titles do not erroneously cause subtitles to be skipped during title filtering and checks (see issue).
Bug Fix: Remove unnecessary ID checks against nav menus (see issue).
Bug Fix: Resolve title output issues when WordPress SEO by Yoast breadcrumbs are used inside of The Loop (see issue).
Extra: Vietnamese (vi_VN) language packs added.
Extra: German (de_DE) language packs added.
Extra: Finnish (fi) language packs added.
Extra: Italian (it_IT) language packs added.
Extra: Japanese (ja) language packs added.
Initial Release: (Launch Announcement)
Two primary screenshots have been shown in this README.md file, one of the post screen and one of an example of what subtitles will look like on the front end of your website. The assets folder in this GitHub repository will be used to populate screenshots on the WordPress.org plugin site, and will not be included in the official plugin download from WordPress.org.
See the languages folder for more information on using Subtitles in your language. These are considered ""Extras"" and will usually be released when a version bump has happened to Subtitles, for example during a bug fix or enhancement round of updates.
We've done our best to adhere to Semantic Versioning for Subtitles.
Given a version number MAJOR.MINOR.PATCH, increment the:
MAJOR version when you make incompatible API changes,
MINOR version when you add functionality in a backwards-compatible manner, and
PATCH version when you make backwards-compatible bug fixes.
Most of the updates for this plugin will be in the form of bug fixes and minor enhancements.
Most commits and pull requests will undergo automatic build testing via Travis CI. The build result for the most recent non-skipped commit for master is at the top of this README."
1640,"writeas,writefreely","A clean, Markdown-based publishing platform made for writers. Write together and build a community.. &nbsp;

    

<hr />

    
        
    
    
        
    
    
        
    
    
        
    
    
        
    

&nbsp;
WriteFreely is a beautifully pared-down blogging platform that's simple on the surface, yet powerful underneath.
It's designed to be flexible and share your writing widely, so it's built around plain text and can publish to the fediverse via ActivityPub. It's easy to install and light enough to run on a Raspberry Pi.
Start a blog for yourself, or host a community of writers
Form larger federated networks, and interact over modern protocols like ActivityPub
Write on a fast, dead-simple, and distraction-free editor
Format text with Markdown
Organize posts with hashtags
Create static pages
Publish drafts and let others proofread them by sharing a private link
Create multiple lightweight blogs under a single account
Export all data in plain text files
Read a stream of other posts in your writing community
Build more advanced apps and extensions with the well-documented API
Designed around user privacy and consent
We offer two kinds of hosting services that make WriteFreely deployment painless: Write.as Pro for individuals, and Write.as for Teams for businesses. Besides saving you time and effort, both services directly fund WriteFreely development and ensure the long-term sustainability of our open source work.
Start a personal blog on Write.as, our flagship instance. Built to eliminate setup friction and preserve your privacy, Write.as helps you start a blog in seconds. It supports custom domains (with SSL) and multiple blogs / pen names per account. Read more here.
Write.as for Teams gives your organization, business, or open source project a clutter-free space to share updates or proposals and build your collective knowledge. We take care of hosting, upgrades, backups, and maintenance so your team can focus on writing.
WriteFreely has minimal requirements to get up and running ‚Äî you only need to be able to run an executable.
Note this is currently alpha software. We're quickly moving out of this v0.x stage, but while we're in it, there are no guarantees that this is ready for production use.
To get started, head over to our Getting Started guide. For production use, jump to the Running in Production section.
WriteFreely is available in these package repositories:
Read our full documentation on WriteFreely.org. Help us improve by contributing to the writefreely/documentation repo.
Ready to hack on your site? Get started with our developer guide.
Read about using Docker in the documentation.
We gladly welcome contributions to WriteFreely, whether in the form of code, bug reports, feature requests, translations, or documentation improvements.
Before contributing anything, please read our Contributing Guide. It describes the correct channels for submitting contributions and any potential requirements.
Licensed under the AGPL."
1641,"writingink,wink","A Laravel-based publishing platform. Introduction
Wink's only job is to help you write and present your content with style. Wink is built on top of the world's finest PHP framework Laravel, making it easy for everyone to install and maintain on any cloud platform.

Wink runs on any Laravel application, it uses a separate database connection and authentication system so that you don't have to modify any of your project code.
To install Wink, require it via Composer:
Once Composer is done, run the following command:
Check config/wink.php and configure the database connection wink is going to be using. Then instead of running php artisan migrate, run:
Head to yourproject.test/wink and use the provided email and password to log in.
Before creating a blog post, make sure you have your image directory set up correctly. The directory is set in the config/wink.php and defaults to
public/wink/images. If you are installing Wink in a fresh Laravel install, make sure you link your public directory to the storage directory https://laravel.com/docs/5.7/filesystem#configuration using this command:
(optional) Visit https://unsplash.com/oauth/applications to create a new unsplash app. Grab the 'Access Key' and add it to your .env file as UNSPLASH_ACCESS_KEY. Lastly, add unsplash to your config/services.php file:
Add this command in your deployment script so that wink runs new migrations if any:
You may also want to run this command to re-publish the assets:
Wink is shipped with an admin panel that's simple to use. However, we give you full control of how you present the stored content in your interface. Here's an example of how you'd get a list of your posts for a blog home screen:
You can configure your routes in any way you want:
Wink is still under heavy development, I decided to ship it in this early stage so you can help me make it better, however I'm already using it to run multiple websites including my personal blog.
Here's the plan for what's coming:
[x] Customize Twitter/Facebook cards and SEO metadata.
[x] Optimize CSS. Move to Tailwind?
[x] Add text search inside listings.
[x] Filter posts by status, scheduling, tags, and authors
[x] Dark mode.
[ ] Enhance publishing date picker.
[ ] Create an initial theme that people can use right away. @themsaid
[ ] Optimize image uploads and allow cropping.
[ ] Adding image galleries to posts and pages. @themsaid
[ ] Add tests.
And here are some ideas I'm still not sure about:
[ ] Email Subscription & auto send emails on new content.
[ ] Configure roles (Contributor / Admin)
[ ] Localization
[ ] Multi-lingual content
[ ] Attach metadata to posts and pages.
Check our contribution guide.
Wink is open-sourced software licensed under the MIT license."
1642,"wupdigital,android-maven-publish","Modification of the standard Maven Publish plugin to be compatible with android-library projects (aar).. Modification of the standard Maven Publish plugin to be compatible with android-library projects (aar).
-or-
The android-maven-publish plugin provides a SoftwareComponent similar to the java plugin (components.java).
The android component is used to determine which aar files are published and which dependencies should be listed in the generated POM file.
Please refer to the standard Maven Publish plugin documentation.
If you want to publish custom variants:"
1643,"yvele,poosh",":earth_americas: Publish local files to virtually any remote endpoint (e.g. AWS S3). Publish local files to virtually any remote endpoint (AWS S3, etc.)





Install poosh CLI and S3 plugin:
Create a .poosh.json5 file at the root of your project:
You can now upload:
Or sync if you want to delete remote files that has been locally removed:
Glob Selection |
GZIP |
HTTP Headers |
Upload Ordering |
Automatic Redirection |
Cache |
Simulation
Poosh allow you to upload and sync local files to virtually any remote destination.
Using the match option,
local files that needs to be uploaded can be selected and configured with a glob string:
or an array of patterns
Some supported glob features are:
Using the GZIP option, files can be compressed at remote destination:
content-encoding HTTP header will accordingly be set to gzip.
Using the headers option,
HTTP headers can be configured for each files:
content-encoding, content-length and content-type HTTP headers are automatically generated by default.
Sometimes some files must be uploaded before other ones to avoid inconsistency.
The priority option can be used to order uploads:
Greatest values are uploaded first.
Using the header-location-from-html plugin,
the location HTTP header can be automatically generated from a file HTML http-equiv meta tag.
First install the plugin:
And then use it in your configuration file:
When local files are processed, a .poosh.cache file is generated next to the .poosh.json5 configuration file.
Consecutive runs of poosh will use this file to avoid unnecessary remote requests.
Poosh CLI can be used with the --force options to bypass cache lookup:
The cache file is written after each individual file processing
(using the great NeDB append-only format).
Cache file stores 3 separate hash keys for each processed local file:
File content hash key
HTTP headers hash key
Remote options hash key
This is useful to poosh to detect distinctive local changes in either file content, HTTP headers and remote options.
Using the CLI --dry-run or --read-only options,
no changes will be maid while output still showing potential changes:
or
All ""each"" items are applied to files in order. Same options are overridden by the last one.
Options used to control file's HTTP headers.
<table>
  <tr>
    <th>Option</th>
    <th>Default</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>cache-control</td>
    <td><code>null</code></td>
    <td>
      String or object. The object can be a combination of the following keys:
      <ul>
        <li>
          <strong>maxAge</strong>:
          A number (of seconds) or a string that will be parsed by
          ms.
          For example
          <code>""60 days""</code>,
          <code>""2.5 hours""</code>,
          <code>""1 year""</code>,
          <code>""35 minutes""</code>,
          etc.
        </li>
        <li>
          <strong>cacheable</strong>:
          Can be one of the following values:
          <code>null</code>,
          <code>""public""</code>,
          <code>""private""</code>,
          <code>""no-cache""</code>.
          </li>
        <li>
          <strong>noTransform</strong>:
          Boolean.
        </li>
      </ul>
      All those keys are <code>null</code> by default.
    </td>
  </tr>
  <tr>
    <td>content-disposition</td>
    <td><code>null</code></td>
    <td>String.</td>
  </tr>
  <tr>
    <td>content-encoding</td>
    <td><code>null</code></td>
    <td>
      Content encoding header is automatically generated at runtime.
      Using this option will force the header to the specified value.
    </td>
  </tr>
  <tr>
    <td>content-language</td>
    <td><code>null</code></td>
    <td>String.</td>
  </tr>
  <tr>
    <td>content-length</td>
    <td><code>null</code></td>
    <td>
      Number.
      Content length header is automatically generated at runtime.
      Using this option will force the header to the specified value.
    </td>
  </tr>
  <tr>
    <td>content-md5</td>
    <td><code>null</code></td>
    <td>String.</td>
  </tr>
  <tr>
    <td>content-type</td>
    <td><code>null</code></td>
    <td>
      Content type header is automatically generated at runtime.
      Using this option will force the header to the specified value.
    </td>
  </tr>
  <tr>
    <td>expires</td>
    <td><code>null</code></td>
    <td>String.</td>
  </tr>
  <tr>
    <td>location</td>
    <td><code>null</code></td>
    <td>String.</td>
  </tr>
</table>"
1644,"Triple-T,gradle-play-publisher","GPP is Android's unofficial release automation Gradle Plugin. It can do anything from building, uploading, and then promoting your App Bundle or APK to publishing app listings and other metadata.. 
    



    Gradle Play Publisher



    
        
    
    
        
    


Gradle Play Publisher (GPP) is Android's unofficial release automation Gradle Plugin. It can do
anything from building, uploading, and then promoting your App Bundle or APK to publishing app
listings and other metadata.
Upload the first version of your APK or App Bundle using the
Google Play Console
Sign your release builds
with a valid signingConfig
The first APK or App Bundle needs to be uploaded via the Google Play Console because registering the
app with the Play Store cannot be done using the Play Developer API. For all subsequent uploads and
changes, GPP may be used.
To successfully upload apps to the Play Store, they must be signed with your developer key. Make
sure you have
a valid signing configuration.
To use GPP, you must create a service account with access to the Play Developer API:
If you don't already have one, create a GCP project for your app(s)
Enable the
AndroidPublisher API
for that GCP project
Link your Google Play developer account
to your GCP project
Create a
service account and key
Make sure you're in the GCP project you used above (check the project query param in the
URL)
Select New service account
Give it a name and the Project Owner role (don't worry, we'll remove this later)
After creating the service account, find it in the list of all service accounts and use the 3
dots menu to Manage keys
From there, create a new key using the Add key menu (leave JSON selected)
Move the downloaded JSON credentials into your project and
tell GPP about it
Give your service account
permissions to publish apps
on your behalf
Click Invite new user
Copy/paste the service account email (you can find it in the JSON credentials)
Don't touch the roles
Specify which apps the service account should have access to. In this example, GPP has full
access to testing tracks and app listings, but will be unable to make production releases:

Run ./gradlew bootstrapListing or some other GPP task to validate your setup
Now that you've successfully created the connection between GCP and Google Play, you can remove
the Project Owner permissions
Go to your IAM settings
Search for the service account you created
Click the edit icon (found at the end of the row)
In the permission selection panel that opens, click the trash icon to remove the owner role
Click save
Apply the plugin to each individual com.android.application module where you want to use GPP
through the plugins {} DSL:
<details open><summary>Kotlin</summary>

</details>

<details><summary>Groovy</summary>

</details>

If you're prepared to cut yourself on the bleeding edge of GPP development, snapshot builds are
available from
Sonatype's snapshots repository:
<details open><summary>Kotlin</summary>

</details>

<details><summary>Groovy</summary>

</details>

After you've gone through the Service Account setup, you should have a JSON file
with your private key. Add a play block alongside your android one with the file's location:
Note: If you commit unencrypted Service Account keys to source, you run the risk of letting anyone
access your Google Play account. To circumvent this issue, put the contents of your JSON file in
the ANDROID_PUBLISHER_CREDENTIALS environment variable and don't specify the
serviceAccountCredentials property.
GPP follows the Android Gradle Plugin's (AGP) naming convention: [action][Variant][Thing]. For
example, publishPaidReleaseBundle will be generated if you have a paid product flavor.
Lifecycle tasks to publish multiple product flavors at once are also available. For example,
publishBundle publishes all variants.
To find available tasks, run ./gradlew tasks --group publishing and use
./gradlew help --task [task] where task is something like publishBundle to get more detailed
documentation for a specific task.
GPP supports uploading both the App Bundle and APK. Once uploaded, GPP also supports promoting those
artifacts to different tracks.
Several options are available to customize how your artifacts are published:
track is the target stage for an artifact, i.e. internal/alpha/beta/production or any
custom track
Defaults to internal
releaseStatus is the type of release, i.e. ReleaseStatus.[COMPLETED/DRAFT/HALTED/IN_PROGRESS]
Defaults to ReleaseStatus.COMPLETED
userFraction is the percentage of users who will receive a staged release
Defaults to 0.1 aka 10%
Note: the userFraction is only applicable where releaseStatus=[IN_PROGRESS/HALTED]
updatePriority sets the update priority for a new release. See
Google's documentation on consuming
this value.
Defaults to the API value
Example configuration:
While GPP can automatically build and find your artifact, you'll need to tell the plugin where to
find your release notes.
Add a file under src/[sourceSet]/play/release-notes/[language]/[track].txt where sourceSet
is a full variant name,
language is one of the
Play Store supported codes,
and track is the channel you want these release notes to apply to (or default if unspecified).
As an example, let's assume you have these two different release notes:
When you publish to the beta channel, the beta.txt release notes will be uploaded. For any other
channel, default.txt will be uploaded.
Note: the Play Store limits your release notes to a maximum of 500 characters.
The Play Console supports customizing release names. These aren't visible to users, but may be
useful for internal processes. Similar to release notes, release names may be specified by placing
a [track].txt file in the release-names directory under your play folder. For example, here's
a custom release name for the alpha track in the play/release-names/alpha.txt file:
If it makes more sense to specify the release name in your build script, the releaseName property
is available:
Note: the play.releaseName property takes precedence over the resource files.
There is also a --release-name CLI option for quick access. For example,
./gradlew publishBundle --release-name ""Hello World!"".
Note: the Play Store limits your release names to a maximum of 50 characters.
By default, GPP will build your artifact from source. In advanced use cases, this might not be the
desired behavior. For example, if you need to inject translations into your APK or App Bundle after
building it but before publishing it. Or perhaps you simply already have an artifact you wish to
publish. GPP supports this class of use cases by letting you specify a directory in which
publishable artifacts may be found:
For quick access, you can also use the --artifact-dir CLI option:
Note: all artifacts in the specified directory will be published.
Note: mapping files aren't applicable to App Bundles since the mapping file is contained within
the bundle.
By default, GPP will look for a file called mapping.txt in your artifact directory. If you need
more granularity, you can prefix mapping.txt with your APK file name. For example:
my-second-app.apk will use my-second-app.mapping.txt and my-first-app.apk will use the
default mapping.txt because no specific mapping file was specified.
GPP supports keeping around old artifacts such as OBB files or WearOS APKs:
Run ./gradlew publishBundle.
You'll notice that if you run ./gradlew publish, it uploads an APK by default. To change this,
default to the App Bundle:
Run ./gradlew publishApk. Splits will be uploaded if available.
Run ./gradlew uploadReleasePrivateBundle for App Bundles and ./gradlew uploadReleasePrivateApk
for APKs. To upload an existing artifact, read about
how to do so.
After running an Internal Sharing task, the output of the API response will be stored in the
following directory: build/outputs/internal-sharing/[bundle/apk]/[variant]/. Each file will be
named [apk/aab name].json.
For example, here are the contents
of app/build/outputs/internal-sharing/bundle/release/app-release.json:
To accelerate development, GPP supports uploading and then immediately installing Internal Sharing
artifacts. This is similar to the AGP's install[Variant] task.
Run ./gradlew installReleasePrivateArtifact to install an artifact built on-the-fly and
./gradlew uploadReleasePrivateBundle --artifact-dir path/to/artifact installReleasePrivateArtifact
to install an existing artifact.
Existing releases can be promoted and/or updated to the configured track
with ./gradlew promoteArtifact.
By default, the track from which to promote a release is determined by the most unstable channel
that contains a release. Example: if the alpha channel has no releases, but the beta and prod
channels do, the beta channel will be picked. To configure this manually, use the fromTrack
property:
Similarly, the track to which to promote a release defaults to the promoteTrack property. If
unspecified, the resolved fromTrack property will be used instead and an in-place update will be
performed. Example configuration:
If you need to execute a one-time promotion, you can use the CLI args. For example, this is how you
would promote an artifact from the alpha ‚û°Ô∏è beta track with only 25% of users getting the release:
If you only need to update the rollout percentage of an existing in-progress release, you can do so
with the update flag. For example, this is how you would increase the production track rollout
percentage to 50% of users.
If you have an ongoing inProgress release and would like to perform a full rollout, simply change
the release status to completed. A user fraction of 1.0 is invalid and will be rejected.
If an artifact already exists with a version code greater than or equal to the one you're trying to
upload, an error will be thrown when attempting to publish the new artifact. You have two options:
Ignore the error and continue (ResolutionStrategy.IGNORE)
Automatically pick the correct version code so you don't have to manually update it
(ResolutionStrategy.AUTO)
Example configuration:
For example, you could update your app's version name based on the new version code:
GPP supports uploading any metadata you might want to change with each release, from screenshots and
descriptions to in-app purchases and subscriptions.
GPP includes a bootstrap task that pulls down your existing listing and initializes everything for
you. To use it, run ./gradlew bootstrapListing.
Note: if you have a pre-existing play folder, it will be reset.
GPP follows the Android Gradle Plugin's source set
guidelines and priorities.
src/[sourceSet]/play is the base directory for Play Store metadata. Since main is the most
common source set, it will be assumed in all following examples.
In addition to merging metadata across variants, GPP merges translations. That is, if a resources is
provided in a default language such as en-US but not in fr-FR, the resource will be copied over
when uploading French metadata.
Run ./gradlew publishListing.
Base directory: play
Base directory: play/listings/[language] where language is one of the
Play Store supported codes
Directory: play/listings/[language]/graphics where language is defined as in the previous
section
Image files are organized a bit differently than in previous sections. Instead of the file name, the
parent directory's name is used as the media type. This is because multiple images may be provided
for the same media type. While file names are arbitrary, they will be uploaded in alphabetical order
and presented on the Play Store as such. Therefore, we recommend using a number as the file name
(1.png for example). Both PNG and JPEG images are supported.
Run ./gradlew publishProducts.
Manually setting up in-app purchase files is not recommended. Bootstrap them instead
with ./gradlew bootstrapListing --products.
When working with product flavors, granular configuration is key. GPP provides varying levels of
granularity to best support your needs, all through the playConfigs block:
<details open><summary>Kotlin</summary>

</details>

<details><summary>Groovy</summary>

</details>

Sometimes, you may not want to publish all variants of your app. Or maybe you don't want publishing
enabled on CI or local dev machines. Whatever the case may be, GPP can be disabled with the
enabled property:
<details open><summary>Kotlin</summary>

</details>

<details><summary>Groovy</summary>

</details>

By default, GPP assumes every product flavor consists of a separate, independent app. To tell GPP
this isn't the case, you must use the commit property:
<details open><summary>Kotlin</summary>

</details>

<details><summary>Groovy</summary>

</details>

If you need to publish each build flavor to a separate Play Store account, simply provide separate
credentials per product flavor.
<details open><summary>Kotlin</summary>

</details>

<details><summary>Groovy</summary>

</details>

All configuration options available in the play block are also available as CLI options so you
don't have to update your build file when making one-time changes. For example, to configure
play.track on demand, use the --track option. camelCase options are converted to
kebab-case ones.
To get a list of options and their quick documentation, use ./gradlew help --task [task] where
task is something like publishBundle.
If you need to use GPP behind an HTTPS-proxy, but it fails with an SSLHandshakeException, you can
provide your own truststore via the javax.net.ssl.trustStore property in your project's
gradle.properties:
GPP will automatically pick it up and use your proxy."
1645,"writefreely,writefreely","A clean, Markdown-based publishing platform made for writers. Write together and build a community.. &nbsp;

    

<hr />

    
        
    
    
        
    
    
        
    
    
        
    
    
        
    

&nbsp;
WriteFreely is a clean, minimalist publishing platform made for writers. Start a blog, share knowledge within your organization, or build a community around the shared act of writing.

Built on a plain, auto-saving editor, WriteFreely gives you a distraction-free writing environment. Once published, your words are front and center, and easy to read.
Start writing together, publicly or privately. Connect with other communities, whether running WriteFreely, Plume, or other ActivityPub-powered software. And bring members on board from your existing platforms, thanks to our OAuth 2.0 support.
Categorize articles with hashtags, and create static pages from normal posts by pinning them to your blog. Create draft posts and publish to multiple blogs from one account.
Blog elements are localized in 20+ languages, and WriteFreely includes first-class support for non-Latin and right-to-left (RTL) script languages.
WriteFreely collects minimal data, and never publicizes more than a writer consents to. Writers can seamlessly create multiple blogs from a single account for different pen names or purposes without publicly revealing their association.


The quickest way to deploy WriteFreely is with Write.as, a hosted service from the team behind WriteFreely. You'll get fully-managed installation, backup, upgrades, and maintenance ‚Äî and directly fund our free software work ‚ù§Ô∏è
Learn more on Write.as.
WriteFreely deploys as a static binary on any platform and architecture that Go supports. Just use our built-in SQLite support, or add a MySQL database, and you'll be up and running!
For common platforms, start with our pre-built binaries and head over to our installation guide to get started.
You can also find WriteFreely in these package repositories, thanks to our wonderful community!
Read our full documentation on WriteFreely.org &mdash;Ô∏è and help us improve by contributing to the writefreely/documentation repo.
Start hacking on WriteFreely with our developer setup guide. For Docker support, see our Docker guide.
We gladly welcome contributions to WriteFreely, whether in the form of code, bug reports, feature requests, translations, or documentation improvements.
Before contributing anything, please read our Contributing Guide. It describes the correct channels for submitting contributions and any potential requirements.
Copyright ¬© 2018-2022 Musing Studio LLC and contributing authors. Licensed under the AGPL."
1646,"man-group,notebooker","Productionise & schedule your Jupyter Notebooks as easily as you wrote them.. Productionise and schedule your Jupyter Notebooks, just as interactively as you wrote them. Notebooker is a webapp which can execute and parametrise Jupyter Notebooks as soon as they have been committed to git. The results are stored in MongoDB and searchable via the web interface, essentially turning your Jupyter Notebook into a production-style web-based report in a few clicks.







See the documentation at https://notebooker.readthedocs.io/ for installation instructions.
Notebooker has been tested on Linux, Windows 10, and OSX; the webapp has been tested on Google Chrome.
If you want to explore an example right away, you can use docker-compose:
That will expose Notebooker at http://localhost:8080/ with the example templates.
Notebooker has been actively maintained at Man Group since late 2018, with the original concept built by 
Jon Bannister. 
It would not have been possible without contributions from:
And these fantastic projects:
Fomantic-UI"
1647,"knadh,dictpress","A stand-alone web server application for building and publishing full fledged dictionary websites and APIs for any language.. dictpress is a free and open source, single binary webserver application for building and publishing fast, searchable dictionaries for any language.
Examples dictionaries:
Alar ‚Äî Kannada-English dictionary.
Olam ‚Äî English-Malayalam, Malayalam-Malayalam dictionary.
Build dictionaries for any language to any language.
Supports multiple dictionaries and languages in the same database.
Custom themes and templates for publishing dictionary websites.
Paginated A-Z (all alphabets for any language) glossaries.
HTTP/JSON API for search and everything else.
Pluggable search algorithms, eg: fulltext search, phonetic word search etc.
Admin UI for managing and curating dictionary data.
Admin moderation UI for crowd sourcing dictionary entries.
Bulk CSV to database import.


Download the latest version.
Read the docs for setup and usage instructions."
1719,"xsynaptic,wordpress-gulp-starter-kit","[NOT MAINTAINED] A starter kit for developing WordPress themes with Gulp.. Designing WordPress themes the old-fashioned way is time-consuming and error-prone. Automating the build process allows us to integrate best practices into our workflow while saving time. This project is a starter kit for developing highly optimized WordPress themes with Gulp, npm, and Sass, among other tools. This is not meant to be a starter theme or framework (although I have included a minimum viable theme to demonstrate some of the possibilities). It is, instead, a kind of project scaffolding and example workflow for modern and efficient WordPress theme development.
The latest version of this starter kit features a modular Gulp file design inspired by Dan Tello's excellent gulp-starter. Configuration is isolated from the tasks themselves to make it easier to change paths and modify settings. This approach is slightly more complicated than what I originally outlined on my blog but also far more powerful. Live local development is now facilitated by your choice of BrowserSync or LiveReload (the default choice).
Why use this project instead of any of the alternatives? A few advantages:
It doesn't try and do too much.
You should be able to easily drop your own theme into the src folder and start hacking without much additional setup.
Documentation and comments in the code assume a novice level of understanding.
Builds on existing WordPress and Gulp best practices without doing anything too crazy.
Includes several JS and Sass integrations to show you some of the possibilities. All of these are easily removed.
This kind of workflow will save you a ton of time and help you make better, more readily-optimized themes once you learn how it all works.
If you're already up and running with most of the usual Node ecosystem tools this starter kit won't require much additional effort.
Install npm.
Install Gulp: npm install -g gulp.
Install JSHint: npm install -g jshint. (You can skip this and cut JSHint out of the workflow but it will take some additional work.)
Download or clone this repo: git clone https://github.com/synapticism/wordpress-gulp-starter-kit.git.
Install Bower: npm install bower -g (helps manage front-end dependencies, particularly CSS libraries and such; see below for more info).
Install Composer (a PHP package manager, not really necessary).
Install Sass (only if the built-in, default libsass compiler isn't good enough for your needs): gem install sass (requires Ruby).
Edit gulpconfig.js and, at the very least, change the project variable to match the name of your theme. If you like the way this workflow is setup you shouldn't need to edit any of the files under gulpfile.js/tasks just yet.
Install all dependencies by running npm install. This will fetch all dependencies listed in package.json (which includes front-end JavaScript packages and back-end tools like Gulp plugins and BrowserSync). You may see warnings about deprecated packages and what-not; that's probably fine, just keep going!
BrowserSync setup: assuming you have a local development environment setup all you should need to do is enter the URL into the proxy setting in gulpconfig.js. Why use BrowserSync? It's fast, awesome, and allows for simultaneous responsive development across multiple devices.
LiveReload setup: install a browser extension for Chrome or Firefox. Why use LiveReload? It does the job without complications or additional setup after the extension is installed.
This build process assumes you're up and running with source maps for both JavaScript and Sass. You may need to configure your browser or debugging environment to make sense of the minified files generated by Gulp!
Run gulp and start hacking!
Previously this project shipped without a working theme included. I figured that with all the great starter themes out there (for instance, _s, Roots, and Bones) it wouldn't be hard to drop one in and start theming. I don't personally use any of these so I was a little surprised to discover how tricky this can be. Starter themes, despite their ""bare bones"" reputation, are often bulky and opinionated. Some even ship with their own build processes already in place!
It seems there is a need for what I'd call a minimum viable theme: a truly bare bones WordPress starter theme featuring only the essentials to get up and running, something that you can assess at a glance. For the purposes of this project I have created such a theme, tentatively named voidx. It isn't pretty and isn't up to WordPress standards but it works well enough to show off some of the power of this workflow. Feel free to play with or discard it as you wish. All files under src can be replaced by your own files, you just have to be sure to wire things up properly in the gulpconfig.js file if you swap in your own stuff. Several scripts have already been integrated to show you how it's done, but these are easily if you don't like 'em (which is sort of the point of having such scaffolding, so you can easily swap stuff in and out).
There are two components worth a closer look:
The script variable and enqueuing functions in src/inc/assets.php; these are tightly coupled with the output of the build process.
The theme configuration pattern described in functions.php and functions-config-defaults.php.
Whether you use anything from this built-in theme is entirely up to you. If you prefer to start working with your own theme just drop it in. You will probably need to modify paths and glob matching patterns in gulpconfig.js but it is designed to be fairly easy and straight-forward with lots of comments to point you in the right direction.
This starter kit uses src, build, and dist folders to organize theme development:
src: this directory contains the raw material for your theme: templates (src/), PHP includes (src/inc), language files (src/languages), styles (src/scss), scripts (src/js), and images (anywhere under src/). Only edit files in this directory!
build: generated by Gulp, this is a working copy of your theme for use in development and testing. Symlink build to your wp-content/themes directory for local development and testing (e.g. if your theme is in ~/dev/themes/my-theme and your local copy of WordPress is installed in ~/dev/localhost/wp you'll want to run ln -s ~/dev/themes/my-theme/build ~/dev/localhost/wp/wp-content/themes/my-theme).
dist: short for distribution, this will be the final, polished copy of your theme for production. You will need to manually run gulp dist to create a new distribution. You can also symlink this directory for a final round of testing; just keep in mind that your theme will now be in dist/[project], where [project] is the setting at the top of the Gulp configuration. This project folder is what you will want to deploy to production. (No more weird junk in your themes. Hooray!)
Note: both the build and dist directories are disposable and can be regenerated from the contents of src. You aren't likely to want to edit files in this folders but you may want to open them up to diagnose issues with the build process itself.
Gulp is an extremely powerful tool for automating tasks from the command line. If you're new to Gulp but coming from a WordPress background I recommend reading tutorials by Matt Banks and Mark Goodyear. I also learned a lot from a post by Dan Trello (and have integrated much of his approach into this project) but it might be a bit more opaque for newcomers.
To get started try running gulp from the command line. This fires gulpfile.js/index.js and should build a working copy of the included theme. The other command you will use from time to time is gulp dist, which builds a distribution copy.
Configuration is handled by a single file: gulpconfig.js. If you leave the directory structure intact there won't be too much that needs changing here but I can think of two non-obvious components you might want to modify or at least look at:
BrowserSync settings: if you are developing on a local web server you will want to enter the URL into browsersync.proxy and then change watch.watcher to browsersync to take it for a test drive. You'll know it's working when you run gulp and a new browser opens with a live copy of your web site. Make changes to any of the Sass files and they should be shown on the page almost immediately. Of course, BrowserSync really shines when you connect a mobile device to your development server, but for that you're on your own ;)
Script settings: draw your attention to scripts.bundles and scripts.chunks. This feature is essentially a poor man's Browserify or Webpack. By defining different ""chunks"" (script files that combine to provide a particular feature) and ""bundles"" (chunks that combine to provide feature sets) you can generate an assortment of files that can be efficiently and intelligently loaded through your WordPress theme. This approach has its limitations, of course, particularly when dependencies are shared between scripts, but it should be of use to many WordPress theme developers.
Interested in adding new Gulp plugins to your build system? A full tutorial is out of scope for this project but it really shouldn't be all that hard to figure out. In brief, install a plugin with npm install [package] --save-dev, require it in a suitable task file, add something to the configuration file if needed, and drop it into the pipeline somewhere. Some types of plugin are particularly easy to add, for instance anything listed on the postcss.parts web site once you have gulp-postcss installed and configured in /gulpfile.js/tasks/styles.js.
npm is great for working with packages of all kinds (front-end or back-end) and is increasingly becoming the package manager of choice. Previously this starter kit emphasized the use of Bower to retrieve and manage front-end dependencies but nowadays my personal preference is to use npm, mostly because it's way easier to update dependencies than Bower using tools like npm-check-updates.
Find new packages with npm search [package].
Install new packages with: npm install [package] --save-dev.
A general rule-of-thumb: if you can find it there just use npm.
A few handy tips from the Bower documentation:
Search for packages with bower search [package] or browse the Bower web interface.
Install new packages with: bower install [package] --save-dev.
Remove packages by deleting a line from bower.json and then run bower prune.
Clean the cache with bower cache clean (occasionally needed when things start getting weird).
This project now supports either gulp-sass (based on the newer and faster libsass, now active by default) or gulp-ruby-sass (which requires the original Ruby implementation of Sass). Switch styles.compiler in the configuration file as needed! For reference: Sass compatibility table.
Sass files can be found in /src/scss. Gulp will not process Sass partials beginning with _; these need to be explicitly imported (see style.scss for an example). On the other hand, if you want to output any other CSS files just drop the underscore e.g. editor-style.scss.
Stylesheets are post-processed with cssnano, a PostCSS plugin with Autoprefixer baked in, eliminating the need for vendor prefixes.
Sourcemaps are generated by gulp-sourcemaps to make debugging stylesheets a snap. Note: all generated CSS is production-ready (e.g. minified and prefixed); sourcemaps only appear in the build directory.
Packages installed with Bower or npm are in the path by default so you can @import Sass files directly, as seen in style.scss.
This starter kit ships with Normalize.css and Scut, a minimalist library of useful Sass mixins and functions for the post-vendor prefixing era. Both of these are easy to remove if you're not interested in them.
Images are copied from wherever they are in src to the same location under build. They are only optimized when running gulp dist as this operation is resource-intensive.
Like images, PHP (and language) files can go anywhere under src and will be copied to build and dist while preserving directory structure.
The bare bones theme included in this starter kit integrates three external JavaScript projects: timeago (which facilitates human-readable timestamps), SVG for Everybody, and WP AJAX Page Loader (a lightweight and intelligent infinite scroll script). Have a look at /src/inc/assets.php file and gulpconfig.js to see how this works. Timeago requires only npm install -d timeago, an extra line in gulpconfig.js, and initialization in /src/js/footer.js. SVG for Everybody is provided as an example of a script that must be loaded in the header; hence you can see it in action at /src/js/header.js. The page loading script is a more involved integraton; browse the source and see for yourself.
Now for one that you can try yourself! Let's say you run across a cool project like Headroom.js and decide you'd like to try it out. Here's how you would do that with the tools and workflow outlined in this repo:
npm install headroom.js --save-dev. This will save the package to the devDependencies field of your package.json file.
Look up the path to the script and add the appropriate entries to scripts.bundles and scripts.chunks in gulpconfig.js. The key name of scripts.bundles should match $script_name (below). Since this script is meant to be loaded on every page it is safe to bundle it with the footer script.
To make this script optional requires a bit more work:
Add an option to functions-config-defaults.php: defined( 'VOIDX_SCRIPTS_HEADROOM' ) || define( 'VOIDX_SCRIPTS_HEADROOM', true );.
Add the switch to the voidx_assets_footer functon in inc/assets.php: if ( VOIDX_SCRIPTS_HEADROOM ) : $file .= '-hr';.
Add an option to scss/_config.scss to allow for the styling to be turned on or off: $plugin-headroom: true;.
Add the necessary styling to scss/_plugins.scss wrapped in a conditional check: @if ($plugin-headroom) { // Style }.
Create an additional script at src/js/headroom.js to invoke the main script:
That's all there is to it. Now this script can be switched on or off in two configuration files. WordPress will automatically load the correct script bundle for all JavaScript-based functionality (rather than loading lots of little scripts for each feature).
Things can and will go wrong when working with new tools but there are a few simple things you can do to avoid the worst of it:
Make sure everything is up to date, particularly this package, npm, node, Bower, etc.
If you're getting weird errors you can't figure out try deleting node_modules and running npm install.
You might also have some luck cleaning the cache for both npm and Bower, both of which respond to the clean cache command, or try npm prune &amp;&amp; npm install.
Yeoman generator (open issue; some help here would be awesome since I don't personally use Yeoman).
Better error handling (waiting for Gulp 4).
Reduce unnecessary wrapper plugins.
RTL support with gulp-rtlcss?
Explore using Gulp for translation; see gulp-potomo, gulp-wp-pot, and gulp-checktextdomain for examples.
Browserify integration? The existing bundles/chunks system is very DIY and non-standard. Feedback welcome.
More good ideas from Gulp recipes.
Feature requests and bug reports welcome; open an issue! Please note that I intend to reign in scope creep on this project :)
Like the approach but prefer something more mature, sophisticated, and opinionated? Check out Sage and Bedrock from Roots. Interested in another more stripped-down approach? Have a look at gulp-wp-theme.
The initial version of this repo featured a gulpfile.js adapted from Matt Banks. Additional credit is due to Mark Goodyear. The current version is largely based on Dan Tello's excellent gulp-starter. The theme templates included in this project ultimately descend from Twenty Twelve.
Licensed under the GPL 3.0. You are encouraged to link back to my web site, development blog, and/or this GitHub repository if you find this at all useful."
1720,"zellwk,typi","A sass mixin to make responsive typography easy. Typi does two things for you incredibly well.
Typi helps you write font-size and line-height declarations at multiple breakpoints without breaking a sweat.
Typi helps you calculate vertical rhythm without having to do the math yourself.
Here's a quickie example for both points.
For point 1:
For point 2:
You can install Typi in four ways:
Bower: bower install typi --save
npm: npm install typi --save-dev
diamond: diamond install typi
manual install (https://github.com/zellwk/typi/archive/master.zip)
Typi with ruby gems
If you want to install Typi with Ruby, check out Pete's repo for installation instructions. (I think you can use v2.3.0. Not sure about v3)
Once you've downloaded Typi, include it in your project with:
If you are using diamond, it can be imported with:
You need to configure two Sass maps:
$breakpoints ‚Äì holds breakpoint values
$typi ‚Äì holds all your typography config
The $breakpoints map is a series of key: value pairs that tell Typi what media queries to create for each font-size and line-height property you intend to write. It looks like this:
Feel free to leave breakpoint values in pixels if you intend to use a breakpoint library that's compatible with Typi (more on that later). Otherwise, I recommend you convert these values into em.
The $typi map is a storage of different font maps that contain information about breakpoints to create and the font-sizes and line-heights that should be written that that breakpoint.
The bare minimum version looks like this:
The first font-map in $typi should always be the base font-map. This tells Typi to output the correct font-sizes and line-height in the html selector. Here's what it reads:
null key: Create font-size of 16px and line-height of 1.4 without breakpoints
small key: At 600px, change font-size to 18px
large key: At 1200px, change font-size to 20px
You can also create other font-maps, but we'll talk about them later to make things easier to understand. Let's see how to use this base font-map first.
Typi uses the base font-map to create font-size and line-height values for the html selector. You tell Typi to create these values by using the typi-init mixin.
You should get the following CSS. Notice how pixel values get converted into percentage values when you use typi-init.
Typi allows you to create other font-size and line-height and media query combinations by creating another font-map, like this:
In the code above, we created a h1 font-map with that:
Creates a font-size with a value of 24px (written in rem) and a line-height of 1.3 without breakpoints
Changes font-size to a value of 2.369em (written in rem) and line-height to 1.2 at a minimum width of 600px.
You can use this h1 font-map with the typi mixin once you've created it, like this:
The CSS produced by Typi is (notice how font-sizes gets converted into rem):
Since Typi works with em values, you can also use Modular Scale easily with Typi like this:
(Note: Make sure to include the modular-scale sass library before doing this. Typi works with Modular Scale Version 2++. DO NOT install version 3 or Typi will fail).
Typi can help you create classes automatically if you use the typi-create-classes mixin. It extracts the keys present in your $typi map and calls @include typi on each individual key.
Read this article to see why you might love this feature.
Although I highly recommend the use of rem, there are instances where you want to use em over rem. If this happens, all you need to do is tell Typi you want to create sizes in em by stating $rem: false, like this:
And Typi automatically writes sizes in the em unit.
You should use em values for media queries, unless you decide to use a breakpoint library that's compatible with Typi. Typi will automatically convert all pixel values to em if you use such a library.
At this moment, Typi supports the use of three breakpoint libraries‚ÄîMappy breakpoints,Breakpoint Sass and Sass MQ . You tell Typi about the existence of these libraries with:
Then, Typi will do it's job and convert pixels to em automatically:
Typi gives you a vr() function to count baselines without requiring you to do complicated calculations yourself. It looks like this:
Typi uses the null key in your base font-map to calculate the Vertical Rhythm. Typi then uses the line-height value (1.4) to calculate the Vertical Rhythm.
In this case, 1 baseline = 16px * 1.4 (converted into rem).
Typi gives you the ability to write Vertical Rhythms in em instead of rem whenever you need to. To do so, you include the font-size as a second parameter and Typi will automatically do the rest. This font-size parameter can either be in pixels or em:
More features are coming to Typi. However, I haven't had the time to work them out (or write about them) yet. I'll let you know when I manage to make Typi even better than it is now!
Just one for now: Make sure the tests before you submit a pull request.
Steps:
Clone the repo
Install dependencies with bower install && npm install
Run gulp to start tests
Added support for Sass MQ
Added ability to write classes automatically with typi-create-classes.
Changed $typi map. NOTE: BREAKING CHANGE.
Added the ability to change Modular Scale within media queries easily
Added typi-ms() function
Bugfix for integration with mappy-bp
Changed typi() output to rem by default
Added ability to calculate vertical rhythms in em and rem.
:)"
1721,"ZeroX-DG,SnippetStore",":tada: A snippet management app for developers :rocket:. SnippetStore

<i>:tada: A snippet management app for developers :rocket:</i>


  
    
  




  


  


  


  




  


SnippetStore is a application for developers to store their snippets and quickly retrieve them when needed. SnippetStore mainly focus on storing code therefor its interface is small and simple, perfect for busy developers who doesn't care about small details.
There are many requests for macOS support and I'm sure many of you guys who are mac users will want
SnippetStore to be available in homebrew and able to run on macOS too. But in order to do that, I need help from you guys to afford a mac to test & build this project and many more other projects in the future. It would be a huge help if you can buy me a coffee :smile:

SnippetStore is also available on issuehunt

A massive thank you to these donators
Currently SnippetStore only available for linux and windows.
If you're using MacOS, you can also build a version for you OS too (not guarantee it will work!)
You can get the latest release of SnippetStore here
SnippetStore currently support 2 themes dark and light
With SnippetStore you can assign multiple tags to your snippet and easy find them using the tag list on the right bar

  


Not satisfied with a single file snippet? With SnippetStore you can now store multiple files within a snippet

  


SnippetStore currently support 2 snippet list layout:
SnippetStore currently support 2 languages:
English
Vietnamese
Framework: Electron
Bundler: Webpack, Babel, Electron-builder
Language: JavaScript(ES6), Sass
Library: React, MobX, Mousetrap, react-toastify, react-tooltip, CodeMirror
Lint: ESLint
Test: Jest
Check out contributing.md
Hung Nguyen (twitter)"
1722,"twbs,bootstrap","The most popular HTML, CSS, and JavaScript framework for developing responsive, mobile first projects on the web.. 
  
    
  


Bootstrap


  Sleek, intuitive, and powerful front-end framework for faster and easier web development.
  
  <strong>Explore Bootstrap docs ¬ª</strong>
  
  
  Report bug
  ¬∑
  Request feature
  ¬∑
  Themes
  ¬∑
  Blog


Our default branch is for development of our Bootstrap 5 release. Head to the v4-dev branch to view the readme, documentation, and source code for Bootstrap 4.
Several quick start options are available:
Clone the repo: git clone https://github.com/twbs/bootstrap.git
Install with npm: npm install bootstrap@v5.3.0-alpha2
Install with yarn: yarn add bootstrap@v5.3.0-alpha2
Install with Composer: composer require twbs/bootstrap:5.3.0-alpha2
Install with NuGet: CSS: Install-Package bootstrap Sass: Install-Package bootstrap.sass
Read the Getting started page for information on the framework contents, templates, examples, and more.














Within the download you'll find the following directories and files, logically grouping common assets and providing both compiled and minified variations.
<details>
  <summary>Download contents</summary>

</details>

We provide compiled CSS and JS (bootstrap.*), as well as compiled and minified CSS and JS (bootstrap.min.*). Source maps (bootstrap.*.map) are available for use with certain browsers' developer tools. Bundled JS files (bootstrap.bundle.js and minified bootstrap.bundle.min.js) include Popper.
Have a bug or a feature request? Please first read the issue guidelines and search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue.
Bootstrap's documentation, included in this repo in the root directory, is built with Hugo and publicly hosted on GitHub Pages at https://getbootstrap.com/. The docs may also be run locally.
Documentation search is powered by Algolia's DocSearch.
Run npm install to install the Node.js dependencies, including Hugo (the site builder).
Run npm run test (or a specific npm script) to rebuild distributed CSS and JavaScript files, as well as our docs assets.
From the root /bootstrap directory, run npm run docs-serve in the command line.
Open http://localhost:9001/ in your browser, and voil√†.
Learn more about using Hugo by reading its documentation.
You can find all our previous releases docs on https://getbootstrap.com/docs/versions/.
Previous releases and their documentation are also available for download.
Please read through our contributing guidelines. Included are directions for opening issues, coding standards, and notes on development.
Moreover, if your pull request contains JavaScript patches or features, you must include relevant unit tests. All HTML and CSS should conform to the Code Guide, maintained by Mark Otto.
Editor preferences are available in the editor config for easy use in common text editors. Read more and download plugins at https://editorconfig.org/.
Get updates on Bootstrap's development and chat with the project maintainers and community members.
Follow @getbootstrap on Twitter.
Read and subscribe to The Official Bootstrap Blog.
Ask and explore our GitHub Discussions.
Chat with fellow Bootstrappers in IRC. On the irc.libera.chat server, in the #bootstrap channel.
Implementation help may be found at Stack Overflow (tagged bootstrap-5).
Developers should use the keyword bootstrap on packages which modify or add to the functionality of Bootstrap when distributing through npm or similar delivery mechanisms for maximum discoverability.
For transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under the Semantic Versioning guidelines. Sometimes we screw up, but we adhere to those rules whenever possible.
See the Releases section of our GitHub project for changelogs for each release version of Bootstrap. Release announcement posts on the official Bootstrap blog contain summaries of the most noteworthy changes made in each release.
Mark Otto
https://twitter.com/mdo
https://github.com/mdo
Jacob Thornton
https://twitter.com/fat
https://github.com/fat

  

Thanks to BrowserStack for providing the infrastructure that allows us to test in real browsers!

  

Thanks to Netlify for providing us with Deploy Previews!
Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor]










Thank you to all our backers! üôè [Become a backer]

Code and documentation copyright 2011‚Äì2023 the Bootstrap Authors. Code released under the MIT License. Docs released under Creative Commons."
1723,"IanLunn,Hover","A collection of CSS3 powered hover effects to be applied to links, buttons, logos, SVG, featured images and so on. Easily apply to your own elements, modify or just use for inspiration. Available in CSS, Sass, and LESS.. 
A collection of CSS3 powered hover effects to be applied to links, buttons, logos, SVG, featured images and so on. Easily apply to your own elements, modify or just use for inspiration. Available in CSS, Sass, and LESS.
Demo  |
Tutorial
NPM: npm install hover.css --save
Bower: bower install hover --save
Hover.css can be used in a number of ways; either copy and paste the effect you'd like to use in your own stylesheet or reference the stylesheet. Then just add the class name of the effect to the element you'd like it applied to.
If you plan on only using one or several effects, it's better practice to copy and paste an effect into your own stylesheet, so a user doesn't have to download css/hover.css in its entirety.
Assuming you want to use the Grow effect:
Download Hover.css
In css/hover.css, find the Grow CSS (each effect is named using a comment above it):
.hvr-grow:hover,
 .hvr-grow:focus,
 .hvr-grow:active {
     transform: scale(1.1);
 }
Copy this effect and then paste it into your own stylesheet.
In the HTML file which you'd like the effect to appear, add the class of .hvr-grow to your chosen element.
Example element before applying Hover.css effect:
Example element after applying Hover.css effect:
Note: As of 2.0.0 all Hover.css class names are prefixed with hvr- to prevent conflicts with other libraries/stylesheets. If using Sass/LESS, this can easily be changed using the $nameSpace/@nameSpace variable in scss/_options.scss or less/_options.less.
If you plan on using many Hover.css effects, you may like to reference the entire Hover.css stylesheet.
Download hover-min.css
Add hover-min.css to your websites files, in a directory named css for example
Reference hover-min.css in &lt;head&gt; of the HTML page you'd like to add Hover.css effects to:
Alternatively you can add a reference into an existing stylesheet like so (this may be useful to WordPress users who are unable to edit HTML):
Assuming you want to use the Grow effect, in the HTML file you'd like to use this effect, add the class of .hvr-grow to your chosen element.
Example element before applying Hover.css effect:
Example element after applying Hover.css effect:
To make an element ""transformable"", Hover.css  gives the following to all elements it is applied to:
Should you wish to override this behavior, either remove the above CSS from Hover.css or change the display property for the element. Be sure to declare the override after the Hover.css declarations so the CSS cascade will take effect. Alternatively, if you are using the Sass/LESS version of Hover.css, you can remove/comment out the forceBlockLevel() mixin found in scss/_hacks.scss or less/_hacks.less.
For more information about Transformable elements, see the CSS Transforms Module.
To add a Hover.css icon, place the icon HTML inside the element that a Hover.css effect is applied to. For example:
In the above code, we have given a link element a class of hvr-icon-forward which will make an icon move forward when the link is hovered over. The icon itself is given a class of hvr-icon to let Hover.css know that this is the icon we want to animate. In this example, our icon is from FontAwesome, which we've loaded into the &lt;head&gt;&lt;/head&gt; of our web page as per FontAwesome's instructions, like so:
Note: As of Hover.css v2.3.0 you can use any method you like for adding icons (previously, only FontAwesome was supported out-of-the-box.) For example, you could use another icon library or instead, use an image like so:
Here, the image will act as the icon because it has the hvr-icon class applied to it, and when hovered over, the icon will spin as defined by the hvr-icon-spin class on the parent element.
Position of the icon is entirely in your control. You could place it before the text, like so:
Or use custom CSS to position the icon as you see fit.
The project consists of the following folders and files:
demo-page.css - Contains styles to demonstrate Hover. Not required in your projects
hover-min.css - The minified/production version of Hover.css
hover.css - The development version of Hover.css
effects - Contains each individual effect sorted into categorized folders
_hacks.scss/_hacks.less, _mixins.scss/_mixins.less, _options.scss/_options.less - Sass/LESS Utilities
hover.scss/hover.less - Development version of Hover.css in Sass and LESS flavours
Other files of note include:
index.html - Demonstrates all Hover.css effects
Gruntfile.js - Used for development of Hover.css via Grunt.
Many Hover.css effects rely on CSS3 features such as transitions, animations, transforms and pseudo-elements, for that reason, effects may not fully work in older browsers.
Transitions and Animations - not supported below Internet Explorer 10
Transforms - not supported below Internet Explorer 9
Generated Content (pseudo-elements) - not supported below Internet Explorer 8
Aside from the above mentioned browsers, Hover.css is supported across all major browsers. Please see caniuse.com for full support for many web technologies and test your webpages accordingly. It is recommended to apply fallback effects for older browsers, using CSS supported by those browsers or a feature testing library such as Modernizr.
Grunt is non-essential but can speed up development. With Grunt installed, run grunt from the command line to set up a development server accessed at http://127.0.0.1:8000/ or your local IP for network testing. With Grunt running, Sass or LESS will be preprocessed (depending on whether you work out of the scss or less folder) and CSS files will be minified.
Note: Originally Grunt was set up to autoprefix CSS properties but to make the project as accessible as possible, this is no longer the case. The prefixed(property, value) Sass/LESS mixin should be used for browser prefixing instead. See Using Sass/LESS for Development and [Using LESS for Development].
Sass/LESS are non-essential but can speed up development. Preprocess Sass/LESS with your favourite software or the environment provided via Grunt.
Sass/LESS is used in the Hover.css project to separate various CSS into specific files. Each effect is within its own file in the effects directory. Hover.css also uses the following .scss and .less files:
Contains hacks (undesirable but usually necessary lines of code) applied to certain effects. Hacks explained here.
Contains prefixed and keyframes mixins that apply the necessary prefixes you specify in _options.scss / _options.less to properties and keyframes.
Properties can be prefixed like so:
Sass:
LESS:
The prefixed mixin is passed the property you want to prefix, followed by its value.
Keyframes can be prefixed like so:
Sass:
The keyframes mixin is passed the keyframe name, followed by the content using the @content directive.
LESS:
The keyframes mixin is passed the keyframe name, followed by the content, both as arguments.
Contains default options, various effect options and the browser prefixes you'd like to use with the prefixed mixin. By default, only the -webkit- prefix is set to true (due to most browsers not requiring prefixes now).
As of 2.0.0, _options also includes a $nameSpace / @nameSpace option which allows you to change the name all classes are prefixed with. The default namespace is hvr.
The $includeClasses / @includeClasses option by default is set to true and will generate all Hover.css effects under their own class names, hvr-grow for example. Should you wish to add the properties that make up Hover.css effects to your own class names, set this option to false.
If you'd like to contribute your own effects, please see the Contributing Guide.
Hover.css is made available under a free personal/open source or paid commercial licenses depending on your requirements. To compare licenses please visit the Ian Lunn Design Limited Store and purchase a commercial license here.
For personal/open source use, Hover.css is made available under a MIT license
Use in unlimited personal applications
Your application can't be sold
Your modifications remain open-source
Free updates
For commercial use, Hover.css is made available under Commercial, Extended Commercial, and OEM Commercial licenses.
Use in 1 application
Sell your application once only (e.g. a website sold to a client)
Your code is kept proprietary, to yourself
Free updates to the major version
Purchase | Read full license
Use in unlimited applications
Sell your applications an unlimited number of times (e.g. a website template sold on a theme store)*
Your code is kept proprietary, to yourself
Free updates to the major version
*With the exception of applications that allow end users to produce separate applications. See the OEM Commercial License.
Purchase | Read full license
Should your application enable end users to produce separate applications that incorporate Ian Lunn Design Limited's software, for example, a development toolkit, library, or application builder, you must obtain an OEM Commercial License. Please contact us for more information about the OEM Commercial License.
Hover.css was previously made available under a MIT License for both commercial and non-commercial use. Anyone that obtained a MIT license for commercial use before v2.2.0 (24th March 2017) may continue to use Hover.css versions prior to v2.2.0 under that same license.
If you'd like to upgrade to v2.2.0 or above, or would like to simply show your support for Hover.css (we'd much appreciate it!), please purchase an up-to-date commercial license. Purchase a Commercial License.
Ian Lunn is a Freelance Front-end Developer and author of CSS3 Foundations.
Hire Ian for responsive websites, WordPress websites, JavaScript, animation, and optimization."
1724,"palantir,blueprint","A React-based UI toolkit for the web. 
Blueprint is a React-based UI toolkit for the web.
It is optimized for building complex, data-dense web interfaces for desktop applications which run in modern browsers. This is not a mobile-first UI toolkit.
Blueprint's change log and migration guides for major versions live on the repo's Github wiki.
This repository contains multiple projects in the packages/ directory that fall into 3 categories:
These are the component libraries we publish to NPM.
 &ndash; Core styles & components.
 &ndash; Components for interacting with dates and times.
 &ndash; Components for generating and displaying icons.
 &ndash; Popover2 and Tooltip2 components.
 &ndash; Components for selecting items from a list.
 &ndash; Scalable interactive table component.
 &ndash; Components for picking timezones.
These are hosted on GitHub Pages as static web applications:
docs-app &ndash; Documentation site at blueprintjs.com/docs
landing-app &ndash; Landing page at blueprintjs.com
These are used as development playground environments:
demo-app &ndash; demo page that shows many components all on the same page in light and dark themes
table-dev-app &ndash; demo page that supports manual testing of all table features
These packages define development dependencies and contain build configuration. They adhere to the standard NPM package layout, which allows us to keep clear API boundaries for build configuration and isolate groups of devDependencies. They are published to NPM in order to allow other Blueprint-related projects to use this infrastructure outside this monorepo.
 &ndash; Documentation theme for Documentalist data.
 &ndash; ESLint configuration used in this repo and recommended for Blueprint-related projects
 &ndash; implementations for custom ESLint rules which enforce best practices for Blueprint usage

 &ndash; various utility scripts for linting, working with CSS variables, and building icons
 &ndash; implementations for custom stylelint rules which enforce best practices for Blueprint usage
 &ndash; various utility functions used in Blueprint test suites
 &ndash; TSLint configuration used in this repo and recommended for Blueprint-related projects (should be installed by @blueprintjs/eslint-config, not directly)

Looking for places to contribute to the codebase?
First read the contribution guidelines,
then check out the ""help wanted"" label.
Lerna manages inter-package dependencies in this monorepo.
Builds are orchestrated via lerna run and NPM scripts.
Prerequisites: Node.js v18+ (see version specified in .nvmrc), Yarn v1.22
First, ensure you have nvm (Node Version Manager) installed.
After cloning this repo, run:
nvm use to use the supported Node version for Blueprint development.
yarn to install all dependencies for the monorepo.
If running on Windows:
npm install -g windows-build-tools to install build tools globally
Ensure bash is your configured script-shell by running:
npm config set script-shell ""C:\\Program Files\\git\\bin\\bash.exe""
yarn verify to ensure you have all the build tooling working properly.
If you were previously in a working state and have just pulled new code from develop:
If there were package dependency changes, run yarn at the root.
This command is very quick if there are no new things to install.
Run yarn compile to get the latest built versions of the library packages in this repo.
This command is quicker than yarn verify since it doesn't build the application packages (docs-app, landing-app, etc.) or run tests
There are a few ways to run development scripts, here they are listed from simplest to more advanced usage:
Run yarn dev from the root directory to watch changes across all packages and run the docs application with webpack-dev-server.
Alternately, most libraries have a corresponding dev script to run the docs app and watch changes to just that package:
yarn dev:core
yarn dev:docs
yarn dev:datetime
yarn dev:datetime2
yarn dev:popover2
yarn dev:select
yarn dev:table
Lastly, if you want to control exaclty which dev scripts are run and view the console output in the cleanest way, we recommend opening separate terminal windows or splits and running local package dev tasks in each one. This is the recommended workflow for frequent contributors and advanced developers. For example, to test changes in the core + icons packages, you would run the following in separate terminals:
cd packages/core &amp;&amp; yarn dev
cd packages/icons &amp;&amp; yarn dev
cd packages/docs-app &amp;&amp; yarn dev
Much of Blueprint's documentation lives inside source code as JSDoc comments in .tsx files and KSS markup in .scss files. This documentation is extracted and converted into static JSON data using documentalist.
If you are updating documentation sources (not the docs UI code which lives in packages/docs-app or the docs theme in packages/docs-theme), you'll need to run yarn compile from packages/docs-data to see changes reflected in the application. For simplicity, an alias script yarn docs-data exists in the root to minimize directory hopping.
The One-time setup and Incorporating upstream changes steps should produce the generated
source code in this repo used to build the icons documentation. This is sufficient for most development workflows.
If you are updating icons or adding new ones, you'll need to run yarn compile in packages/icons to see those changes reflected before
running any of the dev scripts.
This project is made available under the Apache 2.0 License."
1725,"akveo,nebular",":boom: Customizable Angular UI Library based on Eva Design System :new_moon_with_face::sparkles:Dark Mode. Documentation | Stackblitz Template | UI Bakery - Angular UI Builder | Angular templates
Nebular is a customizable Angular 10 UI Library with a focus on beautiful design and ability to adapt it to your brand easily. It comes with 4 stunning visual themes, a powerful theming engine with runtime theme switching and support of custom css properties mode. Nebular is based on Eva Design System specifications.

4 Visual Themes, including new Dark easily customizable to your brand
35+ Angular UI components with a bunch of handy settings and configurations
Configurable options - colors, sizes, appearances, shapes, and other useful settings
3 Auth strategies and Security - authentication and security layer easily configurable for your API
Powerful theming engine with custom CSS properties mode
SVG Eva Icons support - 480+ general purpose icons
You can install Nebular with Angular CLI:
Configuration will be done automatically.
If you want to have more control over setup process you can use manual setup guide.
Nebular supports most recent browsers. Browser support list can be found here.
ngx-admin - 20k+ stars application based on Nebular modules with beautiful E-Commerce & IOT components, for boosting your developing process. Live Demo.
ngx-admin-starter - clean application based on Nebular modules with a limited number of additional dependencies.
Backend Bundles - easy way to integrate ngx-admin with any backend (PHP, .Net, .Net Core, Java etc. )
Try low-code internal tool builder for free

MIT license.
Eva Icons - 480+ beautiful Open Source icons
Akveo templates - 10+ Ready-to-use apps templates to speed up your apps developments
Star our GitHub repo :star:
Create pull requests, submit bugs, suggest new features or documentation updates :wrench:
Read us on Medium
Follow us on Twitter :feet:
Like our page on Facebook :thumbsup:
Made with :heart: by Akveo team. Follow us on Twitter to get the latest news first!
We're always happy to receive your feedback!"
1798,"ColorlibHQ,AdminLTE","AdminLTE - Free admin dashboard template based on Bootstrap 4. AdminLTE is a fully responsive administration template. Based on Bootstrap 4.6 framework and also the JS/jQuery plugin.
Highly customizable and easy to use. Fits many screen resolutions from small mobile devices to large desktops.
Preview on AdminLTE.io
AdminLTE.io just opened a new premium templates page. Hand picked to ensure the best quality and the most affordable
prices. Visit https://adminlte.io/premium for more information.

AdminLTE has been carefully coded with clear comments in all of its JS, SCSS and HTML files.
SCSS has been used to increase code customizability.
There are multiple ways to install AdminLTE.
Always Recommended to download from GitHub latest release AdminLTE 3 for bug free and latest features.\
Visit the releases page to view the changelog.\
Legacy Releases are AdminLTE 2 / AdminLTE 1.
Important Note: You needed to add separately cdn links for plugins in your project.
Important Note: To install it via npm/Yarn, you need at least Node.js 14 or higher.
Visit the online documentation for the most
updated guide. Information will be added on a weekly basis.
You can use light-mode-only version, if you are not using dark mode and also file size less without dark-mode.
File Location ./dist/css/alt/adminlte.light.css
To compile the dist files you need Node.js/npm, clone/download the repo then:
npm install (install npm deps)
Optional: npm run dev (developer mode, autocompile with browsersync support for live demo)
npm run production (compile css/js files)
Please read through our contributing guidelines. Included are directions for opening issues, coding standards, and notes on development.
Editor preferences are available in the editor config for easy use in common text editors. Read more and download plugins at https://editorconfig.org/.
AdminLTE is an open source project by AdminLTE.io that is licensed under MIT.
AdminLTE.io reserves the right to change the license of future releases.
Uifaces"
1799,"react-bootstrap,react-bootstrap","Bootstrap components built with React. Bootstrap 5 components built with React.






React-Bootstrap is compatible with various versions of Bootstrap.  As such, you need to ensure you are using the correct combination of versions.  
See the below table on which version of React-Bootstrap you should be using in your project.
If you would like to update React-Bootstrap within an existing project to use Bootstrap 5, please read our docs for migrating to React-Bootstrap V2.
If you would like to update React-Bootstrap within an existing project to use Bootstrap 4, please read our docs for migrating to React-Bootstrap V1.
react-router-bootstrap ‚Äì Integration with React Router
Awesome React Bootstrap Components - Additional components like off-canvas navbar, switch and sliders.
Yarn is our package manager of choice here. Check out setup
instructions here if you don't have it installed already.
After that you can run yarn run bootstrap to install all the needed dependencies.
From there you can:
Run the tests once with yarn test (Or run them in watch mode with yarn run tdd).
Start a local copy of the docs site with yarn start
Or build a local copy of the library with yarn run build
Click here to explore some React-Bootstrap CodeSandbox examples.
Click here to automatically open CodeSandbox with the React-Bootstrap CodeSandbox Examples GitHub Repository as a workspace.
Yes please! See the contributing guidelines for details."
1800,"ColorlibHQ,gentelella","Free Bootstrap 4 Admin Dashboard Template. Gentelella Admin is a free to use Bootstrap admin template.
This template uses the default Bootstrap 4 styles along with a variety of powerful jQuery plugins and tools to create a powerful framework for creating admin panels or back-end dashboards.
Theme uses several libraries for charts, calendar, form validation, wizard style interface, off-canvas navigation menu, text forms, date range, upload area, form autocomplete, range slider, progress bars, notifications and much more.
We would love to see how you use this awesome admin template. You can notify us about your site, app or service by tweeting to @colorlib. Once the list will grown long enough we will write a post similar to this to showcase the best examples.

Template Demo
Documentation
Our goal is to make it installable on different Package Manager! Do you want to use it on your favorite Package Manager and you know how? Pull request all the way! 
As of now, this is some installation available:
Bower
npm
yarn
To contribute, please ensure that you have stable Node.js and npm installed.
Test if Gulp CLI is installed by running gulp --version.  If the command isn't found, run npm install -g gulp.  For more information about installing Gulp, see the Gulp's Getting Started.
To have all gulp dependencies run npm install
If gulp is installed, follow the steps below.
Fork and clone the repo.
Run gulp, this will open gentelella on your default browser
Now you can code, code and code!
Submit a pull request
Gentelella on Ruby on Rails thanks to Israel Ogbole.
Gentelella on Rails thanks to Michael Lang
Gentelella on Smarty with one time password generator, validator, and QR code generator that has no web dependencies (self-contained) in PHP thanks to MicroVB INC
Gentelella integrated into Symfony 5 full stack PHP framework thanks to  Mamour Wane.
Gentelella on Yii framework with an asset bundle, a layout template and some widgets.
Gentelella on Angular Angular Webpack Starter modified to utilize the Gentelella.
Gentelella on Aurelia Typescript webpack skeleton modified to utilize the Gentelella.
Gentelella on Laravel PHP / Laravel 5 boilerplate project with Gentelella Admin theme support.
Gentelella on Django Gentelella modified to fit as a Django app
Gentelella on Flask Gentelella modified to fit as a Flask app
Gentelella on CakePHP Gentelella modified to work on CakePHP
Gentelella right to left Gentelella modified to work with right to left languages like Persian
Gentelella-rtl on Yii framework with an asset bundle, a layout template and some widgets. inspired from Gentelella on Yii framework
Gentelella by React Gentelella realized by React
Let us know if you have done integration for this admin template on other platforms and frameworks and we'll be happy to share your work.
Bootstrap
Font Awesome
jQuery-Autocomplete
FullCalendar
Charts.js
Bootstrap Colorpicker
Cropper
dataTables
Date Range Picker for Bootstrap
Dropzone
easyPieChart
ECharts
bootstrap-wysiwyg
Flot - Javascript plotting library for jQuery.
gauge.js
iCheck
jquery.inputmask plugin
Ion.RangeSlider
jQuery
jVectorMap
moment.js
Morris.js - pretty time-series line graphs
PNotify - Awesome JavaScript notifications
NProgress
Pace
Parsley
bootstrap-progressbar
select2
Sidebar Transitions - simple off-canvas navigations
Skycons - canvas based wather icons
jQuery Sparklines plugin
switchery - Turns HTML checkbox inputs into beautiful iOS style switches
jQuery Tags Input Plugin
Autosize - resizes text area to fit text
validator - HTML from validator using jQuery
jQuery Smart Wizard
Free Bootstrap Admin Templates - List of the best Free Bootstrap admin dashboard templates that are available for free for personal and commercial use.
Free Admin Templates - Long list of the best free HTML5 powered admin dashboard templates. Available for personal and commercial use.
Angular Templates - List of the most popular admin templates based on AngularJS.
WordPress Admin Templates - List of the best WordPress admin dashboard templates and plugins that will add a personal touch to your WordPress dashboard.
WordPress Themes - A huge selection of the best free WordPress themes that are all licensed under GPL and are available for personal and commercial use without restrictions.
Gentelella is licensed under The MIT License (MIT). Which means that you can use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software. But you always need to state that Colorlib is the original author of this template.
Project is developed and maintained by Colorlib and Aigars Silkalns"
1801,"bootstrap-vue,bootstrap-vue","BootstrapVue provides one of the most comprehensive implementations of Bootstrap v4 for Vue.js. With extensive and automated WAI-ARIA accessibility markup.. 
  
    
  



  With more than 85 components, over 45 available plugins, several directives, and 1000+ icons,
  BootstrapVue provides one of the most comprehensive implementations of the Bootstrap v4.5
  component and grid system available for Vue.js v2.6, complete with extensive and automated
  WAI-ARIA accessibility markup.



  
    
  
  
    
  
  
    
  
  
    
  
  
    
  
  
  
    
  
  
    
  
  
    
  
  
    
  
  
    
  
  
  
    
  
  
    
  
  
    
  


Links

üìò Documentation
üî® Release Notes
üí¨ Discord Chat
üê¶ Twitter
Sponsors

Support this project by becoming a sponsor.
Your logo will show up here with a link to your website.
[Become a sponsor]










Backers

Thank you to all our backers! üôè
[Become a backer]

Contributors

This project exists thanks to all the people who contribute. Contribute.

Partners


  


License

Released under the MIT License. Copyright (c) BootstrapVue."
1802,"thomaspark,bootswatch","Themes for Bootstrap. 
  


Bootswatch


  A collection of open source themes for Bootstrap
  
  <strong>View Bootswatch themes ¬ª</strong>
  
  
  Report bug
  ¬∑
  Request feature
  ¬∑
  Blog


There are a few different ways you can integrate Bootswatch into your project.
Download the bootstrap.min.css file associated with a theme and replace
Bootstrap's default stylesheet. You must still include Bootstrap's JavaScript
file to have functional dropdowns, modals, etc.
You can use the themes via CDN at jsDelivr.
If you're using Sass (SCSS) in your project, you can
import the _variables.scss and _bootswatch.scss files for a given theme.
This method allows you to override theme variables.
Make sure to import Bootstrap's bootstrap.scss in between _variables.scss
and _bootswatch.scss!
You can install as a package with the command npm install bootswatch.
Modern JavaScript bundlers (webpack, parcel, rollup) support importing CSS from JS files. This can make it easier to deploy various 1st and 3rd party assets predictably. Note: There are tradeoffs to the following method, research your tooling before deploying to production.
Before continuing, ensure you've run npm install bootswatch in your local project folder. (Use either npm or yarn.)
Add the following import to your top-level index.js (or App.js) file. Add it before any other .css imports.
Here's an example of updated imports in App.js to use ""slate"" theme (using a create-react-app fresh project.)
In your Ruby project, you can access the latest version of each theme by adding
the following to your Gemfile and running bundle install:
Each theme directory is then accessible via the path
""#{Gem.loaded_specs[""bootswatch""].load_paths.first}/[theme]"".
Ruby on Rails users can add the following to an initializer (e.g.
config/initializers/bootswatch.rb):
And thus be able to import themes via Sass like so:
A simple JSON API is available for integrating your platform with Bootswatch.
More info can be found on the Help page.
Bootswatch is open source and you‚Äôre welcome to modify the themes.
Each theme consists of two SASS files. _variables.scss, which is included by default in Bootstrap, allows you to customize the settings. _bootswatch.scss introduces more extensive structural changes.
Check out the Help page for more details on building your own theme.
It's through your contributions that Bootswatch will continue to improve. You can contribute in several ways.
Issues: Provide a detailed report of any bugs you encounter and open an issue on GitHub.
Documentation: If you'd like to fix a typo or beef up the docs, you can fork the project, make your changes, and submit a pull request.
Code: Make a fix and submit it as a pull request. When making changes, it's important to keep the CSS and SASS versions in sync. To do this, be sure to edit the SASS source files for the particular theme first, then run the  tasks grunt swatch to build the CSS.
Donation: Donations are gratefully accepted via GitHub and PayPal.
Thomas Park
https://github.com/thomaspark
https://thomaspark.co/
Mark Otto and Jacob Thornton for Bootstrap.
Jenil Gogari for his contributions to the Flatly theme.
James Taylor for cors-lite.
Corey Sewell for SASS conversion.
Copyright 2014-2021 Thomas Park
Code released under the MIT License."
1803,"selectize,selectize.js","Selectize is the hybrid of a textbox and <select> box. It's jQuery based, and it has autocomplete and native-feeling keyboard navigation; useful for tagging, contact lists, etc.. ‚Üí Selectize is looking for new members on the maintenance team!


\

\

Selectize is an extensible jQuery-based custom &lt;select&gt;; UI control. It's useful for tagging, contact lists, country selectors, and so on. The goal is to provide a solid & usable experience with a clean and powerful API.
Smart Option Searching / Ranking
Options are efficiently scored and sorted on-the-fly (using sifter). Want to search for an item's title and description? No problem.
Caret between items
Order matters sometimes. Use the <kbd>&larr;</kbd> and <kbd>&rarr;</kbd> arrow keys to move between selected items.
Select & delete multiple items at once
Hold down <kbd>option</kbd> on Mac or <kbd>ctrl</kbd> on Windows to select more than one item to delete.
D√≠√•crit√Æ√ßs supported
Great for international environments.
Item creation
Allow users to create items on the fly (async saving is supported; the control locks until the callback is fired).
Remote data loading
For when you have thousands of options and want them provided by the server as the user types.
Clean API &amp; code
Interface with it and make modifications easily. Pull requests are always welcome!
Extensible
Plugin API for developing custom features (uses microplugin).
Touch Support
Plays nice with iOS 5+ devices.
jquery (1.7 and greater), as peer dependency
Note: it is installed automatically in development, or in projects using NPM 1 or 2. When using NPM from version 3 on, just a warning is thrown and the user needs to manually install an explicit version in their own project (e.g. npm install --save jquery@3.5.1).
Optional:
jquery-ui (required by drag_drop plugin)
Selectize can be installed via NPM npm install @selectize/selectize
All pre-built files needed to use Selectize can be found in the
""dist"" folder.
If you're looking to get started with minimal fuss, include
selectize.min.js (bundles Sifter and Microplugin
dependencies ‚Äì also available un-minified for debugging, just remove the
.min part) and css/selectize.default.css.
Selectize is available at cdnjs.
selectize.js ‚Äî With dependencies, minus jquery
selectize.min.js ‚Äî With dependencies, minus jquery
scss/ ‚Äî Sass source files for customization (Bootstrap 3+ compatible)
less/ ‚Äî Less source files for customization (Bootstrap 2/3 compatible)
selectize.css ‚Äî Core styles
selectize.default.css ‚Äî Default theme (with core styles)
selectize.bootstrap2.css - Bootstrap 2 theme
selectize.bootstrap3.css - Bootstrap 3 theme
selectize.bootstrap4.css - Bootstrap 4 theme
selectize.bootstrap5.css - Bootstrap 5 theme
The available options are documented here.
When issuing a pull request:
please do not include/commit changes in the dist/ or lib/ folders to avoid
merge conflicts. A good way to include the right files is to use
git gui or git add when committing to select the files you want to
add to your commit.
please include tests with your feature so that we're not tempted to
break it in the future!
Add an entry to the top of the CHANGELOG, and update the documentation
in docs/ as needed. (Refactors and documentation changes don't need a
changelog entry.)
Squash your commits together in one or a few complete, logical commits,
with a concise and descriptive message. One commit means one
feature/bugfix/thing that has changed, or a diff bringing the code one
step forward to a better, working state.
Once your commit is nice and clean, and you want to discard the other
changes, you can use git checkout . (that will erase changes to
tracked files) and git clean [-i/--interactive] (to erase untracked
files). However, be careful with those commands, as their function
is to erase things/changes.
However, be careful not to add the dist/ files in your commit, as
Grunt automatically regenerates the files in dist/ as the source is
changed.
Please ensure all the tests pass:
To run Selectize locally:
You can then run the examples at https://loopback.website:4000/.
Copyright &copy; 2013‚Äì2016 Brian Reavis & Contributors\
Copyright &copy; 2020-2022 Selectize Team & Contributors
Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
1883,"Zaid-Ajaj,Feliz","A fresh retake of the React API in Fable and a collection of high-quality components to build React applications in F#, optimized for happiness. A fresh retake of the React API in Fable, optimized for happiness.
Here is how it looks like:
Consistent, lightweight formatting: no more awkward indentation using two lists for every element.
Discoverable attributes with no more functions, Html attributes or css properties globally available so they are easy to find.
Proper documentation: each attribute and CSS property
Full React API support: Feliz aims to support the React API for building components using hooks, context and more.
Fully Type-safe: no more Margin of obj but instead utilizing a plethora of overloaded functions to account for the overloaded nature of CSS attributes, covering 90%+ of the CSS styles, values and properties.
Included color list of most commonly used Html colors in the colors module.
Compatible with the current React DSL used in applications.
Compatible with Femto.
Approximately Zero bundle size increase where everything function body is erased from the generated javascript unless you actually use said function.
Feliz has extensive documentation at https://zaid-ajaj.github.io/Feliz with live examples along side code samples, check them out and if you have any question, let us know!"
1884,"HttpErrorPages,HttpErrorPages",":fast_forward: Simple HTTP Error Page Generator. nginx | 
Apache HTTPD | 
Lighttpd | 
express.js | 
koa.js | 
Caddy |
Customization
Simple HTTP Error Page Generator. Create a bunch of custom error pages - suitable to use with Lighttpd, Nginx, expressjs, koajs ,Apache-Httpd or any other Webserver.

Static pages (for webservers)
Multi-Language (i18n) support
Generator script to customize pages
Native express.js middleware
Native koa.js middleware
Just clone/download the git repository or use the prebuild packages (only the generated html files are included)
NGINX supports custom error-pages using multiple error_page directives.
File: default.conf
Example - assumes HttpErrorPages are located into /var/ErrorPages/.
Apache Httpd 2.x supports custom error-pages using multiple ErrorDocument directives.
File: httpd.conf or .htaccess
Example - assumes HttpErrorPages are located into your document root /var/www/...docroot../ErrorPages.
Lighttpd supports custom error-pages using the server.errorfile-prefix directive.
File: lighttpd.conf
Example - assumes HttpErrorPages are located into /var/www/ErrorPages/.
HttpErrorPages are available as NPM-Package - just install http-error-pages via npm/yarn
Installation
Example
A ready-to-use example can be found in examples/express.js
Options
Syntax: Promise _httpErrorPages.express(expressWebapp [, options:Object])
template (type:string) - the path to a custom EJS template used to generate the pages. default assets/template.ejs
css (type:string) - the path to a precompiled CSS file injected into the page. default assets/layout.css
lang (type:string) - language definition which should be used (available in the i18n/ directory). default en_US
payload (type:object) - additional variables available within the template
payload.footer (type:string) - optional page footer content (html allowed). default null
filter (type:function) - filter callback to manipulate the variables before populated within the template
onError (type:function) - simple debug handler to print errors to the console (not to be used in production!)
HttpErrorPages are available as NPM-Package - just install http-error-pages via npm/yarn
Installation
Example
A ready-to-use example can be found in examples/koa.js. 
Keep in mind that the following example has to be executed within an async context!
Options
Syntax: Promise _httpErrorPages.koa([options:Object])
template (type:string) - the path to a custom EJS template used to generate the pages. default assets/template.ejs
css (type:string) - the path to a precompiled CSS file injected into the page. default assets/layout.css
lang (type:string) - language definition which should be used (available in the i18n/ directory). default en_US
payload (type:object) - additional variables available within the template
payload.footer (type:string) - optional page footer content (html allowed). default null
filter (type:function) - filter callback to manipulate the variables before populated within the template
onError (type:function) - simple debug handler to print errors to the console (not to be used in production!)
Caddy supports custom error-pages using errors directive. 
File: Caddyfile
Example - assumes HttpErrorPages are located into /var/www/error.
First of all, clone 
or download the http-error-pages repository.
You have to install the node dev dependencies to build the pages:
To customize the pages, you can edit any of the template files and finally run the generator-script.
All generated html files are located into the dist/ directory by default.
If you wan't to add custom pages/additional error-codes, just put a new entry into the i18n/pages-en_US.json file (its recommended to copy the file). 
The generator-script will process each entry and generates an own page.
config.json - basic configuration options
assets/layout.scss - the SCSS based styles
assets/template.ejs - the EJS based page template
i18n/pages-<lang>.json - the page definitions (multilanguage)
dist/*.html - generator output directory
To modify the page styles, just edit the SCSS based layout assets/layout.scss and finally run gulp to generate the css code.
The new layout file is stored in assets/layout.css - run the page generator to create the pages.
Example
To use a different language just provide a custom page definition - in case the file is located in i18n you can use the --lang option
Example
Create custom error codes/pages used by e.g. CloudFlare
Example
The footer message can easily be changed/removed by editing config.json.
Example - customm footer
Example - no footer
The following set of variables is exposed to the ejs template (404 page example):
To generate dynamic titles/content based on the current variable set, each variable is exposed as placeholder (surrounded by %). 
You can also define custom variable within the page definitions, everything is merged togehter.
The HTML template is based on ejs and located in assets/template.ejs - you can apply any kind of changes.
The http-error-pages generator allows you to use custom template/config files directly. This is the recommended method to create full-customized pages.
Example - use custom files
We assume you've created a folder named example_org which contains all relevant template files
HttpErrorsPages is OpenSource and licensed under the Terms of The MIT License (X11) - your're welcome to contribute"
1885,"0no-co,hoofd","Hooks to populate the html head.. This project aims at providing a set of hooks to populate &lt;meta&gt;, ... for each page. With crawlers now supporting
client-side alterations it's important to support a fallback model for our &lt;head&gt; tags. The dispatcher located in this
library will always make a queue of how we should fallback, ... This way we'll always have some information to give to a
visiting crawler.
Or you can choose to
If you need support for Preact you can import from hoofd/preact instead.
There's a plugin that hooks in with Gatsby and that
will fill in the meta, ... in your build process.
This package exports useTitle, useTitleTemplate, useMeta, useLink and useLang. These hooks
are used to control information conveyed by the &lt;head&gt; in an html document.
This hook accepts a string that will be used to set the document.title, every time the
given string changes it will update the property.
This hook accepts a string, which will be used to format the result of useTitle whenever
it updates. Similar to react-helmet, the placeholder %s will be replaced with the title.
This hook accepts the regular &lt;meta&gt; properties, being name, property, httpEquiv,
charset and content.
These have to be passed as an object and will update when content changes.
This hook accepts the regular &lt;link&gt; properties, being rel, as, media,
href, sizes and crossorigin.
This will update within the same useLink but will never go outside
This hook accepts a string that will be used to set the lang property on the
base &lt;html&gt; tag. Every time this string gets updated this will be reflected in the dom.
This hook accepts a few arguments and will lead to an injection of a script tag into the dispatcher (during ssr)
or the DOM (during csr).
src?: this can be a location where the script lives, for example public/x.js or an inline script for example data:application/javascript,alert(""yolo"").
id?: a unique identifier used for querying the script tag. Atleast one among src and id prop is mandatory.
text?: this sets the inner text on the script tag. Can be used for adding embedded data, rich text data.
type?: this sets the type attribute on the script tag.
async?: this sets the async attribute on the script tag.
defer?: this sets the defer attribute on the script tag.
module?: this property will override the type atrribute on the script tag with a value of module.
crossorigin?: 'anonymous' | 'use-credentials';
integrity?: string;
We expose a method called toStatic that will return the following properties:
title, the current title dictated by the deepest useTitleTemplate and useTitle combination
lang, the current lang dictated by the deepest useLang
metas, an array of unique metas by keyword (property, ...)
links, the links aggregated from the render pass.
The reason we pass these as properties is to better support gatsby, ...
If you need to stringify these you can use the following algo:
By default this package relies on a statically-initialized context provider to accumulate and
dispatch &lt;head&gt; and &lt;meta&gt; changes. In cases where you may want to control the Dispatcher
instance used, this module exports a HoofdProvider context provider and createDispatcher
function for creating valid context instances."
1886,"baynezy,Html2Markdown","A library for converting HTML to markdown syntax in C#. Converts HTML to Markdown.



This project will currently convert the following HTML tags:-
&lt;a&gt;
&lt;strong&gt;
&lt;b&gt;
&lt;em&gt;
&lt;i&gt;
&lt;br&gt;
&lt;code&gt;
&lt;h1&gt;
&lt;h2&gt;
&lt;h3&gt;
&lt;h4&gt;
&lt;h5&gt;
&lt;h6&gt;
&lt;blockquote&gt;
&lt;img&gt;
&lt;hr&gt;
&lt;p&gt;
&lt;pre&gt;
&lt;ul&gt;
&lt;ol&gt;

Create your own implementation of IScheme and construct Converter with that.
This library is showcased at http://html2markdown.bayn.es.
This project is licensed under Apache License 2.0."
1887,"benscabbia,x-ray","Visual debugger for your HTML, executable via a bookmark. A simple HTML debugger, executable by bookmark! X-ray, a sub project of ghost.css, enables you to see the space taken up by each individual element. This is extremely useful to visually see the HTML structure of a website and identify the rogue element that is causing unexpected rendering. 

The project makes use of the styles from ghost.css, which is what enables you to quickly scan the page for unexpected styling. X-Ray takes Ghost and makes it toggleable by bookmark. There is no longer need to refresh the page (or manually remove the style). 
Note: this is the only page where the toggle will not function as expected, as the string matcher will match the code below, causing elements to be incorrectly removed! Try it on all your other tabs, and you shouldn't experience any problems!
Grab the code below (x-ray.js):
Now drag it onto your bookmarks, or create a bookmark and paste the code in the URL/location field. Enjoy!"
1888,"eBay,skin","Pure CSS framework designed & developed by eBay for a branded, e-commerce marketplace.. Pure CSS framework designed & developed by eBay for a branded, e-commerce marketplace.
Please visit the Skin website for all end-user documentation.
Skin is MIT licensed.
Skin is available as the @ebay/skin package on NPM. Skin is also available on our CDN.
Skin follows Semantic Versioning:
MAJOR version when we make incompatible API changes,
MINOR version when we add functionality in a backwards-compatible manner
PATCH version when we make backwards-compatible bug fixes.
More detailed insight into our versioning process can be found in our contributing guide.
Please refer to our releases page to view the change log for current and past releases.
Please refer to our web archive for past examples and documentation.
Please refer to our projects page to see what's coming down the pipeline.
Please view our @ebay/browserslist-config to see which browsers we currently support.
SPOILER: we do not support IE10 or under.
We take accessibility very seriously. Very seriously indeed. Therefore all modules are built in accordance to the eBay MIND Patterns. These patterns, in turn, build on from the specifications provided by the WAI-ARIA Authoring Practices.
Please use our issues page to ask questions, report issues or submit feature requests.
To help track your issue, the Skin admins will assign it with a label from one or more issue categories.
Skin provides a command to create your own bundles for uploading to cdn. Use bin/generate-bundle.js in order to create separate bundles.
bin/generate-bundle.js list -> List available modules (used for the --modules argument)
bin/generate-bundle.js bundle ebay -> Create a bundle under the ebay folder
bin/generate-bundle.js bundle ebay --modules button carousel -> Create a bundle under the ebay folder with only button and carousel modules
bin/generate-bundle.js bundle ebay --scope-class ebay --scope-specificity 5 -> Create a bundle under the ebay folder with all CSS styles wrapped under .ebay.ebay.ebay.ebay.ebay {}
Interested in contributing? Head over to our contributing guide for information on how to get started.
Contributions don't have to be code! They can be ideas, inspiration, discussion or filing bugs!
The original creator of Skin is Senthil Padmanabhan.
The current author and lead maintainer is Ian McBurnie.
List of all contributors."
1889,"lise-henry,crowbook","Converts books written in Markdown to HTML, LaTeX/PDF and EPUB. Crowbook's aim is to allow you to write a book in Markdown without worrying about formatting or typography, and let the program generate HTML, PDF and EPUB output for you.
Its focus is novels and fiction, and the default settings should (hopefully) generate readable books with correct typography without requiring you to worry about it.
To see what Crowbook's output looks like, you can read the Crowbook guide rendered in
HTML,
PDF
or
EPUB.
You can also play with the
online demo version.
There are two ways to install Crowbook:
either using precompiled binaries, or compiling it using cargo.
See
the releases page
to download a precompiled binary for your architecture
(currently: Linux, Windows and MacOSX).
Just extract the archive and run crowbook
(or crowbook.exe on Windows).
You might also want to copy the binary somewhere in your PATH for later usage.
If you are on Debian GNU/Linux or Ubuntu (on a PC architecture), you can also download .deb packages on
the releases page.
Cargo
is
the package manager for
Rust.
You can
install it here.
Once that is done:
will automatically download the latest crowbook release on
crates.io,
compile it, and install it on your system.
Some dependencies also require building C libraries;
you might thus also need to install a C compiler and make/cmake build tools.
You can also try to build a version of Crowbook without optional features:
cargo install crowbook --no-default-features --features ""clap""
will disable syntactic highlighting and proofreading, requiring less dependencies.
While there should be, strictly speaking, no real dependencies to be able to run Crowbook (it is published as a statically compiled binary), some features require additional commands to work correctly:
EPUB rendering requires the zip command to be present on your system;
PDF rendering requires a working installation of LaTeX (preferably xelatex).
The simplest command is:
where BOOK is a configuration file.
Crowbook will parse this file and generate HTML, EPUB, and/or PDF output formats, according to the settings in the configuration file.
To create a new book, assuming you have a list of Markdown files, you can generate a template configuration file with the --create argument:
This will generate a default my.book file, which you'll need to complete.
This configuration file contains some metadata, options, and lists the Markdown files.
For short books containing only a single Markdown file, it is possible to embed some metadata at the beginning of the file and use the --single or -s option to run crowbook directly on this Markdown file and avoid creating a separate book configuration file:
For more information, see the chapters on
the arguments supported by crowbook
and on
the configuration file.
Crowbook supports HTML, PDF and EPUB (either version 2 or 3) as output formats.
See the Crowbook User Guide  rendered in
HTML,
EPUB
and
PDF.
Crowbook uses
pulldown-cmark
and thus should support most of
CommonMark Markdown.
Inline HTML, however, is not implemented, and probably won't be, as the goal is to have books that can also be generated in PDF (and maybe ODT).
Maybe the most specific ""feature"" of Crowbook is that it does its best to ""clean"" the input text before rendering it.
By default, it removes superfluous spaces and tries to use curly quotes.
If the  book's language is set to french, it also tries to respect french typography by replacing spaces with non-breaking ones when it is appropriate (e.g. before '?', '!', ';' or ':').
Please
open an issue
describing typographic rules if you want them to be implemented for other languages.
Crowbook tries to correctly translate local links in the input Markdown files:
e.g. if you have a link to a Markdown file that is part of your book, it will be transformed into a link inside the document.
Crowbook supports inline YAML blocks:
This is mostly useful when Crowbook is run with the --single argument (receiving a single Markdown file instead of a book configuration file), for short texts that only contain one ""chapter"".
Crowbook can also generate ""proofreading"" copies in HTML or PDF, highlighting grammar errors and repetitions.
For more information, see
the proofreading chapter of the guide.
Crowbook has experimental support for writing interactive fiction (only for HTML).
For more information, read the
interactive fiction chapter.
While the default settings will hopefully generate something that should look ""good enough"", it is possible to customize the output, essentially by providing different
templates.
See the
issue tracker on GitHub.
St√©phane Mourey &lt;s+crowbook AT stephanemourey DOT fr&gt;
Besides the
Rust
compiler and standard library, Crowbook uses the following libraries:
pulldown-cmark,
yaml-rust,
mustache,
clap,
chrono,
uuid,
mime_guess,
crossbeam,
walkdir,
rustc-serialize,
caribon,
hyper,
url,
lazy_static,
regex,
term,
numerals,
syntect.
It can also embed
Highlight.js
in HTML output to enable syntax highlighting for code blocks.
It also uses configuration files from
rust-everywhere
to use
Travis
and
Appveyor
to generate binaries for various platforms on each release.
While Crowbook directly doesn't use them, there was also inspiration from
Pandoc
and
mdBook.
Also, the
W3C HTML validator
and the
IDPF EPUB validator
proved to be very useful during development and testing.
See ChangeLog.
See how you can contribute to Crowbook.
If you find this project useful, you can also support its author by
making a Paypal donation.
While the main purpose of Crowbook is to be run as a standalone program, the code is written as a library, so if you want to build on it you can use it as such.
You can look at the generated documentation on
docs.rs.
Note that, in order to facilitate code reuse, some features have been split to separate libraries:
epub-builder
makes it easier to generate EPUB files.
crowbook-text-processing
contains all the ""typographic"" functions (smart quotes, handling of non-breaking spaces in french, ...).
crowbook-intl
is used for the internationalization (translation) process.
Crowbook is free software:
you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License (LGPL), version 2.1 or (at your option) any later version.
See
LICENSE
for more information.
Crowbook's logo is licensed under the
Creative Commons Attribution 4.0 International license,
based on the
Rust logo
by Mozilla Corporation.
Crowbook includes binary (minified) CSS and Javascript files from
Highlight.js,
written by Ivan Sagalaev, see
license"
1890,"oguz3,spotify-web-player","A front-end clone project of the Spotify Web Player. The project was created using React.. A front-end clone project of the Spotify Web Player. The project was created using React. This is my first big React.js project.
React
CSS"
1891,"mdbootstrap,mdb-react-ui-kit","React 17 & Bootstrap 5 & Material Design 2.0 UI KIT. Bootstrap 5 & React 17 UI KIT - 700+ components, MIT license, simple installation.
MDB is a collection of free Bootstrap templates, themes, design tools & resources.
Simple installation via .zip, npm or cdnjs.
Free Hosting, WordPress support, custom domains, SSL support, free database, frontend & backend templates, webpack starter included, git repostiory, FTP & jenkins support.
One click setup! MDB GO allows you to create a WordPress page with a single click.
Regardless whether you want to create a Travel Blog or an e-commerce shop to sell your product you can easily do that. You can even combine both into single page.
Created by   
 




Trusted by <b>2 000 000+</b> developers & designers. Used by companies & institutions like
<table>
  <tbody>
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
      <td>
    </tr>
   </tbody>
</table>

<table>
  <tbody>
    <tr>
      <td>
          
                
          
      </td>
      <td>
        <ul>
        <li><b>700+ UI components</b></li>          
         <li>Super simple, 1 minute installation</li>
         <li>Detailed docs & practical examples</li>
         <li>Lots of tutorials</li>
         <li>Huge and active community</li>
         <li><b>MIT license - free for personal & commercial use</b></li>
        </ul>
      </td>
    </tr>
   </tbody>
</table>

>> Learn more about Bootstrap 5
>> Bootstrap 5 Tutorial
>> Subscribe to our YouTube channel with dozens of Bootstrap tutorials
<table>
  <tbody>
    <tr>
      <td align=""center"">
         
                
          
      </td>
      <td>
          
                
          
      </td>
    </tr>
     <tr>
        <td align=""center"">
          <b>Start learning from Basics</b>
          
                
          
         </td>
        <td align=""center"">
          <b>Learn Bootstrap 5 | Crash Course for Beginners in 1.5H</b>
          
                
          
         </td>
      </tr>
   </tbody>
</table>

Use MDB custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.




    
  




    
  




    
  




    
  

Indicate the loading state of a component or page with MDB spinners, built entirely with HTML, CSS, and no JavaScript.




    
  




    
  

A card is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options.




    
  

A footer is an additional navigation component. It can hold links, buttons, company info, copyrights, forms, and many other elements.




    
  

MDB hover effect appears when the user positions the computer cursor over an element without activating it. Hover effects make a website more interactive.




    
  




    
  

Notes are small components very helpful in inserting an additional piece of information.




    
  

</table>
<ul>
<li>Bootstrap React Address Form</li>
<li>Bootstrap React Avatar</li>
<li>Bootstrap React Back To Top Button</li>
<li>Bootstrap React Carousel Slider with Thumbnails</li>
<li>Bootstrap React Chat</li>
<li>Bootstrap React Code Blocks</li>
<li>Bootstrap React Comments</li>
<li>Bootstrap React Comparison Table</li>
<li>Bootstrap React Credit Card Form</li>
<li>Bootstrap React Drawer</li>
<li>Bootstrap React Nested Dropdown</li>
<li>Bootstrap React FAQ component / section</li>
<li>Bootstrap React Gallery</li>
<li>Bootstrap React Hamburger Menu</li>
<li>Bootstrap React Invoice</li>
<li>Bootstrap React Jumbotron</li>
<li>Bootstrap React Login Form</li>
<li>Bootstrap React Maps</li>
<li>Bootstrap React Media Object</li>
<li>Bootstrap React Mega Menu</li> 
<li>Bootstrap React Multiselect</li> 
<li>Bootstrap React News Feed</li> 
<li>Bootstrap React Offcanvas</li> 
<li>Bootstrap React Order Details</li> 
<li>Bootstrap React Page Transitions</li> 
<li>Bootstrap React Payment Forms</li> 
<li>Bootstrap React Product Cards</li> 
<li>Bootstrap React Profiles</li>  
<li>Bootstrap React Quotes</li> 
<li>Bootstrap React Registration Form</li> 
<li>Bootstrap React Expanding Search Bar</li> 
<li>Bootstrap React Shopping Carts</li> 
<li>Bootstrap React Sidebar</li>  
<li>Bootstrap React Social Media Icons & Buttons</li>  
<li>Bootstrap React Square Buttons</li>  
<li>Bootstrap React Testimonial Slider</li>  
<li>Bootstrap React Select With Custom Input</li>  
<li>Bootstrap React Comments</li>  
<li>Bootstrap React Table Search</li>  
<li>Bootstrap React Table Scroll</li>  
<li>Bootstrap React Table Responsive</li>  
<li>Bootstrap React Table Sort</li>  
<li>Bootstrap React Panels</li>  
<li>Bootstrap React Pagination</li>  
<li>Bootstrap React Gradients</li>  

</ul>"
1892,"fb55,htmlparser2","The fast & forgiving HTML and XML parser. The fast & forgiving HTML/XML parser.
htmlparser2 is the fastest HTML parser, and takes some shortcuts to get there. If you need strict HTML spec compliance, have a look at parse5.
A live demo of htmlparser2 is available here.
htmlparser2 itself provides a callback interface that allows consumption of documents with minimal allocations.
For a more ergonomic experience, read Getting a DOM below.
Output (with multiple text events combined):
This example only shows three of the possible events.
Read more about the parser, its events and options in the wiki.
While the Parser interface closely resembles Node.js streams, it's not a 100% match.
Use the WritableStream interface to process a streaming input:
The DomHandler produces a DOM (document object model) that can be manipulated using the DomUtils helper.
The DomHandler, while still bundled with this module, was moved to its own module.
Have a look at that for further information.
Note: While the provided feed handler works for most feeds,
you might want to use danmactough/node-feedparser, which is much better tested and actively maintained.
After having some artificial benchmarks for some time, @AndreasMadsen published his htmlparser-benchmark, which benchmarks HTML parses based on real-world websites.
At the time of writing, the latest versions of all supported parsers show the following performance characteristics on GitHub Actions (sourced from here):
In 2011, this module started as a fork of the htmlparser module.
htmlparser2 was rewritten multiple times and, while it maintains an API that's mostly compatible with htmlparser in most cases, the projects don't share any code anymore.
The parser now provides a callback interface inspired by sax.js (originally targeted at readabilitySAX).
As a result, old handlers won't work anymore.
The DefaultHandler and the RssHandler were renamed to clarify their purpose (to DomHandler and FeedHandler). The old names are still available when requiring htmlparser2, your code should work as expected.
To report a security vulnerability, please use the Tidelift security contact.
Tidelift will coordinate the fix and disclosure.
Available as part of the Tidelift Subscription.
The maintainers of htmlparser2 and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more."
1951,"evanw,esbuild","An extremely fast JavaScript and CSS bundler and minifier. 
  
    <source media=""(prefers-color-scheme: dark)"" srcset=""./images/wordmark-dark.svg"">
    <source media=""(prefers-color-scheme: light)"" srcset=""./images/wordmark-light.svg"">
    
  </picture>
  
  Website |
  Getting started |
  Documentation |
  Plugins |
  FAQ


Our current build tools for the web are 10-100x slower than they could be:

  
    <source media=""(prefers-color-scheme: dark)"" srcset=""./images/benchmark-dark.svg"">
    <source media=""(prefers-color-scheme: light)"" srcset=""./images/benchmark-light.svg"">
    
  </picture>


The main goal of the esbuild bundler project is to bring about a new era of build tool performance, and create an easy-to-use modern bundler along the way.
Major features:
Extreme speed without needing a cache
JavaScript, CSS, TypeScript, and JSX built-in
A straightforward API for CLI, JS, and Go
Bundles ESM and CommonJS modules
Tree shaking, minification, and source maps
Local server, watch mode, and plugins
Check out the getting started instructions if you want to give esbuild a try."
1952,"jlmakes,scrollreveal","Animate elements as they scroll into view.. 
    
        
    



    
        
    

Animate elements as they scroll into view.


    
        
    
    
        
    
    
        
    
    
    
        
    



A simple and fast way to get started is to include this script on your page:
This will create the global variable ScrollReveal
Be careful using this method in production. Without specifying a fixed version number, Unpkg may delay your page load while it resolves the latest version. Learn more at unpkg.com

Installation provides us with the constructor function ScrollReveal(). Calling this function returns the ScrollReveal instance, the ‚Äúbrain‚Äù behind the magic.
ScrollReveal employs the singleton pattern; no matter how many times the constructor is called, it will always return the same instance. This means we can call it anywhere, worry-free.
There‚Äôs a lot we can do with this instance, but most of the time we‚Äôll be using the reveal() method to create animation. Fundamentally, this is how to use ScrollReveal:
üîé See this demo live on JSBin

If you‚Äôre using an older version of ScrollReveal, you can find legacy documentation in the wiki


    


For commercial sites, themes, projects, and applications, keep your source code private/proprietary by purchasing a Commercial License.
Licensed under the GNU General Public License 3.0 for compatible open source projects and non-commercial use.

Copyright 2023 Fisssion LLC"
1953,"saadeghi,daisyui","‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è ‚ÄÉThe most popular, free and open-source Tailwind CSS component library. 

[![][logo-url]][docs-url]

**The most popular, free and open-source Tailwind CSS component library**  

[ [See all components](https://daisyui.com/components/) ]

[![][tweet]][tweet-url]




   
  
A plugin for Tailwind CSS
Faster development
Cleaner HTML
Customizable and themeable
Pure CSS. Works on all frameworks
Then add daisyUI to your tailwind.config.js:  
[ Read more ‚Üí ]
<details>
<summary>
  Or use a CDN
</summary>

Loading CSS files from CDN is not recommended for production. It's better to install Tailwind and daisyUI as Nodejs dependencies so you can config/customize everything, and purge unused styles.

</details>

[See all components ‚Üí]
See the official site: [ daisyui.com ‚Üí]
Tweet about daisyUI: 
<details>
<summary>
  show / hide
</summary>

Actions

[x] Button

[x] Dropdown

[x] Modal

[x] Swap

Data display

[x] Alert

[x] Avatar

[x] Badge

[ ] Banner

[ ] Calendar

[x] Card

[x] Carousel

[x] Chat bubble

[x] Collapse

[ ] Comment

[x] Countdown

[ ] Empty placeholder

[x] Kbd

[ ] Loading

[x] Progress

[x] Radial progress

[x] Stat

[x] Table

[ ] Tag

[ ] Timeline

[x] Toast

[x] Tooltip

[ ] Treeview

Data input

[x] Checkbox

[x] Text input

[x] Radio

[x] Range

[x] Rating

[x] Select

[x] Textarea

[x] Toggle

[ ] Upload

Layout

[x] Artboard

[x] Button group

[x] Divider

[x] Drawer

[x] Footer

[x] Hero

[x] Indicator

[x] Input group

[x] Mask

[x] Stack

Navigation

[x] Bottom Navigation

[x] Breadcrumbs

[x] Link

[x] Menu

[x] Navbar

[x] Pagination

[x] Steps

[x] Tab

Mockup

[ ] Browser

[x] Code

[x] Phone

[x] Window

</details>

<details>
<summary>
  show / hide
</summary>

Blogs

Youtube videos

[How to use daisyUI in SvelteKit?](https://www.youtube.com/watch?v=haKnkk6ds20) 

Courses

Starters

[Vite-Boot](https://github.com/kirklin/vite-boot) Vite + Vue3 + TypeScript + Vue-Router4 + Pinia + Tailwind CSS + daisyUI Template.

</details>



‡ºº „Å§ ‚óï_‚óï ‡ºΩ„Å§  Please share  

[![][tweet]][tweet-url]

"
1954,"tabler,tabler-icons","A set of over 3100 free MIT-licensed high-quality SVG icons for you to use in your web projects.. 
  



    A set of <!--icons-count-->4044<!--/icons-count--> free MIT-licensed high-quality SVG icons for you to use in your web projects. Each icon is designed on a 24x24 grid and a 2px stroke.



  <strong>Browse at tabler-icons.io &rarr;</strong>


**If you want to support my project and help me grow it, you can [become a sponsor on GitHub](https://github.com/sponsors/codecalm) or just [donate on PayPal](https://paypal.me/codecalm) :)**


  



  
    <source media=""(prefers-color-scheme: dark)"" srcset=""https://raw.githubusercontent.com/tabler/tabler-icons/master/.github/icons-dark.png"">
    <source media=""(prefers-color-scheme: light)"" srcset=""https://raw.githubusercontent.com/tabler/tabler-icons/master/.github/icons.png"">
    
  </picture>


or just [download from Github](https://github.com/tabler/tabler-icons/releases).

All icons are built with SVG, so you can place them as ``, `background-image` and inline in HTML code.

If you load an icon as an image, you can modify its size using CSS.

You can paste the content of the icon file into your HTML code to display it on the page.

Thanks to that, you can change the size, color and the `stroke-width` of the icons with CSS code.

Add an icon to be displayed on your page with the following markup (`activity` in the above example can be replaced with any valid icon name):

React components available through [`@tabler/icons-react`](https://www.npmjs.com/package/@tabler/icons-react) package.

`@tabler/icons-react` exports it's own type declarations for usage with React and Typescript.

For more details, see the [documentation](https://github.com/tabler/tabler-icons/tree/master/packages/icons-react).

Vue components available through [`@tabler/icons-vue`](https://www.npmjs.com/package/@tabler/icons-vue) package.

For more details, see the [documentation](https://github.com/tabler/tabler-icons/tree/master/packages/icons-vue).

Angular components available through [`angular-tabler-icons`](https://www.npmjs.com/package/angular-tabler-icons) package.  
Install the package, then create icons module:

After importing the _IconsModule_ in your feature or shared module, use the icons as follows:

`angular-tabler-icons` exports it's own type declarations for usage with Typescript.

For more usage documentation refer to [the official documentation](https://github.com/pierreavn/angular-tabler-icons).

Svelte components available through [`@tabler/icons-svelte`](https://github.com/tabler/tabler-icons/tree/master/packages/icons-svelte) package.

All files included in `@tabler/icons` npm package are available over a CDN.

To load a specific version replace `latest` with the desired version number.

To compile fonts first install [fontforge](https://fontforge.org/en-US/).

When compiling the font it will look for a json file `compile-options.json` in root folder (same folder as the `package.json`) In this file you can define extra options:

The default settings if you have not defined the file will be:

The fontforge executable needs to be in the path or you can set the path to the downloaded fontforge executable in the configuration file. If you installed in on a mac in your application directory it will be `/Applications/FontForge.app/Contents/MacOS/FontForge`. You can set this value in the `compile-options.json` file.

To compile the fonts run:

By default the stroke width is 2. You can change the stroke width in the `compile-options.json`

To reduce the font file size you can choose to compile a sub set of icons. When you leave the array empty it will compile all the fonts. To compile only two icons you can set for example the following option in the `compile-options.json`:

Optional property `includeCategories` - an array or string of icon categories to include, category names are case-insensitive.

or

Optional property `excludeIcons` - an array of icon names using to exclude some category icons:

Complex solution:

For Android or Desktop you can use [`compose-icons`](https://github.com/DevSrSouza/compose-icons) to use icons in your projects. (see [docs](https://github.com/DevSrSouza/compose-icons/blob/master/tabler-icons/DOCUMENTATION.md))

All icons in this repository have been created with the value of the `stroke-width` property, so if you change the value, you can get different icon variants that will fit in well with your design.


  <source media=""(prefers-color-scheme: dark)"" srcset=""https://raw.githubusercontent.com/tabler/tabler-icons/master/.github/icons-stroke-dark.png"">
  <source media=""(prefers-color-scheme: light)"" srcset=""https://raw.githubusercontent.com/tabler/tabler-icons/master/.github/icons-stroke.png"">
  
</picture>

Tabler Icons is licensed under the [MIT License](https://github.com/tabler/tabler-icons/blob/master/LICENSE).

"
1955,"cobiwave,simplefolio","‚ö°Ô∏è A minimal portfolio template for Developers. 
  
  


‚ö°Ô∏è Modern UI Design + Reveal Animations\
‚ö°Ô∏è One Page Layout\
‚ö°Ô∏è Styled with Bootstrap v4.3 + Custom SCSS\
‚ö°Ô∏è Fully Responsive\
‚ö°Ô∏è Valid HTML5 & CSS3\
‚ö°Ô∏è Optimized with Parcel\
‚ö°Ô∏è Well organized documentation
To view the demo: click here
Professional way to showcase your work
Increases your visibility and online presence
Shows you‚Äôre more than just a resume
These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.
You'll need Git and Node.js (which comes with NPM) installed on your computer.
Also, you can use Yarn instead of NPM ‚òùÔ∏è
From your command line, first clone Simplefolio:
After that, you can install the dependencies either using NPM or Yarn.
Using NPM: Simply run the below commands.
Using Yarn: Be aware of that you'll need to delete the package-lock.json file before executing the below commands.
NOTE:
If your run into issues installing the dependencies with NPM, use this below command:
Once your server has started, go to this url http://localhost:1234/ to see the portfolio locally. It should look like the below screenshot.

  


Go to /src/index.html and put your information, there are 5 sections:
On .hero-title, put your custom portfolio title.
On .hero-cta, put your custom button label.
On &lt;img&gt; tag, fill the src property with your profile picture path, your picture must be located inside /src/assets/ folder.
On &lt;p&gt; tag with class name .about-wrapper__info-text, include information about you, I recommend to put 2 paragraphs in order to work well and a maximum of 3 paragraphs.
On last &lt;a&gt; tag, include your CV (.pdf) path on href property, your resume CV must be located inside /src/assets/ folder.
Each project lives inside a row.
On &lt;h3&gt; tag with class name .project-wrapper__text-title, include your project title.
On &lt;p&gt; tag with loremp ipsum text, include your project description.
On first &lt;a&gt; tag, put your project url on href property.
On second &lt;a&gt; tag, put your project repository url on href property.
Inside &lt;div&gt; tag with class name .project-wrapper__image, put your project image url on the src of the &lt;img&gt; and put again your project url in the href property of the &lt;a&gt; tag.
Recommended size for project image (1366 x 767), your project image must be located inside /src/assets/ folder.
On &lt;p&gt; tag with class name .contact-wrapper__text, include some custom call-to-action message.
On &lt;a&gt; tag, put your email address on href property.
Put your Social Media URL on each href attribute of the &lt;a&gt; tags.
If you an additional Social Media account different than Twitter, Linkedin or GitHub, then go to Font Awesome Icons and search for the icon's class name you are looking.
You can delete or add as many &lt;a&gt; tags your want.
Change the color theme of the website - (choose 2 colors to create a gradient)
Go to /src/sass/abstracts/_variables.scss and only change the values for this variables $main-color and $secondary-color with your prefered HEX color.
If you want to get some gradients inspiration I highly recommend you to check this website UI Gradient
Once you finish your setup. You need to put your website online!
I highly recommend to use Netlify because it is super easy.
Gatsby Simplefolio by Jacobo Martinez\
Ember.js Simplefolio by Michael Serna
Parcel - Bundler
Bootstrap 4 - Frontend component library
Sass - CSS extension language
ScrollReveal.js - JavaScript library
Tilt.js - JavaScript tiny parallax library
Jacobo Martinez - https://github.com/cobiwave

This project is licensed under the MIT License - see the LICENSE.md file for details
I was motivated to create this project because I wanted to contribute on something useful for the dev community, thanks to ZTM Community and Andrei"
1956,"aniftyco,awesome-tailwindcss","üòé Awesome things related to Tailwind CSS. <!--lint disable awesome-heading awesome-github double-link no-dead-urls-->


  
  
  
  


Awesome Tailwind CSS


  Tailwind CSS is a utility-first CSS framework for rapidly building custom user interfaces.
  
  
  
    
  
  &nbsp;
  
    
  
  
  


Legend: üíô Official resource
üíô Website - Official Tailwind CSS website.
üíô Repository - Official Tailwind CSS repository.
üíô Discussions - Official place to connect with other community members about Tailwind.
üíô Tailwind UI - Component library made with Tailwind CSS.
üíô Headless UI - Completely unstyled, fully accessible UI components.
üíô Heroicons - Beautiful, hand-crafted SVG icons.
üíô Play - Advanced online playground for Tailwind CSS.
üíô Just-in-time - Just-in-time compiler for Tailwind CSS.
Tailwind Weekly - Weekly newsletter about all things Tailwind CSS.
Built With Tailwind - Community-driven collection of awesome websites built with Tailwind CSS.
Legend: üíô Official resource
üíô IntelliSense for Code - IntelliSense extension for Visual Studio Code.
Styled Snippets for Code - Snippet extension for Visual Studio Code.
Headwind for Code - Class sorter extension for Visual Studio Code.
Shades for Code - Color palette generator extension for Visual Studio Code.
IntelliSense for Neovim - IntelliSense extension for Neovim.
Tailwind CSS Explorer for Code - Explore the classes available in your project's Tailwind CSS setup.
Tailwind CSS Highlight - Highlight utilities extension for Visual Studio Code.
CSS to TailwindCSS converter for Code - CSS to Tailwind CSS converter extension for Visual Studio Code.
Legend: üíô Official plugin ¬∑ üé® Theming ¬∑ üíº Utilities ¬∑ üß¨ Variants ¬∑ üß© Components ¬∑ üõë Deprecated
üíôüß© Typography - Adds a prose class for beautiful typographic defaults.
üíôüíº Aspect Ratio - Adds composable aspect ratio utilities.
üíôüíº Line Clamp - Provides utilities for visually truncating text after a fixed number of lines.
üíô Forms - Adds better default styles to form elements.
üé®üß¨ Theming - Theming using CSS variables, with dark mode support.
üé®üß¨ Theme Variants - Adds theme variants based on media queries and/or CSS selectors.
üé®üß¨ Multi Theme - Adds theme variants based on a single theme property.
üé®üß¨ Theme Swapper - Theming using CSS variables, with media queries support.
üé®üß¨ Themeable - Adds multiple themes support for Tailwind CSS.
üé®üß¨ Themer - Adds theming support for Tailwind CSS with CSS variables and variants.
üé®üß© Tailwind Elements - Extends Tailwind CSS with 500+ interactive components (datepickers, modals, forms, tables, darkmode).
üé®üíº Accent - Adds accent colors for more dynamic and flexible color utilization.
üíºüß¨ Radix - Adds utilities and variants for styling Radix UI state.
üíº Custom Native - Leverages Tailwind CSS's configuration to allow the creation of utilities.
üíº Image Rendering - Adds image-rendering utilities.
üíº Elevation - Adds Material UI elevation utilities.
üíº Writing Mode - Adds writing-mode utilities.
üíº Hyphens - Adds hyphens utilities.
üíº Border Gradients - Adds border-image gradient utilities.
üíº RFS - Adds RFS utilities.
üíº List Reset - Adds back the list-reset class that was removed prior to Tailwind CSS 1.0.
üíº Fluid - Adds fluid sizing utilities.
üíº Typography - Adds typography utilities.
üíº Triangle After - Adds CSS triangles utilities.
üíº Scrims - Adds scrims utilities.
üíº Truncate Multiline - Adds utilities to truncate multi-line text elements.
üíº CSS Logical Properties - Generate utilities for CSS Logical Properties.
üíº Tooltip Arrows After - Adds CSS utilities for tooltip arrows with configurable border and background.
üíº Bidirectional - Adds utilities for creating multilingual bidirectional layouts.
üíº Bidirectional - Replace the core utilities to be bi-direction compatible.
üíº Background SVG - Inject SVGs as background images with color variants.
üíº Background Unsplash - Apply unsplash.com images as background.
üíº Brand Colors - Adds various brand colors for background, border and text.
üíº Bootstrap Grid - Generates Bootstrap's style flexbox grid system.
üíº Leading Trim - Adds utilities to trim text whitespace, using Capsize.
üíº Scrollbar Hide - Adds scrollbar-hide class for visual hide scrollbar.
üíº Downwind CSS Easings - Extends transition-timing-function utilities.
üíº Content Placeholder - Adds utilities for content placeholder images.
üíº No Scrollbar - Exposes scrollbar-none to visually hide a scrollbar.
üíº Fluid Type - Adds fluid type (font-size) utilities.
üíº Grid Areas - Adds grid-areas and grid-area utilities.
üíº Full Bleed Background and Borders - Provides utilities for extended backgrounds and borders.
üß¨ Touch - Adds touch variants.
üß¨ Localized - Adds variants based on the HTML lang attribute, to use utilities only with certain languages.
üß¨ Padded Radius - Adds variants for matching nested border radii.
üß¨ Fluid - Generates fl: variants.
üß¨ Marker - Provides utilities for styling lists and &lt;summary&gt; markers.
üß¨ Pseudo selectors - Adds variants for the pseudo-classes and pseudo-elements that Tailwind CSS doesn't have by default.
üß¨ Container Queries - Adds CSS Container Query variants.
üß¨ FormKit - Adds variants for input and form states for FormKit.
üß© Debug Screens - Adds a component that shows the currently active screen (responsive breakpoint).
üß© Heropatterns - Adds Hero Patterns components.
üß© Responsive Embed - Adds a responsive-embed component.
üß© Bootstrap Tables - Adds table components based on Bootstrap's tables.
üß© Card - Adds card components.
üß© Skip link - Adds a Skip to main content accessible component.
üß© Colors to CSS Variables - Exports color configuration to CSS Custom Properties.
üß© CSS Variables - Exports configuration to CSS Custom Properties.
üß© CSS Variables - Exports custom CSS variables (Dark Mode supported).
üß© Perspective - Adds perspective utilities.
üõë - The plugins below offer functionalities that are now fully or partially implemented in Tailwind CSS.
üõëüíº Caret Color - Adds caret color utilities.
üõëüíº Caret Color - Adds caret color utilities.
üõëüíº benface's gradients - Adds gradient utilities.
üõëüíº lorisleiva's gradients - Adds background gradient utilities.
üõëüíº Visually Hidden - Adds screen reader utilities.
üõëüíº Object Fit - Adds object-fit utilities.
üõëüíº Object Position - Adds object-position utilities.
üõëüíº Accessibility - Adds screen reader utilities.
üõëüíº Layout - Adds some layout utilities.
üõëüíº Grid - Adds CSS grids utilities.
üõëüíº Transforms - Adds transform utilities.
üõëüíº benface's transitions - Adds configurable transition utilities, with or without CSS variables.
üõëüíº webdna's transitions - Adds configurable transition utilities.
üõëüíº glhd's transitions - Adds basic transition utilities.
üõëüíº Cursor Extended - Extends cursor utilities.
üõëüíº Font Variant Numeric - Adds font-variant-numeric utilities.
üõëüíº Filters - Adds filter utilities.
üõëüíº CSS Filters - Adds filter and backdrop-filter utilities with defaults.
üõëüíº Blend Mode - Adds blend-mode utilities.
üõëüíº Colorize - Adds filter utilities.
üõëüíº Scroll Snap - Adds scroll-snap utilities.
üõëüíº Scroll Behavior - Adds scroll-smooth and scroll-auto classes to control smooth scrolling.
üõëüíº Accent Color - Adds accent color utilities.
üõëüíº Text Indent - Adds text-indent utilities.
üõëüíº Text Decoration Color - Adds text-decoration-color utilities.
üõëüíº Downwind CSS Text Decoration - Adds composable text-decoration utilities.
üõëüíº Capitalize first letter - Adds capitalize-first utilities.
üõëüíº Aspect Ratio - Adds aspect-ratio utilities.
üõëüíº Shadow Outline Colors - Adds box-shadow utilities based on configured colors.
üõëüíº Alpha - Adds alpha color variant utilities.
üõëüß¨ Direction - Adds RTL and LTR variants.
üõëüß¨ Important - Adds an important variant.
üõëüß¨üé® Prefers Dark Mode - Adds variants based on the prefers-color-scheme media query.
üõëüß¨üé® Dark Mode - Adds dark variants based on CSS classes.
üõëüß¨üé® Dark Mode - Adds dark variants based on the prefers-color-scheme media query.
üõëüß¨ CSS Alpha Colors - Adds opacity variants to existing colors.
üõëüß¨ Pseudo - Adds custom variants to Tailwind CSS's configuration.
üõëüß© Spinner - Adds a spinner component.
üõëüß© Spaced Items - Adds spaced components that add fixed margins to all container items.
üõëüß©üíô Custom Forms - Adds better default styles to form elements.
Legend: üåç Accessible online ¬∑ üîº Conversion or upgrade tool ¬∑ üîß Generator ¬∑ üÖ∞ Typing/enforcement ¬∑ üíº Plugins/Tools/Extensions for external services ¬∑ üé® Color-related ¬∑ üöÄ Framework
üé®üåçüîß Tailwind Color Shades - Color shades generator for Tailwind CSS.
üé®üåçüîß Palette generator - Color palette generator that outputs Tailwind CSS configuration files.
üé®üåçüîß Tailwind Colors - Color configuration generator for Tailwind CSS.
üé®üåçüîß Tailwind Color Explorer - Color explorer for Tailwind CSS.
üé®üåçüîß TailwindInk - AI palette generator, trained with the Tailwind CSS palette.
üé®üåçüîß Gradient Designer - Generate gradients for Tailwind 2.0+.
üé®üåçüîß Grayscale Design - A Luminance-based color palette generator.
üé®üåçüîß Hypercolor - Collection of pre-configured Tailwind CSS gradients with directional options.
üé®üåçüîß Palettolithic - Generates harmonius color palettes based on one color.
üé®üåçüîß Tailwind Gradient Generator - Create perfect Tailwind CSS gradients with zero lines of code.
üé®üåçüîß Ui Colors - Color palette generator for Tailwind CSS.
üé®üåçüíº Tailwind CSS v2 colors - Figma library with Tailwind CSS v2 colors.
üé®üîßüíº Colorkraken - Color shades generator for Tailwind CSS.
üé®üîßüíº babel-plugin-tailwind-dark - A Babel plugin to add custom dark class when compiling your code using Babel.
üåçüîßüíº Twind - Compiler functions that turn Tailwind's classes into CSS at run, serve and build time.
üåçüîß GPT-3 Tailwind CSS code generator - OpenAI GPT-3 powered Tailwind CSS code generator.
üåçüîß Stitches - Template generator with Tailwind (online).
üåçüîß tail-animista - Configurable custom animation utilities generator for Tailwind CSS.
üåçüîß brands-tail-color - Configuration generator using various brands' colors.
üåçüîß Windframe - Tailwind CSS drag and drop builder to rapidly build and prototype websites.
üåç Typography Playground - Tool for trying different Google Fonts combinations with the Tailwind CSS Typography Plugin.
üåçüíô Play - Advanced online playground for Tailwind CSS.
üåç Updrafts.app - Advanced online no-code drag and drop editor for Tailwind CSS.
üåç tailwind.run - Tailwind CSS fiddle with built-time features (online).
üåç tailzilla.app - Online playground for Tailwind CSS.
üåç Flowrift - Beautifully designed Tailwind CSS UI blocks.
üîºüåçüîß Tailwindhelper - Visualize Tailwind CSS classes and unit converter.
üîºüåç Tailwind Automatic Prefix Applicator - Tailwind classes' prefixer tool.
üîºüåç CSS to Tailwind CSS Converter - Converts CSS to Tailwind CSS by suggesting classes that best match.
üîº Tailwindo - Bootstrap to Tailwind CSS converter.
üîº Tailupgrade - Conversion tool for upgrading HTML files from Tailwind CSS v0.x to v1.0.
üîº Tailwind Shift - Upgrade tool for upgrading from Tailwind CSS v0.7 to v1.0.
üîº RustyWind - CLI tool for sorting Tailwind CSS classes.
üîº Windy - Browser extension to convert HTML elements to Tailwind CSS.
üÖ∞ react-native-tailwindcss - React Native typing system.
üÖ∞ typed-tailwind - TypeScript typings for Tailwind CSS.
üíº Gatsby Plugin - Tailwind CSS integration for Gatsby.
üíº Gridsome Plugin - Tailwind CSS integration for Gridsome.
üíº Alfred Workflow - Fast Tailwind CSS documentation search application.
üíº ng-tailwindcss - CLI tool for integrating Tailwind CSS into Angular-CLI projects.
üíº vue-cli-plugin-tailwind - Vue CLI plugin that adds Tailwind CSS to a project.
üíº Tailwind CSS Figma Kit - Figma Kit for Tailwind CSS.
üíº Tailwind CSS Figma UI Design Kit - Figma UI Design Kit for Tailwind CSS.
üíº Tailwind CSS Figma Plugin - Figma plugin that integrates Tailwind CSS.
üíº @nuxtjs/tailwindcss - Tailwind CSS module for NuxtJS with PurgeCSS and modern CSS (preset env 1).
üíº preact-cli-tailwind - Tailwind CSS integration for Preact.
üíº tailwind-classes-sorter - NPM library which provides a utility to sort Tailwind CSS classes.
üíº prettier-plugin-tailwind - Prettier plugin that sorts class lists.
üíº tailwindcss-rails - Gem for using Tailwind CSS with Rails' asset pipeline.
üíºüîß Zeplin Config & Class generator - Zeplin extension that generates Tailwind configurations.
üíºüîß @tailwindcssinjs/macro - Babel macro that transforms Tailwind CSS classes into objects for CSS-in-JS libraries.
üíºüîß twin.macro - Use Tailwind classes within any CSS-in-JS library.
üíºüîß tailwindcss-webpack-plugin - Out-of-the-box Tailwind CSS, supports ""Design in Devtools"" mode and visualizes Tailwind CSS configuration.
üíºüîß tailwindcss-vite-plugin - Vite plugin for Tailwind CSS, supports ""Design in Devtools"" mode and visualizes Tailwind CSS configuration.
üíºüîß Tailwind Config Viewer - Local UI tool for visualizing your Tailwind CSS configuration file.
üíºüîß Laravel Form Components - Blade form components using Tailwind CSS Custom Forms.
üíº @ngneat/tailwind - Tailwind CSS integration for Angular.
üíº Gust - Drag and drop page builder for WordPress.
üíº clb - clb (class list builder) is a utility function that builds a class list based on a Stitches like API.
üíº react-with-class - Utility function for creating primitive React components with a set of classes, props or variants.
üíºüåç Inspect Flow - The complete developer tool for Tailwind CSS.
üíº twined-components - Extended component of a styled-components that prioritizes class names for use in Tailwind CSS.
üíº Tails Devtools - All-in-one browser extension for Tailwind CSS.
üíº Impulse.dev ‚Äì UI editor for Tailwind CSS and React that edits your code.
üíº Tailiscope.nvim - Tailwind CSS cheat sheet integrated in Neovim.
üíºüåç Supertweak - Visual devtools for Tailwind CSS.
üíº Tailscan - Ultimate devtools for Tailwind CSS v3 with ability to inspect and convert CSS to Tailwind CSS classes.
üîß re-tailwind - ReasonML utility that generates Tailwind classes.
üîß Protoship Codegen - Code generator that creates Tailwind CSS based HTML & CSS from Sketch designs.
üîß create-tailwind-plugin - Plugin scaffolder for Tailwind CSS.
üöÄ Maizzle - Framework for rapid email prototyping with Tailwind CSS.
üåç Tailwind Cheat Sheet - Tailwind CSS class names cheat sheet.
üåç Tailwind Cheat Sheet - Tailwind CSS class names in one single file.
üåç Tailwind Cheat Sheet - Tailwind CSS class names, variants and directives cheat sheet.
üåç Tailwind Cheat Sheet - Tailwind CSS class names in a searchable page.
üåç Tailwind Cheat Sheet - Tailwind CSS utility class names in a searchable interface.
üåçüîß Loopple Builder - Dashboard drag-and-drop builder for Tailwind CSS.
Legend: üíô Official resource ¬∑ üìö Library ¬∑ üß© Components ¬∑ üìÅ Templates
üíôüß© Tailwind UI - Component library made with Tailwind CSS.
üíôüìö Headless UI - Completely unstyled, fully accessible UI components.
üìö VueTailwind - Vue.js UI library using Tailwind CSS.
üìö Vechai UI - High-quality accessible React components with the built-in dark mode using Tailwind CSS.
üìö Flowbite - Open-source component library built with Tailwind CSS.
üìö a17t - Atomic design toolkit built to extend Tailwind CSS.
üìö tails-ui - React UI library using Tailwind CSS.
üìö tails - Hand-crafted templates and components using Tailwind CSS.
üìö Svelte Headless UI - Unofficial Svelte port of Headless UI.
üìö Xtend UI - Tailwind CSS components with advanced interactions and animations.
üìö Headless UI Float - Floating UI integration for Headless UI.
üìö Vanilla Components - Set of fully customizable Vue components.
üìö Sailboat UI - Modern UI framework for Tailwind CSS.
üß© TailBlocks - 60+ different ready to use Tailwind CSS blocks.
üß© Tailwind Components - Community-driven Tailwind CSS component repository.
üß© Tailwind Toolbox - Templates, components and resources.
üß© Meraki UI Components - Beautiful Tailwind CSS components that support RTL languages.
üß© Tailwind Cards - Growing collection of text/image cards.
üß©üìÅ Tailwind Templates - Collection of templates and components.
üß©üìÅ Treact - React UI templates and components built using Tailwind CSS.
üß©üìÅ Jakarta LTE - Admin template using Tailwind CSS.
üß©üìÅ themes.dev - Handcrafted, free and premium Tailwind CSS themes and components.
üß© Kutty - Accessible and reusable components that are commonly used in web applications.
üß© Sail UI - Collection of basic UI components built on Tailwind CSS.
üß© jQuery Toggler - Switches using jQuery and Tailwind CSS.
üß© Tailwind Kit - Framework-agnostic, Vue.js, React and Angular components.
üß© lofi ui - Low-fidelity Tailwind CSS components.
üß© Gust UI - Sleek Tailwind CSS components for web applications in React and HTML.
üß© Windstrap - Tailwind CSS with Bootstrap JS.
üß© WickedBlocks - Collection of more than 120 layout blocks and components built with Tailwind CSS.
üß© Daisy UI - UI Components for Tailwind CSS.
üß© Kometa UI Kit - Free multi-purpose UI kit, built with Tailwind CSS.
üß© Mamba UI - Free Tailwind CSS components, sections and templates.
üß© Litepie Date picker - A date range picker component for Vue.js and Tailwind CSS.
üß© Tailwind Datepicker - Adds a datepicker component built with Tailwind CSS and vanilla JavaScript.
üß© Tailwind Typeahead - Typeahead/Autocomplete component built with Vue.js and Tailwind CSS.
üß© Material Tailwind - Easy to use components library for Tailwind CSS and Material Design.
üß© Layouts for Tailwind - Layouts and UI Patterns for Tailwind CSS.
üß© HyperUI - Open source marketing and ecommerce Tailwind CSS components.
üß© Snippets - Open source collection of animation snippets made for Tailwind CSS.
üß© Fancy Tailwind - Large collection of Tailwind CSS UI components (700+).
üß© Myna UI - Open source UI Components and Marketing Elements made with Tailwind CSS.
üß© Sira UI - Customizable and accessible design system which provides TailwindCSS component class name library to build modern UI.
üß© RippleUI - Clean, modern and beautiful Tailwind CSS components.
üß© NativeWind - NativeWind uses Tailwind CSS as scripting language to create a universal style system for React Native.
üìÅ Vue Notus - Open-source Tailwind CSS and Vue.js UI kit.
üìÅ Red Pixel Themes - Paid, developer-friendly templates made with Tailwind CSS.
üìÅ EasyTailwind - Freemium, easily customizable templates made with Tailwind CSS.
üìÅ Windmill Dashboard - Multi theme, completely accessible dashboard template.
üìÅ Tailwind Admin - Administration panel template with Tailwind CSS.
üìÅ Landing Gradients - Landing page template using gradients (1.7+).
üìÅ Resume - Simple resume with Tailwind CSS.
üìÅ Resume - A stylized resume template built with Tailwind CSS, featuring a nifty hero-pattern background and custom font.
üìÅ Simple Light - Free landing page template built with React & Tailwind CSS.
üìÅ V-Dashboard - Dashboard starter template built with Vue 3 and Tailwind CSS.
üìÅ Petra - Free landing page template built with Nuxt.js & Tailwind CSS.
üìÅ Tailmin - Admin dashboard built with Vue.js and Tailwind CSS.
üìÅ OhMySMTP Templates - Set of Transactional HTML Email Templates, built with Maizzle
üìÅ Material Tailwind Kit React - Free Tailwind CSS and React UI kit.
üìÅ Material Tailwind Dashboard React - Free Tailwind CSS and React admin template.
üìÅ Admin One Vue 3 - Free Vue.js 3 Tailwind CSS admin template with Vite & Vue CLI support.
üìÅ Cruip - Beautifully designed HTML, React, and Vue.js templates.
üìÅ Admin One React - Free React.js Tailwind CSS admin template with Next.js & TypeScript.
üìÅ Flowbite Admin Dashboard - Open-source admin dashboard template built with Tailwind CSS and Flowbite.
üìÅ Astro Template Resume - Eye-catching resume template built with Astro, Tailwind CSS.
Legend: üíº Package ¬∑ üìü Command line tool/generator ¬∑ üöÄ Cloneable
üìü Create React App with PurgeCSS - CRA script that adds Tailwind CSS and PurgeCSS.
üìü Laravel Preset - Adds Tailwind CSS to the Laravel framework.
üìüüíº Laravel Front-end Preset - Front-end preset using Tailwind CSS for Laravel.
üìüüíº Laravel Dark Front-end Preset - Dark-themed front-end preset using Tailwind CSS for Laravel.
üöÄ Create React App with EmotionJS - CRA boilerplate using Tailwind CSS and Emotion JS.
üìü Create React App with TypeScript - CRA template with support for Tailwind CSS and TypeScript.
üìü Next.js PWA ‚Äì CLI that generate boilerplate code of Next.js PWA along with Tailwind CSS integration.
üìü new-tailwind-app - Creates React.js, Next.js, Gatsby.js, Vue3, Laravel, and basic Tailwind CSS apps.
üöÄ Tailwind CSS Boilerplate - Tailwind CSS boilerplate using Parcel.
üöÄ Jekyll Starter - Jekyll starter using Tailwind CSS.
üöÄ Jekyll Starter - Jekyll starter using Tailwind CSS.
üöÄ Jekyll Starter - Jekyll starter using Tailwind CSS
üöÄ Gulp Starter - Gulp starter using Tailwind CSS.
üöÄ Gatsby Starter - Gatsby starter using Tailwind CSS.
üöÄ Gatsby Starter Simplicity - Gatsby starter using Tailwind CSS.
üöÄ Gatsby Starter + TypeScript - Gatsby starter using Tailwind CSS and TypeScript.
üöÄ Gatsby Starter + Emotion JS - Gatsby starter using Tailwind CSS and Emotion JS.
üöÄ Gatsby Starter Opinionated - Gatsby starter using Tailwind CSS and opinionated goodies.
üöÄ Create React App Boilerplate - CRA boilerplate using Tailwind CSS.
üöÄ Create React App with PurgeCSS + Autoprefixer + CSSNano - CRA boilerplate using CSS Nano.
üöÄ Dogpatch - WordPress starter using Webpack, Vue, Babel and Tailwind CSS.
üöÄ Next.js Starter - Next.js boilerplate using Tailwind CSS.
üöÄ Sapper & Svelte Starter - Svelte boilerplate using Sapper, Tailwind CSS, Purge CSS, Prettier and ESLint.
üöÄ Netlify Lambda Starter - Netlify Lambda boilerplate using Tailwind CSS.
üöÄ Hugo Theme Starter with Tailwind CSS - Hugo theme starter using Tailwind CSS.
üöÄ Eleventy Web Starter - Starter kit using Eleventy, Tailwind CSS, Webpack and PostCSS.
üöÄ Nanoc Starter - Nanoc starter using Tailwind CSS.
üöÄ PostCSS and Browsersync Boilerplate - Boilerplate using CSS Nano.
üöÄ ParcelJS + TypeScript Boilerplate - Boilerplate using Tailwind CSS, ParcelJS bundler and TypeScript.
üöÄ VuePress Tailwind CSS Starter - A VuePress starter using Tailwind CSS.
üöÄ Gatsby Serif - Gatsby's serif theme using Tailwind CSS.
üöÄ Seminyak Hugo Theme - Hugo theme using Tailwind CSS.
üöÄ Eleventy Starter - Production-ready, SEO-friendly blog starter using Tailwind CSS.
üöÄ Vite + React + Tailwind Starter - Boilerplate using Vite, React and Tailwind CSS.
üöÄ Vite + React + TypeScript + Tailwind 3.x starter - GitHub Template for Vite, React + Tailwind 3.x + TypeScript.
üöÄ Vite + Vue 3.x + Tailwind 2.x Starter - Starter template using Vite, Vue, Vue Router and Tailwind CSS.
üöÄ Vite + Lit + Tailwind Starter - Boilerplate using Vite, Lit and Tailwind CSS.
üöÄ Shopify Theme Lab - Shopify theme development starter using Vue and Tailwind CSS.
üöÄ Starter Dashboard Layout - Dashboard layout using Tailwind CSS and Alpine JS.
üöÄ Jekyll Landing Website Starter - Production ready, SEO-friendly, performant landing website boilerplate using Jekyll and Tailwind CSS.
üöÄ Next JS Boilerplate - Boilerplate for Next.js and Tailwind CSS.
üöÄ Vitailse - Opinionated Vite starter template with Vue 3, TypeScript and Tailwind CSS.
üöÄ Vite-Boot - Vite + Vue3 + TypeScript + Vue-Router4 + Pinia + Tailwind CSS + VueUse Template.
üöÄ AstroWind - Production ready and SEO-friendly template to start a website using Astro and Tailwind CSS.
üöÄ Angular-Tailwind - Dashboard starter kit using Angular and Tailwind CSS.
üöÄ Vue-Resume - Developer resume template with Tailwind CSS and Vue.
Goodwork - Project Management & Collaboration tool.
Statusfy - Status page system using Tailwind CSS.
Todolist - To-do list application using Tailwind CSS.
LeagueStats - Statistics website for League of Legends players.
SapperCommerce - E-commerce storefront using Svelte & Tailwind CSS.
Misiki Books - Book shop using Vue + Moltin + Tailwind CSS.
Ubuntu 20.04 - An Ubuntu desktop using React.js + Tailwind CSS.
Angular Spotify - Spotify client built with Angular, Nx Workspace and Tailwind CSS.
GitProfile - Automatic portfolio builder based on GitHub profiles, built with React.js and Tailwind CSS.
Legend: üíô Official resource ¬∑ üß™ Sample ¬∑ üîß Setup Tutorial ¬∑ üé¨ Video Tutorial ¬∑ üéì Component or Page Tutorial ¬∑ üé• Cast
üíôüß™ Plugin Examples - Official plugin examples.
üß™ Tailwind Dark Mode Theme Switcher - Switching themes with CSS Custom Properties and Tailwind CSS.
üß™ Acquia - Acquia's hosting dashboard rebuilt with Vue.js and Tailwind CSS.
üß™ Navbar - Navbar made with Vue.js and Tailwind CSS.
üß™ Toggle switch - Switch using Tailwind CSS.
üß™ ‚ÄúOpen‚Äù landing page - ‚ÄúOpen‚Äù landing page template by Cruip built with Tailwind CSS Boilerplate.
üîß Testing Tailwind CSS plugins with Jest - How to test Tailwind CSS plugins with Jest.
üîß Tailwind CSS with Webpack 4 and PostCSS - How to setup Tailwind CSS with PostCSS and Webpack.
üîß Tailwind CSS with CSS-in-JS - How to use Tailwind CSS with CSS-in-JS.
üîß Tailwind CSS in a Laravel Project - How to setup Tailwind CSS in a Laravel project.
üîß Tailwind CSS with Ember - How to add Tailwind CSS to an Ember application.
üîß Sage WordPress theme and Tailwind CSS - How to setup Tailwind CSS in Sage.
üîß Tailwind CSS with GatsbyJS - How to use Tailwind CSS with Gatsby.
üîß Tailwind CSS with Phoenix 1.4 - How to setup Tailwind CSS in Phoenix 1.4.
üîß Extend Tailwind CSS - How to Extend Tailwind CSS.
üîß Web2Tailwind - How to build web components with Tailwind CSS with AlpineJS.
üé¨ Rebuilding Laravel.io - Rebuilding Laravel.io with Tailwind CSS.
üé¨ Rebuilding Coinbase - Rebuilding Coinbase with Tailwind CSS [see the Codepen].
üé¨ Rebuilding Twitter - Rebuilding Twitter with Tailwind CSS [see the CodePen].
üé¨ Rebuilding YouTube - Rebuilding YouTube with Tailwind CSS.
üé¨ Rebuilding Netlify - Rebuilding Netlify with Tailwind CSS.
üé¨ Rebuilding Resolute - Rebuilding Resolute with Tailwind CSS.
üé¨ Let's Build: Movie Production Landing Page - Building a movie production landing page with Tailwind CSS.
üé¨ Lets Build: Responsive Navbar - Building a responsive navbar with Tailwind CSS.
üé¨ Let's Build: Dribbble Shot - Dribbble shot with Tailwind CSS.
üíôüé¨ Tailwind CSS: From Zero to Production - Complete walkthrough of Tailwind CSS, from installation to optimization for deployment.
üé¨ Let's Build: Tweet component - Building a Tweet component with Tailwind CSS.
üéì Modal Dialog - Creating a modal dialog with Tailwind CSS.
üéì Building real-world UIs using Tailwind CSS - Building UIs of Shopify, Spotify, Netlify and Atlassian.
üéì Rebuilding FreshBooks - Rebuilding FreshBooks with Tailwind CSS.
üéì Login Page (PingPing) - Creating a login page with Tailwind CSS.
üéì Login Page - Creating a login page with Tailwind CSS.
üéì Vue.js Component with Tailwind and Laravel - Building a Vue.js component in a Laravel project.
üéì Vue.js Modal - Building a customizable modal with Tailwind CSS and Vue.js.
üéì Navigation - Building a navigation with Tailwind CSS.
üéì Forms with Tailwind CSS - How to style a form with Tailwind CSS.
üéì Photo gallery with CSS grids - Building a photo gallery with CSS grids and Tailwind CSS.
üéì Rebuilding Bartik - Rebuilding Bartik (Drupal's default theme) with Vue.js and Tailwind CSS.
üéì Rebuilding Airbnb's Home Page - Rebuilding Airbnb's Home Page with Tailwind CSS.
üéì Typographic defaults in Tailwind CSS
üéì Create a responsive navigation menu in Tailwind CSS
üé• Laracasts Weekly Stream: Tailwind
üé• More experimentation with Tailwind CSS
üé• Rebuilding Spotify
üé• Rebuilding Discord
üé• Rebuilding Meetup

  
  
  ¬∑
  
  
  <sub>Contributions welcome! Read the contribution guidelines first.</sub>
"
2030,"zeusdeux,isInViewport","An ultra-light jQuery plugin that tells you if an element is in the viewport but with a twist.. An ultra-light jQuery plugin that tells you if the element is in the viewport, but with a twist.
Did you say demo (inclusive of tests)?
For a more performant alternative, please take a look at observe-element-in-viewport which uses the new IntersectionObserver API. Please keep in mind that you might have to ship a polyfill for IntersectionObserver depending on the browsers you support.
Note: If you need this in a React application, please use the use-is-in-viewport hook.
You can then require('is-in-viewport') or import 'is-in-viewport' in your code.
It will automagically work with the bundler of your choice. If it breaks, please feel free to open an issue.
Example usage in an ES6/ES2015 module is shown in the examples/es6-example folder.
Note: isInViewport is a side-effecting module. It imports jquery that you have installed and attaches itself on it.
As a consequence, isInViewport requires jquery to be installed as a peer dependency.
Your bundling will fail if jquery isn't installed as is-in-viewport imports jquery.
Get the release that you want from releases/tags (or bower install isInViewport or npm install --save is-in-viewport)
Copy/link either isInViewport.js or isInViewport.min.js and the respective sourcemap from the lib folder to your folder containing your scripts
Add it after you include jQuery
You're ready to go!
<a name=""bu""/>
When used as a selector it returns all the elements that match. Since it returns the element(s) it can thus be chained with other jQuery methods. It can also be used with jquery's .is.
Both of the above will set the background-color as red for all divs that are in the viewport.
This returns all the elements that are in the viewport while taking into account the tolerance criterion.
Since it returns the element(s) it can thus be chained with other jQuery methods.
When a viewport selector is specified, it uses that to calculate if the element is in that viewport or not.
When a viewport selector is not specified, it defaults to window as the viewport.
The viewport selector is any valid jQuery selector.
tolerance defaults to 0
viewport defaults to window
Example 1 will set the background-color as red for all divs that are in the viewport with a tolerance of 100px.
Example 2 will set the background-color as green for all divs that are in the viewport with a tolerance of viewport height - 100px. This lets the user conveniently provide a tolerance value closer to the viewport height without having to call $(viewport).height() all the time.
Example 3 will set the background-color as blue and text as in viewport for all divs that are in the custom viewport given by #viewport and with a tolerance of 100px.
With the advanced usage it becomes very easy to build things like menus with items that get auto-highlighted based on which section you are on, transition effects when an element comes into the viewport, etc.
See the examples in the examples directory for more clarity.
When tolerance is 0 or undefined it is actually equal to tolerance: $(viewport).height() and not 0.
This makes it easier for developers to have the whole viewport available to them as a valid viewport.
This returns all the elements that are in the viewport while taking into account the tolerance criterion.
Since it returns the element(s) it can thus be chained with other jQuery methods.
When a viewport is specified, it uses that to calculate if the element is in that viewport or not.
When a viewport is not specified, it defaults to window as the viewport.
The viewport is a valid DOM element or jQuery wrapped DOM element, NOT a selector string.
tolerance defaults to 0
viewport defaults to window
Chrome, Firefox 3.5+, IE9+, Safari 5+, Opera 10.5+
:in-viewport selector does support chaining.
3.0.3
Use jQuery.expr.pseudos when found since jQuery.expr[':'] is deprecated
3.0.2
Support new rollup properties and get rid of removed rollups properties (moduleId, moduleName, etc)
3.0.1
Fix jQuery no conflict mode issue (#39)
3.0.0
Remove the deprecated $(el).do method
Remove support for browsers < { IE9, Safari 5, Opera 10.5, Firefox 3.5 }
Add support for modules and bundlers. You can now import 'is-in-viewport'/require('is-in-viewport') in your project (yay!)
Add properly functioning sourcemaps for easier debugging
2.4.2
Remove postInstall script which was breaking builds
2.4.1
Undo 2.4.0 as is-in-viewport already exists on bower and isn't owned by me
2.4.0
Update bower.json to comply with new validations
Rename package on bower to match with that on npm i.e., is-in-viewport
2.3.1
Remove unnecessary boolean coercion
2.3.0
Re-exposed isInViewport with saner semantics. You can now pass options as JS objects to isInViewport and hence can now do things like:
$viewport
  .find(<selector for elements>)
  .isInViewport({ tolerance: 100, viewport: $viewport }) // <- passing the viewport jQuery object in directly
  .css(color: 'red');
Deprecated do in favour of run
When available, isInViewport now uses Sizzle.selectors.createPseudo
2.2.5
Updated readme to point to new demo. Mostly a bump for npm to pickup the new readme.
2.2.4
Pulled #15(fixes horizontal viewport check)
2.2.3
Allow use as CommonJS -> #19
Fixed gruntfile. It now generates proper filenames during build.
2.2.2
Published to npm
Updated install instructions to include npm
2.2.1
Pulled in a few bugfixes
Fixed ie8 bugs
2.2.0
Aliased the .do method with .run since do is a reserved word and errors out when used as a property in IE. To be on the safer side, use .run to chain any arbitrary function or an array of functions.
2.1.0
Added a .do method that lets the user chain any arbitrary function or an array of functions. Example:
2.0.0
Added support for negative tolerance values that are now relative to the viewport height
Added support for custom viewport selector (see Advanced usage)
Added support for checking if an element is in viewport both horizontally and vertically. (checks both now)
Removed support for the old usage syntax in favour of the :in-viewport selector i.e.,
Removed the debug option because, lets be honest, no one really used it.
Removed the weird code that handled end of page condition in the core. It's the user's
prerogative to do what he/she wants when their page is scrolled to end of page.
1.1.1
Added bower support.
1.1.0
Added support for :in-viewport selector as per joeframbach's suggestion."
2031,"jquery,jquery","jQuery JavaScript Library. In the spirit of open source software development, jQuery always encourages community code contribution. To help you get started and before you jump into writing code, be sure to read these important contribution guidelines thoroughly:
GitHub issues/PRs are usually referenced via gh-NUMBER, where NUMBER is the numerical ID of the issue/PR. You can find such an issue/PR under https://github.com/jquery/jquery/issues/NUMBER.
jQuery has used a different bug tracker - based on Trac - in the past, available under bugs.jquery.com. It is being kept in read only mode so that referring to past discussions is possible. When jQuery source references one of those issues, it uses the pattern trac-NUMBER, where NUMBER is the numerical ID of the issue. You can find such an issue under https://bugs.jquery.com/ticket/NUMBER.
Browser support
jQuery also supports Node, browser extensions, and other non-browser environments.
To build jQuery, you need to have the latest Node.js/npm and git 1.7 or later. Earlier versions might work, but are not supported.
For Windows, you have to download and install git and Node.js.
macOS users should install Homebrew. Once Homebrew is installed, run brew install git to install git,
and brew install node to install Node.js.
Linux/BSD users should use their appropriate package managers to install git and Node.js, or build from source
if you swing that way. Easy-peasy.
First, clone the jQuery git repo.
Then, enter the jquery directory and run the build script:
The built version of jQuery will be put in the dist/ subdirectory, along with the minified copy and associated map file.
If you want to create custom build or help with jQuery development, it would be better to install grunt command line interface as a global package:
Make sure you have grunt installed by testing:
Now by running the grunt command, in the jquery directory, you can build a full version of jQuery, just like with an npm run build command:
There are many other tasks available for jQuery Core:
Special builds can be created that exclude subsets of jQuery functionality.
This allows for smaller custom builds when the builder is certain that those parts of jQuery are not being used.
For example, an app that only used JSONP for $.ajax() and did not need to calculate offsets or positions of elements could exclude the offset and ajax/xhr modules.
Any module may be excluded except for core, and selector. To exclude a module, pass its path relative to the src folder (without the .js extension).
Some example modules that can be excluded are:
ajax: All AJAX functionality: $.ajax(), $.get(), $.post(), $.ajaxSetup(), .load(), transports, and ajax event shorthands such as .ajaxStart().
ajax/xhr: The XMLHTTPRequest AJAX transport only.
ajax/script: The &lt;script&gt; AJAX transport only; used to retrieve scripts.
ajax/jsonp: The JSONP AJAX transport only; depends on the ajax/script transport.
css: The .css() method. Also removes all modules depending on css (including effects, dimensions, and offset).
css/showHide:  Non-animated .show(), .hide() and .toggle(); can be excluded if you use classes or explicit .css() calls to set the display property. Also removes the effects module.
deprecated: Methods documented as deprecated but not yet removed.
dimensions: The .width() and .height() methods, including inner- and outer- variations.
effects: The .animate() method and its shorthands such as .slideUp() or .hide(""slow"").
event: The .on() and .off() methods and all event functionality.
event/trigger: The .trigger() and .triggerHandler() methods.
offset: The .offset(), .position(), .offsetParent(), .scrollLeft(), and .scrollTop() methods.
wrap: The .wrap(), .wrapAll(), .wrapInner(), and .unwrap() methods.
core/ready: Exclude the ready module if you place your scripts at the end of the body. Any ready callbacks bound with jQuery() will simply be called immediately. However, jQuery(document).ready() will not be a function and .on(""ready"", ...) or similar will not be triggered.
deferred: Exclude jQuery.Deferred. This also removes jQuery.Callbacks. Note that modules that depend on jQuery.Deferred(AJAX, effects, core/ready) will not be removed and will still expect jQuery.Deferred to be there. Include your own jQuery.Deferred implementation or exclude those modules as well (grunt custom:-deferred,-ajax,-effects,-core/ready).
exports/global: Exclude the attachment of global jQuery variables ($ and jQuery) to the window.
exports/amd: Exclude the AMD definition.
As a special case, you may also replace the full jQuery selector module by using a special flag grunt custom:-selector.
selector: The full jQuery selector engine. When this module is excluded, it is replaced by a rudimentary selector engine based on the browser's querySelectorAll method that does not support jQuery selector extensions or enhanced semantics. See the selector-native.js file for details.
Note: Excluding the full selector module will also exclude all jQuery selector extensions (such as effects/animatedSelector and css/hiddenVisibleSelectors).
The build process shows a message for each dependent module it excludes or includes.
As an option, you can set the module name for jQuery's AMD definition. By default, it is set to ""jquery"", which plays nicely with plugins and third-party libraries, but there may be cases where you'd like to change this. Simply set the ""amd"" option:
Or, to define anonymously, set the name to an empty string.
To create a custom build, first check out the version:
Where VERSION is the version you want to customize. Then, make sure all Node dependencies are installed:
Create the custom build using the grunt custom option, listing the modules to be excluded.
Exclude all ajax functionality:
Excluding css removes modules depending on CSS: effects, offset, dimensions.
Exclude a bunch of modules:
There is also a special alias to generate a build with the same configuration as the official jQuery Slim build is generated:
For questions or requests regarding custom builds, please start a thread on the Developing jQuery Core section of the forum. Due to the combinatorics and custom nature of these builds, they are not regularly tested in jQuery's unit test process.
Make sure you have the necessary dependencies:
Start grunt watch or npm start to auto-build jQuery as you work:
Run the unit tests with a local server that supports PHP. Ensure that you run the site from the root directory, not the ""test"" directory. No database is required. Pre-configured php local servers are available for Windows and Mac. Here are some options:
Windows: WAMP download
Mac: MAMP download
Linux: Setting up LAMP
To copy the built jQuery files from /dist to another directory:
With this example, the output files would be:
To add a permanent copy destination, create a file in dist/ called "".destination.json"". Inside the file, paste and customize the following:
Additionally, both methods can be combined.
As the source code is handled by the Git version control system, it's useful to know some features used.
If you want to purge your working directory back to the status of upstream, the following commands can be used (remember everything you've worked on is gone after these):
For feature/topic branches, you should always use the --rebase flag to git pull, or if you are usually handling many temporary ""to be in a github pull request"" branches, run the following to automate this:
(see man git-config for more information)
If you're getting merge conflicts when merging, instead of editing the conflicted files manually, you can use the feature
git mergetool. Even though the default tool xxdiff looks awful/old, it's rather useful.
The following are some commands that can be used there:
Ctrl + Alt + M - automerge as much as possible
b - jump to next merge conflict
s - change the order of the conflicted lines
u - undo a merge
left mouse button - mark a block to be the winner
middle mouse button - mark a line to be the winner
Ctrl + S - save
Ctrl + Q - quit
Note: QUnit's eventual addition of an argument to stop/start is ignored in this test suite so that start and stop can be passed as callbacks without worrying about their parameters.
Example:
Example:
Example:
Example:
Some tests may require a document other than the standard test fixture, and
these can be run in a separate iframe. The actual test code and assertions
remain in jQuery's main test files; only the minimal test fixture markup
and setup code should be placed in the iframe file.
This loads a page, constructing a url with fileName ""./data/"" + fileName.
The iframed page determines when the callback occurs in the test by
including the ""/test/data/iframeTest.js"" script and calling
startIframeTest( [ additional args ] ) when appropriate. Often this
will be after either document ready or window.onload fires.
The testCallback receives the QUnit assert object created by testIframe
for this test, followed by the global jQuery, window, and document from
the iframe. If the iframe code passes any arguments to startIframeTest,
they follow the document argument.
If you have any questions, please feel free to ask on the
Developing jQuery Core forum or in #jquery on libera."
2032,"select2,select2","Select2 is a jQuery based replacement for select boxes. It supports searching, remote data sets, and infinite scrolling of results.. Select2 is a jQuery-based replacement for select boxes. It supports searching,
remote data sets, and pagination of results.
To get started, check out examples and documentation at
https://select2.org/
Enhancing native selects with search.
Enhancing native selects with a better multi-select interface.
Loading data from JavaScript: easily load items via AJAX and have them
searchable.
Nesting optgroups: native selects only support one level of nesting. Select2
does not have this restriction.
Tagging: ability to add new items on the fly.
Working with large, remote datasets: ability to partially load a dataset based
on the search term.
Paging of large datasets: easy support for loading more pages when the results
are scrolled to the end.
Templating: support for custom rendering of results and selections.
IE 8+
Chrome 8+
Firefox 10+
Safari 3+
Opera 10.6+
You can source Select2 directly from a CDN like jsDelivr or
cdnjs, download it from this GitHub repo, or use one of
the integrations below.
Third party developers have created plugins for platforms which allow Select2 to be integrated more natively and quickly. For many platforms, additional plugins are not required because Select2 acts as a standard &lt;select&gt; box.
Plugins
Backdrop CMS - backdrop-select2
Django
django-autocomplete-light
django-easy-select2
django-select2
Drupal - drupal-select2
Meteor - meteor-select2
Ruby on Rails - select2-rails
Wicket - wicketstuff-select2
Yii 2 - yii2-widget-select2
Angularjs - mdr-angular-select2
Themes
Bootstrap 3 - select2-bootstrap-theme
Bootstrap 4 - select2-bootstrap4-theme
Bootstrap 5 - select2-bootstrap-5-theme
Flat UI - select2-flat-theme
Missing an integration? Modify this README and make a pull request back here to Select2 on GitHub.
Select2 supports multiple languages by simply including the right language JS
file (dist/js/i18n/it.js, dist/js/i18n/nl.js, etc.) after
dist/js/select2.js.
Missing a language? Just copy src/js/select2/i18n/en.js, translate it, and
make a pull request back to Select2 here on GitHub.
The documentation for Select2 is available
online at the documentation website and is located within the
docs directory of this repository.
You can find out about the different ways to get in touch with the Select2
community at the Select2 community page.
The license is available within the repository in the LICENSE file.
This project exists thanks to all the people who contribute. [Contribute].

Become a financial contributor and help us sustain our community. [Contribute]

Support this project with your organization. Your logo will show up here with a link to your website. [Contribute]









"
2033,"jquery,jquery-ui","The official jQuery user interface library.. Note: jQuery UI is in maintenance-only mode. Please read the project status blog post for more information.
jQuery UI is a curated set of user interface interactions, effects, widgets, and themes built on top of jQuery. Whether you're building highly interactive web applications, or you just need to add a date picker to a form control, jQuery UI is the perfect choice.
If you want to use jQuery UI, go to jqueryui.com to get started, jqueryui.com/demos/ for demos, api.jqueryui.com for API documentation, or the Using jQuery UI Forum for discussions and questions.
If you want to report a bug/issue, please visit the GitHub issues page. Archive of older bug reports is kept for historical reasons in read-only mode at bugs.jqueryui.com. If any of them still matters to you, please open a bug about it on GitHub, linking to the legacy bugs.jqueryui.com issue for context.
If you are interested in helping develop jQuery UI, you are in the right place.
To discuss development with team members and the community, visit the Developing jQuery UI Forum or #jqueryui-dev on irc.freenode.net.
If you want to help and provide a patch for a bugfix or new feature, please take
a few minutes and look at our Getting Involved guide.
In particular check out the Coding standards
and Commit Message Style Guide.
In general, fork the project, create a branch for a specific change and send a
pull request for that branch. Don't mix unrelated changes. You can use the commit
message as the description for the pull request.
For more information, see the contributing page.
Run the unit tests manually with appropriate browsers and any local web server. See our environment setup and information on running tests.
You can also run the unit tests inside phantomjs by setting up your environment."
2034,"jquery-validation,jquery-validation","jQuery Validation Plugin library sources. The jQuery Validation Plugin provides drop-in validation for your existing forms, while making all kinds of customizations to fit your application really easy.
Prebuilt files can be downloaded from https://jqueryvalidation.org/
The unreleased development files can be obtained by:
Downloading or Forking this repository
Run grunt to create the built files in the ""dist"" directory
Include jQuery and the plugin on a page. Then select a form to validate and call the validate method.
Alternatively include jQuery and the plugin via requirejs in your module.
For more information on how to setup a rules and customizations, check the documentation.
See the Contributing Guidelines for details.
IMPORTANT NOTE ABOUT EMAIL VALIDATION. As of version 1.12.0 this plugin is using the same regular expression that the HTML5 specification suggests for browsers to use. We will follow their lead and use the same check. If you think the specification is wrong, please report the issue to them. If you have different requirements, consider using a custom method.
In case you need to adjust the built-in validation regular expression patterns, please follow the documentation.
IMPORTANT NOTE ABOUT REQUIRED METHOD. As of version 1.14.0 this plugin stops trimming white spaces from the value of the attached element. If you want to achieve the same result, you can use the normalizer that can be used to transform the value of an element before validation. This feature was available since v1.15.0. In other words, you can do something like this:
For an invalid field, the default output for the jQuery Validation Plugin is an error message in a &lt;label&gt; element. This results in two &lt;label&gt; elements pointing to a single input field using the for attribute. While this is valid HTML, it has inconsistent support across screen readers.
For greater screen reader support in your form's validation, use the errorElement parameter in the validate() method. This option outputs the error in an element of your choice and automatically adds ARIA attributes to the HTML that help with screen reader support.
aria-describedby is added to the input field and it is programmatically tied to the error element chosen in the errorElement parameter.
Copyright &copy; J√∂rn Zaefferer
Licensed under the MIT license."
2035,"snapappointments,bootstrap-select",":rocket: The jQuery plugin that brings select elements into the 21st century with intuitive multiselection, searching, and much more.. bootstrap-select


    <strong>The jQuery plugin that brings select elements into the 21st century with intuitive multiselection, searching, and much more. Now with Bootstrap 5 support.</strong>



    
        
    
    
        
    
    
        
    
    
        
    
    
        
    
    
    
        
    



    


You can view a live demo and some examples of how to use the various options here.
Bootstrap-select requires jQuery v1.9.1+, Bootstrap‚Äôs dropdown.js component, and Bootstrap's CSS. If you're not already using Bootstrap in your project, a precompiled version of the Bootstrap v3.4.1 minimum requirements can be downloaded here. If using bootstrap-select with Bootstrap v4+, you'll also need Popper.js. For all of Bootstrap v4's requirements, see Getting started. A precompiled version of the requirements will be made available in an upcoming release of bootstrap-select.
Several quick start options are available:
Clone the repo: git clone https://github.com/snapappointments/bootstrap-select.git
Install with npm: npm install bootstrap-select
Install with yarn: yarn add bootstrap-select
Install with Composer: composer require snapappointments/bootstrap-select
Install with NuGet: Install-Package bootstrap-select
Install with Bower: bower install bootstrap-select
Install via CDN (cdnjs, jsDelivr or PageCDN):
The CDN is updated after the release is made public, which means that there is a delay between the publishing of a release and its availability on the CDN.
Bootstrap 4 only works with bootstrap-select v1.13.0+. By default, bootstrap-select automatically detects the version of Bootstrap being used. However, there are some instances where the version detection won't work. See the documentation for more information.
Add the selectpicker class to your select elements to auto-initialize bootstrap-select.
or
If calling bootstrap-select via JavaScript, you will need to wrap your code in a .ready() block or place it at the bottom of the page (after the last instance of bootstrap-select).
Check out the documentation for further information.
Anyone and everyone is welcome to contribute. Please take a moment to
review the guidelines for contributing. Make sure you're using the latest version of bootstrap-select before submitting an issue.
Bootstrap-select's documentation, included in this repo in the root directory, is built with MkDocs and hosted at https://developer.snapappointments.com/bootstrap-select. The documentation may also be run locally.
Copyright (C) 2012-2018 SnapAppointments, LLC
Licensed under the MIT license."
2036,"fengyuanchen,cropper","‚ö†Ô∏è [Deprecated] No longer maintained, please use https://github.com/fengyuanchen/jquery-cropper. A simple jQuery image cropping plugin. As of v4.0.0, the core code of Cropper is replaced with Cropper.js.
Cropper.js - JavaScript image cropper (recommended)
jquery-cropper - A jQuery plugin wrapper for Cropper.js (recommended for jQuery users to use this instead of Cropper)
Include files:
Initialize with $.fn.cropper method.
See the available options of Cropper.js.
See the available methods of Cropper.js.
See the available events of Cropper.js.
If you have to use other plugin with the same namespace, just call the $.fn.cropper.noConflict method to revert to it.
It is the same as the browser support of Cropper.js. As a jQuery plugin, you also need to see the jQuery Browser Support.
Please read through our contributing guidelines.
Maintained under the Semantic Versioning guidelines.
MIT ¬© Chen Fengyuan"
2037,"nicolafranchini,VenoBox","Responsive jQuery lightbox plugin. Responsive modal window javaScript plugin, touch swipe gallery
Just another responsive lightbox plugin, suitable for images, inline contents, iFrames, videos.
The big difference compared to many others plugins is that VenoBox calculates the max width of the image displayed and preserves its height if is taller than the window (so in small devices you can scroll down the content, avoiding vertical microscopic resized images).
Demo: https://veno.es/venobox/
This package can be installed with:
npm: npm install venobox
composer: composer require nicolafranchini/venobox
Download the latest release
or get the sources from jsDelivr
Put the required stylesheet into your &lt;head&gt; to load our CSS:
Include the script near the end of your pages, right before the closing &lt;/body&gt; tag:
Insert one or more links with a custom class
Initialize the plugin and your VenoBox is ready for all the selected links.
The full documentation is available at https://veno.es/venobox/
License: released under the MIT License"
2112,"taylorbryant,jekyll-starter-tailwind","Jekyll starter styled with Tailwind CSS. A starter kit for using Tailwind with Jekyll that includes:
A barebones Jekyll starter theme
A Gulpfile that does the following:
Compiles Tailwind
Strips out unused CSS using Tailwind's purge option
Runs Autoprefixer
Minifies your CSS
Compiles Jekyll
Runs Browsersync for local development
""Tailwind is a utility-first CSS framework for rapidly building custom user interfaces.""
‚ÄìTailwind
""Jekyll is a simple, blog-aware, static site generator perfect for personal, project, or organization sites. Think of it like a file-based CMS, without all the complexity. Jekyll takes your content, renders Markdown and Liquid templates, and spits out a complete, static website ready to be served by Apache, Nginx or another web server. Jekyll is the engine behind GitHub Pages, which you can use to host sites right from your GitHub repositories.""
‚ÄìJekyll
bundle install to install Ruby gems
npm ci to install npm packages listed in package-lock.json
npm run start or npm run dev to compile the site with development settings and run BrowserSync
npm run build:dev to compile the site with development settings
npm run build:production or npm run build to compile the site for production

Note: By default, Netlify uses jekyll build as the build command. The included netlify.toml file will override it to use npm run build.
Enjoying Jekyll Starter Tailwind and want to help? You can:
Create an issue with some constructive criticism
Submit a pull request with some improvements to the project
Thanks goes to these wonderful people (emoji key):
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><sub><b>Roberto Segura</b></sub>üíª</td>
    <td align=""center""><sub><b>benmp</b></sub>üíª</td>
    <td align=""center""><sub><b>Joey Defourneaux</b></sub>üíª</td>
    <td align=""center""><sub><b>Hrvoje ≈†imiƒá</b></sub>üíª</td>
    <td align=""center""><sub><b>Alejandro Figueroa</b></sub>üíª</td>
  </tr>
</table>

<!-- markdownlint-enable -->
<!-- prettier-ignore-end -->
<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the all-contributors specification. Contributions of any kind welcome!"
2113,"warengonzaga,wifi-passview","An open source batch script based WiFi Passview for Windows!. WiFi Passview is an open-source batch script-based program that can recover your WiFi Password easily in seconds. This is for Windows OS only. Basically, this scripted program has the same function as other passview software such as webpassview and mailpassview.
Disclaimer: WiFi Passview is NOT designed for malicious use! Please use this program responsibly!
The project has been featured in some popular cybersecurity websites and Facebook Pages such as KitPloit.com (v2)/KitPloit.com (v4), Hakin9.org, Pentest Magazine, Malware Devil, and National Cyber Security Services.
Here's the screeshot of the program, click it to see it in action. Don't forget to like, share, and subscribe to my channel!

This simple tool offers you the following features...
Extract all available WiFi passwords stored in the target machine and can be done in just a seconds.
Extract password from specific target SSID.
Save extracted passwords.
Additional options.
No manual reading of Key Content, the tool will do that for you!
No need admin rights to run the program.
Standalone batch program.
Supports all languages.
Generate WLAN report. (requires admin privileges)
Upload collected passwords to the cloud. (powered by file.io api)
Customizable builds.
Download the repository and look for ""wifi-passview-vX.X.X.bat"" file and run it as ordinary *.bat file (no need to run it as administrator). All you have to do is to follow the on-screen instructions.
Check out the official and complete documentation here.

Contributions are welcome, create a pull request to this repo and I will review your code. Please consider to submit your pull request to the dev branch. Thank you!
Read the project's contributing guide for more info.
For any questions, suggestions, ideas, or simply you want to share your experience in using this project, feel free to share and discuss it to the community!
Please report any issues and bugs by creating a new issue here, also make sure you're reporting an issue that doesn't exist. Any help to improve the project would be appreciated. Thanks! üôè‚ú®
Love what I do? Send me some love or coffee!? üíñ‚òï
Can't send some love or coffees? üò• Nominate me for a GitHub Star instead!
Your support will help me to continue working on open-source projects like this. üôèüòá
Read the project's code of conduct.
WiFi Passview is licensed under GNU General Public License v3.0.
WiFi Passview is created by Waren Gonzaga, with the help of awesome contributors.

üíªüíñ‚òï by Waren Gonzaga | YHWH üôè"
2114,"mismith0227,hugo_theme_pickles","Modern, Simple and beautiful Hugo theme. Pickles is a modern, simple and beautiful Hugo theme.

Modern, Simple and beautiful design
Medium's Image ZoomÔºàzooming)
Social linksÔºàTwitter,Facebook,Instagram,Google+,GitHub,GitLab,npm,Codepen,Dribbble,500px,Flickr,Pinterest,Tumblr,Vimeo,YouTube,LinkedinÔºâ
Support for Related Content
Support for tags
Analytics with Google Analytics
Responsive design
SVG Sprite
There is a custom shortcode for Image Zoom. You can use it like so:
gulp
webpack
Sass
Babel
SVG Sprite
Standard
In your Hugo site directory, run:
Or download it from the release branch:
Use Hugo's -t hugo_theme_pickles or --theme=hugo_theme_pickles option with hugo commands. For example:
You may specify the following options in config.toml of your site to make use of
this theme's features.
For getting started with Pickles, copy the config.toml file from the exampleSite directory inside Pickles‚Äôs repository to your site repository.
Now, you can start editing this file and add your own information!
To hide the date in a post, set the hideDate parameter in the front matter:
You can use hideWordCount and headReadingTime to hide word count and reading time on both, the posts and the post list.
Pull requests, bug fixes and new features are welcome!
Please create feature branches from develop and submit a PR for any change.
Install Node modules
Run gulp. You don't need to install gulp globally.
Open sourced under the MIT license."
2115,"website-templates,portfolio_one-page-template","Free responsive one page portfolio template. Flat and responsive website template, designed and coded by Maxim Orlov.
Demo: http://website-templates.github.io/portfolio_one-page-template

Product mockup created with http://magicmockups.com/
Build sytem: Grunt or Gulp
Optionally:
This project has an .editorconfig file at the root. It describes indent style, trailing whitespaces etc. See more details here
If you haven't used Gulp before, be sure to check out the Getting Started guide, also check these recips
Before start you need to have installed npm , as well as gulp globally.
A few simple steps to start:
Install dependencies from package.json by running: npm install.
Run tasks from the list below and start devevelopment!
Edit general settings in dev/data/config.json See Site configuration section
This boilerplate uses Pug templates with external data configs.
Main settings can be found in dev/data/config.json file. And they're available for usage in templates with config.key-name
Here comes groups ofgulp tasks with some explanations
Remove placeholders from work directories.
Gulp: gulp cleanup
Remove gitkeep files
Dev task with static server.
Gulp: gulp dev
Bundle javascripts
Compile Sass stylesheets
Add vendor prefixes in css
Combine media queries in css files
Compile Pug templates
Sync helpers and other assets
Sync fonts
Sync images
Run BrowserSync static server with live reload using
Watch for changes and run dev task
Build task.
Gulp: gulp build
Minify images
Minify javascript files
Minify stylesheets
Minify html
Run BrowserSync static server
Regenerate and build project by running all tasks.
Gulp: gulp rebuild
Bundle javascripts
Compile Sass stylesheets
Add vendor prefixes in css
Combine media queries in css files
Compile Pug templates
Sync helpers and other assets
Sync fonts
Sync images
Minify images
Minify javascript files
Minify stylesheets
Minify html
Run server without watching for changes.
Gulp: gulp server
Run BrowserSync static server
This project uses BrowserSync as static server with enabled and configured live reload option.
MIT"
2116,"luangjokaj,gopablo","üê∫ Create optimized static websites.. Create optimized static websites.
For full documentation, visit https://www.gopablo.co.
For help, discussion about best practices, or any other conversation that would benefit from being searchable:
For casual chit-chat with others using GoPablo:
Join the Discord Server"
2117,"jr-cologne,gulp-starter-kit","A simple Gulp 4 Starter Kit for modern web development.. A simple Gulp 4 Starter Kit for modern web development.
This Gulp Starter Kit provides a simple way of setting up a modern web development environment.
Here is a list of the current features:
Copy HTML files from src to dist directory
Compile Pug template files (.pug) from src to HTML files and put them inside dist directory
Compile CSS preprocessor code (Sass/SCSS, Less, Stylus) to CSS
Autoprefix and minify CSS and put it inside dist directory
Compile ES6+ to ES5, concatenate JS files and minify code
Compress and copy images into dist directory
Copy dependencies specified in package.json from src/node_modules directory into node_modules folder inside dist directory
Import dependencies into your application with ES6 modules
Spin up local dev server at http://localhost:3000 including auto-reloading
This should be installed on your computer in order to get up and running:
Node.js (Required node version is >= 10.0)
These npm packages are used in the Gulp Starter Kit:
For more information, take a look at the package.json file or visit the linked npm package sites.
In order to get started, make sure you are meeting all requirements listed above.
Then, just go ahead and download the Gulp Starter Kit. For this, you can choose between the following options:
The recommended way of downloading the Gulp Starter Kit uses the command npm init and the create-gulp-starter-kit npm package as the initializer.
For this, just follow these steps:
Execute npm init @jr-cologne/gulp-starter-kit your-project-name. This creates a folder called your-project-name (change that to your project name) at the current location where your terminal / command prompt is pointing to. Moreover, this initializes your project and installs all dependencies.
Change your working directory to your project folder by executing cd your-project-name.
Spin up your web development environment with the command npm start.
Start coding!
In case you are lazy, just use this command:
The other way of downloading the Gulp Starter Kit is by cloning this Git repository. Before executing any commands, make sure you have Git installed on your computer.
Then, follow these instructions:
Execute git clone https://github.com/jr-cologne/gulp-starter-kit.git your-project-name. This creates a folder called your-project-name (change that to your project name) at the current location where your terminal / command prompt is pointing to.
Change your working directory to your project folder by executing cd your-project-name.
Install all dependencies by executing npm install.
Spin up your web development environment with the command npm start.
Start coding!
If you are lazy, just do everything at once:
You can install the Gulp Starter Kit into the current working directory by appending --current-dir to the end of the npm init command.
Example:
The Gulp Starter Kit offers two different build scripts:
npm run build: This is used to build all files and run all tasks without serving a development server and watching for changes.
npm start: This is the normal development script used to build all files and run all tasks, but also to serve a development server and watch for changes.
In case you prefer to use one of the other supported CSS preprocessors over Sass, you can simply create a new directory src/assets/css-processor-name which is where all your CSS preprocessor files have to be placed.
After you have moved all your code to the new folder, just make sure to delete the sass directory and everything should work as expected.
Here's a list of the currently supported CSS preprocessors and the corresponding directory names:
Sass (src/assets/sass)
SCSS (src/assets/scss)
Less (src/assets/less)
Stylus (src/assets/stylus)
The recommended way of specifying which browsers should be targeted by the CSS autoprefixer is to add a browserslist key to package.json:
You can find more information on that topic in the README file of the employed PostCSS plugin.
The following types of images are currently supported:
PNG
JPG / JPEG
GIF
SVG
ICO (not compressed)
You don't need to specify your dependencies anywhere else than in your package.json file.
Just install your dependencies via npm and all your dependencies get automatically loaded and copied into the dist folder.
ES6 modules are supported by this Gulp Starter Kit.
Just install your dependencies and import them like so:
Feel free to contribute to this project!
Any kinds of contributions are highly appreciated!
Please make sure to follow the process below in order to contribute to this project:
Open an Issue to describe what you are about to do. You should make sure to get feedback as early as possile to ensure your work does not end up as waisted time.
Fork this repository by clicking the fork button at the top of this page.
Clone your newly created fork (git clone https://github.com/your-github-username/gulp-starter-kit.git).
Make your changes and commit them to your forked repository.
Once finished, open a detailed Pull Request describing your changes.
Wait for your PR to be accepted and merged.
This project uses the rules of semantic versioning. For more information, visit semver.org.
This project is licensed under the MIT License."
2118,"uswds,uswds-site","USWDS website and documentation. This repo includes code and documentation for the U.S. Web Design System website. For information on the USWDS components and codebase, please visit our uswds Github repo.
Note that this README includes steps to pull the latest version of USWDS into your local instance of the documentation.
The U.S. Web Design System documentation is built using Jekyll for the file framework, gulp for task management, and the node module for USWDS.
Recommended before install:
Ruby Version Manager - RVM Installation guides
Node Version Manager - NVM Installation guides
You will need to have the following installed on your machine before following the commands below:
Ruby v3.1.2 (see .ruby-version or .tool-versions), Installation guides
Node v16.18.0 (see .nvmrc or .tool-versions), Installation guides
Bundler v2.2.0 (see .bundler-version) Installation guides
Chrome v59 or higher (v60 if on Windows)
Python v2.7* (For node-gyp dependency)
If you're running into node-gyp issues on npm install you'll need to install python v2.7, which is the recommended version as of node-gyp@3.8.0. Once installed you can reference it via npm config set python /usr/bin/python2.7 or wherever you have installed. You can find that with whereis python command.
Ubuntu 20.04 users might run into: bundler: failed to load command: jekyll (/usr/share/rvm/gems/ruby-3.0.2/bin/jekyll). Install ffi with the following flag to work around it gem install ffi -- --disable-system-libffi.
Some parts of the documentation are built using gulp.
To work on the site, switch to your local copy of the repository in terminal then run the following commands to install project dependencies:
Now that all of your dependencies are installed, you can run your local server by running the following command:
Go to 127.0.0.1:4000 in your browser ‚Äî you should be viewing a local instance of designsystem.digital.gov.
Here are a few other utility commands you may find useful:
npm run clean: Cleans out copied-over dependency assets.
npm run lint: Runs eslint and sass-lint against JavaScript and Sass files.
npm test: Runs all tests and linters.
npm run watch: Runs a series of commands that watches for any changes in both USWDS node module and the root level asset folders in this repo.
npm start -- --incremental or npm run serve: Runs your local server with incremental regeneration enabled to greatly improve build time. Use instead of npm start.
Sometimes you will want to use the latest version of the uswds repo. Follow these steps to do so:
Clone the latest version of the uswds repo.
Run npm install to install the dependencies required for the package in the uswds directory.
Run npm run build to create the built version of USWDS in the uswds directory.
Run npm link in the root level of the uswds directory on your local machine.
Run npm link uswds in the root level of the uswds-site directory on your local machine.
Run npm start in the uswds directory, and make a note of the Local URL that is being served.
In another terminal window, set the LIBRARY_BASE_URL env var to the running instance of uswds. In your terminal window in the uswds-site directory, enter export LIBRARY_BASE_URL=""http://127.0.0.1:6006"" (or the Local URL noted above).
In the uswds-site window, run npm run serve in the uswds-site directory to start the Jekyll server.
Run npm run watch in the uswds-site directory to have changes to that repo automatically built and compiled. Note: uswds-site will not automatically rebuild when there are changes in uswds, you'll need to trigger a site rebuild manually to reflect changes in the uswds repo.
You are now linked and using the local version of USWDS. To unlink this version, type npm unlink uswds from the root level of the uswds directory.
This documentation site showcases USWDS components by pulling in pre-built HTML from the USWDS html-templates directory. This HTML is pulled in via a custom library_component Jekyll tag, which takes the full name of the component as a parameter.
This site is deployed on Federalist, which automatically builds the public site whenever commits are pushed to main. Federalist also builds public previews for each branch pushed to GitHub.
‚ö†Ô∏è When generating new sections, sometimes they fail to build on Federalist. You can clear the cache by running a simple bundle update, which will trigger a fresh build.
To update the version of USWDS being used, change the version that
package.json specifies in its dependencies section.
We currently pull USWDS via git rather than npm, as it allows us to
use any tag or commit during development. To install a specific commit,
you can use e.g.:
Alternatively, to use a specific version tag, use e.g.:
This version number or commit hash is automatically parsed when the site
is built and used for display on the site (see _plugins/uswds_version.rb
for details). Therefore, be sure to use an actual version tag on all
main branch commits--otherwise a commit hash will show up as the
version on the production site, which would be confusing.
See the _posts directory for instructions on adding updates.
Some of the content on the documentation site is dynamically fetched from
GitHub. If you want to ensure that its API won't rate-limit you, you
may want to
create an access token
and assign it to your GITHUB_ACCESS_TOKEN environment variable.
The dynamic content is stored in the .jekyll_get_cache directory and
won't be re-fetched once it's cached there. However, this means that your
data can get stale over time, so if you want to ensure that your site
is using the very latest data, you'll want to clear the cache by running:
Please read through our contributing guidelines. These guidelines are directions for opening issues and submitting pull requests, and they also detail the coding and design standards we follow."
2119,"mjmlio,gulp-mjml","Add Gulp to your MJML workflow!. Add MJML to your gulp workflow!
With an MJML file named test.mjml, render your emails to an html folder:
If you have custom components linked to your own mjmlEngine, you can pass it to the gulp task so it uses your engine to render the html:
If you'd like to get validation errors and , use strict and a custom error handler function. Note that using strict will not render the file in case of error:
If you want to override the default file extension that is output use fileExt"
2120,"NewbranLTD,gulp-server-io","Standalone / gulp (stream) / delivery server setup with Proxy options remote debugger and more. Create a static server, live reload and a socket.io debugger for your SPA development with gulp
Plus a standalone server with Express / json-server and http proxy for rapid deployment
This is a complete rewritten version of the gulp-webserver-io;
with many features added, and improvements.
The goal is to create an one stop shop solution during development, as well as simple, and quick SPA deployment tool.
See CHANGELOG.md for complete list of different between the two version.
Using yarn
There are several ways to use this package. First, during development and, use it with gulp:
<span style=""color:red"">1.5.0 final version will remove the gulp-server-io/gulp and gulp-server-io/export, because the new npm
install dependencies in a flat structure. So if this package use it then it's available anyway.</span>
This is enable by default. To turn it off, pass debugger: false to the configuration.
Please note this will not be enable in the stand alone server version. It's only available for the gulp development version.
V.1.1.0 integrate with stacktrace.js to produce a much nicer output in the console.
V.1.4.0 add onunhandledrejection in the client to catch those unresolved promises.
The main use is when you need to run your app on your mobile, that allows you to quickly see if there is any error. Also the same method is expose globally, you can do something like this:
You an pass just a full string to the method. Or you can pass an object which produce nicer output:
from - you defined where that coming from
msg - you can pass error object, array or whatever
color - the color available in chalk
You can also use the stacktrace.js which is available globally via the StackTrace object.
Please remember to take this down once you are production ready, because the debugger and stacktrace.js only inject into the HTML dynamically during development.
Its very important that you pass the config as an array
Please note when you call the /api resource, it will translate to
http://otherhost.com/api.
For further configuration options, please check http-proxy-middleware
If you are using the deployment option. For example, you create a Restify service running on the localhost at port 8989.
Please, note if in your code are all using relative path, it will work out of the box when you deploy.
For example, during development your host is http://localhost:8000 and, your production domain name is http://example.com; hard coding the domain name in your AJAX call is not recommended. This is why we include the proxy server. Another upside is during your development, you don't have to do any setup for the CORS issue.
Create an api.json according to json-server
In your UI code, you can fetch data from your fake rest endpoint:
Once you use the mock option, all your proxies definition will be
overwritten by the mock JSON path.
NEW @ 1.4.0 I have added a watcher to your JSON file, so whenever you edit your mock JSON data file,
the mock server will automatically restart. 1.4.0-beta.4 has an error regarding the non-directory option, it's been fixed in the later release
This is a new option in V1.4.0.
This is a separate watcher module expose to allow you to watch your server side files changed (or anything you want to watch).
Internally this is execute in a different process. the minimum config is provide the dir and callback option. Where dir is
where the path to your directory you want to watch. And callback is what you want to do when files change, it will also pass you
an array of the files that changed.
You can also use it as a cli tool if you install this globally. Please note we switch to meow instead of yargs from 1.3 so the option will be different.
This will quickly serve up the folder you point to and use gulp as engine. So you get all the default setup just like you did with gulpfile.js. You can also pass multiple folders
There are several options you can pass as well
host (h) default localhost, if you need to broadcast then use 0.0.0.0
port (p) default 8000, change it to the port you need
config (c) default undefined, this allow you to point to an JSON file with the same configuration parameter available for the gulp-server-io
If you need to see all the options an examples
If you need more option then you should set it up as a regular gulpfile.js
By default using this standalone server will disable the following:
open: false
reload: false
debugger: false
Unless you pass development:true as option.
More elaborate setup:
Please see wiki for more information about all the available options.
You can combine with our generator-nodex to create a nginx and systemd files.
MIT ¬© NEWBRAN.CH &amp; to1source"
2121,"henrikhb,bootstrap-4-boilerplate","Bootstrap 4.3.1 boilerplate with Browsersync, Sass and Gulp.js. A Bootstrap v4.3.1 boiler plate with Sass, concatenation, minification, autoprefixer, Browsersync, hot reloading and sourcemaps all runned by Gulp.




This project requires you have nodejs with npm installed.
This project requires you have a global installation of gulp.
gulp serve
The gulp serve command starts a local Browsersync server that serves your files in the browser.
It reloads the current page when changing HTML, PHP, Sass and JS files.
The output of all Sass files go to main.css
All JS files are concatenated into main.js
You can access the development server with other devices on the same network. Go to the ""External"" address specified by Browsersync (see the terminal) in the web browser of your device.
gulp (build)
The default gulp command is set to creating a ""dist"" directory with a production version of the project, ready to be deployed.
It minifies and renames JS/CSS assets as well as cleaning the old ""dist"" directory. CSS is autoprefixed for the latest two browser versions.
gulp concatScripts
The gulp concatScripts command combines the specified JS resources into main.js
You can add new JS files to this command on line 16 in gulpfile.js
You might want to run concatScripts once separately after adding new JS files.
You can overwrite specific bootstrap sass variables by uncommenting lines in assets/css/1-frameworks/bootstrap/bootstrap-user-variables.scss
If you need a server with PHP support you can use the project with MAMP Pro or similar.
Create a new host in the hosts panel of MAMP Pro and choose the project folder as the document root.
Enable Symlinks settings in the ""Extended"" tab of the host configuration.
On line 82 in gulpfile.js change the browserSync.init function to the following:
Start the MAMP services and run ""gulp serve"" as before."
2197,"neovim,neovim","Vim-fork focused on extensibility and usability. 
  

  Documentation |
  Chat








Neovim is a project that seeks to aggressively refactor Vim in order to:
Simplify maintenance and encourage contributions
Split the work between multiple developers
Enable advanced UIs without modifications to the core
Maximize extensibility
See the Introduction wiki page and Roadmap
for more information.
Modern GUIs
API access
from any language including C/C++, C#, Clojure, D, Elixir, Go, Haskell, Java/Kotlin,
JavaScript/Node.js, Julia, Lisp, Lua, Perl, Python, Racket, Ruby, Rust
Embedded, scriptable terminal emulator
Asynchronous job control
Shared data (shada) among multiple editor instances
XDG base directories support
Compatible with most Vim plugins, including Ruby and Python plugins
See :help nvim-features for the full list, and :help news for noteworthy changes in the latest version!
Pre-built packages for Windows, macOS, and Linux are found on the
Releases page.
Managed packages are in Homebrew, Debian, Ubuntu, Fedora, Arch Linux, Void Linux, Gentoo, and more!
See the Building Neovim wiki page and supported platforms for details.
The build is CMake-based, but a Makefile is provided as a convenience.
After installing the dependencies, run the following command.
To install to a non-default location:
CMake hints for inspecting the build:
cmake --build build --target help lists all build targets.
build/CMakeCache.txt (or cmake -LAH build/) contains the resolved values of all CMake variables.
build/compile_commands.json shows the full compiler invocations for each translation unit.
See :help nvim-from-vim for instructions.
Neovim contributions since b17d96 are licensed under the
Apache 2.0 license, except for contributions copied from Vim (identified by the
vim-patch token). See LICENSE for details.
<!-- vim: set tw=80: -->"
2198,"hoppscotch,hoppscotch","üëΩ Open source API development ecosystem - https://hoppscotch.io. 
  
    
  
  
  
    
      <b>
        Hoppscotch
      </b>
    
  
  
    <b>
      Open source API development ecosystem
    </b>
  
  

[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen?logo=github)](CODE_OF_CONDUCT.md) [![Website](https://img.shields.io/website?url=https%3A%2F%2Fhoppscotch.io&logo=hoppscotch)](https://hoppscotch.io) [![Tests](https://github.com/hoppscotch/hoppscotch/actions/workflows/tests.yml/badge.svg)](https://github.com/hoppscotch/hoppscotch/actions) [![Tweet](https://img.shields.io/twitter/url?url=https%3A%2F%2Fhoppscotch.io%2F)](https://twitter.com/share?text=%F0%9F%91%BD%20Hoppscotch%20%E2%80%A2%20Open%20source%20API%20development%20ecosystem%20-%20Helps%20you%20create%20requests%20faster,%20saving%20precious%20time%20on%20development.&url=https://hoppscotch.io&hashtags=hoppscotch&via=hoppscotch_io)

  
  
    <sub>
      Built with ‚ù§Ô∏é by
      
        contributors
      
    </sub>
  
  
  
    
      
    
    
      
    
  


  
‚ù§Ô∏è Lightweight: Crafted with minimalistic UI design.
‚ö°Ô∏è Fast: Send requests and get/copy responses in real-time.
HTTP Methods
GET - Requests retrieve resource information
POST - The server creates a new entry in a database
PUT - Updates an existing resource
PATCH - Very similar to PUT but makes a partial update on a resource
DELETE - Deletes resource or related component
HEAD - Retrieve response headers identical to those of a GET request, but without the response body.
CONNECT - Establishes a tunnel to the server identified by the target resource
OPTIONS - Describe the communication options for the target resource
TRACE - Performs a message loop-back test along the path to the target resource
&lt;custom&gt; - Some APIs use custom request methods such as LIST. Type in your custom methods.
üåà Make it yours: Customizable combinations for background, foreground, and accent colors ‚Äî customize now.
Theming
Choose a theme: System (default), Light, Dark, and Black
Choose accent color: Green (default), Teal, Blue, Indigo, Purple, Yellow, Orange, Red, and Pink
Distraction-free Zen mode
Customized themes are synced with cloud / local session
üî• PWA: Install as a PWA on your device.
Instant loading with Service Workers
Offline support
Low RAM/memory and CPU usage
Add to Home Screen
Desktop PWA
üöÄ Request: Retrieve response from endpoint instantly.
Choose method
Enter URL
Send
Copy/share public ""Share URL""
Generate/copy request code snippets for 10+ languages and frameworks
Import cURL
Label requests
üîå WebSocket: Establish full-duplex communication channels over a single TCP connection.
üì° Server-Sent Events: Receive a stream of updates from a server over an HTTP connection without resorting to polling.
üå© Socket.IO: Send and Receive data with SocketIO server.
ü¶ü MQTT: Subscribe and Publish to topics of an MQTT Broker.
üîÆ GraphQL: GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.
Set endpoint and get schema
Multi-column docs
Set custom request headers
Query schema
Get query response
üîê Authorization: Allows to identify the end-user.
None
Basic
Bearer Token
OAuth 2.0
OIDC Access Token/PKCE
üì¢ Headers: Describes the format the body of your request is being sent as.
üì´ Parameters: Use request parameters to set varying parts in simulated requests.
üìÉ Request Body: Used to send and receive data via the REST API.
Set Content Type
FormData, JSON, and many more
Toggle between key-value and RAW input parameter list
üëã Response: Contains the status line, headers, and the message/response body.
Copy response to clipboard
Download response as a file
View response headers
View raw and preview of HTML, image, JSON, XML responses
‚è∞ History: Request entries are synced with cloud / local session storage to restore with a single click.
üìÅ Collections: Keep your API requests organized with collections and folders. Reuse them with a single click.
Unlimited collections, folders, and requests
Nested folders
Export and import as a file or GitHub gist
Collections are synced with cloud / local session storage
üåê Proxy: Enable Proxy Mode from Settings to access blocked APIs.
Hide your IP address
Fixes CORS (Cross-Origin Resource Sharing) issues
Access APIs served in non-HTTPS (http://) endpoints
Use your Proxy URL
Official proxy server is hosted by Hoppscotch - GitHub - Privacy Policy
üìú Pre-Request Scripts Œ≤: Snippets of code associated with a request that is executed before the request is sent.
Set environment variables
Include timestamp in the request headers
Send a random alphanumeric string in the URL parameters
Any JavaScript functions
üìÑ API Documentation: Create and share dynamic API documentation easily, quickly.
Add your requests to Collections and Folders
Export Collections and easily share your APIs with the rest of your team
Import Collections and Generate Documentation on-the-go
‚å®Ô∏è Keyboard Shortcuts: Optimized for efficiency.
Read our documentation on Keyboard Shortcuts
üåé i18n: Experience the app in your language.
Help us to translate Hoppscotch. Please read TRANSLATIONS for details on our CODE OF CONDUCT, and the process for submitting pull requests to us.
üì¶ Add-ons: Official add-ons for hoppscotch.
Proxy - A simple proxy server created for Hoppscotch
CLI Œ≤ - A CLI solution for Hoppscotch
Browser Extensions - Browser extensions that simplifies access to Hoppscotch
 Firefox &nbsp;|&nbsp;  Chrome
Extensions fixes CORS issues.
Hopp-Doc-Gen - An API doc generator CLI for Hoppscotch
Add-ons are developed and maintained under Hoppscotch Organization.
‚òÅÔ∏è Auth + Sync: Sign in and sync your data in real-time.
Sign in with
GitHub
Google
Microsoft
Email
Synchronize your data
History
Collections
Environments
Settings
‚úÖ Post-Request Tests Œ≤: Write tests associated with a request that is executed after the request's response.
Check the status code as an integer
Filter response headers
Parse the response data
Set environment variables
Write JavaScript code
üå± Environments : Environment variables allow you to store and reuse values in your requests and scripts.
Unlimited environments and variables
Initialize through the pre-request script
Export as / import from GitHub gist
<details>
  <summary><i>Use-cases</i></summary>

By storing a value in a variable, you can reference it throughout your request section

If you need to update the value, you only have to change it in one place

Using variables increases your ability to work efficiently and minimizes the likelihood of error

</details>

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Teams Œ≤: Helps you collaborate across your team to design, develop, and test APIs faster.
Unlimited teams
Unlimited shared collections
Unlimited team members
Role-based access control
Cloud sync
Multiple devices
üöö Bulk Edit: Edit key-value pairs in bulk.
Entries are separated by newline
Keys and values are separated by :
Prepend # to any row you want to add but keep disabled
For more features, please read our documentation.
Provide your API endpoint in the URL field
Click ""Send"" to simulate the request
View the response
CSS, SCSS, Windi CSS
Update .env.example file found in the root of repository with your own keys and rename it to .env.
Sample keys only work with the production build.
Clone this repo with git.
Install pnpm using npm by running npm install -g pnpm.
Install dependencies by running pnpm install within the directory that you cloned (probably hoppscotch).
Start the development server with pnpm run dev.
Open the development site by going to http://localhost:3000 in your browser.
Clone this repo with git.
Run docker-compose up within the directory that you cloned (probably hoppscotch).
Open the development site by going to http://localhost:3000 in your browser.
Official container &nbsp; 
Clone this repo with git.
Install pnpm using npm by running npm install -g pnpm.
Install dependencies by running pnpm install within the directory that you cloned (probably hoppscotch).
Update .env.example file found in the root of repository with your own keys and rename it to .env.
Build the release files with pnpm run generate.
Find the built project in packages/hoppscotch-web/dist. Host these files on any static hosting servers.
Please contribute using GitHub Flow. Create a branch, add commits, and open a pull request.
Please read CONTRIBUTING for details on our CODE OF CONDUCT, and the process for submitting pull requests to us.
We use GitHub Actions for continuous integration. Check out our build workflows.
See the CHANGELOG file for details.
This project exists thanks to all the people who contribute ‚Äî contribute.

  
    
  


This project is licensed under the MIT License - see the LICENSE file for details."
2199,"slatedocs,slate","Beautiful static documentation for your API. 
  
  
  
  


Slate helps you create beautiful, intelligent, responsive API documentation.



<em>The example above was created with Slate. Check it out at slatedocs.github.io/slate.</em>

Clean, intuitive design ‚Äî With Slate, the description of your API is on the left side of your documentation, and all the code examples are on the right side. Inspired by Stripe's and PayPal's API docs. Slate is responsive, so it looks great on tablets, phones, and even in print.
Everything on a single page ‚Äî Gone are the days when your users had to search through a million pages to find what they wanted. Slate puts the entire documentation on a single page. We haven't sacrificed linkability, though. As you scroll, your browser's hash will update to the nearest header, so linking to a particular point in the documentation is still natural and easy.
Slate is just Markdown ‚Äî When you write docs with Slate, you're just writing Markdown, which makes it simple to edit and understand. Everything is written in Markdown ‚Äî even the code samples are just Markdown code blocks.
Write code samples in multiple languages ‚Äî If your API has bindings in multiple programming languages, you can easily put in tabs to switch between them. In your document, you'll distinguish different languages by specifying the language name at the top of each code block, just like with GitHub Flavored Markdown.
Out-of-the-box syntax highlighting for over 100 languages, no configuration required.
Automatic, smoothly scrolling table of contents on the far left of the page. As you scroll, it displays your current position in the document. It's fast, too. We're using Slate at TripIt to build documentation for our new API, where our table of contents has over 180 entries. We've made sure that the performance remains excellent, even for larger documents.
Let your users update your documentation for you ‚Äî By default, your Slate-generated documentation is hosted in a public GitHub repository. Not only does this mean you get free hosting for your docs with GitHub Pages, but it also makes it simple for other developers to make pull requests to your docs if they find typos or other problems. Of course, if you don't want to use GitHub, you're also welcome to host your docs elsewhere.
RTL Support Full right-to-left layout for RTL languages such as Arabic, Persian (Farsi), Hebrew etc.
Getting started with Slate is super easy! Simply press the green ""use this template"" button above and follow the instructions below. Or, if you'd like to check out what Slate is capable of, take a look at the sample docs.
To get started with Slate, please check out the Getting Started
section in our wiki.
We support running Slate in three different ways:
NASA
You can view more in the list on the wiki.
If you've got questions about setup, deploying, special feature implementation in your fork, or just want to chat with the developer, please feel free to start a thread in our Discussions tab!
Found a bug with upstream Slate? Go ahead and submit an issue. And, of course, feel free to submit pull requests with bug fixes or changes to the dev branch.
Slate was built by Robert Lord while at TripIt. The project is now maintained by Matthew Peveler and Mike Ralphson.
Thanks to the following people who have submitted major pull requests:
Also, thanks to Sauce Labs for sponsoring the development of the responsive styles."
2200,"meilisearch,meilisearch","A lightning-fast search engine that fits effortlessly into your apps, websites, and workflow.. 
  
  


<h4 align=""center"">
  Website |
  Roadmap |
  Blog |
  Documentation |
  FAQ |
  Discord
</h4>


  
  
  


‚ö° A lightning-fast search engine that fits effortlessly into your apps, websites, and workflow üîç

Meilisearch helps you shape a delightful search experience in a snap, offering features that work out-of-the-box to speed up your workflow.

  
    
  
  
    
  


üî• Try it! üî•
Search-as-you-type: find search results in less than 50 milliseconds
Typo tolerance: get relevant matches even when queries contain typos and misspellings
Filtering and faceted search: enhance your user's search experience with custom filters and build a faceted search interface in a few lines of code
Sorting: sort results based on price, date, or pretty much anything else your users need
Synonym support: configure synonyms to include more relevant content in your search results
Geosearch: filter and sort documents based on geographic data
Extensive language support: search datasets in any language, with optimized support for Chinese, Japanese, Hebrew, and languages using the Latin alphabet
Security management: control which users can access what data with API keys that allow fine-grained permissions handling
Multi-Tenancy: personalize search results for any number of application tenants
Highly Customizable: customize Meilisearch to your specific needs or use our out-of-the-box and hassle-free presets
RESTful API: integrate Meilisearch in your technical stack with our plugins and SDKs
Easy to install, deploy, and maintain
You can consult Meilisearch's documentation at https://docs.meilisearch.com.
For basic instructions on how to set up Meilisearch, add documents to an index, and search for documents, take a look at our Quick Start guide.
You may also want to check out Meilisearch 101 for an introduction to some of Meilisearch's most popular features.
Let us manage your infrastructure so you can focus on integrating a great search experience. Try Meilisearch Cloud today.
Install one of our SDKs in your project for seamless integration between Meilisearch and your favorite language or framework!
Take a look at the complete Meilisearch integration list.

Experienced users will want to keep our API Reference close at hand.
We also offer a wide range of dedicated guides to all Meilisearch features, such as filtering, sorting, geosearch, API keys, and tenant tokens.
Finally, for more in-depth information, refer to our articles explaining fundamental Meilisearch concepts such as documents and indexes.
Meilisearch collects anonymized data from users to help us improve our product. You can deactivate this whenever you want.
To request deletion of collected data, please write to us at¬†privacy@meilisearch.com. Don't forget to include your Instance UID in the message, as this helps us quickly find and delete your data.
If you want to know more about the kind of data we collect and what we use it for, check the telemetry section of our documentation.
Meilisearch is a search engine created by Meili, a software development company based in France and with team members all over the world. Want to know more about us? Check out our blog!
üóû Subscribe to our newsletter if you don't want to miss any updates! We promise we won't clutter your mailbox: we only send one edition every two months.
üíå Want to make a suggestion or give feedback? Here are some of the channels where you can reach us:
For feature requests, please visit our product repository
Found a bug? Open an issue!
Want to be part of our Discord community? Join us!
For everything else, please check this page listing some of the other places where you can find us
Thank you for your support!
Meilisearch is, and will always be, open-source! If you want to contribute to the project, please take a look at our contribution guidelines.
Meilisearch releases and their associated binaries are available in this GitHub page.
The binaries are versioned following SemVer conventions. To know more, read our versioning policy.
Differently from the binaries, crates in this repository are not currently available on crates.io and do not follow SemVer conventions."
2201,"hasura,graphql-engine","Blazing fast, instant realtime GraphQL APIs on your DB with fine grained access control, also trigger webhooks on database events.. 




Hasura is an open-source product that accelerates API development by 10x by giving you GraphQL or REST APIs with built-in authorization on your data, instantly.
Read more at hasura.io and the docs.


Make powerful queries: Built-in filtering, pagination, pattern search, bulk insert, update, delete mutations
Works with existing, live databases: Point it to an existing database to instantly get a ready-to-use GraphQL API
Realtime: Convert any GraphQL query to a live query by using subscriptions
Merge remote schemas: Access custom GraphQL schemas for business logic via a single GraphQL Engine endpoint. Read more.
Extend with Actions: Write REST APIs to extend Hasura‚Äôs schema with custom business logic.
Trigger webhooks or serverless functions: On Postgres insert/update/delete events (read more)
Scheduled Triggers: Execute custom business logic at specific points in time using a cron config or a one-off event.
Fine-grained access control: Dynamic access control that integrates with your auth system (eg: auth0, firebase-auth)
Admin UI & Migrations: Admin UI & Rails-inspired schema migrations
Supported Databases: Supports PostgreSQL (and its flavors), MS SQL Server and Big Query. Support for more databases coming soon.
Read more at hasura.io and the docs.
<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->
Table of Contents
<!-- markdown-toc end -->

The fastest and easiest way to try Hasura out is via Hasura Cloud.
Click on the following button to deploy GraphQL engine on Hasura Cloud including Postgres add-on or using an existing Postgres database:

Open the Hasura console
Click on the button ""Launch console"" to open the Hasura console.
Make your first GraphQL query
Create a table and instantly run your first query. Follow this simple guide.
Check out the instructions for the following one-click deployment options:
For Docker-based deployment and advanced configuration options, see deployment
guides or
install manifests.
The Hasura GraphQL Engine fronts a Postgres database instance and can accept GraphQL requests from your client apps. It can be configured to work with your existing auth system and can handle access control using field-level rules with dynamic variables from your auth system.
You can also merge remote GraphQL schemas and provide a unified GraphQL API.

Hasura works with any GraphQL client. See awesome-graphql for a list of clients. Our frontend tutorial series also have integrations with GraphQL clients for different frameworks.
GraphQL Engine provides easy-to-reason, scalable and performant methods for adding custom business logic to your backend:
Add custom resolvers in a remote schema in addition to Hasura's database-based GraphQL schema. Ideal for use-cases like implementing a payment API, or querying data that is not in your database - read more.
Actions are a way to extend Hasura‚Äôs schema with custom business logic using custom queries and mutations. Actions can be added to Hasura to handle various use cases such as data validation, data enrichment from external sources and any other complex business logic - read more
Add asynchronous business logic that is triggered based on database events.
Ideal for notifications, data-pipelines from Postgres or asynchronous
processing - read more.
Transform data in Postgres or run business logic on it to derive another dataset that can be queried using GraphQL Engine - read more.
Check out all the example applications in the community/sample-apps directory.
Group Chat application built with React, includes a typing indicator, online users & new
message notifications.
Live location tracking app that shows a running vehicle changing the current GPS
coordinates moving on a map.
A real-time dashboard for data aggregations on continuously changing data.
Add GraphQL to a self-hosted GitLab instance (3:44 mins)
Todo app with Auth0 and GraphQL backend (4:00 mins)
GraphQL on GitLab integrated with GitLab auth (4:05 mins)
Dashboard for 10million rides with geo-location (PostGIS, Timescale) (3:06 mins)
The documentation and community will help you troubleshoot most issues. If you have encountered a bug or need to get in touch with us, you can contact us using one of the following channels:
Support & feedback: Discord
Issue & bug tracking: GitHub issues
Follow product updates: @HasuraHQ
Talk to us on our website chat
We are committed to fostering an open and welcoming environment in the community. Please see the Code of Conduct.
If you want to report a security issue, please read this.
We release new features every month. Sign up for our newsletter by using the link below. We send newsletters only once a month.
https://hasura.io/newsletter/
Check out our contributing guide for more details.
Hasura brand assets (logos, the Hasura mascot, powered by badges etc.) can be
found in the assets/brand folder. Feel free to use them in your
application/website etc. We'd be thrilled if you add the ""Powered by Hasura""
badge to your applications built using Hasura. ‚ù§Ô∏è

  
  


The core GraphQL Engine is available under the Apache License 2.0 (Apache-2.0).
All other contents (except those in server, cli and
console directories) are available under the MIT License.
This includes everything in the docs and community
directories.
This readme is available in the following translations:
Japanese :jp: (:pray: @moksahero)
French :fr: (:pray: @l0ck3)
Bosnian :bosnia_herzegovina: (:pray: @hajro92)
Russian :ru: (:pray: @highflyer910)
Greek üá¨üá∑ (:pray: @MIP2000)
Spanish üá≤üáΩ(:pray: @ferdox2)
Indonesian :indonesia: (:pray: @anwari666)
Brazilian Portuguese :brazil: (:pray: @rubensmp)
German üá©üá™ (:pray: @FynnGrandke)
Chinese :cn: (:pray: @jagreetdg & @johnbanq)
Turkish :tr: (:pray: @berat)
Korean :kr: (:pray: @ÎùºÏä§ÌÅ¨)
Italian :it: (:pray: @befire)
Translations for other files can be found here."
2202,"ccxt,ccxt","A JavaScript / Python / PHP cryptocurrency trading API with support for more than 100 bitcoin/altcoin exchanges. A JavaScript / Python / PHP library for cryptocurrency trading and e-commerce with support for many bitcoin/ether/altcoin exchange markets and merchant APIs.
The CCXT library is used to connect and trade with cryptocurrency exchanges and payment processing services worldwide. It provides quick access to market data for storage, analysis, visualization, indicator development, algorithmic trading, strategy backtesting, bot programming, and related software engineering.
It is intended to be used by coders, developers, technically-skilled traders, data-scientists and financial analysts for building trading algorithms.
Current feature list:
support for many cryptocurrency exchanges ‚Äî more coming soon
fully implemented public and private APIs
optional normalized data for cross-exchange analytics and arbitrage
an out of the box unified API that is extremely easy to integrate
works in Node 10.4+, Python 3, PHP 8.1+, and web browsers

<sub></sub> TabTrader ‚Äì trading on all exchanges in one app. Available on Android and iOS!
<sub></sub> Freqtrade ‚Äì leading opensource cryptocurrency algorithmic trading software!
<sub></sub> OctoBot ‚Äì cryptocurrency trading bot with an advanced web interface.
<sub></sub> TokenBot ‚Äì discover and copy the best algorithmic traders in the world.
The CCXT library currently supports the following 106 cryptocurrency exchange markets and trading APIs:
The list above is updated frequently, new crypto markets, exchanges, bug fixes, and API endpoints are introduced on a regular basis. See the Manual for more details. If you can't find a cryptocurrency exchange in the list above and want it to be added, post a link to it by opening an issue here on GitHub or send us an email.
The library is under MIT license, that means it's absolutely free for any developer to build commercial and opensource software on top of it, but use it at your own risk with no warranties, as is.
The easiest way to install the CCXT library is to use a package manager:
ccxt in NPM (JavaScript / Node v7.6+)
ccxt in PyPI (Python 3.5.3+)
ccxt in Packagist/Composer (PHP 7.0+)
This library is shipped as an all-in-one module implementation with minimalistic dependencies and requirements:
js/ in JavaScript
python/ in Python (generated from JS)
php/ in PHP (generated from JS)
You can also clone it into your project directory from ccxt GitHub repository:
JavaScript version of CCXT works in both Node and web browsers. Requires ES6 and async/await syntax support (Node 7.6.0+). When compiling with Webpack and Babel, make sure it is not excluded in your babel-loader config.
All-in-one browser bundle (dependencies included), served from a CDN of your choice:
jsDelivr: https://cdn.jsdelivr.net/npm/ccxt@3.0.43/dist/ccxt.browser.js
unpkg: https://unpkg.com/ccxt@3.0.43/dist/ccxt.browser.js
CDNs are not updated in real-time and may have delays. Defaulting to the most recent version without specifying the version number is not recommended. Please, keep in mind that we are not responsible for the correct operation of those CDN servers.
Creates a global ccxt object:
The library supports concurrent asynchronous mode with asyncio and async/await in Python 3.5.3+
ccxt in PHP with Packagist/Composer (PHP 7.0+)
It requires common PHP modules:
cURL
mbstring (using UTF-8 is highly recommended)
PCRE
iconv
gmp (this is a built-in extension as of PHP 7.2+)
The library supports concurrent asynchronous mode using tools from RecoilPHP and ReactPHP in PHP 7.1+. Read the Manual for more details.
You can get CCXT installed in a container along with all the supported languages and dependencies. This may be useful if you want to contribute to CCXT (e.g. run the build scripts and tests ‚Äî please see the Contributing document for the details on that).
Using docker-compose (in the cloned CCXT repository):
You don't need the Docker image if you're not going to develop CCXT. If you just want to use CCXT ‚Äì¬†just install it as a regular package into your project.
Read the Manual for more details.
The CCXT library consists of a public part and a private part. Anyone can use the public part immediately after installation. Public APIs provide unrestricted access to public information for all exchange markets without the need to register a user account or have an API key.
Public APIs include the following:
market data
instruments/trading pairs
price feeds (exchange rates)
order books
trade history
tickers
OHLC(V) for charting
other public endpoints
In order to trade with private APIs you need to obtain API keys from an exchange's website. It usually means signing up to the exchange and creating API keys for your account. Some exchanges require personal info or identification. Sometimes verification may be necessary as well. In this case you will need to register yourself, this library will not create accounts or API keys for you. Some exchanges expose API endpoints for registering an account, but most exchanges don't. You will have to sign up and create API keys on their websites.
Private APIs allow the following:
manage personal account info
query account balances
trade by making market and limit orders
deposit and withdraw fiat and crypto funds
query personal orders
get ledger history
transfer funds between accounts
use merchant services
This library implements full public and private REST APIs for all exchanges. WebSocket and FIX implementations in JavaScript, PHP, Python are available in CCXT Pro, which is a professional addon to CCXT with support for WebSocket streams.
The CCXT library supports both camelcase notation (preferred in JavaScript) and underscore notation (preferred in Python and PHP), therefore all methods can be called in either notation or coding style in any language.
Read the Manual for more details.
CCXT now supports ESM and CJS modules
Please read the CONTRIBUTING document before making changes that you would like adopted in the code. Also, read the Manual for more details.
We are investing a significant amount of time into the development of this library. If CCXT made your life easier and you want to help us improve it further, or if you want to speed up development of new features and exchanges, please support us with a tip. We appreciate all contributions!
Support this project by becoming a sponsor. Your logo will show up here with a link to your website.
[Become a sponsor]










Support this project by becoming a supporter. Your avatar will show up here with a link to your website.
[Become a supporter]










Thank you to all our backers! [Become a backer]

Thank you!
<sub></sub>
CCXT Channel on Telegram (important announcements)
CCXT Chat on Telegram (technical support)
For business inquiries: info@ccxt.trade"
2203,"Kong,insomnia","The open-source, cross-platform API client for GraphQL, REST, WebSockets and gRPC.. Insomnia is an open-source, cross-platform API client for GraphQL, REST, WebSockets and gRPC.

Insomnia is available for Mac, Windows, and Linux and can be downloaded
from the website.
https://insomnia.rest/download
Have a bug or a feature request? First, read the
issue guidelines and search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue.
For more generic product questions and feedback, join the Slack Team.
Please read through our contributing guidelines and code of conduct. Included are directions for opening issues, coding standards, and notes on development.
Check out our open-source Insomnia Documentation.
Development on Insomnia can be done on Mac, Windows, or Linux as long as you have Node.js and Git. See the .nvmrc file located in the project for the correct Node version.
<details>
<summary>Initial Dev Setup</summary>

This repository is structured as a monorepo and contains many Node.JS packages. Each package has its own set of commands, but the most common commands are available from the root [`package.json`](package.json) and can be accessed using the `npm run ‚Ä¶` command. Here are the only three commands you should need to start developing on the app.

If you are on Linux, you may need to install the following supporting packages:

<details>
<summary>Ubuntu/Debian</summary>

</details>

<details>
<summary>Fedora</summary>

</details>

Also on Linux, if Electron is failing during the bootstrap process, run the following

If you are on Windows and have problems, you may need to install [Windows Build Tools](https://github.com/felixrieseberg/windows-build-tools)

</details>

<details>
<summary>Editor Requirements</summary>

You can use any editor you'd like, but make sure to have support/plugins for the following tools:

[ESLint](http://eslint.org/) - For catching syntax problems and common errors

[JSX Syntax](https://facebook.github.io/react/docs/jsx-in-depth.html) - For React components

</details>

Bootstrap: npm run bootstrap
Start the compiler in watch mode: npm run inso-start
Run: ./packages/insomnia-inso/bin/inso -v
Search for, discover, and install plugins from the Insomnia Plugin Hub!
Insomnia Documenter - Generate beautiful API documentation pages using the documenter plugin or your Insomnia export file.
GitHub API Spec Importer - A complete set of GitHub REST API route specifications that can be imported straight into Insomnia.
Swaggymnia - Generate Swagger documentation for your existing API in Insomnia.
MIT &copy; Insomnia"
2204,"httpie,httpie","ü•ß HTTPie for Terminal ‚Äî modern, user-friendly command-line HTTP client for the API era. JSON support, colors, sessions, downloads, plugins & more.. 
    
        
    
    
    HTTPie for Terminal: human-friendly CLI HTTP client for the API era




[![HTTPie for Desktop](https://img.shields.io/static/v1?label=HTTPie&message=for%20Desktop&color=4B78E6)](https://httpie.io/product)
[![](https://img.shields.io/static/v1?label=HTTPie&message=for%20Web%20%26%20Mobile&color=73DC8C)](https://httpie.io/app)
[![](https://img.shields.io/static/v1?label=HTTPie&message=for%20Terminal&color=FA9BFA)](https://httpie.io/cli)
[![Twitter](https://img.shields.io/twitter/follow/httpie?style=flat&color=%234B78E6&logoColor=%234B78E6)](https://twitter.com/httpie)
[![Chat](https://img.shields.io/discord/725351238698270761?style=flat&label=Chat%20on%20Discord&color=%23FA9BFA)](https://httpie.io/discord)





[![Docs](https://img.shields.io/badge/stable%20docs-httpie.io%2Fdocs%2Fcli-brightgreen?style=flat&color=%2373DC8C&label=Docs)](https://httpie.org/docs/cli)
[![Latest version](https://img.shields.io/pypi/v/httpie.svg?style=flat&label=Latest&color=%234B78E6&logo=&logoColor=white)](https://pypi.python.org/pypi/httpie)
[![Build](https://img.shields.io/github/actions/workflow/status/httpie/httpie/tests.yml?branch=master&color=%23FA9BFA&label=Build)](https://github.com/httpie/httpie/actions)
[![Coverage](https://img.shields.io/codecov/c/github/httpie/httpie?style=flat&label=Coverage&color=%2373DC8C)](https://codecov.io/gh/httpie/httpie)



HTTPie (pronounced aitch-tee-tee-pie) is a command-line HTTP client.
Its goal is to make CLI interaction with web services as human-friendly as possible.
HTTPie is designed for testing, debugging, and generally interacting with APIs & HTTP servers.
The http & https commands allow for creating and sending arbitrary HTTP requests.
They use simple and natural syntax and provide formatted and colorized output.






Please note we recently accidentally made this repo private for a moment, and GitHub deleted our community that took a decade to build. Read the full story here: https://httpie.io/blog/stardust

Expressive and intuitive syntax
Formatted and colorized terminal output
Built-in JSON support
Forms and file uploads
HTTPS, proxies, and authentication
Arbitrary request data
Custom headers
Persistent sessions
wget-like downloads
Hello World:
Custom HTTP method, HTTP headers and JSON data:
Build and print a request without sending it using offline mode:
Use GitHub API to post a comment on an Issue with authentication:
Visit the HTTPie website for full documentation and useful links.
Join our Discord server is to ask questions, discuss features, and for general API chat.
Tweet at @httpie on Twitter.
Use StackOverflow to ask questions and include a httpie tag.
Create GitHub Issues for bug reports and feature requests.
Subscribe to the HTTPie newsletter for occasional updates.
Have a look through existing Issues and Pull Requests that you could help with. If you'd like to request a feature or report a bug, please create a GitHub Issue using one of the templates provided.
See contribution guide ‚Üí"
2205,"cypress-io,cypress-documentation","Cypress Documentation including Guides, API, Plugins, Examples, & FAQ.. The code for Cypress Documentation including Guides, API, Examples, Cypress
Cloud & FAQ found at https://docs.cypress.io.


master branch

Install the dependencies:
Run the app:
You can view the app by visiting
http://localhost:3000/.
You can create a statically generated version of the website by running the
following:
This will generate a dist directory that you can serve up.
Note: If you want to create and view a statically generated version of the
documentation site, you can run the following:
You can view the statically generated site at
http://localhost:3000/.
Javascript code is linted with ESLint.
CSS code is linted with stylelint.
Markdown is formatted with Prettier.
Javascript code is unit tested with Jest.
We use Cypress itself to test the documentation.
Run the tests:
Refer to the CONTRIBUTING.md guide for details.
This project is licensed under the terms of the MIT license."
2280,"swagger-api,swagger-ui","Swagger UI is a collection of HTML, JavaScript, and CSS assets that dynamically generate beautiful documentation from a Swagger-compliant API.. Swagger UI allows anyone ‚Äî be it your development team or your end consumers ‚Äî to visualize and interact with the API‚Äôs resources without having any of the implementation logic in place. It‚Äôs automatically generated from your OpenAPI (formerly known as Swagger) Specification, with the visual documentation making it easy for back end implementation and client side consumption.
üëâüèº Want to score an easy open-source contribution? Check out our Good first issue label.
üï∞Ô∏è Looking for the older version of Swagger UI? Refer to the 2.x branch.
This repository publishes three different NPM modules:
swagger-ui is a traditional npm module intended for use in single-page applications that are capable of resolving dependencies (via Webpack, Browserify, etc).
swagger-ui-dist is a dependency-free module that includes everything you need to serve Swagger UI in a server-side project, or a single-page application that can't resolve npm module dependencies.
swagger-ui-react is Swagger UI packaged as a React component for use in React applications.
We strongly suggest that you use swagger-ui instead of swagger-ui-dist if you're building a single-page application, since swagger-ui-dist is significantly larger.
If you are looking for plain ol' HTML/JS/CSS, download the latest release and copy the contents of the /dist folder to your server.
The OpenAPI Specification has undergone 5 revisions since initial creation in 2010.  Compatibility between Swagger UI and the OpenAPI Specification is as follows:
Installation
You will need JDK of version 7 or higher as instructed here
https://nightwatchjs.org/guide/getting-started/installation.html#install-selenium-server
Integration tests can be run locally with npm run e2e - be sure you aren't running a dev server when testing!
Swagger UI works in the latest versions of Chrome, Safari, Firefox, and Edge.
To help with the migration, here are the currently known issues with 3.X. This list will update regularly, and will not include features that were not implemented in previous versions.
Only part of the parameters previously supported are available.
The JSON Form Editor is not implemented.
Support for collectionFormat is partial.
l10n (translations) is not implemented.
Relative path support for external files is not implemented.
Please disclose any security-related issues or vulnerabilities by emailing security@swagger.io, instead of using the public issue tracker.
SwaggerUI is licensed under Apache 2.0 license.
SwaggerUI comes with an explicit NOTICE file
containing additional legal notices and information."
2281,"microsoft,api-guidelines","Microsoft REST API Guidelines. Azure service teams should use companion documents, Azure REST API Guidelines and Considerations for Service Design, when building or modifying their services. These documents provide a refined set of guidance targeted specifically for Azure services. For more information please refer to the README in the Azure folder. 
Microsoft Graph service teams should reference the companion document, Graph REST API Guidelines when building or modifying their services.
In the process of building many of Microsoft's highest scale services, the Microsoft Graph team found the Microsoft API guidelines tremendously useful as a baseline.¬†However, there are several areas where we need to provide more clarity on how developers should describe their APIs. The companion document, Graph REST API Guidelines is a set of amendments and clarifications for Microsoft Graph that act as further reading. Recognizing that two documents is a lot for a new API designer to absorb, our plan is to follow the approach Azure have taken and roll out guidelines for Microsoft Graph into a single consolidated document.
The Microsoft REST API Guidelines are Microsoft's internal company-wide REST API design guidelines.
Teams at Microsoft typically reference this document when setting API design policy.
They may additionally create documents specific to their team, adding further guidance or making adjustments as appropriate to their circumstances.
We publish these guidelines here with the aim of fostering dialogue and learning in the API community at large.
We further hope that these guidelines may encourage other organizations to create guidelines that are appropriate for them and in turn, if they are able, to publish theirs.

This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.
This repository contains a collection of documents and related materials supporting the overall Microsoft REST API Guidelines initiative. To contribute to this repository, please see the contribution guidelines."
2282,"binwiederhier,ntfy","Send push notifications to your phone or desktop using PUT/POST. ntfy (pronounced ""notify"") is a simple HTTP-based pub-sub 
notification service. With ntfy, you can send notifications to your phone or desktop via scripts from any computer, 
without having to sign up or pay any fees. If you'd like to run your own instance of the service, you can easily do 
so since ntfy is open source.
You can access the free version of ntfy at ntfy.sh. There is also an open source Android app
available on Google Play or F-Droid,
as well as an open source iOS app available on the App Store.

  
  
  
  
  


Getting started |
Android/iOS |
API |
Install / Self-hosting |
Building
There are a few ways to get in touch with me and/or the rest of the community. Feel free to use any of these methods. Whatever
works best for you:
Discord server - direct chat with the community
Matrix room #ntfy (+ Matrix space) - same chat, bridged from Discord
Reddit r/ntfy - asynchronous forum (new as of October 2022)
GitHub issues - questions, features, bugs
Email - reach me directly (I usually prefer the other methods)
For announcements of new releases and cutting-edge beta versions, please subscribe to the ntfy.sh/announcements 
topic. If you'd like to test the iOS app, join TestFlight. For Android betas,
join Discord/Matrix (I'll eventually make a testing channel in Google Play).
I welcome any and all contributions. Just create a PR or an issue. For larger features/ideas, please reach out
on Discord/Matrix first to see if I'd accept them. To contribute code, check out the build instructions 
for the server and the Android app. Or, if you'd like to help translate üá©üá™ üá∫üá∏ üáßüá¨, you can start immediately in
Hosted Weblate.



I have just very recently started accepting donations via GitHub Sponsors,
and Liberapay. I would be humbled if you helped me carry the server and developer 
account costs. Even small donations are very much appreciated. A big fat Thank You to the folks already sponsoring ntfy:





























































I'd also like to thank JetBrains for providing their awesome IntelliJ IDEA to me for free,
and DigitalOcean (referral link) for supporting the project:

We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.
We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.
Please be sure to read the complete Code of Conduct.    
Made with ‚ù§Ô∏è by Philipp C. Heckel. 
The project is dual licensed under the Apache License 2.0 and the GPLv2 License.
Third party libraries and resources:
github.com/urfave/cli (MIT) is used to drive the CLI
Mixkit sounds (Mixkit Free License) are used as notification sounds
Sounds from notificationsounds.com (Creative Commons Attribution) are used as notification sounds
Roboto Font (Apache 2.0) is used as a font in everything web
React (MIT) is used for the web app
Material UI components (MIT) are used in the web app
MUI dashboard template (MIT) was used as a basis for the web app
Dexie.js (Apache 2.0) is used for web app persistence in IndexedDB
GoReleaser (MIT) is used to create releases
go-smtp (MIT) is used to receive e-mails
stretchr/testify (MIT) is used for unit and integration tests
github.com/mattn/go-sqlite3 (MIT) is used to provide the persistent message cache
Firebase Admin SDK (Apache 2.0) is used to send FCM messages
github/gemoji (MIT) is used for emoji support (specifically the emoji.json file)
Lightbox with vanilla JS as a lightbox on the landing page 
HTTP middleware for gzip compression (MIT) is used for serving static files
Regex for auto-linking (MIT) is used to highlight links (the library is not used)
Linked tabs in mkdocs"
2283,"cakephp,cakephp","CakePHP: The Rapid Development Framework for PHP - Official Repository. 
  
    
  


    
        
    
    
        
    
    
        
    
    
        
    
    
        
    


CakePHP is a rapid development framework for PHP which
uses commonly known design patterns like Associative Data
Mapping, Front Controller, and MVC.  Our primary goal is to provide a structured
framework that enables PHP users at all levels to rapidly develop robust web
applications, without any loss to flexibility.
You can install CakePHP into your project using
Composer.  If you're starting a new project, we
recommend using the app skeleton as
a starting point. For existing applications you can run the following:
For details on the (minimum/maximum) PHP version see version map.
Assuming you have PHPUnit installed system wide using one of the methods stated
here, you can run the
tests for CakePHP by doing the following:
Copy phpunit.xml.dist to phpunit.xml.
Add the relevant database credentials to your phpunit.xml if you want to run tests against
a non-SQLite datasource.
Run phpunit.
CakePHP - The rapid development PHP framework.
CookBook - The CakePHP user documentation; start learning here!
API - A reference to CakePHP's classes.
Awesome CakePHP - A list of featured resources around the framework.
Plugins - A repository of extensions to the framework.
The Bakery - Tips, tutorials and articles.
Community Center - A source for everything community related.
Training - Join a live session and get skilled with the framework.
CakeFest - Don't miss our annual CakePHP conference.
Cake Software Foundation - Promoting development related to CakePHP.
Slack - Join us on Slack.
Discord - Join us on Discord.
#cakephp on irc.freenode.net - Come chat with us, we have cake.
Forum - Official CakePHP forum.
GitHub Issues - Got issues? Please tell us!
Roadmaps - Want to contribute? Get involved!
CONTRIBUTING.md - Quick pointers for contributing to the CakePHP project.
CookBook ""Contributing"" Section - Details about contributing to the project.
If you‚Äôve found a security issue in CakePHP, please use the procedure
described in SECURITY.md."
2284,"dotnet-architecture,eShopOnWeb","Sample ASP.NET Core 6.0 reference application, powered by Microsoft, demonstrating a layered application architecture with monolithic deployment model. Download the eBook PDF from docs folder.. Sample ASP.NET Core reference application, powered by Microsoft, demonstrating a single-process (monolithic) application architecture and deployment model. If you're new to .NET development, read the Getting Started for Beginners guide.
A list of Frequently Asked Questions about this repository can be found here.
Steve ""ardalis"" Smith recorded a live stream providing an overview of the eShopOnWeb reference app in October 2020. 
This reference application is meant to support the free .PDF download ebook: Architecting Modern Web Applications with ASP.NET Core and Azure, updated to ASP.NET Core 7.0. Also available in ePub/mobi formats.
You can also read the book in online pages at the .NET docs here: 
https://docs.microsoft.com/dotnet/architecture/modern-web-apps-azure/
The eShopOnWeb sample is related to the eShopOnContainers sample application which, in that case, focuses on a microservices/containers-based application architecture. However, eShopOnWeb is much simpler in regards to its current functionality and focuses on traditional Web Application Development with a single deployment.
The goal for this sample is to demonstrate some of the principles and patterns described in the eBook. It is not meant to be an eCommerce reference application, and as such it does not implement many features that would be obvious and/or essential to a real eCommerce application.
Introduction
Characteristics of Modern Web Applications
Choosing Between Traditional Web Apps and SPAs
Architectural Principles
Common Web Application Architectures
Common Client Side Technologies
Developing ASP.NET Core MVC Apps
Working with Data in ASP.NET Core Apps
Testing ASP.NET Core MVC Apps
Development Process for Azure-Hosted ASP.NET Core Apps
Azure Hosting Recommendations for ASP.NET Core Web Apps
The store's home page should look like this:

Most of the site's functionality works with just the web application running. However, the site's Admin page relies on Blazor WebAssembly running in the browser, and it must communicate with the server using the site's PublicApi web application. You'll need to also run this project. You can configure Visual Studio to start multiple projects, or just go to the PublicApi folder in a terminal window and run dotnet run from there. After that from the Web folder you should run dotnet run --launch-profile Web. Now you should be able to browse to https://localhost:5001/. The admin part in Blazor is accessible to https://localhost:5001/admin  
Note that if you use this approach, you'll need to stop the application manually in order to build the solution (otherwise you'll get file locking errors).
After cloning or downloading the sample you must setup your database. 
To use the sample with a persistent database, you will need to run its Entity Framework Core migrations before you will be able to run the app.
You can also run the samples in Docker (see below).
By default, the project uses a real database. If you want an in memory database, you can add in appsettings.json
Ensure your connection strings in appsettings.json point to a local SQL Server instance.
Ensure the tool EF was already installed. You can find some help here
Open a command prompt in the Web folder and execute the following commands:
These commands will create two separate databases, one for the store's catalog data and shopping cart information, and one for the app's user credentials and identity data.
Run the application.
The first time you run the application, it will seed both databases with data such that you should see products in the store, and you should be able to log in using the demouser@microsoft.com account.
Note: If you need to create migrations, you can use these commands:
dotnet ef migrations add InitialIdentityModel --context appidentitydbcontext -p ../Infrastructure/Infrastructure.csproj -s Web.csproj -o Identity/Migrations
You can run the Web sample by running these commands from the root folder (where the .sln file is located):
You should be able to make requests to localhost:5106 for the Web project, and localhost:5200 for the Public API project once these commands complete. If you have any problems, especially with login, try from a new guest or incognito browser instance.
You can also run the applications by using the instructions located in their Dockerfile file in the root of each project. Again, run these commands from the root of the solution (where the .sln file is located).
We have some great contributions from the community, and while these aren't maintained by Microsoft we still want to highlight them.
eShopOnWeb VB.NET by Mohammad Hamdy Ghanem"
2285,"swagger-api,swagger-editor","Swagger Editor. üï∞Ô∏è Looking for the older version of Swagger Editor? Refer to the 2.x branch.
Swagger Editor lets you edit OpenAPI API definitions in YAML inside your browser and to preview documentations in real time.
Valid Swagger JSON descriptions can then be generated and used with the full Swagger tooling (code generation, documentation, etc).
As a brand new version, written from the ground up, there are some known issues and unimplemented features. Check out the Known Issues section for more details.
This repository publishes to two different NPM modules:
swagger-editor is a traditional npm module intended for use in single-page applications that are capable of resolving dependencies (via Webpack, Browserify, etc).
swagger-editor-dist is a dependency-free module that includes everything you need to serve Swagger Editor in a server-side project, or a web project that can't resolve npm module dependencies.
If you're building a single-page application, using swagger-editor is strongly recommended, since swagger-editor-dist is significantly larger.
For the older version of swagger-editor, refer to the 2.x branch.
Any of the scripts below can be run by typing npm run &lt;script name&gt; in the project's root directory.
NPM >=7.x
Generally, we recommend the following guidelines from Node.js Releases to only use Active LTS or Maintenance LTS releases.
Current Node.js:
Node.js 16.x
NPM >=7.10.x
Current Node.js Active LTS:
Node.js 14.x
NPM >=7.x.x
If you have Node.js and npm installed, you can run npm start to spin up a static server.
Otherwise, you can open index.html directly from your filesystem in your browser.
If you'd like to make code changes to Swagger Editor, you can start up a Webpack hot-reloading dev server via npm run dev.
Swagger Editor works in the latest versions of Chrome, Safari, Firefox, and Edge.
To help with the migration, here are the currently known issues with 3.X. This list will update regularly, and will not include features that were not implemented in previous versions.
Everything listed in Swagger UI's Known Issues.
The integration with the codegen is still missing.
There is a docker image published in DockerHub.
To use this, run the following:
This will run Swagger Editor (in detached mode) on port 80 on your machine, so you can open it by navigating to http://localhost in your browser.  
You can provide a URL pointing to an API definition (may not be available if some security policies such as CSP or CORS are enforced):
You can provide your own json or yaml definition file from your local host:
Note: When both URL and SWAGGER_FILE environment variables are set, URL has priority and SWAGGER_FILE is ignored.
You can specify a different base url via BASE_URL variable for accessing the application - for example if you want the application to be available at http://localhost/swagger-editor/:
You can specify a different port via PORT variable for accessing the application, default is 8080.
You can also customize the different endpoints used by the Swagger Editor with the following environment variables. For instance, this can be useful if you have your own Swagger generator server:
If you want to run the Swagger Editor locally without the Codegen features (Generate Server and Generate Client) you can set the above environment variables to null (URL_SWAGGER2_CONVERTER=null).
To build and run a docker image with the code checked out on your machine, run the following from the root directory of the project:
You can then view the app by navigating to http://localhost in your browser.
Please disclose any security-related issues or vulnerabilities by emailing security@swagger.io, instead of using the public issue tracker."
2286,"Sylius,Sylius","Open Source eCommerce Framework on Symfony. 
    
        
    


Sylius is an Open Source eCommerce framework on top of Symfony. 
The highest quality of code, strong testing culture, built-in Agile (BDD) workflow and exceptional flexibility make it the best solution for applications tailored to your business requirements. 
Powerful REST API allows for easy integrations and creating unique customer experience on any device.
We're using full-stack Behavior-Driven-Development, with phpspec and Behat.
Enjoy being an eCommerce Developer again!

Install Sylius with Composer (see requirements details).
Follow the Getting started with Sylius tutorial!
Documentation is available at docs.sylius.com.
Get Sylius support on Slack, Forum or Stack Overflow.
Stay updated by following our Twitter and Facebook.
Would like to help us and build the most developer-friendly eCommerce framework? Start from reading our Contributing Guide!
If you think that you have found a security issue in Sylius, please do not use the issue tracker and do not post it publicly. 
Instead, all security issues must be sent to security@sylius.com.

    

You can find Sylius plugins on our Sylius Store which is a Marketplace with Sylius extensions. 
Or search for packages marked as sylius-plugin on Packagist.

    

Sylius Plus gives you all the power of Open Source and much more. It comes with the following set of enterprise-grade features:
Advanced Multi-store
Returns Management
Multi-source Inventory
Advanced Users Permissions
Partial Order Fulfillment
Loyalty
What is more, Sylius Plus means SLA-backed support and Project Success Assistance from its creators. Learn more.
Sylius is completely free and released under the MIT License.
Sylius was originally created by Pawe≈Ç Jƒôdrzejewski.
Kudos to all Sylius contributors üôè




















































































... and others!
See the full list of contributors from our awesome community."
2287,"roapi,roapi","Create full-fledged APIs for slowly moving datasets without writing a single line of code.. ROAPI automatically spins up read-only APIs for static datasets without
requiring you to write a single line of code. It builds on top of Apache
Arrow and
Datafusion. The
core of its design can be boiled down to the following:
Query frontends to
translate SQL, GraphQL and REST API queries into
Datafusion plans.
Datafusion for query plan execution.
Data layer
to load datasets from a variety of sources and formats with automatic schema
inference.
Response encoding layer to
serialize intermediate Arrow record batch into various formats requested by
client.
See below for a high level diagram:

Check out Github release page for
pre-built binaries for each platform. Pre-built docker images are also available at
ghcr.io/roapi/roapi.
Spin up APIs for test_data/uk_cities_with_headers.csv and
test_data/spacex_launches.json:
For windows, full scheme(file:// or filesystem://) must filled, and use double quote("") instead of single quote(') to escape windows cmdline limit:
Or using docker:
For MySQL and SQLite, use parameters like this.
Want dynamic register data? Add parameter -d to command. --table parameter cannot be ignored for now.
Then post config to /api/table register data.
Query tables using SQL, GraphQL or REST:
Get inferred schema for all tables:
You can also configure multiple table sources using YAML config, which supports more
advanced format specific table options:
To run serve tables using config file:
See config
documentation for more
options including using Google spreadsheet as a table
source.
By default, ROAPI encodes responses in JSON format, but you can request
different encodings by specifying the ACCEPT header:
You can query tables through REST API by sending GET requests to
/api/tables/{table_name}. Query operators are specified as query params.
REST query frontend currently supports the following query operators:
columns
sort
limit
filter
To sort column col1 in ascending order and col2 in descending order, set
query param to: sort=col1,-col2.
To find all rows with col1 equal to string 'foo', set query param to:
filter[col1]='foo'. You can also do basic comparisons with filters, for
example predicate 0 &lt;= col2 &lt; 5 can be expressed as
filter[col2]gte=0&amp;filter[col2]lt=5.
To query tables using GraphQL, send the query through POST request to
/api/graphql endpoint.
GraphQL query frontend supports the same set of operators supported by REST
query frontend. Here how is
you can apply various operators in a query:
To query tables using a subset of standard SQL, send the query through POST
request to /api/sql endpoint. This is the only query interface that supports
table joins.
You can pick two columns from a table to use a key and value to create a quick
keyvalue store API by adding the following lines to the config:
Key value lookup can be done through simple HTTP GET requests:
ROAPI can present itself as a Postgre server so users can use Postgres clients
to issue SQL queries.
Query layer:
[x] REST API GET
[x] GraphQL
[x] SQL
[x] join between tables
[x] access to array elements by index
[x] access to nested struct fields by key
[ ] column index
protocol
[ ] gRPC
[x] Postgres
[x] Key value lookup
Response serialization:
[x] JSON application/json
[x] Arrow application/vnd.apache.arrow.stream
[x] Parquet application/vnd.apache.parquet
[ ] msgpack
Data layer:
[x] filesystem
[x] HTTP/HTTPS
[x] S3
[ ] GCS
[x] Google spreadsheet
[x] MySQL
[x] SQLite
[ ] Postgres
[ ] Airtable
Data format
[x] CSV
[x] JSON
[x] NDJSON
[x] parquet
[ ] xls, xlsx, xlsm, ods: https://github.com/tafia/calamine
Misc:
[ ] auto gen OpenAPI doc for rest layer
[ ] query input type conversion based on table schema
[ ] stream arrow encoding response
[ ] authentication layer
The core of ROAPI, including query frontends and data layer, lives in the
self-contained columnq
crate. It takes queries and outputs Arrow record batches. Data sources will
also be loaded and stored in memory as Arrow record batches.
The roapi crate wraps
columnq with a multi-protocol query layer. It serializes Arrow record batches
produced by columnq into different formats based on client request.
Building ROAPI with simd optimization requires nightly rust toolchain."
2288,"speakeasy-api,rest-template-go","Template go lang service to showcase REST best practices. Built by the Speakeasy team.. Join our slack if you need any help with the template, or just want to chat about APIs!


  
  
  


This repo is intended to be used by Golang developers seeking to understand the building blocks of a simple and well-constructed REST API service. We have built a simple CRUD API which exhibits the characteristics we expect our own developers to apply to the APIs we build at Speakeasy:
Entity-based: The resources available should represent the domain model. Each resource should have the CRUD methods implemented (even if not all available to API consumers). In our template, we have a single resource defined (users.go). However other resources could be easily added by copying the template and changing the logic of the service layer.
Properly Abstracted: The Transport, service, and data layers are all cleanly abstracted from one another. This makes it easy to make apply updates to the API endpoints
Consistent: It's important that consumers of a service have guaranteed consistency across the entire range of API endpoints and methods. In this service, responses are consistently formatted whether successfully returning a JSON object or responding with an error code. All the service's methods use shared response (http.go) and error (errors.go) handler functions to ensure consistency.
Tested: We believe that a blend of unit and integration testing is important for ensuring that the service maintains its contract with consumers. The service repo therefore contains a collection of unit and integration tests for the various layers of the service.
Explorable: It is important for developers to be able to play with an endpoint in order to understand it. We have provided Postman collections for testing out the REST endpoints exposed by the service. That's why there is a Bootstrap Users collection that can be run using the Run collection tool in Postman that will create 100 users to test the search endpoint with.
This repo can serve as an educational tool, or be used as a foundation upon which developers can build their own basic API scaffolding to turn API development into a consistent and marignally easier activity.
Go 1.18 (should still be backwards compatible with earlier versions)
From root of the repo
Run docker-compose up will start the dependencies and server on port 8080
From root of the repo
Run docker-compose up will start the dependencies and server on port 8080
The collections will need an environment setup with scheme, port and host variables setup with values of http, 8080 and localhost respectively.
Some of the integration tests use docker to spin up dependencies on demand (ie a postgres db) so just be aware that docker is needed to run the tests.
From root of the repo
Run go test ./..."
2346,"vuejs,vue-apollo","üöÄ Apollo/GraphQL integration for VueJS. 
  
  
  
    
  
  



Documentation



  
    
  



  
    
  

  
    
  



  
    
  

  
    
  
"
2347,"walmartlabs,lacinia","GraphQL implementation in pure Clojure. Lacinia Manual |
Lacinia Tutorial |
API Documentation
This library is a full implementation of
Facebook's GraphQL specification.
Lacinia should be viewed as roughly analogous to the
official reference JavaScript implementation.
In other words, it is a backend-agnostic GraphQL query execution engine.
Lacinia is not an Object Relational Mapper ... it's simply the implementation of a contract
sitting between the GraphQL client and your data.
Lacinia features:
An EDN-based schema language.
High performance parser for GraphQL queries, built on Antlr4.
Efficient and asynchronous query execution.
Full support for GraphQL types, interfaces, unions, enums, input objects, and custom scalars.
Full support for GraphQL subscriptions.
Full support of inline and named query fragments.
Full support for GraphQL Schema Introspection.
Lacinia has been developed with a set of core philosophies:
Prefer data over macros and other tricks. Compose your schema in whatever mix of data and code works for you.
Embrace Clojure: Use EDN data, keywords, functions, and persistent data structures.
Keep it simple: You provide the schema and a handful of functions to resolve data, and Lacinia does the rest.
Do the right thing: apply reasonable defaults without a lot of ""magic"".
This library can be plugged into any Clojure HTTP pipeline.
The companion library lacinia-pedestal provides
full HTTP support, including GraphQL subscriptions, for Pedestal.
An externally developed library, duct-lacinia, provides similar capability
for Duct.
For more detailed documentation, read the manual.
GraphQL starts with a schema definition of exposed types.
A schema starts as an EDN file; the example below demonstrates a small subset
of the available options:
A schema alone describes what data is available to clients, but doesn't identify where
the data comes from; that's the job of a field resolver, provided by the
:resolve key inside fields such as the :hero and :droid query.
The values here, :get-hero and :get-droid, are placeholders; the startup code
of the application will use
com.walmartlabs.lacinia.util/attach-resolvers to attach the actual
field resolver function.
A field resolver is just a function which is passed the application context,
a map of arguments values, and a resolved value from a
parent field.
The field resolver returns a value. If it's a scalar type, it should return a value
that conforms to the defined type in the schema.
If not, it's a type error.
The field resolver is totally responsible for obtaining the data from whatever
external store you use: whether it is a database, a web service, or something
else.
It's important to understand that every field has a field resolver, even if
you don't define it explicitly.  If you don't supply a field resolver,
Lacinia provides a default field resolver, customized to the field.
Here's what the get-hero field resolver might look like:
In this greatly simplified example, the field resolver can simply return the resolved value.
Field resolvers that return multiple values return a list, vector, or set of values.
In real applications, a field resolver might execute a query against a database,
or send a request to another web service.
After attaching resolvers, it is necessary to compile the schema; this
step performs validations, provide defaults, and organizes the schema
for efficient execution of queries.
This needs only be done once, in application startup code:
With the compiled application available, it can be used to execute
requests; this typically occurs inside a Ring handler function:
Lacinia doesn't know about the web tier at all, it just knows about
parsing and executing queries against a compiled schema.
A companion library, lacinia-pedestal,
is one way to expose your schema on the web.
User queries are provided as the body of a request with the content type application/graphql.
The GraphQL query language is designed to look familiar to someone who is versant in JSON.
The execute function returns EDN data that can be easily converted to JSON.
The :data key contains the value requested for the hero query in the request.
This example request has no errors, and contained only a single query.
GraphQL supports multiple queries in a single request.
There may be errors executing the query, Lacinia will process as much as
it can, and will report errors in the :errors key.
One of the benefits of GraphQL is that the client has the power to rename
fields in the response:
This is just an overview, far more detail is available
in the manual.
Although this library is used in production at Walmart, it is
still considered alpha software - subject to change.
We expect to stabilize it in the near future.
To use this library with Clojure 1.8, you must include 
a dependency on clojure-future-spec.
More details are in the manual.
Copyright ¬© 2017-2019 WalmartLabs
Distributed under the Apache License, Version 2.0.
Portions of the code are derived from
the ordered
and useful libraries, which are released under the terms
of the Eclipse Public License - v 1.0."
2348,"webiny,webiny-js","Open-source serverless enterprise CMS. Includes a headless CMS, page builder, form builder, and file manager. Easy to customize and expand. Deploys to AWS.. 

  
  
  <strong>Developer-friendly Serverless CMS powered by GraphQL and React</strong>


  Official Website |
  Docs 




[![Prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://prettier.io)
[![license](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/webiny/webiny-js/blob/master/LICENSE)
[![SemVer](http://img.shields.io/:semver-2.0.0-brightgreen.svg)](http://semver.org)
![](https://img.shields.io/npm/types/react-butterfiles.svg)
[![All Contributors](https://img.shields.io/badge/all_contributors-6-orange.svg?style=flat-square)](#contributors)
[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)
[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](code-of-conduct.md)
[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2FWebiny%2Fwebiny-js.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2FWebiny%2Fwebiny-js?ref=badge_shield)
[![Join the community on Spectrum][spectrum-badge]][spectrum]



Installation instructions can be found in the official docs .
Webiny consists of two layers that work closely together.
API layer works as a collection of Lambda functions with Apollo Federation handling all the GraphQL-related stuff.
Our client (SPA) layer is based on create-react-app v2 and Apollo Client. If you ever developed using those tools - you already know Webiny üôÇ
As our UI library we are using Material Components, and a very promising project RMWC to get going with Material faster.
You can see all the currently available components in our storybook.
We also provide a server-side render setup out of the box. It is also powered by Lambda.
We provide you with an administration app so you can kickstart your projects much faster and begin developing features for your clients right away.
The entire admin app is based on plugins and you can customize everything.
Please see our Contributing Guidelines which explain repo organization, setup, testing, and other steps.
This project is licensed under the terms of the MIT license. Some packages are under Apache license since they are actually forks of other projects (these are found in components folder).

Thanks goes to these wonderful people (emoji key):
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><sub><b>Adrian Smijulj</b></sub>üí¨ üíª üìñ üí° ü§î üöá üöß üì¶ üîå üîß</td>
    <td align=""center""><sub><b>Pavel Denisjuk</b></sub>üí¨ üíª üìñ üí° ü§î üöá üöß üì¶ üîå üìÜ üîß</td>
    <td align=""center""><sub><b>Sven</b></sub>üí¨ üìù üêõ üíº üíª üé® üìñ üíµ üîç ü§î üöá üöß üìÜ ‚úÖ üìπ</td>
    <td align=""center""><sub><b>Nick Collins</b></sub>üêõ ü§î üìì</td>
    <td align=""center""><sub><b>Jarrett</b></sub>üêõ üíª</td>
    <td align=""center""><sub><b>Furkan KURUTA≈û</b></sub>üíª</td>
  </tr>
</table>

<!-- markdownlint-enable -->
<!-- prettier-ignore-end -->
<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the all-contributors specification. Contributions of any kind welcome!"
2349,"ZacSweers,CatchUp","An app for catching up on things.. 



An app for catching up on things.
https://medium.com/@sweers/catching-up-on-catchup-introduction-7581c099f4bc
There's a lot of services I like reading up on throughout the day. Most of these services have
dedicated apps for consuming them, but often times I just want to skim the front page and only deep
dive occasionally. Enter CatchUp: a high level presentation of the ""front page"" of several services
in short form, and intelligent deeplinking into dedicated apps if you want to go further.
CatchUp is not an all-purpose client for each of these services, just the concierge for at-a-glance
details and router for getting on your way. It does not support login for any service, it does not
support customization/filtering of their feed. CatchUp is dumb, and you should use one of the many
great dedicated apps for this if you want more integration features.
CatchUp is also very much a testing ground for things I personally dive into, from architecture,
libraries, patterns, API quirks, and more. It's been a very fun project to spike test new things.
Multiple services
Hacker News
Reddit
Medium
Product Hunt
Slashdot
Designer News
Dribbble
GitHub
Infinite scrolling on supported services
Pleasant, simple, consistent UI for across services
Night mode
Smart deeplinking into dedicated apps
Kotlin
RxJava 2/AutoDispose
Debugging tooling as a first class citizen in the debug build
Leak Canary, Chuck, Scalpel, debug drawer, Flipper, bug reporting, the works
AndroidX/Jetpack
Dagger 2
One of the more interesting parts of CatchUp is that its service architecture is a Dagger-powered plugin system
Room (Arch components)
AutoValue + extensions
Firebase
Coil
Apollo GraphQL
Standard Square buffet of Okio/OkHttp 3/Retrofit 2/Moshi
ThreetenABP
Inspector
There's a lot of neat/interesting little tidbits in the CatchUp source code that I plan to write a
mini blog series about. Each service has its own nuances that make them unique to work with in code.
While this is a personal pet project, extensive tests can be found here.
This app owes a lot of its inspiration, implementation details, and general inner workings to the
work of others. Particularly:
Nick Butcher and his Plaid app
Jake Wharton and his u2020 demo app
CatchUp is in open alpha, but master tends to be rather far ahead of what's on the Play Store.

    

If you'd like to build CatchUp locally, you should be able to just clone and build with no issues.
CatchUp tends to keep up with Android Studio canaries, so you may have to use a canary version.
Check the Android Gradle Plugin deps.android.gradlePlugin dependency in gradle/dependencies.kt.
If you want to build with working services, some require API keys. See the
wiki for more details on
which services require keys.
Bug fixes are always welcome. Tests are too if you're into that kinda thing, but I'm not actively
trying to make this project a shining icon of TDD. For new features or otherwise significant work,
please discuss in an issue first.
For apollo-android's code generation: if you want to use a local installation of the apollo-codegen
node module you'll need to make sure 0.19. is installed and linked (npm install -g apollo-codegen@0.19.1). Otherwise,
the gradle plugin should gracefully fallback to downloading it on demand."
2350,"zino-app,graphql-flutter","A GraphQL client for Flutter, bringing all the features from a modern GraphQL client to one easy to use package.. GraphQL brings many benefits, both to the client: devices will need fewer requests, and therefore reduce data usage. And to the programmer: requests are arguable, they have the same structure as the request.
This project combines the benefits of GraphQL with the benefits of Streams in Dart to deliver a high-performance client.
The project took inspiration from the Apollo GraphQL client, great work guys!


This is a Monorepo which contains the following packages:
Here are some examples you can follow:
This is currently our roadmap, please feel free to request additions/changes.
To contribute, please see the CONTRIBUTING.md file.
This package was originally created and published by the engineers at Zino App BV. Since then the community has helped to make it even more useful for even more developers.
Thanks goes to these wonderful people (emoji key):
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore -->
<table><tr><td align=""center""><sub><b>Eustatiu Dima</b></sub>üêõ üíª üìñ üí° ü§î üëÄ</td><td align=""center""><sub><b>Zino Hofmann</b></sub>üêõ üíª üìñ üí° ü§î üöá üëÄ</td><td align=""center""><sub><b>Harkirat Saluja</b></sub>üìñ ü§î</td><td align=""center""><sub><b>Chris Muthig</b></sub>üíª üìñ üí° ü§î</td><td align=""center""><sub><b>Cal Pratt</b></sub>üêõ üíª üìñ üí° ü§î</td><td align=""center""><sub><b>Miroslav Valkovic-Madjer</b></sub>üíª</td><td align=""center""><sub><b>Aleksandar Faraj</b></sub>üêõ</td></tr><tr><td align=""center""><sub><b>Arnaud Delcasse</b></sub>üêõ üíª</td><td align=""center""><sub><b>Dustin Graham</b></sub>üêõ üíª</td><td align=""center""><sub><b>F√°bio Carneiro</b></sub>üêõ</td><td align=""center""><sub><b>Gregor</b></sub>üêõ üíª ü§î</td><td align=""center""><sub><b>Kolja Esders</b></sub>üêõ üíª ü§î</td><td align=""center""><sub><b>Michael Joseph Rosenthal</b></sub>üêõ üíª üìñ üí° ü§î ‚ö†Ô∏è</td><td align=""center""><sub><b>Igor Borges</b></sub>üêõ üíª</td></tr><tr><td align=""center""><sub><b>Rafael Ring</b></sub>üêõ üíª</td><td align=""center""><sub><b>TruongSinh Tran-Nguyen</b></sub>üíª üñã üìñ üí° ü§î üöá ‚ö†Ô∏è ‚úÖ</td><td align=""center""><sub><b>Maina Wycliffe</b></sub>üíª üìñ üí°</td><td align=""center""><sub><b>Lucas de √Åvila Martins</b></sub>üíª</td><td align=""center""><sub><b>szantogab</b></sub>üíª</td><td align=""center""><sub><b>dbrb</b></sub>üíª</td><td align=""center""><sub><b>Yunyu Lin</b></sub>üíª</td></tr><tr><td align=""center""><sub><b>Ammar Atef</b></sub>üíª</td><td align=""center""><sub><b>Ariel Carbonaro</b></sub>üíª</td><td align=""center""><sub><b>ArneSchulze</b></sub>üíª</td><td align=""center""><sub><b>Christian Wesselhoeft</b></sub>üíª</td><td align=""center""><sub><b>JarrodCColburn</b></sub>üíª</td><td align=""center""><sub><b>M. Walker Wells</b></sub>üíª</td><td align=""center""><sub><b>Mateus Gustavo de Freitas e Silva</b></sub>üíª</td></tr><tr><td align=""center""><sub><b>pleopardi</b></sub>üíª</td><td align=""center""><sub><b>Sat Mandir S. Khalsa</b></sub>üíª</td><td align=""center""><sub><b>Nitish Kumar Singh</b></sub>üíª</td></tr></table>

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the all-contributors specification. Contributions of any kind are welcome!"
2351,"graphql-compose,graphql-compose","Toolkit for generating complex GraphQL Schemas on Node.js. 









graphql-compose ‚Äì provides a type registry with a bunch of methods for programmatic schema construction. It allows not only to extend types but also remove fields, interfaces, args. If you want to write your graphql schema generator ‚Äì graphql-compose is a good instrument for you.
provides methods for editing GraphQL output/input types (add/remove fields/args/interfaces)
introduces Resolver's ‚Äì the named graphql fieldConfigs, which can be used for finding, updating, removing records
provides an easy way for creating relations between types via Resolver's
provides converter from OutputType to InputType
provides projection parser from AST
provides GraphQL schema language for defining simple types
adds additional types Date, Json
graphql-compose-[plugin] ‚Äì are declarative generators/plugins built on top of graphql-compose, which take some ORMs, schema definitions and create GraphQL Models from them or modify existing GraphQL Types.
graphql-compose-json - generates GraphQL type from JSON (a good helper for wrapping REST APIs)
graphql-compose-mongoose - generates GraphQL types from mongoose (MongoDB models) with Resolvers.
graphql-compose-elasticsearch - generates GraphQL types from elastic mappings; ElasticSearch REST API proxy via GraphQL.
graphql-compose-aws - expose AWS Cloud API via GraphQL
graphql-compose-relay - reassemble GraphQL types with Relay specific things, like Node type and interface, globalId, clientMutationId.
graphql-compose-connection - generates connection Resolver from findMany and count Resolvers.
graphql-compose-dataloader - adds DataLoader to graphql-composer resolvers.
graphql-compose.herokuapp.com - Live demo of GraphQL Server (9 models, 14 files, ~750 LOC)
nodkz.github.io/relay-northwind - Live demo of Relay client working with the server above (8 crazy pages, 47 files, ~3000 LOC)
Please follow Quick Start Guide for the complete example.
Here is just a demo of ambiguity ways of types definitions:
This project exists thanks to all the people who contribute.

Thank you to all our backers! üôè [Become a backer]

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor]










MIT"
2425,"mkdocs,mkdocs","Project documentation with Markdown.. Project documentation with Markdown



MkDocs is a fast, simple and downright gorgeous static site
generator that's geared towards building project documentation. Documentation
source files are written in Markdown, and configured with a single YAML
configuration file. It is designed to be easy to use and can be extended with
third-party themes, plugins, and Markdown extensions.
Please see the Documentation for an introductory tutorial and a full
user guide.
Build static HTML files from Markdown files.
Use Plugins and Markdown Extensions to enhance MkDocs.
Use the built-in themes, third party themes or create your own.
Publish your documentation anywhere that static files can be served.
Much more!
If you need help with MkDocs, do not hesitate to get in contact with us!
For questions and high-level discussions, use Discussions on GitHub.
For small questions, a good alternative is the Chat room on
Gitter/Matrix (new!)
To report a bug or make a feature request, open an Issue on GitHub.
Please note that we may only provide
support for problems/questions regarding core features of MkDocs. Any
questions or bug reports about features of third-party themes, plugins,
extensions or similar should be made to their respective projects.
But, such questions are not banned from the chat room.
Make sure to stick around to answer some questions as well!
Official Documentation
Latest Release Notes
MkDocs Wiki (Third-party themes, recipes, plugins and more)
Best-of-MkDocs (Curated list of themes, plugins and more)
The MkDocs project welcomes, and depends on, contributions from developers and
users in the open source community. Please see the Contributing Guide for
information on how you can help.
Everyone interacting in the MkDocs project's codebases, issue trackers, and
discussion forums is expected to follow the PyPA Code of Conduct.
<!-- Badges -->
<!-- Links -->
BSD-2-Clause"
2426,"jsdoc,jsdoc","An API documentation generator for JavaScript.. An API documentation generator for JavaScript.
Want to contribute to JSDoc? Please read CONTRIBUTING.md.
JSDoc supports stable versions of Node.js 8.15.0 and later. You can install
JSDoc globally or in your project's node_modules folder.
To install the latest version on npm globally (might require sudo;
learn how to fix this):
To install the latest version on npm locally and save it in your package's
package.json file:
Note: By default, npm adds your package using the caret operator in front of
the version number (for example, ^3.6.3). We recommend using the tilde
operator instead (for example, ~3.6.3), which limits updates to the most
recent patch-level version. See
this Stack Overflow answer for
more information about the caret and tilde operators.
If you installed JSDoc locally, the JSDoc command-line tool is available in
./node_modules/.bin. To generate documentation for the file
yourJavaScriptFile.js:
If you installed JSDoc globally, run the jsdoc command:
By default, the generated documentation is saved in a directory named out. You
can use the --destination (-d) option to specify another directory.
Run jsdoc --help for a complete list of command-line options.
The JSDoc community has created templates and other tools to help you generate
and customize your documentation. Here are a few of them:
DocStrap
(example)
jsdoc3Template
(example)
docdash
(example)
tui-jsdoc-template
(example)
better-docs
(example)
Integrating GitBook with
JSDoc
Documentation is available at jsdoc.app.
Contribute to the docs at
jsdoc/jsdoc.github.io.
Join JSDoc's Slack channel.
Ask for help on the
JSDoc Users mailing list.
Post questions tagged jsdoc to
Stack Overflow.
JSDoc is copyright (c) 2011-present Michael Mathews &#109;&#105;&#99;&#109;&#97;&#116;&#104;&#64;&#103;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109; and
the contributors to JSDoc.
JSDoc is free software, licensed under the Apache License, Version 2.0. See the
LICENSE file for more details."
2427,"github,opensource.guide","üìö Community guides for open source creators. Open Source Guides (https://opensource.guide/) are a collection of resources for individuals, communities, and companies who want to learn how to run and contribute to an open-source project.
Open Source Guides were created and are curated by GitHub, along with input from outside community reviewers, but they are not exclusive to GitHub products. One reason we started this project is that we felt that there weren't enough resources for people creating open-source projects.
Our goal was to aggregate community best practices, not what GitHub (or any other individual or entity) thinks is best. Therefore, we used examples and quotations from others to illustrate our points.
This site is powered by Jekyll. Check out our contributing guidelines for ways to offer feedback and contribute.
Content is released under CC-BY-4.0. See notices for complete details, including attribution guidelines, contribution terms, and software and third-party licenses and permissions.
The initial release of these guides were authored by @nayafia, @bkeepers, @stephbwills, and @mlinksva.
Thanks to @aitchabee, @benbalter, @brettcannon, @caabernathy, @coralineada, @dmleong, @ericholscher, @gr2m, @janl, @jessfraz, @joshsimmons, @kfogel, @kytrinyx, @lee-dohm, @mikeal, @mikemcquaid, @nathansobo, @nruff, @nsqe, @orta, @parkr, @shazow, @steveklabnik, and @wooorm for lending their valuable input and expertise leading up to the initial release, and to @sophshep and @jeejkang for designing and illustrating the guides.
While we've got advice about running an open source project, we're not lawyers. Be sure to read our disclaimer before diving in."
2428,"cheat,cheat","cheat allows you to create and view interactive cheatsheets on the command-line. It was designed to help remind *nix system administrators of options for commands that they use frequently, but not frequently enough to remember.. cheat allows you to create and view interactive cheatsheets on the
command-line. It was designed to help remind *nix system administrators of
options for commands that they use frequently, but not frequently enough to
remember.

Use cheat with cheatsheets.
The next time you're forced to disarm a nuclear weapon without consulting
Google, you may run:
You will be presented with a cheatsheet resembling the following:
To view a cheatsheet:
To edit a cheatsheet:
To view the configured cheatpaths:
To list all available cheatsheets:
To list all cheatsheets that are tagged with ""networking"":
To list all cheatsheets on the ""personal"" path:
To search for the phrase ""ssh"" among cheatsheets:
To search (by regex) for cheatsheets that contain an IP address:
Flags may be combined in intuitive ways. Example: to search sheets on the
""personal"" cheatpath that are tagged with ""networking"" and match a regex:
For installation and configuration instructions, see INSTALLING.md.
Cheatsheets are plain-text files with no file extension, and are named
according to the command used to view them:
Cheatsheet text may optionally be preceeded by a YAML frontmatter header that
assigns tags and specifies syntax:
The cheat executable includes no cheatsheets, but community-sourced
cheatsheets are available. You will be asked if you would like to
install the community-sourced cheatsheets the first time you run cheat.
Cheatsheets are stored on ""cheatpaths"", which are directories that contain
cheatsheets. Cheatpaths are specified in the conf.yml file.
It can be useful to configure cheat against multiple cheatpaths. A common
pattern is to store cheatsheets from multiple repositories on individual
cheatpaths:
The readonly option instructs cheat not to edit (or create) any cheatsheets
on the path. This is useful to prevent merge-conflicts from arising on upstream
cheatsheet repositories.
If a user attempts to edit a cheatsheet on a read-only cheatpath, cheat will
transparently copy that sheet to a writeable directory before opening it for
editing.
At times, it can be useful to closely associate cheatsheets with a directory on
your filesystem. cheat facilitates this by searching for a .cheat folder in
the current working directory. If found, the .cheat directory will
(temporarily) be added to the cheatpaths.
Shell autocompletion is currently available for bash, fish, and zsh. Copy
the relevant completion script into the appropriate directory on
your filesystem to enable autocompletion. (This directory will vary depending
on operating system and shell specifics.)
Additionally, cheat supports enhanced autocompletion via integration with
fzf. To enable fzf integration:
Ensure that fzf is available on your $PATH
Set an envvar: export CHEAT_USE_FZF=true"
2429,"reactjs,react.dev","The React documentation website. This repo contains the source code and documentation powering react.dev.
Git
Node: any 12.x version starting with v12.0.0 or greater
Yarn: See Yarn website for installation instructions
A fork of the repo (for any contributions)
A clone of the react.dev repo on your local machine
cd react.dev to go into the project root
yarn to install the website's npm dependencies
yarn dev to start the development server (powered by Next.js)
open http://localhost:3000 to open the site in your favorite browser
The documentation is divided into several sections with a different tone and purpose. If you plan to write more than a few sentences, you might find it helpful to get familiar with the contributing guidelines for the appropriate sections.
git checkout main from any folder in your local react.dev repository
git pull origin main to ensure you have the latest main code
git checkout -b the-name-of-my-branch (replacing the-name-of-my-branch with a suitable name) to create a branch
Follow the ""Running locally"" instructions
Save the files and check in the browser
Changes to React components in src will hot-reload
Changes to markdown files in content will hot-reload
If working with plugins, you may need to remove the .cache directory and restart the server
If possible, test any visual changes in all latest versions of common browsers, on both desktop and mobile.
Run yarn check-all. (This will run Prettier, ESLint and validate types.)
git add -A &amp;&amp; git commit -m ""My message"" (replacing My message with a commit message, such as Fix header logo on Android) to stage and commit your changes
git push my-fork-name the-name-of-my-branch
Go to the react.dev repo and you should see recently pushed branches.
Follow GitHub's instructions.
If possible, include screenshots of visual changes. A preview build is triggered after your changes are pushed to GitHub.
If you are interested in translating react.dev, please see the current translation efforts here.
Content submitted to react.dev is CC-BY-4.0 licensed, as found in the LICENSE-DOCS.md file."
2430,"matheusfelipeog,beautiful-docs","Pointers to useful, well-written, and otherwise beautiful documentation.. I love documentation. If you work with/are writing code intended for usage and consumption by more than one person, you should love it, too. Documentation and other resources will make or break the success of your project. And the more open and collaborative you want development to be, the more crucial docs become.
With that in mind, here's a list of docs and other developer resources that myself and others find particularly useful, well-written, and otherwise ""beautiful."" May they serve to inspire you when writing and designing yours. Thanks to various contributors, we now also have sections dedicated to Writing about Documentation and Tools for Generating Docs.
This should be updated fairly regularly. As usual, pull requests are encouraged. 
If you're contributing a link, be sure to include a few words on why you're adding it and some sort of self-attribution so that people can know from whom it came.
All docs are listed in the order they were added. Keep this order when submitting your PR. 
Redis Commands - Most of the Redis docs are exceptional, but this section really epitomizes the combination of good design and usability. And all the individual command pages give you the ability to test things out without leaving the page. Pretty close to perfect.
GitHub Developer Docs - I don't always get excited about accordion-based navigation, but when I do...
Dropwizard - Beautiful and concise; another Bootstrap joint. (contributed by mrtazz).
Riak Pipe README - The simplicity of READMEs means that you can't obscure shitty content with flashy design. This one is written by my Basho colleague Bryan Fink and should be committed to memory as an excellent example of how to write READMEs.
Learn You Some Erlang (contributed by @lenary) (It should also be noted that LYSE was inspired by Miran Lipovaƒça's Learn You A Haskell.)
Django Documentation - (contributed by @bretthoerner)
Clojuredocs.org (contributed by @mrb_bk)
FreeBSD Handbook - Clean and direct documentation of an OS. (contributed by @mrtazz)
Ruby on Rails Guides - (contributed by @seancribbs)
Stripe Documentation and Full API Documentation - Multiple languages, example code, good detail on the API; especially love how the API docs show examples for curl and their supported client libraries. (contributed simultaneously by @tnm and @technoweenie)
Librato Developer Docs - Librato's RESTful API documentation. (contributed by @josephruscio)
CoffeeScript - (contributed by @joedevivo)
Why's (Poignant) Guide to Ruby - (contributed by @joedevivo)
Twitter Bootstrap - Documented the project using the project. (contributed by @kylewest)
hogan.js - Simple and Beautiful. (contributed by @kylewest)
Scala Documentation - Beautifully-styled Scala documentation site. (Contributed by David M. Lee)
Linode Guides and Tutorials (contributed by @davidmatas)
Symfony Docs (contributed by Rodney Keeling)
Underscore.js - Simple, clean, single page. (contributed by @twe4ked)
Qt - Very comprehensive documentation with tutorials and guides and great examples. (contributed by @nikhilcutshort)
Savon.rb - (contributed by Mathias Meyer)
Android Developer Documentation (contributed by Rajeev N B @rBharshetty)
Postmark Developer Docs - Simple, easy to navigate, informative.
Twitter Developers Docs - In-depth and very well organized. (contributed by @tsantero)
GitHub Styleguide - Pragmatic styleguide with sections on Ruby, JavaScript and CSS. (contributed by @lenary)
Moment.js - Thorough, well-designed, and excellent use of top-nav. (contributed by @joshuapoehls)
Solarized - Beautiful documentation about a color scheme, using the color scheme from Ethan Schoonover. (contributed by @seancribbs)
Ember.js - The overall navigation could be done a bit better but the presentation and readability is quite nice. (contributed by @cmeik)
Riak Docs - Well-designed, excellent use of versioning, integrated search, and much more.
Go By Example - Clean, simple, and extensive. These docs that make you want to learn Go just because they make it so straightforward.
gevent API Docs - Clean, polished docs for gevent. (contributed by rubik)
Riemann - Great design, easy to read, and very thorough with introductory and advanced topics.
Pretty RFC - Reworked IETF documents for easier viewing.
Vagrant - Well organized, easy to read, attractive design. (@clstokes)
Wolfram Language - Nice top-level navigation in a grid layout. Topics grouped by color, each with a relevant graphic and on-click menu of sub-topics. (contributed by troytop)
Lisp Flavored Erlang: Quick Start - Attractive presentation, nice jumpstart for the language. (contributed by @macintux)
Thinking Forth - Forth is now largely eclipsed by Factor, but the book remains an inspiring look at the ideas behind this stack-based language. (contributed by @macintux)
Packer Documentation - These are just lovely.
Abjad: Modeling Music in Python - Clean styling, and impressive integration of figures and diagrams. (contributed by @adorsk)
SqlAlchemy - One of the most comprehensive pieces of documentation I've ever seen, with excellent linking and layout. (contributed by @adorsk)
Sonata Project - All the Sonata Project bundles for Symfony2 on a single page. These have a nice, clear layout. (contributed by @NoScopie)
Laravel - Easily-readable and well-organized docs. Navigation is well formatted and articles are easy to consume. (contributed by @ToddSmithSalter)
FullCalendar ‚Äì Concise overview of all APIs on a single page, and in-depth descriptions for each. (contributed by @gr2m)
Rust Guides - Rust is a stable and memory-save language and the docs (written by Steve Klabnik) are clearly a high priority. The guides in particular illustrate core concepts of the standard library in a conversational, accessible style. (contributed by Nick Cox
MongoDB Manual - Easy to navigate, clean, carefully and well designed manual. (contributed by ericbn)
Mailgun Documentation - Email service for developers. Language selector, API code samples, editable in the browser, created with Sphinx. (contributed by @leemunroe)
Grav Documentation - Documentation for Grav, a modern open source flat-file CMS. Tightly integrated with GitHub in markdown format, with quick search and highlight. (contributed by @rhuk)
Mailjet API guides - Great documentation with generated code samples using Slate from Tripit
Atlassian GIT Tutorials - Documentation and tutorials on Git. I like their layout. It is simple and focused on explaining the concepts with good diagrams, tutorials and glossary. (contributed by @vaseehh)
Digital Ocean API Docs - These docs are stellar. Examples are abundant and the organization makes each component of the API easy to reason about. (contributed by @jasonaibrahim)
The LTTng Documentation - The whole documentation of the open source LTTng project on a single page (one page per project release). Features are: sparse style with pleasant colors, good information structure, auto-scrolling navigation, mobile-friendly, dedicated example boxes, glossary, tight integration with the online man pages of the same version which are rendered with the same style. Source is written in AsciiDoc (project's man pages too), with custom inline macros for specific features. (contributed by @eepp)
DocRaptor Covers HTML-to-PDF API language wrappers, styling instructions and core API docs.
Go Programming Language Docs - These docs are simple, well-organized, and effective. (contributed by Ed Bacher)
Sequelize - Simple, clear and well-structured docs with a complete Class Reference and listing of all public methods. (contributed by @bandantonio)
Vue.js Docs - The Progressive JavaScript Framework: An approachable, performant and versatile framework for building web user interfaces. (contributed by @jinjiang)
Posit Documentation - Clean, simple, and easy on the eyes. (contributed by @foxnic)
FastAPI - Python framework for building APIs with beautiful and complete documentation. (contributed by @jrwaine)
Circles, Sines and Signals - A Compact Primer on Digital Signal Processing. (contributed by @PharkMillups)
Designing Great API Docs - Blog post by @jamesyu about what he/Parse finds essential in API Docs. (contributed by @hobbyist)
TomDoc - A specification for Ruby library API docs by @mojombo (contributed by @lenary)
Write the Docs - A conference for authors of technical documentation. (contributed by @macintux)
Writing Great Documentation - Covers a variety of topics relating to writing good documentation such as content, style, formatting and so on. (contributed by Paul A. Wilson)
Google Developer Documentation Style Guide - The best style guide I've seen since the Sun Style Guide. I'm agitating to get my team to replace the MMoS with this as the place to look for style guidance that doesn't exist in our team's style guide. (contributed by @carolinakinetic)
API Blueprint - A powerful high-level API description language for web APIs. (contributed by @PharkMillups)
Di√°taxis - A systematic framework for technical documentation authoring. (contributed by @matheusfelipeog)
docco - Pretty docs from source code comments with ports for many languages. (contributed by @kylewest)
Sphinx - Comprehensive documentation tool using restructuredText with beautiful HTML and PDF output. (contributed by @nikhilcutshort)
MkDocs - Documentation with Markdown, written in Python. (contributed by ericbn)
Read the Docs - Hosted docs using Sphinx or MkDocs, supports translations and finding docs for specific software versions. Used by the Django Docs. (contributed by Stephen Paulger)
ApiGen - Creates clean API documentation from PHP source code (contributed by bryceadams)
docgenerator - Organize your documentation in Markdown files. (contributed by Florian Margaine)
dexy - Extensible documentation/report generator supporting multiple programming languages and several input and output formats. (contributed by troytop)
Slate - Static API documentation creation tool from the team at Tripit.
MireDot - REST API documentation generator for Java. Plugs into your build process and generates a searchable html page. (contributed by bertvh)
codo - CoffeeScript API documentation generator, similar to YARD. (contributed by Logan Koester)
Flatdoc - Create well designed open source documentation from Github repository README files or simple Markdown files. (contributed by @moore)
GitBook - Utility for generating documentation, books and exercises using GitHub/Git and Markdown. (contributed by Samy Pess√©)
Daux - A documentation generator that uses a simple folder structure and Markdown files to create custom documentation on the fly. It helps you create great looking documentation in a developer friendly way. (contributed by veshinak)
comment.js - Simple API documentation generator. (contributed by @dciccale)
phpDocumentor - phpDocumentor enables you to generate documentation from your PHP source code. (contributed by shivamdixit)
Hologram - Hologram is a Ruby gem that parses comments in your CSS and helps you turn them into a beautiful style guide. (contributed by @jchild3rs)
Middleman - Static site generator using all the shortcuts and tools in modern web development. (contributed by Sota Yamashtia)
documentation.js - Generates documentation from JavaScript source code. (contributed by tmcw)
SassDoc - A Sass documentation generator that utilizes inline comments to make pretty and powerful docs. (contributed by Hugo Giraudel)
Pickles - Pickles is an open source living documentation generator that works on feature files written in the Gherkin language.
ApiDoc RESTful web API Documentation Generator that creates documentation from API descriptions in your source code. (contributed by Trenton Broughton)
Documentation theme for Jekyll - Documentation theme built on Jekyll. Includes detailed notes on how to tackle nearly every technical documentation scenario, from single sourcing to conditional filtering, PDF output, relative links, and more.
JSDoc - Generate JavaScript API documentation directly from source code comments. Also useful as a style guide for JS commenting, in general. Google uses a version of JSDoc tags for its Closure compiler.
Asciidoctor - Asciidoctor is a fast text processor and publishing toolchain for converting AsciiDoc content to HTML5, DocBook 5 (or 4.5) and other formats. (contributed by ThomasG77)
Bookdown - A open-source (GPL-3) R package to facilitate writing books and long-form articles/reports with R Markdown. Support for languages other than R, including C/C++, Python, and SQL, etc. (contributed by ThomasG77)
Pandoc If you need to convert files from one markup format into another, pandoc is your swiss-army knife. Can generate documentation from most common markup languages. (contributed by ThomasG77)
LaTex Latex is typesetting system that has been around for over 30 yrs and still very popular mostly in academia settings. Its strongest strength is in its capacity and flexibility in creating beautiful mathematical formulas. (contributed by Tao Li)
gd2md-html - gd2md-html is a free Google Docs add-on that converts a formatted Google Doc to a simple, readable Markdown or HTML text file. gd2md-html lets you use Google Docs' editing, formatting, and collaboration tools before you publish to a Markdown or HTML platform. (contributed by Ed Bacher)
Documize - One place to author, approve, publish documentation (contributed by HarveyKandola)
ESDoc - Documentation generator for JavaScript. Similar to JSDoc, but provides more useful features and stylish look and feel. (contributed by @bandantonio)
Doxygen - Doxygen is the de facto standard tool for generating documentation from almost all popular programming languages. (contributed by @nocomplexity)
Ignite - Markdown documentation tool built around react components as first class plugins. Docs generateed using bulma. (contributed by hipstersmoothie)
Docusaurus - A project by Facebook for building, deploying, and maintaining open source project websites easily. Docusaurus currently provides support to help your website use translations, search, and versioning, along with some other special documentation markdown features. (contributed by akhildaphara)
Scramble - Scramble generates API documentation for Laravel project. Without requiring you to manually write PHPDoc annotations. (contributed by danie1net0)"
2431,"mdn,content","The content behind MDN Web Docs. MDN Web Docs is an open-source, collaborative project that documents web technologies including CSS, HTML, JavaScript, and Web APIs.
Alongside detailed reference documentation, we provide extensive learning resources for students and beginners getting started with web development.
MDN's mission is to provide a blueprint for a better internet and empower a new generation of developers and content creators to build it.
The strength of MDN Web Docs lies in its vast community of active readers and contributors.
Since 2005, approximately 45,000 contributors have created the documentation we know and love.
Together, contributors have created over 45,000 documents that make up an up-to-date, comprehensive, and free resource for web developers worldwide.
In addition to English-language articles, over 35 volunteers lead translation and localization efforts for Chinese, French, Japanese, Korean, Portuguese, Russian, and Spanish.
To set up the site locally, you need to have Node.js and Yarn installed.
You can check if these are installed by running the following commands:
After you have installed Node.js and Yarn, you can install the dependencies using yarn and start the local preview:
Once started, a live preview is available at http://localhost:5042/.
You can contribute to MDN Web Docs and be a part of our community through content contributions, engineering, or translation work.
The MDN Web Docs project welcomes contributions from everyone who shares our goals and wants to contribute constructively and respectfully within our community.
To find out how to get started, see the CONTRIBUTING.md document in this repository.
By participating in and contributing to our projects and discussions, you acknowledge that you have read and agree to our Code of Conduct.
You can communicate with the MDN Web Docs team and community using the communication channels."
2432,"awsdocs,aws-doc-sdk-examples","Welcome to the AWS Code Examples Repository.  This repo contains code examples used in the AWS documentation, AWS SDK Developer Guides, and more. For more information, see the Readme.md file below.. This repository contains code examples that demonstrate how to use the AWSK SDKs to interact with AWS services.
Many examples are injected into the AWS Documentation.
Code examples for each language's SDK can be found within the following subdirectories:
Within each directory, you will find SDK-specific instructions for understanding and invoking example code.
To invoke this example code, you must have an AWS account. For more information about creating an account, see AWS Free Tier. 
You must also have AWS credentials configured. For steps on using the AWS Command Line Interface (AWS CLI) to configure credentials, see CLI Configuration basics
These code examples interact with services that may incur charges to your AWS account. For more information, see AWS Pricing.
Additionally, example code might theoretically modify or delete existing AWS resources. As a matter of due diligence, do the following:
Be aware of the resources that these examples create or delete.
Be aware of the costs that might be charged to your account as a result.
Back up your important data.
This repository thrives on your contributions! ‚ù§Ô∏è To get involved, see the CONTRIBUTING.md. üôè
All content in this repository, unless otherwise stated, is 
Copyright ¬© Amazon Web Services, Inc. or its affiliates. All rights reserved.
Except where otherwise noted, all examples in this collection are licensed under the Apache
license, version 2.0 (the ""License""). The full
license text is provided in the LICENSE file accompanying this repository."
2433,"opticdev,optic","Generate, Diff, and Test OpenAPI Descriptions. An open source toolkit for working API-first. . Optic's Open Source tools make OpenAPI and API-first practices easy for any team to adopt.
Understand the API changes between two versions of an OpenAPI descriptions. Optic helps teams review proposed API changes:
diff current branch with base branch
between two OpenAPI files

API diffs containing breaking changes will be flagged so you do not break consumers. Optic helps you keep your promises.

Create new and update existing OpenAPI specifications straight from your services' traffic. Optic makes it easy to adopt OpenAPI in a day, without changing how you work.
Show Optic real API traffic using the oas capture commands. Traffic can come from your development environment, tests, or the browser.
Captured traffic is like working copy in Git. Use oas status to see the difference between how your OpenAPI specification says your API works, and how it actually works.

Run oas add and oas update to update the spec. Optic precision patches your OpenAPI file with the same additions, updates, and removals you would manually write. This is faster and much less error-prone than writing OpenAPI by hand.


Using oas to update your spec is like working with a collaborator. It helps you write all the boilerplate OpenAPI and keep your spec in sync with the actual API's behavior.
‚úÖ Never overwrites changes developers make to the same OpenAPI file
‚úÖ Respects $refs across multiple files
‚úÖ Improves accuracy of your specification
‚úÖ Speeds up your team
MIT
Thanks goes to these wonderful people (emoji key):
<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->


<!-- ALL-CONTRIBUTORS-BADGE:END -->
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><sub><b>Aidan Cunniffe</b></sub>üìñ üíª</td>
    <td align=""center""><sub><b>devdoshi</b></sub>üìñ üíª</td>
    <td align=""center""><sub><b>Evan Mallory</b></sub>üìñ</td>
    <td align=""center""><sub><b>Jaap van Hardeveld</b></sub>üíª üìñ</td>
    <td align=""center""><sub><b>Ronak Shah</b></sub>üíª üìñ</td>
    <td align=""center""><sub><b>taraedits</b></sub>üìñ</td>
    <td align=""center""><sub><b>Lou Manglass</b></sub>üíª üìñ</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Nate Meyer</b></sub>üíª</td>
    <td align=""center""><sub><b>Tim Gates</b></sub>üìñ</td>
    <td align=""center""><sub><b>Matthew Hudson</b></sub>üìñ</td>
    <td align=""center""><sub><b>LaV</b></sub>üìñ</td>
    <td align=""center""><sub><b>Gaurav Nelson</b></sub>üìñ</td>
    <td align=""center""><sub><b>Ross Nordstrom</b></sub>üé® üíª üêõ</td>
    <td align=""center""><sub><b>Kin Lane</b></sub>ü§î üñã</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Viljami Kuosmanen</b></sub>ü§î üñã</td>
    <td align=""center""><sub><b>Richard Crowley</b></sub>üî¨ ü§î</td>
    <td align=""center""><sub><b>dnmtr</b></sub>üëÄ</td>
    <td align=""center""><sub><b>Tim Perry</b></sub>üíª</td>
    <td align=""center""><sub><b>jordaniza</b></sub>üìñ</td>
    <td align=""center""><sub><b>Sandy Vanderbleek</b></sub>üìñ</td>
    <td align=""center""><sub><b>Dave Rolsky</b></sub>üìñ</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Baptiste Darthenay</b></sub>üìñ</td>
    <td align=""center""><sub><b>Alex Miller</b></sub>üìñ</td>
    <td align=""center""><sub><b>Joseph Shearer</b></sub>üíª</td>
    <td align=""center""><sub><b>Ray Bejjani</b></sub>üìñ</td>
    <td align=""center""><sub><b>Adrien Brault</b></sub>üìñ</td>
    <td align=""center""><sub><b>Nicholas Lim</b></sub>üìñ üíª</td>
    <td align=""center""><sub><b>Stephen Mizell</b></sub>üíª üìñ</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Bojan ƒêurƒëeviƒá</b></sub>üíª</td>
    <td align=""center""><sub><b>Taras Mankovski</b></sub>üìñ</td>
    <td align=""center""><sub><b>Ikko Ashimine</b></sub>üìñ</td>
    <td align=""center""><sub><b>Mukesh</b></sub>üíª</td>
    <td align=""center""><sub><b>Tony Knight</b></sub>üìñ</td>
    <td align=""center""><sub><b>Roger Dickey, Jr</b></sub>üìñ</td>
  </tr>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the all-contributors specification. Contributions of any kind welcome!"
2494,"vueuse,vueuse","Collection of essential Vue Composition Utilities for Vue 2 and 3. 

  


  


Collection of essential Vue Composition Utilities












  
    
  


üé™ Interactive docs & demos
üï∂ Seamless migration: Works for both Vue 3 and 2
‚ö° Fully tree shakeable: Only take what you want, bundle size
ü¶æ Type Strong: Written in TypeScript, with TS Docs
üîã SSR Friendly
üåé No bundler required: Usable via CDN
üî© Flexible: Configurable event filters and targets
üîå Optional Add-ons: Router, Firebase, RxJS, etc.
Refer to functions list or documentations for more details.
üé© From v4.0, it works for Vue 2 & 3 within a single package by the power of vue-demi!
Add ons | Nuxt Module
From v6.0, VueUse requires vue >= v3.2 or @vue/composition-api >= v1.1
It will be exposed to global as window.VueUse

See the Contributing Guide
This project is heavily inspired by the following awesome projects.
And thanks to all the contributors on GitHub!

MIT License ¬© 2019-PRESENT Anthony Fu"
2495,"surmon-china,vue-awesome-swiper","üèÜ Swiper component for @vuejs. 

  
    
  
  <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
  
    
  



&nbsp;

&nbsp;

&nbsp;

&nbsp;

Swiper component for Vue.
The vue-awesome-swiper project has been deprecated and superseded by Swiper Vue component, a TypeScript friendly project which is a recent official release provided by Swiper. For better stability, please migrate as soon as possible.
vue-awesome-swiper released its last version v5 for (bridge) transition. It's worth noting that APIs in this version are completely NOT compatible with that of previous version, it only re-exports swiper/vue and only supports Vue3, which means only functions of swiper/vue are available. For example, the following code is fully equivalent in vue-awesome-swiper@5. And if you want to check update catelog of Swiper API, please refer to Swiper Changelog.
If you need to use older versions of vue-awesome-swiper, you can find the corresponding version number below. Feel free to fork our code and maintain your own copy.
Swiper 5-6 vue-awesome-swiper@4.1.1 (Vue2)
Swiper 4.x vue-awesome-swiper@3.1.3 (Vue2)
Swiper 3.x vue-awesome-swiper@2.6.7 (Vue2)
Detailed changes for each release are documented in the release notes.
Licensed under the MIT License."
2496,"codesandbox,codesandbox-client","An online IDE for rapid web development. 
  
    
  


&nbsp;






An instantly ready, full-featured online IDE for web development on any device
with a browser. Enabling you to start new projects quickly and prototype
rapidly. With CodeSandbox, you can create web apps, experiment with code, test
ideas, and share creations easily.
CodeSandbox consists of several separate servers, some of which are open
sourced.
Client: the web application
Server: the Phoenix API server
Nginx: Nginx config files
Git Extractor:
responsible for extracting the source from a GitHub repository
CLI:
the CLI to upload a CodeSandbox project from your command line
You can find our documentation on our website
Thanks goes to these wonderful people
(emoji key):
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><sub><b>Ives van Hoorne</b></sub>üí¨ üìù üêõ üíª üé® üìñ üí° üöá üëÄ ‚ö†Ô∏è üîß</td>
    <td align=""center""><sub><b>Donavon West</b></sub>üíª</td>
    <td align=""center""><sub><b>Jeff Allen</b></sub>üíª</td>
    <td align=""center""><sub><b>Ben Gummer</b></sub>üíª</td>
    <td align=""center""><sub><b>James Gillmore</b></sub>üíª üêõ</td>
    <td align=""center""><sub><b>Ade Viankakrisna Fadlil</b></sub>üíª</td>
    <td align=""center""><sub><b>Tushar Sonawane</b></sub>üí¨ üíª üìñ ü§î</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Johann Hubert Sonntagbauer</b></sub>üêõ üíª</td>
    <td align=""center""><sub><b>Joachim Seminck</b></sub>üíª</td>
    <td align=""center""><sub><b>Subramanya Chakravarthy</b></sub>üíª</td>
    <td align=""center""><sub><b>Robert (Robby) O'Connor</b></sub>üöá</td>
    <td align=""center""><sub><b>Bogdan Luca</b></sub>üêõ üíª</td>
    <td align=""center""><sub><b>Divjot Singh</b></sub>üíª</td>
    <td align=""center""><sub><b>Jason Nall</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Lionel</b></sub>üíª üé®</td>
    <td align=""center""><sub><b>Philipp Brumm</b></sub>üíª</td>
    <td align=""center""><sub><b>Valentin Hervieu</b></sub>üíª üêõ</td>
    <td align=""center""><sub><b>Anenth</b></sub>üíª üé® ü§î</td>
    <td align=""center""><sub><b>Dony Sukardi</b></sub>üêõ üíª</td>
    <td align=""center""><sub><b>Geoffrey Dhuyvetters</b></sub>üé® üíª</td>
    <td align=""center""><sub><b>Eswar Yaganti</b></sub>üíª üöá</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Frank Tan</b></sub>üíª</td>
    <td align=""center""><sub><b>Bilal Budhani</b></sub>üíª</td>
    <td align=""center""><sub><b>El Juli</b></sub>üíª</td>
    <td align=""center""><sub><b>Arthur Denner</b></sub>üíª üìñ</td>
    <td align=""center""><sub><b>Radi Cho</b></sub>üêõ üíª ü§î</td>
    <td align=""center""><sub><b>Xiaoyi Chen</b></sub>üíª</td>
    <td align=""center""><sub><b>Gautam Arora</b></sub>üíª ü§î</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Haroen Viaene</b></sub>üíª üé®</td>
    <td align=""center""><sub><b>Nick Nisi</b></sub>üíª</td>
    <td align=""center""><sub><b>Abhishek Jakhotiya</b></sub>üíª üêõ</td>
    <td align=""center""><sub><b>Tom K√ºhl</b></sub>üíª</td>
    <td align=""center""><sub><b>br1anchen</b></sub>üíª</td>
    <td align=""center""><sub><b>Daniel Hsing</b></sub>üíª</td>
    <td align=""center""><sub><b>Maciej Kasprzyk</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Robert Heessels</b></sub>üìñ</td>
    <td align=""center""><sub><b>Ryan P. C. McQuen</b></sub>üíª</td>
    <td align=""center""><sub><b>Chris</b></sub>üíª</td>
    <td align=""center""><sub><b>Drew Smith</b></sub>üíª</td>
    <td align=""center""><sub><b>Eric Berry</b></sub>üíª</td>
    <td align=""center""><sub><b>Hum4n01d</b></sub>üíª</td>
    <td align=""center""><sub><b>Malachi Willey</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Michel Weststrate</b></sub>üíª</td>
    <td align=""center""><sub><b>Oleg</b></sub>üíª</td>
    <td align=""center""><sub><b>Paul Sherman</b></sub>üêõ üíª</td>
    <td align=""center""><sub><b>Ro Savage</b></sub>üíª</td>
    <td align=""center""><sub><b>Sam Denty</b></sub>üíª</td>
    <td align=""center""><sub><b>Zephraph</b></sub>üíª</td>
    <td align=""center""><sub><b>Josh Waller</b></sub>üêõ üíª üìñ</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Joe Ng'ethe</b></sub>üíª</td>
    <td align=""center""><sub><b>Carles Codony</b></sub>üíª</td>
    <td align=""center""><sub><b>Vytenis</b></sub>üíª</td>
    <td align=""center""><sub><b>Manuel Dugu√©</b></sub>üêõ üíª</td>
    <td align=""center""><sub><b>Demian Dekoninck</b></sub>üíª</td>
    <td align=""center""><sub><b>Drake Costa</b></sub>üíª</td>
    <td align=""center""><sub><b>Marko Stijak</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Ilya</b></sub>üí¨ ü§î</td>
    <td align=""center""><sub><b>Emerson Laurentino</b></sub>üíª üêõ</td>
    <td align=""center""><sub><b>Aaron Reisman</b></sub>üêõ üíª üì¶</td>
    <td align=""center""><sub><b>Colton Colcleasure</b></sub>üíª üêõ</td>
    <td align=""center""><sub><b>PJ Walker</b></sub>üêõ üíª</td>
    <td align=""center""><sub><b>Satya Rohith</b></sub>üíª üìñ</td>
    <td align=""center""><sub><b>Melanie Seltzer</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>ZYSzys</b></sub>üìñ</td>
    <td align=""center""><sub><b>Sara Vieira</b></sub>üíª üé® ü§î</td>
    <td align=""center""><sub><b>Fran√ßois Chalifour</b></sub>üêõ üíª</td>
    <td align=""center""><sub><b>Abdullah</b></sub>üíª üé®</td>
    <td align=""center""><sub><b>Jon Short</b></sub>üíª</td>
    <td align=""center""><sub><b>Daniel Vu</b></sub>üíª</td>
    <td align=""center""><sub><b>Vivek Nayyar</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Bob Ziroll</b></sub>üìñ</td>
    <td align=""center""><sub><b>Alexander Lichter</b></sub>üíª</td>
    <td align=""center""><sub><b>Chiamaka Nwolisa</b></sub>üíª</td>
    <td align=""center""><sub><b>Steve Shreeve</b></sub>üíª</td>
    <td align=""center""><sub><b>Robert Wildling</b></sub>üíª</td>
    <td align=""center""><sub><b>Ben Conolly</b></sub>üíª</td>
    <td align=""center""><sub><b>Wei-Wei Wu</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Alex Casillas</b></sub>üíª</td>
    <td align=""center""><sub><b>Brian Ng</b></sub>üíª</td>
    <td align=""center""><sub><b>Mike North</b></sub>üíª</td>
    <td align=""center""><sub><b>R√≥bert Oroszi</b></sub>üíª</td>
    <td align=""center""><sub><b>Adri√† Fontcuberta</b></sub>üíª</td>
    <td align=""center""><sub><b>Ant√≥nio Afonso</b></sub>üíª</td>
    <td align=""center""><sub><b>Artem Sapegin</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Brian Bartholomew</b></sub>üíª</td>
    <td align=""center""><sub><b>Christian Alfoni</b></sub>üíª</td>
    <td align=""center""><sub><b>David Baumgold</b></sub>üíª</td>
    <td align=""center""><sub><b>Evgeny Rodionov</b></sub>üíª</td>
    <td align=""center""><sub><b>Fathy Boundjadj</b></sub>üíª</td>
    <td align=""center""><sub><b>Fatih Altinok</b></sub>üíª</td>
    <td align=""center""><sub><b>Grant Timmerman</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>James</b></sub>üíª</td>
    <td align=""center""><sub><b>Kelson448</b></sub>üíª</td>
    <td align=""center""><sub><b>Ken Snyder</b></sub>üíª</td>
    <td align=""center""><sub><b>Kent C. Dodds</b></sub>üíª</td>
    <td align=""center""><sub><b>Khaled Garbaya</b></sub>üíª</td>
    <td align=""center""><sub><b>Liu</b></sub>üíª</td>
    <td align=""center""><sub><b>Maciej</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Matthew Gadd</b></sub>üíª</td>
    <td align=""center""><sub><b>Miguel Carvajal</b></sub>üíª</td>
    <td align=""center""><sub><b>Olaolu Olawuyi</b></sub>üíª</td>
    <td align=""center""><sub><b>Pete Nyk√§nen</b></sub>üíª</td>
    <td align=""center""><sub><b>Phil Hughes</b></sub>üíª</td>
    <td align=""center""><sub><b>Rodrigo Pombo</b></sub>üíª</td>
    <td align=""center""><sub><b>Sai Ram Kunala</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>The Gitter Badger</b></sub>üíª</td>
    <td align=""center""><sub><b>Tim Whitbeck</b></sub>üíª</td>
    <td align=""center""><sub><b>Wei Zhu</b></sub>üíª</td>
    <td align=""center""><sub><b>Wil Wilsman</b></sub>üíª</td>
    <td align=""center""><sub><b>abnessor aka findoff</b></sub>üíª</td>
    <td align=""center""><sub><b>cottom</b></sub>üíª</td>
    <td align=""center""><sub><b>gitname</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Bruce Xu</b></sub>üíª</td>
    <td align=""center""><sub><b>jess</b></sub>üíª</td>
    <td align=""center""><sub><b>Juliette Pr√©tot</b></sub>üíª</td>
    <td align=""center""><sub><b>Victoria Bergquist</b></sub>üíª üìñ</td>
    <td align=""center""><sub><b>Samrith Shankar</b></sub>üíª</td>
    <td align=""center""><sub><b>Mahendra Hirapra</b></sub>üíª</td>
    <td align=""center""><sub><b>Rabin Gaire</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Neville Mehta</b></sub>üíª</td>
    <td align=""center""><sub><b>Vasiliy</b></sub>üíª</td>
    <td align=""center""><sub><b>Romain Lanz</b></sub>üíª</td>
    <td align=""center""><sub><b>LiBe</b></sub>üíª</td>
    <td align=""center""><sub><b>Jeremy Bolding</b></sub>üíª</td>
    <td align=""center""><sub><b>Evan Bacon</b></sub>üíª</td>
    <td align=""center""><sub><b>Micha√´l De Boey</b></sub>üìù üêõ üíª üìñ üöá üîß</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>gabeeden</b></sub>üíª</td>
    <td align=""center""><sub><b>Tiffany White</b></sub>üíª</td>
    <td align=""center""><sub><b>James Bedford</b></sub>üíª</td>
    <td align=""center""><sub><b>Scott</b></sub>üíª</td>
    <td align=""center""><sub><b>Dutiyesh Salunkhe</b></sub>üíª</td>
    <td align=""center""><sub><b>Halit Ogunc</b></sub>üíª</td>
    <td align=""center""><sub><b>Yash Joshi</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Yehor</b></sub>üíª</td>
    <td align=""center""><sub><b>Jens de Rond</b></sub>üêõ üíª</td>
    <td align=""center""><sub><b>Benjamin Schachter</b></sub>üìñ</td>
    <td align=""center""><sub><b>Rafael</b></sub>üêõ üíª</td>
    <td align=""center""><sub><b>baremetalfreak</b></sub>üí¨ üêõ üíª</td>
    <td align=""center""><sub><b>Javed</b></sub>üíª</td>
    <td align=""center""><sub><b>R4M80MRX</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Dr. Derek Austin [aka dj D-REK from Richmond, VA]</b></sub>üêõ</td>
    <td align=""center""><sub><b>Sid</b></sub>üíª</td>
    <td align=""center""><sub><b>Yeison Daza</b></sub>üíª</td>
    <td align=""center""><sub><b>Shriram Balaji</b></sub>üíª</td>
    <td align=""center""><sub><b>Thomas Dillard</b></sub>üíª</td>
    <td align=""center""><sub><b>Chinmay Chaudhary</b></sub>üíª</td>
    <td align=""center""><sub><b>Sakthivel Sengodan Sapient</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Nabeelah</b></sub>üíª</td>
    <td align=""center""><sub><b>vanya829</b></sub>üíª</td>
    <td align=""center""><sub><b>Tane Morgan</b></sub>üíª</td>
    <td align=""center""><sub><b>Het Patel</b></sub>üíª</td>
    <td align=""center""><sub><b>Ivan Medina</b></sub>üíª</td>
    <td align=""center""><sub><b>Gobinath-Manokaran</b></sub>üíª</td>
    <td align=""center""><sub><b>Abdul Rauf</b></sub>üíª üìñ</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>milap1296</b></sub>üíª</td>
    <td align=""center""><sub><b>yevhen orlov</b></sub>üíª</td>
    <td align=""center""><sub><b>Nilesh Patel</b></sub>üíª</td>
    <td align=""center""><sub><b>Pooja Gaur</b></sub>üíª</td>
    <td align=""center""><sub><b>Sajad Hashemian</b></sub>üíª</td>
    <td align=""center""><sub><b>Carlos Galarza</b></sub>üìñ</td>
    <td align=""center""><sub><b>soorajshankar</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Matthias Christoph Munder</b></sub>üêõ üíª</td>
    <td align=""center""><sub><b>Anurag Hazra</b></sub>üíª</td>
    <td align=""center""><sub><b>johansenja</b></sub>üìñ</td>
    <td align=""center""><sub><b>Shodipo Ayomide</b></sub>üìñ</td>
    <td align=""center""><sub><b>Akash Joshi</b></sub>üíª</td>
    <td align=""center""><sub><b>Oleksandr Fediashov</b></sub>üêõ üíª</td>
    <td align=""center""><sub><b>John D.</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Nino</b></sub>üìñ</td>
    <td align=""center""><sub><b>Saurabh Daware</b></sub>üíª üîå</td>
    <td align=""center""><sub><b>Pablo Varela</b></sub>üíª</td>
    <td align=""center""><sub><b>Ryan Waldon</b></sub>üíª</td>
    <td align=""center""><sub><b>Andrew Cherniavskii</b></sub>üíª</td>
    <td align=""center""><sub><b>NullVoxPopuli</b></sub>üíª üñã üöß</td>
    <td align=""center""><sub><b>Josh</b></sub>üìñ</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Stefan Retief</b></sub>üêõ üíª</td>
    <td align=""center""><sub><b>Aditya</b></sub>üêõ üíª</td>
    <td align=""center""><sub><b>B2D1</b></sub>üìñ</td>
    <td align=""center""><sub><b>Artem</b></sub>üíª</td>
    <td align=""center""><sub><b>Hugo Wiledal</b></sub>üêõ üíª</td>
  </tr>
</table>

<!-- markdownlint-enable -->
<!-- prettier-ignore-end -->
<!-- ALL-CONTRIBUTORS-LIST:END -->


Thanks to Chromatic for providing the visual
testing platform that helps us catch unexpected changes."
2497,"nuxt,framework","The Intuitive Web Framework, based on Vue 3.. The repository for Nuxt 3 has updated to be https://github.com/nuxt/nuxt - please raise new issues, discussions and pull requests there üôè
For progress you can follow https://github.com/nuxt/framework/issues/10147, and you can read more about our plans in the Nuxt 2023 vision.
<hr>


Nuxt's goal is to make web development intuitive and performant, with a great developer experience.Learn more in the 'What is Nuxt?' section of our documentation.

  
  
  
  
 

<table>
<thead>
<tr>
<th width=""2000"" colspan=""2"">
</th>
</tr>
</thead>
<tbody>
<tr>
  <td width=""80"" align=""center"" valign=""top"">
    
    
  </td>
  <td valign=""top"">
    Documentation
    
      We highly recommend you take a look at the Nuxt documentation to level up.
    
  </td>
</tr>
<tr>
  <td width=""80"" align=""center"" valign=""top"">
    
    
  </td>
  <td valign=""top"">
    Modules
    
      Discover our list of modules to supercharge your Nuxt project. Created by the Nuxt team and community.
    
  </td>
</tr>
<tr>
  <td width=""80"" align=""center"" valign=""top"">
    
    
  </td>
  <td>
    Examples
    
      Explore different ways of using Nuxt features and get inspired with our list of examples.
    
  </td>
</tr>
</tbody>
</table>

<table>
<thead>
<tr>
<th width=""2000"" colspan=""2"">
</th>
</tr>
</thead>
<tbody>
<tr>
  <td width=""80"" align=""center"" valign=""top"">
    
    
  </td>
  <td valign=""top"">
    Reporting bugs
    
      Check out the Reporting Bugs page.
    
  </td>
</tr>
<tr>
  <td width=""80"" align=""center"" valign=""top"">
    
    
  </td>
  <td valign=""top"">
    Suggestions
    
      Check out the Contribution page.
    
  </td>
</tr>
<tr>
  <td width=""80"" align=""center"" valign=""top"">
    
    
  </td>
  <td valign=""top"">
    Questions
    
      Check out the Getting Help page.
    
  </td>
</tr>
</tbody>
</table>

Follow the docs to Set Up Your Local Development Environment to contribute to the framework and documentation.

  &nbsp;&nbsp;&nbsp;&nbsp;


MIT"
2498,"vuejs,pinia","üçç Intuitive, type safe, light and flexible Store for Vue using the composition api with DevTools support. 
  
    
  



  
  
  


Intuitive, type safe and flexible Store for Vue
üí° Intuitive
üîë Type Safe
‚öôÔ∏è Devtools support
üîå Extensible
üèó Modular by design
üì¶ Extremely light
Pinia works with both Vue 2 and Vue 3.
Pinia is the most similar English pronunciation of the word pineapple in Spanish: pi√±a. A pineapple is in reality a group of individual flowers that join together to create a multiple fruit. Similar to stores, each one is born individually, but they are all connected at the end. It's also a delicious tropical fruit indigenous to South America.
<!--sponsors start-->

<h4 align=""center"">Gold Sponsors</h4>

    
    
      <source srcset=""https://posva-sponsors.pages.dev/logos/vuejobs.svg"" media=""(prefers-color-scheme: dark)"" height=""72px"" alt=""VueJobs"" />
      
    </picture>
  


<h4 align=""center"">Silver Sponsors</h4>

    
    
      <source srcset=""https://posva-sponsors.pages.dev/logos/vuemastery-dark.png"" media=""(prefers-color-scheme: dark)"" height=""42px"" alt=""VueMastery"" />
      
    </picture>
  
    
    
      <source srcset=""https://posva-sponsors.pages.dev/logos/prefectlogo-dark.svg"" media=""(prefers-color-scheme: dark)"" height=""42px"" alt=""Prefect"" />
      
    </picture>
  


<h4 align=""center"">Bronze Sponsors</h4>

    
    
      <source srcset=""https://avatars.githubusercontent.com/u/2486424?u=7b0c73ae5d090ce53bf59473094e9606fe082c59&v=4"" media=""(prefers-color-scheme: dark)"" height=""26px"" alt=""Stanislas Ormi√É¬®res"" />
      
    </picture>
  
    
    
      <source srcset=""https://avatars.githubusercontent.com/u/4183726?u=6b50a8ea16de29d2982f43c5640b1db9299ebcd1&v=4"" media=""(prefers-color-scheme: dark)"" height=""26px"" alt=""Antony Konstantinidis"" />
      
    </picture>
  
    
    
      <source srcset=""https://posva-sponsors.pages.dev/logos/storyblok.png"" media=""(prefers-color-scheme: dark)"" height=""26px"" alt=""Storyblok"" />
      
    </picture>
  
    
    
      <source srcset=""https://posva-sponsors.pages.dev/logos/nuxt-dark.svg"" media=""(prefers-color-scheme: dark)"" height=""26px"" alt=""NuxtJS"" />
      
    </picture>
  


<!--sponsors end-->

A few notes about the project and possible questions:
Q: Is Pinia the successor of Vuex?
A: Yes
Q: What about dynamic modules?
A: Dynamic modules are not type safe, so instead we allow creating different stores that can be imported anywhere
If you are using Vue <2.7, make sure to install latest @vue/composition-api:
Create a pinia (the root store) and pass it to app:
You can create as many stores as you want, and they should each exist in different files:
defineStore returns a function that has to be called to get access to the store:
To learn more about Pinia, check its documentation.
MIT"
2499,"pagekit,vue-resource","The HTTP client for Vue.js. The plugin for Vue.js provides services for making web requests and handle responses using a XMLHttpRequest or JSONP.
Supports the Promise API and URI Templates
Supports interceptors for request and response
Supports latest Firefox, Chrome, Safari, Opera and IE9+
Supports Vue 1.0 & Vue 2.0
Compact size 14KB (5.3KB gzipped)
You can install it via yarn or NPM.
Available on jsdelivr, unpkg or cdnjs.
Details changes for each release are documented in the release notes.
If you find a bug or want to contribute to the code or documentation, you can help by submitting an issue or a pull request.
MIT"
2500,"vuematerial,vue-material","Vue.js Framework - ready-to-use Vue components with Material Design, free forever.. 
  
    
  


Material Design for Vue.js


  
    
  

  
    
  

  
    
  

  
    
  


Vue Material is Simple, lightweight and built exactly according to the Google Material Design specs
Build well-designed apps that can fit on every screen with support to all modern Web Browsers with dynamic themes, components on demand and all with an ease-to-use API
Documentation & demos
Examples
Install Vue Material through npm or yarn
<small>* Others package managers like JSPM and Bower are not supported yet.</small>
Import or require Vue and Vue Material in your code:
Or use individual components:
Alternatively you can download and reference the script and the stylesheet in your HTML:
Optionally import Roboto font & Material Icons from Google CDN:
Changelog
If you have any questions, ideas or you want to discuss with Vue Material community, use Discord to join us.
Please make sure to read the Contributing Guide before making a pull request.
Vue Material supports all modern browsers.
<small>May work in other browsers but it's untested.</small>
<a class=""contributors-image"" href=""https://github.com/vuematerial/vue-material/contributors"">
Thank you to all our backers! üôè [Become a backer]

Vue Material does not run under the umbrella of any company or anything like that. It is an independent project created by <a data-v-9248b2ee="""" href=""https://www.github.com/marcosmoura"" target=""_blank"">Marcos Moura in his spare time, which has become one of the most used UI Libraries for Vue.js. The development is active and we are working hard to release great things for you.
elviskang for donating the npm package name!
Bruno Castro for the awesome Vue Material Logo.
Supported by Creative Tim
MIT"
2581,"thoughtbot,ex_machina","Create test data for Elixir applications. ExMachina is part of the thoughtbot Elixir family of projects.
ExMachina makes it easy to create test data and associations. It works great
with Ecto, but is configurable to work with any persistence library.
This README follows master, which may not be the currently published version. Here are the
docs for the latest published version of ExMachina.
In mix.exs, add the ExMachina dependency:
And start the ExMachina application. For most projects (such as
Phoenix apps) this will mean adding :ex_machina to the list of applications in
mix.exs. You can skip this step if you are using Elixir 1.4 or later.
In mix.exs, add the ExMachina dependency:
Add your factory module inside test/support so that it is only compiled in the
test environment.
Next, be sure to start the application in your test/test_helper.exs before
ExUnit.start:
You will follow the same instructions as above, but you will also need to add
test/support to your compilation paths (elixirc_paths) if you have not done
so already.
In mix.exs, add test/support to your elixirc_paths for just the test env.
Check out the docs for more details.
Define factories:
Using factories (check out the docs for more details):
By default, ExMachina will merge the attributes you pass into build/insert into
your factory. But if you want full control of your attributes, you can define
your factory as accepting one argument, the attributes being passed into your
factory.
NOTE that in this case ExMachina will not merge the attributes into your
factory, and you will have to do this on your own if desired.
Because you have full control of the factory when defining it with one argument,
you can build factories that are neither maps nor structs.
NOTE that you cannot use non-map factories with Ecto. So you cannot
insert(:room_number).
If you are using ExMachina in all environments:
Start by creating one factory module (such as MyApp.Factory) in
lib/my_app/factory.ex and putting all factory definitions in that module.
If you are using ExMachina in only the test environment:
Start by creating one factory module (such as MyApp.Factory) in
test/support/factory.ex and putting all factory definitions in that module.
Later on you can easily create different factories by creating a new module in
the same directory. This can be helpful if you need to create factories that are
used for different repos, your factory module is getting too big, or if you have
different ways of saving the record for different types of factories.
This example shows how to set up factories for the testing environment. For setting them in all environments, please see the To install in all environments section
Start by creating main factory module in test/support/factory.ex and name it MyApp.Factory. The purpose of the main factory is to allow you to include only a single module in all tests.
The main factory includes MyApp.ArticleFactory, so let's create it next. It might be useful to create a separate directory for factories, like test/factories. Here is how to create a factory:
This way you can split your giant factory file into many small files. But what about name conflicts? Use pattern matching to avoid them!
ExMachina will automatically save any associations when you call any of the
insert functions. This includes belongs_to and anything that is
inserted by Ecto when using Repo.insert!, such as has_many, has_one,
and embeds. Since we automatically save these records for you, we advise that
factory definitions only use build/2 when declaring associations, like so:
Using insert/2 in factory definitions may lead to performance issues and bugs,
as records will be saved unnecessarily.
If you want to keep the factories somewhere other than test/support,
change this line in mix.exs:
You can use ExMachina without Ecto, by using just the build functions, or you
can define one or more custom strategies to use in your factory. You can also
use custom strategies with Ecto. Here's an example of a strategy for json
encoding your factories. See the docs on ExMachina.Strategy for more info.
Before opening a pull request, please open an issue first.
Once you've made your additions and mix test passes, go ahead and open a PR!
ExMachina is Copyright ¬© 2015 thoughtbot. It is free software, and may be
redistributed under the terms specified in the LICENSE file.

ExMachina is maintained and funded by thoughtbot, inc.
The names and logos for thoughtbot are trademarks of thoughtbot, inc.
We love open source software, Elixir, and Phoenix. See our other Elixir
projects, or hire our Elixir Phoenix development team
to design, develop, and grow your product.
Factory Bot"
2582,"thoughtbot,shoulda-matchers","Simple one-liner tests for common Rails functionality. Shoulda Matchers provides RSpec- and Minitest-compatible one-liners to test
common Rails functionality that, if written by hand, would be much longer, more
complex, and error-prone.
üìñ Read the documentation for the latest version (4.1.2).
üì¢ See what's changed in a recent version.
Start by including shoulda-matchers in your Gemfile:
Now you need to tell the gem a couple of things:
Which test framework you're using
Which portion of the matchers you want to use
You can supply this information by providing a configuration block. Where this
goes and what this contains depends on your project.
Assuming you are testing a Rails app, simply place this at the bottom of
spec/rails_helper.rb (or in a support file if you so choose):
Now you're ready to use matchers in your tests!
If your project isn't a Rails app, but you still make use of ActiveRecord or
ActiveModel, you can still use this gem too! In that case, you'll want to place
the following configuration at the bottom of spec/spec_helper.rb:
Now you're ready to use matchers in your tests!
Shoulda Matchers was originally a component of Shoulda, a gem that
also provides should and context syntax via
shoulda-context.
At the moment, shoulda has not been updated to support shoulda-matchers 3.x
and 4.x, so you'll want to add the following to your Gemfile:
Now you're ready to use matchers in your tests!
The matchers provided by this gem are divided into different categories
depending on what you're testing within your Rails app:
non-database models, form objects, etc. backed by
ActiveModel
routes (RSpec only)
All matchers are designed to be prepended primarily with the word should,
which is a special directive in both RSpec and Shoulda. For instance, a model
test case may look something like:
For the full set of matchers you can use, see below.
For both RSpec and Shoulda, the subject is an implicit reference to the
object under test, and all of the matchers make use of it internally when they
are run. This is always set automatically by your test framework in any given
test case; however, in certain cases it can be advantageous to override the
subject. For instance, when testing validations in a model, it is customary to
provide a valid model instead of a fresh one:
When overriding the subject in this manner, then, it's important to provide the
correct object. When in doubt, provide an instance of the class under test.
This is particularly necessary for controller tests, where it is easy to
accidentally write something like:
In this case, you would want to use before rather than subject:
If you're using RSpec, then you're probably familiar with the concept of example
groups: these are different kinds of test cases, and each of them has special
behavior around them. As alluded to above, this gem works in a similar
way, and there are matchers that are only available in certain types of example
groups:
ActiveRecord and ActiveModel matchers are available only in model example
groups, i.e., those tagged with type: :model or in files located under
spec/models.
ActionController matchers are available only in controller example groups,
i.e., those tagged with type: :controller or in files located under
spec/controllers.
The route matcher is available in routing example groups, i.e., those
tagged with type: :routing or in files located under spec/routing.
Independent matchers are available in all example groups.
As long as you're using Rails, you don't need to worry about this ‚Äî everything
should ""just work"".
However, if you are using ActiveModel or ActiveRecord outside of Rails, and
you want to use model matchers in certain example groups, you'll need to
manually include the module that holds those matchers. A good way to do this is
to place the following in your spec_helper.rb:
Then you can say:
In this README and throughout the documentation, we're using the should form
of RSpec's one-liner syntax over is_expected.to. The should form works
regardless of how you've configured RSpec ‚Äî meaning you can still use it even
when using the expect syntax. But if you prefer to use is_expected.to, you
can do that too:
The following is a list of matchers shipped with the gem. If you need details
about any of them, make sure to consult the documentation!
allow_value
tests that an attribute is valid or invalid if set to one or more values.
(Aliased as #allow_values.)
have_secure_password
tests usage of has_secure_password.
validate_absence_of
tests usage of validates_absence_of.
validate_acceptance_of
tests usage of validates_acceptance_of.
validate_confirmation_of
tests usage of validates_confirmation_of.
validate_exclusion_of
tests usage of validates_exclusion_of.
validate_inclusion_of
tests usage of validates_inclusion_of.
validate_length_of
tests usage of validates_length_of.
validate_numericality_of
tests usage of validates_numericality_of.
validate_presence_of
tests usage of validates_presence_of.
accept_nested_attributes_for
tests usage of the accepts_nested_attributes_for macro.
belong_to
tests your belongs_to associations.
define_enum_for
tests usage of the enum macro.
have_and_belong_to_many
tests your has_and_belongs_to_many associations.
have_db_column
tests that the table that backs your model has a specific column.
have_db_index
tests that the table that backs your model has an index on a specific column.
have_many
tests your has_many associations.
have_one
tests your has_one associations.
have_readonly_attribute
tests usage of the attr_readonly macro.
serialize tests
usage of the serialize macro.
validate_uniqueness_of
tests usage of validates_uniqueness_of.
filter_param
tests parameter filtering configuration.
permit tests
that an action places a restriction on the params hash.
redirect_to
tests that an action redirects to a certain location.
render_template
tests that an action renders a template.
render_with_layout
tests that an action is rendered with a certain layout.
rescue_from
tests usage of the rescue_from macro.
respond_with
tests that an action responds with a certain status code.
route tests
your routes.
set_session
makes assertions on the session hash.
set_flash
makes assertions on the flash hash.
use_after_action
tests that an after_action callback is defined in your controller.
use_around_action
tests that an around_action callback is defined in your controller.
use_before_action
tests that a before_action callback is defined in your controller.
route tests
your routes.
delegate_method
tests that an object forwards messages to other, internal objects by way of
delegation.
Shoulda Matchers is tested and supported against Ruby 2.4+, Rails 5.x, Rails
4.2.x, RSpec 3.x, and Minitest 5.x.
For Ruby < 2.4 and Rails < 4.1 compatibility, please use v3.1.3.
Shoulda Matchers is open source, and we are grateful for
everyone who's contributed so far.
If you'd like to contribute, please take a look at the
instructions for installing dependencies and crafting a good
pull request.
Shoulda Matchers follows Semantic Versioning 2.0 as defined at
http://semver.org.
Shoulda Matchers is copyright ¬© 2006-2019
thoughtbot, inc. It is free software,
and may be redistributed under the terms specified in the
MIT-LICENSE file.

Shoulda Matchers is maintained and funded by thoughtbot, inc. The names and
logos for thoughtbot are trademarks of thoughtbot, inc.
We are passionate about open source software. See our other
projects. We are available for hire."
2583,"tox-dev,tox","Command line driven CI frontend and development task automation tool.. 
    

Command line driven CI frontend and development task automation tool
At its core tox povides a convenient way to run arbitrary commands in
isolated environments to serve as a single entry point for build, test
and release activities.
tox is highly
configurable and
pluggable.
tox is mainly used as a command line tool and needs a tox.ini or a
tool.tox section in pyproject.toml containing the configuration.
To test a simple project that has some tests, here is an example with
a tox.ini in the root of the project:
tox created two testenvs - one based on Python2.7 and one based on
Python3.7, it installed pytest in them and ran the tests. The report at
the end summarizes which testenvs have failed and which have
succeeded.
Note: To learn more about what you can do with tox, have a look at
the collection of examples in the
documentation
or existing projects using
tox.
tox creates virtual environments for all configured so called
testenvs, it then installs the project and other necessary
dependencies and runs the configured set of commands. See system
overview for
more details.

    

creating development environments
running static code analysis and test tools
automating package builds
running tests against the package build by tox
checking that packages install correctly with different Python
versions/interpreters
unifying Continuous Integration and command line based testing
building and deploying project documentation
releasing a package to PyPI or any other platform
limit: your imagination
Documentation for tox can be found at Read The Docs.
If you have questions or suggestions you can first check if they have already
been answered or discussed on our issue tracker
on Stack Overflow (tagged with tox).
If you want to discuss topics or propose changes that might not (yet)
fit into an issue, you can get in touch via mail through
&#116;&#111;&#120;&#45;&#100;&#101;&#118;&#64;&#112;&#121;&#116;&#104;&#111;&#110;&#46;&#111;&#114;&#103;.
We also have a Gitter community.
Contributions are welcome. See
contributing
and our Contributor Covenant Code of
Conduct.
Currently the code and the
issues are hosted on Github.
The project is licensed under
MIT."
2584,"trailofbits,manticore","Symbolic execution tool. 
  








Manticore is a symbolic execution tool for analysis of smart contracts and binaries.
Note: Beginning with version 0.2.0, Python 3.6+ is required.
Input Generation: Manticore automatically generates inputs that trigger unique code paths
Error Discovery: Manticore discovers bugs and produces inputs required to trigger them
Execution Tracing: Manticore records an instruction-level trace of execution for each generated input
Programmatic Interface: Manticore exposes programmatic access to its analysis engine via a Python API
Manticore can analyze the following types of programs:
Ethereum smart contracts (EVM bytecode)
Linux ELF binaries (x86, x86_64 and ARMv7)
Manticore has a command line interface which can be used to easily symbolically execute a supported program or smart contract. Analysis results will be placed into a new directory beginning with mcore_.
Use the CLI to explore possible states in Ethereum smart contracts. Manticore includes detectors that flag potentially vulnerable code in discovered states; output from them will be written to stdout and the results directory.
Solidity smart contracts must have a .sol extension for analysis by Manticore. See a demo.
The command line can also be used to simply explore a Linux binary:
Manticore has a Python programming interface which can be used to implement custom analyses.
For Ethereum smart contracts, it can be used for detailed verification of arbitrary contract properties. Set starting conditions, execute symbolic transactions, then review discovered states to ensure invariants for your contract hold.
It is also possible to use the API to create custom analysis tools for Linux binaries.
Manticore is supported on Linux and requires Python 3.6+.
Ubuntu 18.04 is strongly recommended.
Ethereum smart contract analysis requires the solc program in your $PATH.
Increased stack size is recommended; this can be done by ulimit -s 100000 or by passing --ulimit stack=100000000:100000000 to docker run if docker is used.
Install and try Manticore in a few shell commands:
You can also use Docker to quickly install and try Manticore:
NOTE: For native binary analysis, Manticore requires additional dependencies that are not installed by default. To
install these also, substitute manticore[native] for manticore in any pip command.
Option 1: Perform a user install (requires ~/.local/bin in your PATH).
Option 2: Use a virtual environment (requires virtualenvwrapper or similar).
Option 3: Perform a system install.
Option 4: Install via Docker.
Once installed, the manticore CLI tool and Python API will be available.
For installing a development version of Manticore, see our wiki.
If you use Mac OS X you may need to install dependencies manually:
Note that we're still in the process of implementing full support for the EVM Constantinople instruction semantics, so certain opcodes may not be supported.
You may want to consider using a version of solc that's less likely to generate these opcodes (eg pre-0.5.0).
Feel free to stop by our #manticore slack channel in Empire Hacking for help using or extending Manticore.
Documentation is available in several places:
The wiki contains some
basic information about getting started with Manticore and contributing
The examples directory has some very minimal examples that
showcase API features
The API reference has more
thorough and in-depth documentation on our API
The manticore-examples
repository has some more involved examples, for instance solving real CTF problems
Manticore is licensed and distributed under the AGPLv3 license. Contact us if you're looking for an exception to the terms.
Manticore: A User-Friendly Symbolic Execution Framework for Binaries and Smart Contracts, Mark Mossberg, Felipe Manzano, Eric Hennenfent, Alex Groce, Gustavo Grieco, Josselin Feist, Trent Brunson, Artem Dinaburg - ASE 19
If you are using Manticore on an academic work, consider applying to the Crytic $10k Research Prize."
2585,"zalando,SwiftMonkey","A framework for doing randomised UI testing of iOS apps. This project is a framework for generating randomised user input
in iOS apps. This kind of monkey testing is useful for
stress-testing apps and finding rare crashes.
It also contains a related framework called SwiftMonkeyPaws, which
provides visualisation of the generated events. This greatly
increases the usefulness of your randomised testing, as you can
see what touches caused any crash you may encounter.
When testing your UI, it's very easy to think about how to test
how things should work, but do you struggle to figure out
what kind of thing might not work?
Ever showed your app to someone who proceeded to bang away at the
screen and immediately crashed it by doing something you had never
thought of?
Do you want to feel a bit more confident about your app's stability?
Do you have rare crashes that you just can't reproduce?
Do you have memory leaks that take a long time to manifest
themselves, and require lots of UI actions?
Randomised testing will help you with all of these!
SwiftMonkey is inspired by and has similar goals to
UI AutoMonkey, but is integrated into the Xcode UI testing
framework, providing better opportunities to debug.
Also, it is fun to look at:

To see for yourself how this framework works, just grab the code
and open SwiftMonkeyExample/SwiftMonkeyExample.xcodeproj. Then press Cmd-U to run the UI test.
As a high-level overview, add SwiftMonkey.framework to your
UI test target. Then add a test that creates a Monkey
object and uses it to generate events.
Optionally, you also add the SwiftMonkeyPaws.framework to your
main app, and create a MonkeyPaws object to enable visualisation.
You probably only want to do this for debug builds, or when a
specific command line flag is used.
SwiftMonkey uses Swift 4.0. It has no dependencies other than
iOS itself (8.0 and up should work). SwiftMonkeyPaws doesn't
have any dependencies, either; you can even use on its own,
without SwiftMonkey.
You can install the frameworks using CocoaPods. Assuming
that you've named your main app and test targets ""App"" and ""Tests"", you
can use something like this in your Podfile:
Copy the SwiftMonkey and SwiftMonkeyPaws folders into your
project. Next, drag the xcodeproj files into your project.
Then, for SwiftMonkey, add SwiftMonkey.framework as a
dependency for your test target, and add a Copy Files build
phase to copy it into Frameworks.
For SwiftMonkeyPaws, adding SwiftMonkeyPaws.framework to the
Embedded Binaries section of your app target is enough.
(You can also just directly link the Swift files, if you do not
want to use frameworks.)
As of this writing, the Swift Package Manager doesn't support
iOS projects. SPM package files have experimentally been created,
but obviously don't really work yet.
To do monkey testing, import SwiftMonkey, then create a new
test case that uses the Monkey object to configure and run
the input event generation. Here is a simple example:
The Monkey object allows you not only to add the built-in
event generators, but also any block of your
own to be executed either randomly or at set intervals. In
these blocks you can do whatever you want, including (but not
only) generate more input events.
Documentation for this is limited at the moment, so please
refer to Monkey.swift and its extensions for examples of
how to use the more advanced functionality if you need it.
The simplest way to enable the visualisation in your app is to
first import SwiftMonkeyPaws, then do the following somewhere
early on in your program execution:
(This example uses application(_, didFinishLaunchingWithOptions),
but any time after you have a UIWindow will do. It also only
instatiates the visualisation if a certain command line flag
is passed, so that it can be enabled only for test runs.)
Using command line flags, If you want to enable MonkeyPaws on your
test case file you can add the following on yout testMonkey function:
This call will swizzle some methods in UIApplication to capture
UIEvents. If you would rather not do this, or if you already have
a source of UIEvents, you can pass the following option to init
to disable swizzling:
Then you can pass in events with the following call:
Feel free to file issues and send pull requests for this
project! It is very new and not overly organised yet, so be
bold and go ahead. We will sort out the details as we go along.
Code style is currently just four-space identation and regular
Apple Swift formatting.
Also, we have adopted the Contributor Covenant as the code
of conduct for this project:
http://contributor-covenant.org/version/1/4/
The Zalando Open Source Guild for helping get this project
off the ground.
Jo√£o Nunes for help with documentation.
Jakub Mucha for bugfixing.
Write more documentation.
Add more input event actions.
Add randomised testing using public XCTest APIs instead of private ones.
Find clickable view and click them directly instead of
clicking random locations, to compensate for the slow
event generation.
Fix swipe actions to avoid pulling out the top and bottom panels. (This
can cause the monkey to escape from your app, which can be problematic!)
Generally, find a quick way to see if the monkey manages to leave the
application.
Find out how to do device rotations using XCTest private API.
Find out why UIAutomation actions do not work on device, but only on the
simulator.
Investigate other methods of generating input events that do not rely
on private APIs.
Once Swift Package Manager has iOS support, update project
to support it properly.
Add more customisability for the visualisation.
Add more UI elements, views and controls to make the example
look more interesting.
Maybe add some actual crashes that the monkey testing can find?
This software was originally written by Dag √Ögren
(dag.agren@zalando.fi) for Zalando SE. This email address serves
as the main contact address for this project.
Bug reports and feature requests are more likely to be addressed
if posted as issues here on GitHub.
The MIT License (MIT) Copyright ¬© 2016 Zalando SE, https://tech.zalando.com
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
2586,"zalando,zalenium","A flexible and scalable container based Selenium Grid with video recording, live preview, basic auth & dashboard.. 
  









This is a Selenium Grid extension to scale your local grid dynamically with docker containers. It uses
docker-selenium to run your tests in Firefox and Chrome locally, if you
need a different browser, your tests can get redirected to a cloud testing provider (Sauce Labs, 
BrowserStack, TestingBot, CrossBrowserTesting, LambdaTest). Zalenium also works out of the box
in Kubernetes.
Zalenium's maintainers add new features regularly. We invite you to test it, report bugs, suggest any ideas you may
have, and contribute. See our contributing guidelines for more details.
Thanks for open sourcing this. Our test suite run time has dropped from more than an hour to six minutes. ‚Äî @TKueck
We know how complicated it is to:
Have a stable grid to run UI tests with Selenium
Maintain it over time (keep up with new browser, Selenium and drivers versions)
Provide capabilities to cover all browsers and platforms
That is why we took this approach where docker-selenium nodes are
created on demand. Your UI tests in Firefox and Chrome will run faster because they are running on a local grid,
on a node created from scratch and disposed after the test completes.
If you need a capability that cannot be fulfilled by docker-selenium,
the test gets redirected to a cloud testing provider (Sauce Labs,
BrowserStack, TestingBot, CrossBrowserTesting, LambdaTest).
Zalenium's main goal is: to allow anyone to have a disposable and flexible Selenium Grid infrastructure.
Part of the idea comes from this Sauce Labs post.
As you can imagine, it is the result of mixing Zalando and Selenium.
As mentioned before, this project's aim is to provide a simple way to create a grid and contribute to the Selenium community.
Nevertheless, this is not an official Selenium project. We kindly ask you to create
issues in this repository. If you have questions about how to get
started, please join the #zalenium channel on Slack. 
Docker engine running, version >= 1.11.1 (probably works with earlier versions, not tested yet).
Make sure your docker daemon is running (e.g. docker info works without errors).
Pull the docker-selenium image. docker pull elgalu/selenium
docker pull dosel/zalenium
Zalenium uses docker to scale on-demand, therefore we need to give it the docker.sock full access, this is known as
""Docker alongside docker"".
docker pull dosel/zalenium
docker run --rm -ti --name zalenium -p 4444:4444 \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /tmp/videos:/home/seluser/videos \
    --privileged dosel/zalenium start
Why --privileged? We suggest you run Zalenium as --privileged to speed up the node registration process by
  increasing the entropy level with Haveged. Using --privileged is optional
  since it is just meant to improve its performance. For more information, check this
  tutorial.
Try also our one line installer and starter for OSX/Linux (it will check for the latest images and ask for missing dependencies.)
More usage examples, parameters, configurations, video usage and one line starters can be seen here
After the output, you can check the grid console
Now you can point your Selenium tests to http://localhost:4444/wd/hub
Stop it: docker stop zalenium
Dashboard, see all the videos and aggregated logs after your tests completed.

  


Live preview of your running tests http://localhost:4444/grid/admin/live




Video recording, check them in the /tmp/videos folder (or the one you mapped when starting Zalenium)
Customise video file naming via capabilities, basic auth and more
Check the complete documentation at https://zalando.github.io/zalenium/
See License
See Security"
2587,"puppeteer,puppeteer","Headless Chrome Node.js API. 
Puppeteer is a Node.js library which provides a high-level API to control
Chrome/Chromium over the
DevTools Protocol.
Puppeteer runs in
headless
mode by default, but can be configured to run in full (non-headless)
Chrome/Chromium.
Most things that you can do manually in the browser can be done using Puppeteer!
Here are a few examples to get you started:
Generate screenshots and PDFs of pages.
Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e.
""SSR"" (Server-Side Rendering)).
Automate form submission, UI testing, keyboard input, etc.
Create an automated testing environment using the latest JavaScript and
browser features.
Capture a
timeline trace
of your site to help diagnose performance issues.
Test Chrome Extensions.
To use Puppeteer in your project, run:
When you install Puppeteer, it automatically downloads a recent version of
Chromium (~170MB macOS, ~282MB Linux, ~280MB Windows) that is guaranteed to
work
with Puppeteer. The browser is downloaded to the $HOME/.cache/puppeteer folder
by default (starting with Puppeteer v19.0.0).
If you deploy a project using Puppeteer to a hosting provider, such as Render or
Heroku, you might need to reconfigure the location of the cache to be within
your project folder (see an example below) because not all hosting providers
include $HOME/.cache into the project's deployment.
For a version of Puppeteer without the browser installation, see
puppeteer-core.
Puppeteer uses several defaults that can be customized through configuration
files.
For example, to change the default cache directory Puppeteer uses to install
browsers, you can add a .puppeteerrc.cjs (or puppeteer.config.cjs) at the
root of your application with the contents
After adding the configuration file, you will need to remove and reinstall
puppeteer for it to take effect.
See the configuration guide for more
information.
Every release since v1.7.0 we publish two packages:
puppeteer is a product for browser automation. When installed, it downloads
a version of Chromium, which it then drives using puppeteer-core. Being an
end-user product, puppeteer automates several workflows using reasonable
defaults that can be customized.
puppeteer-core is a library to help drive anything that supports DevTools
protocol. Being a library, puppeteer-core is fully driven through its
programmatic interface implying no defaults are assumed and puppeteer-core
will not download Chromium when installed.
You should use puppeteer-core if you are
connecting to a remote browser
or managing browsers yourself.
If you are managing browsers yourself, you will need to call
puppeteer.launch with
an an explicit
executablePath
(or channel if it's
installed in a standard location).
When using puppeteer-core, remember to change the import:
Puppeteer follows the latest
maintenance LTS version of
Node.
Puppeteer will be familiar to people using other browser testing frameworks. You
launch/connect
a browser,
create some
pages, and then manipulate them with
Puppeteer's API.
For more in-depth usage, check our guides
and examples.
The following example searches developer.chrome.com for blog posts with text ""automate beyond recorder"", click on the first result and print the full title of the blog post.
1. Uses Headless mode
Puppeteer launches Chromium in
headless mode.
To launch a full version of Chromium, set the
headless
option when launching a browser:
2. Runs a bundled version of Chromium
By default, Puppeteer downloads and uses a specific version of Chromium so its
API is guaranteed to work out of the box. To use Puppeteer with a different
version of Chrome or Chromium, pass in the executable's path when creating a
Browser instance:
You can also use Puppeteer with Firefox Nightly (experimental support). See
Puppeteer.launch for
more information.
See
this article
for a description of the differences between Chromium and Chrome.
This article
describes some differences for Linux users.
3. Creates a fresh user profile
Puppeteer creates its own browser user profile which it cleans up on every
run.
See our Docker guide.
See our Chrome extensions guide.
Check out our contributing guide to get an
overview of Puppeteer development.
Our FAQ has migrated to
our site."
2588,"microsoft,playwright","Playwright is a framework for Web Testing and Automation. It allows testing Chromium, Firefox and WebKit with a single API. . <!-- GEN:chromium-version-badge --><!-- GEN:stop --> <!-- GEN:firefox-version-badge --><!-- GEN:stop --> <!-- GEN:webkit-version-badge --><!-- GEN:stop -->
Playwright is a framework for Web Testing and Automation. It allows testing Chromium, Firefox and WebKit with a single API. Playwright is built to enable cross-browser web automation that is ever-green, capable, reliable and fast.
Headless execution is supported for all browsers on all platforms. Check out system requirements for details.
Looking for Playwright for Python, .NET, or Java?
Playwright has its own test runner for end-to-end tests, we call it Playwright Test.
The easiest way to get started with Playwright Test is to run the init command.
This will create a configuration file, optionally add examples, a GitHub Action workflow and a first test example.spec.ts. You can now jump directly to writing assertions section.
Add dependency and install browsers.
You can optionally install only selected browsers, see install browsers for more details. Or you can install no browsers at all and use existing browser channels.
Auto-wait. Playwright waits for elements to be actionable prior to performing actions. It also has a rich set of introspection events. The combination of the two eliminates the need for artificial timeouts - a primary cause of flaky tests.
Web-first assertions. Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met.
Tracing. Configure test retry strategy, capture execution trace, videos and screenshots to eliminate flakes.
Browsers run web content belonging to different origins in different processes. Playwright is aligned with the architecture of the modern browsers and runs tests out-of-process. This makes Playwright free of the typical in-process test runner limitations.
Multiple everything. Test scenarios that span multiple tabs, multiple origins and multiple users. Create scenarios with different contexts for different users and run them against your server, all in one test.
Trusted events. Hover elements, interact with dynamic controls and produce trusted events. Playwright uses real browser input pipeline indistinguishable from the real user.
Test frames, pierce Shadow DOM. Playwright selectors pierce shadow DOM and allow entering frames seamlessly.
Browser contexts. Playwright creates a browser context for each test. Browser context is equivalent to a brand new browser profile. This delivers full test isolation with zero overhead. Creating a new browser context only takes a handful of milliseconds.
Log in once. Save the authentication state of the context and reuse it in all the tests. This bypasses repetitive log-in operations in each test, yet delivers full isolation of independent tests.
Codegen. Generate tests by recording your actions. Save them into any language.
Playwright inspector. Inspect page, generate selectors, step through the test execution, see click points and explore execution logs.
Trace Viewer. Capture all the information to investigate the test failure. Playwright trace contains test execution screencast, live DOM snapshots, action explorer, test source and many more.
Looking for Playwright for TypeScript, JavaScript, Python, .NET, or Java?
To learn how to run these Playwright Test examples, check out our getting started docs.
This code snippet navigates to whatsmyuseragent.org and saves a screenshot.
This snippet emulates Mobile Safari on a device at given geolocation, navigates to maps.google.com, performs the action and takes a screenshot.
This code snippet navigates to example.com, and executes a script in the page context.
This code snippet sets up request routing for a page to log all network requests.
Changelog"
2676,"Turbo87,intellij-emberjs","Ember.js support for JetBrains IDEs (IntelliJ, WebStorm, ...). This plugin provides basic Ember.js support to all
JetBrains IDEs that support JavaScript.

Ember.js project discovery when imported from existing sources
Automatically sets the language level to ES6
Marks app, public and tests folders as source, resource and test folders
Marks node_modules and bower_components as library folders
Enable JSHint using .jshintrc
Quick navigation via Navigate ‚Üí Class... and Navigate ‚Üí Related Symbol...
for all major app components
Generate Ember.js files via ember generate
Basic reference resolving and completion for e.g. DS.belongsTo('user')
Live templates
This plugin is published on the
JetBrains Plugin Repository: 
Clone this repository:
Build a plugin zip file:
Install the plugin from /build/distributions/Ember.js.zip:
Run IntelliJ IDEA Ultimate with the current plugin pre-installed:
Run the test suite:
JetBrains/intellij-community ‚Äì 
the IntelliJ community edition source code
JetBrains/intellij-plugins ‚Äì 
a collection of officially supported IntelliJ plugins
JetBrains/gradle-intellij-plugin ‚Äì 
the official Gradle plugin for building IntelliJ plugins
kristianmandrup/emberjs-plugin ‚Äì 
the predecessor and inspiration for this plugin
This project is licensed under the Apache 2.0 License.
Font-Awesome-SVG-PNG is licensed under the MIT license
Font-Awesome is licensed under the SIL OFL 1.1"
2677,"vectart,ember-cli-pace","Pace.js load progress bar for Ember apps, incl. Flash-like initial script lazy loading. 
   
Using latest Ember-cli, run the command:
ember install ember-cli-pace
or for older versions:
npm install ember-cli-pace &amp;&amp; ember g pace
Due to application scripts loading may take some time (especially, using mobile networks or ADSL), Ember-cli-pace can load them asynchronously displaying correctly computed progress bar. To enable that feature, just change src attribute to pace-src in your app.html.
Therefore, the scripts will be loaded via AJAX, which allows to compute loaded vs total bytes ratio. If your scripts are located on separate host, please note CORS policy.
All options, excluding color and theme related to the addon, are documented on http://github.hubspot.com/pace/.
}
};"
2678,"yapplabs,ember-tether","Tether an element to another element in the DOM. This ember-cli addon provides a component that allows for 'tethering' a block to a target somewhere else on the page. The target may be an element, an element selector, or an Ember view. Importantly, the component retains typical context for Ember action handling and data binding.
Ember.js v2.4 or above
Ember CLI v2.13 or above
For Ember 1.13 - 2.3, use 0.4.1. For support for earlier versions of Ember, use ember-tether 0.3.1.
View a live demo here: http://yapplabs.github.io/ember-tether/
ember install ember-tether
Note: Ember CLI versions < 0.2.3 should use ember install:addon instead of ember install
Given the following DOM:
and a template like this:
Then ""A puppy"" would be rendered alongside the a-nice-person div.
If the ember-tether component is destroyed, its far-off content is destroyed too.
For example, given:
If isShowing starts off true and becomes false, then the ""A puppy"" text will be removed from the page.
Similarly, if you use ember-tether in a route's template, it will
render its content next to the target element when the route is entered
and remove it when the route is exited.
Hubspot Tether works by appending tethered elements to the &lt;body&gt; tag. Unfortunately, this moves your content outside of the Ember application rootElement during acceptance testing. This breaks event dispatch and action handling, including traditional Ember test helpers like click.
As of version 0.4.0, we can configure a different element to be used instead of body. This can be useful for Ember tests.
It is also possible to pass a bodyElement to a particular ember-tether component declaration.
Hubspot Tether, the underlying library that implement the actual tethering behavior
ember-wormhole, whose pattern for element content manipulation inspired the approach in ember-tether
Tetherball, for providing countless hours of entertainment over the past century"
2679,"zoltan-nz,library-app","Detailed Ember.js v4.7 tutorial for absolute beginners. https://yoember.com. This is the original repository of the Library App.
For detailed, step by step implementation click here: Ember tutorial
Live demo: library-app.firebaseapp.com
I assume, you have Node.js on your computer. Node.js installation
Please create an app on Firebase first. You can register there with one click and create a new app. You have to setup this app name in config/environment.js. (This will be your own cloud based database.)
Clone this repository in your project folder
Change to the application directory
Install node packages
Setup in config/environment.js Firebase settings. (Setup firebase in your Ember project)
Launch the application with Ember server.
Open the application in your browser
www.yoember.com - The Ember.js Tutorial"
2680,"zoltan-nz,product-app","New intermediate level Ember.js Octane v3.17+ tutorial in README. Updated to the latest Ember v3
We are going to build a web application which could be a web-shop or a product management app. We can add products, they can belong to a category. We can manage categories also. First of all let's focus on the administration area, later we build the ""store front"" where a user can collect products in a shopping cart.
I suppose, you finished already the Ember.js Tutorial, where you built the Library App, so you know roughly how we build Ember application on ""Ember Way"". For this reason, I don't explain everything, we can focus only the main steps. (It means, you will see all the steps with less explanation. ;)
At the beginning there won't add any styling, so we can focus only for the functionality.
Let's create a new app:
This is the data model structure, what we would like to implement. I leave it here, so I can refer back to this table when we implement the related part.
Let's create a list about our requirements. Basically this will be our main todo list. ;)
<a name='admin-page'> 1. Home page and Admin page
Add an index page with a header.
Create an admin route, 
add an h1 header to the main admin page and 
add a link to the application template.

Create a categories page under admin route and 
add a link to the main admin page.


In Ember, the templates have a clear, strict hierarchy. Firstly, each page or subpage (embeded page) has a main ""wrapper"" template and has an ""index"" page. For example, the main-main, top template is the application.hbs, and it has an index.hbs, which actually the app's home page. 
The ""wrapper"" page file name is the same as the represented route, so if we have an /admin page, than we have an admin route, so we have an admin.hbs. If we wouldn't like to add a nested subroute to admin we can use this admin.hbs for presenting the content. Otherwise if we add a new subroute to the admin, for example /admin/categories, than we have to create a new folder in the templates directory, this new folder will be templates/admin. In this folder we can have an index.hbs, which will be the main page of the /admin route, and we could have a categories.hbs which will be the ""wrapper"" file for that subroute.
Important, if we have a subroute, we have to add {{outlet}} handlebar code to the ""wrapper"" template. The subroute content will be rendered in this ""outlet"" placeholder. 
Repeat: Please learn computed properties, observers and actions from Lesson 2 on Ember Tutorial.
In this session we add real functionality to our Category Admin page. Firstly, we implement an input box with an ""Add"" button, which will extend the category list, additionally we attache a ""Delete"" button also to each existing category item, so we can remove them from the list. In our first implementation it will use only an Ember Array, so it uses the web-browser memory only. Secondly, we will use Ember Data and a proper Model, which would expect the existence of a database and a backend system. Luckily we can mock the backend. I show two options here, the first will use Ember CLI http-mock server, the second one will use a popular add-on: Ember Mirage.
Important: In Ember.js everything starts from the url. When you navigate to a page, the url changes, Ember automatically checks the map in router.js. Based on the Router.map it is automatically enter in the connected Route Handler (route). Ember will goes through on a certain steps in this route, after it will setup the controller and finally the template.  
Check out this figure from the Ember Guides

The rule of thumb, if you would like to show data from an external source (from your database) on your page, it should download (via backend service) almost always in model hook of the route handler. Which means, you almost always have to have a model function in  your route file and return the data from that function, it will automatically added to a model property in your controller and template. Let see, how it works in our Category Admin page.
We already generated our Categories route handler (app/routes/admin/categories.js). Let's extend this file with a model function, with a ""model hook"". We call it ""model hook"", because this function is exists in the Ember framework, so it will be automatically invoked. Check out in the official documentation how many ""built-in"" functions are in a route handler, but don't worry, we will use only a couple, if you are already on the official api documentation page, please read the doc of the model hook with clicking on the ""model"" link. If it does not make any sense, you are not alone. It is totally normal, when you start learning a new framework or tool. ;) It will be much clearer later. 
Back to our Product App. Update the category route. Let's return an array of objects in our ""model hook"".
});
Yey, we have a list of categories:

Next step is creating an input field and adding new items to our model. I suppose, you already know a lot about actions also.
Update your template with a form, an input box with action, and let's add a counter also:
So we have a simple form, where we read an id and a name, we can submit this data with hitting Enter or clicking on the button. It will invoke the action function and pass two params.
We have to implement the action in our route handler. This action will push a new object to the model array, which is in the controller.
Add the delete button also, extend the categories.hbs template list element with a button:
Action goes in app/routes/admin/categories.js:
You can read more about pushObject and removeObject on Ember.NativeArray documentation page.
Is your app looks like this?

Brilliant, you can add and remove items from an array model, however if you reload the page, all added record is gone.
Ember Data is responsible for managing ajax request from or to a server. It uses adapters to communicate with different type of backend systems.
An Ember application has a store service. We can access data via this service.
The core element of Ember Data is Ember Model, where we can declare the properties of a model.
More about models on the official guide and architecture overview from this page:

Generate Model
Ember CLI can generate for us a skeleton model. The following command will create a category.js in our model folder and will add a name field with string type.
Update model hook
We have a model in our Product Application, let's use it in our Categories admin page. 
Let's delete the dummy data from model() hook in /routes/admin/categories.js and update as follow. In the same step, we can update our addNewCategory() and deleteCategory() actions also.
We use this.store.findAll() for downloading all the available record, this.store.createRecord() can create a new record, .save() would try to permanently save it. We can use .destroyRecord() for totally remove from our app and from the server the related record.
But first of all try out the above code. Try to reload the page.
Check the console! Our app try to download data from somewhere, but get a 404 Error response, because we doesn't really have any backend server.
Your backend could be Ruby on Rails app, Node.js app, .Net app, PHP app, Python based app, Elixir or anything else. It could be a cloud based solution also, like Firebase, you've already learned about it when you built the Library App from http://yoember.com.
In this tutorial, we will use the famous Ember-Mirage mock server.
Install Mirage
Check our new helpers:
Create a Mirage Model, we would like to mock our Category:
Update mirage/config.js
Relaunch your app, try to click on ""Categories"".
Check the error message in console.
Actually, you can play with the old jQuery.get() in console.
$.get('/api/categories')
Time to add Adapter to our Ember app:
Still need the namespace setting.
Try now!
Fake data with Factories
Let's update our default scenario:
Check your app.
Update mirage/config.js with shorthand
Try to save a new category...
Check console.
Extend config
Try to delete a new category...
Check console.
Extend config
Using Faker in Factory
Check faker.js
One more!
Replace get, post and del with a single resource shorthand:
In an earlier implementation, this repository used ember-bootstrap, but I felt it was a little bit too abstract. The latest version of this project uses ember-cli-bootstrap-sassy.
More details: http://yoember.com/#ember-bootstrap-sass
application.hbs
app.scss update
admin.hbs
We can update now our addNewCategory action in app/routes/admin/categories.js.
Because the id of the record is generated by the backend, in our case our mock database system, we can remove this param from our function and from our template also. We can use Ember Bootstrap components for building our form.
There is a .save() which is a Promise, so we can use .then to manage the callback, when the server respond arrives.
Server respond can be positive or negative. It can ""fulfill"" or ""reject"" our request. The .then() method has two params, both are callback functions. The first will get the positive respond with the record, the second will get an error respond. You can play with it with changing our mock server (mirage) settings. Mirage can simulate negative responds also.
You can read more about mirage's route handler and post shorthands on the following pages:
http://www.ember-cli-mirage.com/docs/v0.2.x/route-handlers/
http://www.ember-cli-mirage.com/docs/v0.2.x/shorthands/#post-shorthands
If you add the following line to your mirage config file, it responds with a 500 error, which is a brutal internal server error code. 
If you extend your app/routes/admin/categories.js Category route handler with the following code, you can write out in your console the error message from mirage.
We can improve further our model to manage the positive and negative responses automatically.
Better practice, if we create an empty model in the store when the user entering the page. On our category list page, our main model is a list of categories, which arrived from the server, this list is automatically added to the controller's model property.
We can use the setupController hook in the route handler, to create a new empty category also and we can manually add it to a property, what we name it as newCategory.
Now we can update our template:
And the action in route handler:
Using isError to show some error message on the page.
Further options managing errors: error.hbs or error action. You can have an error.hbs in the main route our subroutes, Ember automatically will show that page if the server response with error. Other option is an error action in your route, if a request in model() hook is failed, this action will be called automatically. More details in the official guide: https://guides.emberjs.com/v2.9.0/routing/loading-and-error-substates/
There is a loading state also, you can show a loading spinner or a message while Ember is downloading data in model() hook. Drop a loading.hbs in your template folder and/or subfolders. Emulate a slow server with mirage. Uncomment this line in app/mirage/config.js: this.timing = 400; and rewrite 400 for 2000 (2 seconds).
Previously we modified our route handler and we added a createRecord() in setupController() hook. Actually, this created a new empty record, which appears in the list. However, Ember Data automatically add a few state helper to the records. We will use isNew to filter out this record from the list.
Update the template:
Extend the category model:
Edit the name of a category with clicking on the name or a dedicated button.
Add actions to the route handler:
The actual state of the categories admin page:

Create the Admin page for Products. You should basically repeat almost the same steps what we followed while we have been building the Categories page. 
Generate admin/products route and update the navigation bar on admin pages.
Generate a product model with the following fields:
name (string)
sku (string) (Sku = stock keeping unit - usually this is the barcode number in a shop.)
unitPrice (number)
Mock product model and server calls with Mirage. (Use ember generate mirage-model and ember generate mirage-factory. Update the scenario and the config file in mirage folder. Check the Faker.js website and find a related method to generate random product names. Mirage should generate at least 20 products.)
List all the products on admin/products page. (You have to add code to your admin/product route handler and implement handlebar in the connected template.)
Add a form to the product list page, where you can create and save a new product, implement the connected actions.
Add editing feature to the list. Three columns are in this list (name, sku, price). It is a nice solution, if there is an Edit button at the end of the row and clicking on this button, the row became a form. When the row is in editing state buttons should be ""Save"" and ""Cancel"". Implement the connected actions also.

A possible solution in this commit
Related guide: Ember.js Guide - Model Relationships
Requirements in this lesson:
[ ] Extend Ember.js models with hasMany and belongsTo references.
[ ] Add the relationship to the mock, so Mirage can manage 
[ ] Add a new option to Product form
Steps:
Extend models.
Add extra column to Product list.
Update mirage models with associations
http://www.ember-cli-mirage.com/docs/v0.2.x/models/#associations
http://www.ember-cli-mirage.com/docs/v0.2.x/factories/#factories-and-relationships
Update mirage factories with afterCreate() 
Add extra column to Categories with {{category.products.length}} 
Check server calls in console, too many, reduce it with adding includes option to findAll in model hook.
Add a select box to the Product create form. (Using emberx-select addon.)
https://github.com/thefrontside/emberx-select

[ ] Generate an index route.
[ ] Download all product in model hook.
[ ] List on index.hbs so it will appear on the home page.
[ ] Add some style, for example panel from Bootstrap.
A possible solution in this commit
WIP
(draft)
Reading:
Services
Dependency Injection
Implementation steps:
[ ] Create shopping cart service with add/remove functions.
[ ] Inject in the application (routes, controllers, components), so it will be available everywhere.
[ ] Implement an Add to Cart button and action in the product boxes on the home page. 
[ ] Create a shopping-cart component, which will be available from everywhere, so we can remove items or finalize the order.
Add button to the product panel
Add action to the index.js 
Inject shopping-cart service
Add a badge to the navbar, but how we access to the shoppingCart
Dependency Injection, initializer
Modal Window implementation
Named outlet
Checkout template and controller
Render in application route
Close modal window action
List products from service
Remove item from the service
Passing the index instead of the product"
2681,"getsentry,sentry-javascript","Official Sentry SDKs for JavaScript. We're hiring https://boards.greenhouse.io/sentry. 
  
    
  


Bad software is everywhere, and we're tired of it. Sentry is on a mission to help developers write better software
faster, so we can get back to enjoying technology. If you want to join us
<kbd>Check out our open positions</kbd>




This is the next line of Sentry JavaScript SDKs, comprised in the @sentry/ namespace. It will provide a more
convenient interface and improved consistency between various JavaScript environments.





For each major JavaScript platform, there is a specific high-level SDK that provides all the tools you need in a single
package. Please refer to the README and instructions of those SDKs for more detailed information:
@sentry/browser: SDK for Browsers
@sentry/node: SDK for Node including
integrations for Express
@sentry/angular: Browser SDK with
Angular integration enabled
@sentry/angular-ivy: Browser SDK with
Angular integration enabled including native support for Angular's Ivy rendering engine.
@sentry/ember: Browser SDK with Ember
integration enabled
@sentry/react: Browser SDK with React
integration enabled
@sentry/svelte: Browser SDK with
Svelte integration enabled
@sentry/vue: Browser SDK with Vue
integration enabled
@sentry/gatsby: SDK for Gatsby
@sentry/nextjs: SDK for Next.js
@sentry/remix: SDK for Remix
@sentry/integrations: Pluggable
integrations that can be used to enhance JS SDKs
@sentry/serverless: SDK for
Serverless Platforms (AWS, GCP)
@sentry/electron: SDK for Electron with support for native crashes
@sentry/react-native: SDK for React Native with support for
native crashes
@sentry/capacitor: SDK for Capacitor Apps and Ionic with support
for native crashes
To install a SDK, simply add the high-level package, for example:
Setup and usage of these SDKs always follows the same principle.
Besides the high-level SDKs, this repository contains shared packages, helpers and configuration used for SDK
development. If you're thinking about contributing to or creating a JavaScript-based SDK, have a look at the resources
below:
@sentry/tracing: Provides
integrations and extensions for Performance Monitoring / Tracing.
@sentry/replay: Provides
the integration for Session Replay.
@sentry/core: The base for all
JavaScript SDKs with interfaces, type definitions and base classes.
@sentry/utils: A set of helpers and
utility functions useful for various SDKs.
@sentry/types: Types used in all
packages."
2682,"mainmatter,qunit-dom","High Level DOM Assertions for QUnit. High Level DOM Assertions for QUnit
or using yarn:
Import and run the setup function in your test-helper.js file:
This will attach the APIs to QUnit's assert object.
qunit-dom will automatically attach the APIs to QUnit's assert object. No extra setup required :tada:.
Load qunit-dom.js after qunit.js:
Once installed the DOM element assertions are available at assert.dom(...).*:
All available assertions are documented in API.md.
A basic codemod to automatically convert your assertions is available at
https://github.com/simplabs/qunit-dom-codemod.
qunit-dom includes type definition files, but the way it extends QUnit means
that you need import it somewhere so that TS and your editor can pick up the
types. It is recommended to add the following line to your
tests/test-helper.ts file:
Rename your tests/test-helper.js to .ts if you do not have such a
file yet.
See CONTRIBUTING.md.
chai-dom ‚Äì DOM assertions for
the Chai assertion library using vanilla JavaScript
chai-jquery ‚Äì jQuery assertions
for chai
qunit-dom is developed by and &copy;
Mainmatter GmbH and contributors. It is released under the
MIT License."
2683,"ember-learn,ember-cli-addon-docs","Easy, beautiful docs for your OSS Ember addons. Ember.js v3.28 or above
Ember CLI v3.28 or above
Node.js v14 or above
The original maintainers of AddonDocs have moved on, but this addon is still very much actively maintained and is still being used by many addons.
We are currently working on embroider and fastboot support, and would love help, if anyone would like to help out!
If you run into parts of the guides that are confusing or out-of-date, check the issues/PRs, or hop into the #ec-addon-docs channel in Discord.
Easy documentation for Ember addons.
View the docs here.
Please open an issue and add a :+1: emoji reaction. We will use the number of reactions as votes to indicate community interest, which will in turn help us prioritize feature development.
You can view the most-upvoted feature requests with this link.
Please open an issue or join the Ember community on Discord
Created and maintained by Dan Freeman, Chris Garrett, and Sam Selikoff. Thanks to all of our contributors!
This project is licensed under the MIT License."
2684,"fenichelar,ember-simple-auth-token","Ember Simple Auth extension that is compatible with token-based authentication like JWT.. This is Ember addon is an extension to the Ember Simple Auth library that provides a basic token authenticator, a JSON Web Tokens token authenticator with automatic refresh capability, and an authorizer mixin. You can find more about why JSON Web Tokens are so awesome in this article.
Because user's credentials and tokens are exchanged between the Ember.js app and the server, you must use HTTPS for this connection!
A demo is available here.
Ember Simple Auth Token can be installed with Ember CLI by running:
If using FastBoot, ember-fetch must be installed as a direct dependency and node-fetch must be added to your fastbootDependencies. If using FastBoot and the JWT authenticator, node-fetch and buffer must be added to you fastbootDependencies.
ember-simple-auth-token will automatically install a compatible version of ember-simple-auth. If you want to manually install ember-simple-auth, you must ensure to install a version that is supported by ember-simple-auth-token.
In order to use the token authenticator or the JSON Web Token authenticator, the application should have a route for login. In most cases, the login route will display a form with a username and password field. On form submit, the authenticate action will be called on the session:
The JSON Web Token authenticator will decode the token and look for the expiration time. The difference in the current time and the token expiration time is calculated. The refreshLeeway is subtracted from this value to determine when the automatic token refresh request should be made.
The refreshLeeway can be specified to send the requests before the token expires to account for clock skew. Some libraries like PyJWT, ruby-jwt, and node-jsonwebtoken also support specifying a clock tolerance when verifying the token.
Sample JSON Web Token:
To debug JSON Web Token issues, see jwt.
The JSON Web Token authenticator supports both separate access tokens and refresh tokens. By specifying the tokenPropertyName and the refreshTokenPropertyName to the same value, the same token will be used for both access and refresh requests. For more information about refresh tokens, see this blog.
In order to send the token with all API requests made to the server, set the headers object in the adapter:
Although no longer recommended, the token-adapter mixin or token-authorizer mixin can be used in order to send the token with all API requests made to the server. When using ember-simple-auth >= 3.0.0, use the token-adapter mixin. When using ember-simple-auth < 3.0.0, use the token-authorizer mixin. The mixin will add the header to each API request:
In addition to all the customization options available to the token authenticator:
In addition to tokenPropertyName from the authenticator:
For acceptance testing, token refresh must be disabled to allow the test to exit. Therefore, the following configuration should be set:
getResponseData, getAuthenticateData, config.identificationField, and config.passwordField have been removed since version 4.0.0
config.timeFactor has been removed since version 2.1.0"
2744,"wailsapp,wails","Create beautiful applications using Go. 
   


   A framework for building desktop applications using Go & Web Technologies.
   
   
   
   
   
   
   
   
   


The traditional method of providing web interfaces to Go programs is via a built-in web server. Wails offers a different approach: it provides the ability to wrap both Go code and a web frontend into a single binary. Tools are provided to make this easy for you by handling project creation, compilation and bundling. All you have to do is get creative!
Use standard Go libraries/frameworks for the backend
Use any frontend technology to build your UI
Quickly create Vue, Vuetify or React frontends for your Go programs
Expose Go methods/functions to the frontend via a single bind command
Uses native rendering engines - no embedded browser
Shared events system
Native file dialogs
Powerful cli tool
Multiplatform
Wails is currently in Beta. Please make sure you read the Project Status if you are interested in using this project.
Wails uses cgo to bind to the native rendering engines so a number of platform dependent libraries are needed as well as an installation of Go. The basic requirements are:
Go 1.12
npm
Make sure you have the xcode command line tools installed. This can be done by running:
xcode-select --install
sudo apt install libgtk-3-dev libwebkit2gtk-4.0-dev
Debian: 8, 9, 10
Ubuntu: 16.04, 18.04, 19.04
Also succesfully tested on: Zorin 15, Parrot 4.7, Linuxmint 19, Elementary 5, Kali, Neon
sudo pacman -S webkit2gtk gtk3
Also succesfully test on: Manjaro & ArcoLinux
sudo yum install webkitgtk3-devel gtk3-devel
CentOS 6, 7
sudo yum install webkit2gtk3-devel gtk3-devel
Fedora 29, 30
xbps-install gtk+3-devel webkit2gtk-devel
sudo emerge gtk+:3 webkit-gtk
Windows requires gcc and related tooling. The recommended download is from http://tdm-gcc.tdragon.net/download. Once this is installed, you are good to go.
Ensure Go modules are enabled: GO111MODULE=on and go/bin is in your PATH variable.
Installation is as simple as running the following command:

go get github.com/wailsapp/wails/cmd/wails
</pre>

It is recommended at this stage to read the comprehensive documentation at https://wails.app.
Is this an alternative to Electron?
Depends on your requirements. It's designed to make it easy for Go programmers to make lightweight desktop applications or add a frontend to their existing applications. Whilst Wails does not currently offer hooks into native elements such as menus, this may change in the future.
Who is this project aimed at?
Go programmers who want to bundle an HTML/JS/CSS frontend with their applications, without resorting to creating a server and opening a browser to view it.
What's with the name?
When I saw WebView, I thought ""What I really want is tooling around building a WebView app, a bit like Rails is to Ruby"". So initially it was a play on words (Webview on Rails). It just so happened to also be a homophone of the English name for the Country I am from. So it stuck.
Without the following people, this project would never have existed:
Dustin Krysak - His support and feedback has been immense. More patience than you can throw a stick at (Not long now Dustin!).
Serge Zaitsev - Creator of Webview which Wails uses for the windowing.
And without these people, it wouldn't be what it is today. A huge thank you to each and every one of you!
Special Mentions:
Bill Kennedy - Go guru, encourager and all-round nice guy, whose infectious energy and inspiration powered me on when I had none left.
Mark Bates - Creator of Packr, inspiration for packing strategies which fed into some of the tooling.
This project was mainly coded to the following albums:"
2745,"willmcpo,body-scroll-lock","Body scroll locking that just works with everything üòè.   

Enables body scroll locking (for iOS Mobile and Tablet, Android, desktop Safari/Chrome/Firefox) without breaking scrolling of a target element (eg. modal/lightbox/flyouts/nav-menus).
Features:
disables body scroll WITHOUT disabling scroll of a target element
works on iOS mobile/tablet (!!)
works on Android
works on Safari desktop
works on Chrome/Firefox 
works with vanilla JS and frameworks such as React / Angular / VueJS
supports nested target elements (eg. a modal that appears on top of a flyout)
can reserve scrollbar width
-webkit-overflow-scrolling: touch still works
Aren't the alternative approaches sufficient?
the approach document.body.ontouchmove = (e) =&gt; { e.preventDefault(); return false; }; locks the
body scroll, but ALSO locks the scroll of a target element (eg. modal).
the approach overflow: hidden on the body or html elements doesn't work for all browsers
the position: fixed approach causes the body scroll to reset
some approaches break inertia/momentum/rubber-band scrolling on iOS
Package Size:
LIGHT - package is only 2.8KB and 1.1KB when gzipped (see here)!
You can also load via a &lt;script src=""lib/bodyScrollLock.js""&gt;&lt;/script&gt; tag (refer to the lib folder).
// 2. Get a target element that you want to persist scrolling for (such as a modal/lightbox/flyout/nav). 
// Specifically, the target element is the one we would like to allow scroll on (NOT a parent of that element).
// This is also the element to apply the CSS '-webkit-overflow-scrolling: touch;' if desired.
const targetElement = document.querySelector(""#someElementId"");
// 3. ...in some event handler after showing the target element...disable body scroll
disableBodyScroll(targetElement);
// 4. ...in some event handler after hiding the target element...
enableBodyScroll(targetElement);
class SomeComponent extends React.Component {
  targetElement = null;
componentDidMount() {
    // 2. Get a target element that you want to persist scrolling for (such as a modal/lightbox/flyout/nav). 
    // Specifically, the target element is the one we would like to allow scroll on (NOT a parent of that element).
    // This is also the element to apply the CSS '-webkit-overflow-scrolling: touch;' if desired.
    this.targetElement = document.querySelector('#targetElementId');
  }
showTargetElement = () => {
    // ... some logic to show target element
// 3. Disable body scroll
disableBodyScroll(this.targetElement);

};
hideTargetElement = () => {
    // ... some logic to hide target element
// 4. Re-enable body scroll
enableBodyScroll(this.targetElement);

}
componentWillUnmount() {
    // 5. Useful if we have called disableBodyScroll for multiple target elements,
    // and we just want a kill-switch to undo all that.
    // OR useful for if the hideTargetElement() function got circumvented eg. visitor 
    // clicks a link which takes him/her to a different page within the app.
    clearAllBodyScrollLocks();
  }
render() { 
    return (
      
        some JSX to go here
       
    );
  }
}
class SomeComponent extends React.Component {
  // 2. Initialise your ref and targetElement here
  targetRef = React.createRef();
  targetElement = null;
componentDidMount() {
    // 3. Get a target element that you want to persist scrolling for (such as a modal/lightbox/flyout/nav). 
    // Specifically, the target element is the one we would like to allow scroll on (NOT a parent of that element).
    // This is also the element to apply the CSS '-webkit-overflow-scrolling: touch;' if desired.
    this.targetElement = this.targetRef.current; 
  }
showTargetElement = () => {
    // ... some logic to show target element
// 4. Disable body scroll
disableBodyScroll(this.targetElement);

};
hideTargetElement = () => {
    // ... some logic to hide target element
// 5. Re-enable body scroll
enableBodyScroll(this.targetElement);

}
componentWillUnmount() {
    // 5. Useful if we have called disableBodyScroll for multiple target elements,
    // and we just want a kill-switch to undo all that.
    // OR useful for if the hideTargetElement() function got circumvented eg. visitor 
    // clicks a link which takes him/her to a different page within the app.
    clearAllBodyScrollLocks();
  }
render() { 
    return (
      // 6. Pass your ref with the reference to the targetElement to SomeOtherComponent
      <SomeOtherComponent ref={this.targetRef}>
        some JSX to go here
      </SomeOtherComponent> 
    );
  }
}
// 7. SomeOtherComponent needs to be a Class component to receive the ref (unless Hooks - https://reactjs.org/docs/hooks-faq.html#can-i-make-a-ref-to-a-function-component - are used).
class SomeOtherComponent extends React.Component {
componentDidMount() {
    // Your logic on mount goes here
  }
// 8. BSL will be applied to div below in SomeOtherComponent and persist scrolling for the container
  render() { 
    return (
      
        some JSX to go here
       
    );
  }
}
Then in the javascript:
Check out the demo, powered by Now, @ https://bodyscrolllock.now.sh
~~On iOS mobile (as is visible in the above demo), if you scroll the body directly even when the scrolling is 
locked (on iOS), the body scrolls - this is not what this package solves. It solves the typical case where a modal 
overlays the screen, and scrolling within the modal never causes the body to scroll too (when the top or bottom 
within the modal has been reached).~~
Since the update from @Neddz, this caveat is no longer valid. iOS mobile behaviour should be the same as 
other devices (eg. Android Chrome). 
optional, default: false
If the overflow property of the body is set to hidden, the body widens by the width of the scrollbar. This produces an
unpleasant flickering effect, especially on websites with centered content. If the reserveScrollBarGap option is set,
this gap is filled by a padding-right on the body element. If disableBodyScroll is called for the last target element,
or clearAllBodyScrollLocks is called, the padding-right is automatically reset to the previous value.
optional, default: undefined
There are cases where you have called disableBodyScroll on an element, but you still want some or all
children of it to receive touch moves still; or in other words, you want child elements to
ignore the fact that a parent element has the body scroll lock set (and hence, not be affected at all by this setting).
See below for 2 use cases:
Javascript:
});
https://medium.com/jsdownunder/locking-body-scroll-for-all-devices-22def9615177
https://stackoverflow.com/questions/41594997/ios-10-safari-prevent-scrolling-behind-a-fixed-overlay-and-maintain-scroll-posi
Refer to the releases page."
2746,"angular,angular","The modern web developer‚Äôs platform. Angular - The modern web developer's platform.


  
  
  <i>Angular is a development platform for building mobile and desktop web applications
     using TypeScript/JavaScript and other languages.</i>
  



  <strong>www.angular.io</strong>
  



  Contributing Guidelines
  ¬∑
  Submit an Issue
  ¬∑
  Blog
  
  



  
    
  &nbsp;
  
    
  &nbsp;
  
    
  



  
    
  


<hr>

Get started with Angular, learn the fundamentals and explore advanced topics on our documentation website.
Getting Started
Architecture
Components and Templates
Forms
API
Angular Elements
Server Side Rendering
Schematics
Lazy Loading
Animations
Install Node.js which includes Node Package Manager
Install the Angular CLI globally:
Create workspace:
Run the application:
Angular is cross-platform, fast, scalable, has incredible tooling, and is loved by millions.
Get started in 5 minutes.

  


Angular Command Line (CLI)
Angular Material
Learn about the latest improvements.
Check out our upgrade guide to find out the best way to upgrade your project.
Read through our contributing guidelines to learn about our submission process, coding rules, and more.
Want to report a bug, contribute some code, or improve the documentation? Excellent! Read up on our guidelines for contributing and then check out one of our issues labeled as <kbd>help wanted</kbd> or <kbd>good first issue</kbd>.
Help us keep Angular open and inclusive. Please read and follow our Code of Conduct.
Join the conversation and help the community.
Twitter
Discord
Gitter
YouTube
StackOverflow
Find a Local Meetup

Love Angular? Give our repo a star :star: :arrow_up:."
2747,"angular,angular-cli","CLI tool for Angular. <!--
  BEFORE UPDATING THIS FILE, READ THIS.

  This file is automatically generated during release. It is important for you to not update
  README directly.

If you need to change the content, update `scripts/templates/readme.ejs`

If you need to add/remove a package or a link, update the .monorepo.json file instead.

  Any changes to README.md directly will result in a failure on CI.
-->

Angular CLI - The CLI tool for Angular.


  
  
  
  <i>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold,
    and maintain Angular applications directly from a command shell.</i>
  



  <strong>cli.angular.io</strong>
  



  Contributing Guidelines
  ¬∑
  Submit an Issue
  ¬∑
  Blog
  
  



  
    
  &nbsp;
  
    
  


<hr>

Get started with Angular CLI, learn the fundamentals and explore advanced topics on our documentation website.
Getting started
CLI
Workspace and project file structure
Workspace configuration
Schematics
Install Node.js which includes Node Package Manager
Install the Angular CLI globally:
Create workspace:
Run the application:
Angular is cross-platform, fast, scalable, has incredible tooling, and is loved by millions.
Get started in 5 minutes.

  


Angular Framework
Angular Material
Learn about the latest improvements.
Check out our upgrade guide to find out the best way to upgrade your project.
Read through our contributing guidelines to learn about our submission process, coding rules and more.
Want to report a bug, contribute some code, or improve documentation? Excellent! Read up on our guidelines for contributing and then check out one of our issues labeled as <kbd>help wanted</kbd> or <kbd>good first issue</kbd>.
Help us keep Angular open and inclusive. Please read and follow our Code of Conduct.
Read through our developer guide to learn about how to build and test the Angular CLI locally.
Join the conversation and help the community.
Twitter
Discord
Gitter
YouTube
StackOverflow
Find a Local Meetup
This is a monorepo which contains many tools and packages:
Love Angular CLI? Give our repo a star :star: :arrow_up:."
2748,"angular,components","Component infrastructure and Material Design components for Angular. The Angular team builds and maintains both common UI components and tools to help you build your
own custom components. The team maintains several npm packages.
Documentation, demos, and guides |
Frequently Asked Questions |
Community Google group |
Contributing |
StackBlitz Template
See our Getting Started Guide if you're building your first project with Angular
Material.
If you'd like to contribute, please follow our contributing guidelines. Please see
our help wanted label for a list of issues with good opportunities for
contribution.
Investigating and fixing reported regressions for the new components launched in v15
Creating a new more flexible theming API in collaboration with MDC Web
Designing and Implementing a CDK combobox component
Continuing to focus on improving the accessibility of Angular Material components
The Angular Components team is part of the Angular team at Google. The team includes both Google
employees and community contributors from around the globe.
Our team has two primary goals:
Build high-quality UI components that developers can drop into existing applications 
Provide tools that help developers build their own custom components with common interaction
patterns
What do we mean by ""high-quality"" components?
Internationalized and accessible so that all users can use them.
Straightforward APIs that don't confuse developers.
Behave as expected across a wide variety of use-cases without bugs.
Behavior is well-tested with both unit and integration tests.
Customizable within the bounds of the Material Design specification.
Performance cost is minimized.
Code is clean and well-documented to serve as an example for Angular developers.
The Angular Components team supports the most recent two versions of all major browsers:
Chrome (including Android), Firefox, Safari (including iOS), and  Edge.
We aim for great user experience with the following screen readers:
Windows: NVDA and JAWS with FF / Chrome.
macOS: VoiceOver with Safari / Chrome.
iOS: VoiceOver with Safari
Android: Android Accessibility Suite (formerly TalkBack) with Chrome.
Chrome OS: ChromeVox with Chrome."
2836,"web-padawan,lit-components","Moved to https://github.com/vaadin/component-mixins. Prototyping components using LitElement.
This is a personal research and experiment, not meant for publishing and production usage.
The goals of this the experiment are:
test how difficult would it be to write set of components with LitElement
identify which parts of code could be re-used by LitElement and Polymer 3
investigate the possible styling and theming approaches for LitElement"
2837,"web-padawan,polymer3-webpack-starter","Polymer 3 starter built with Vaadin components and Vaadin.Router library, using webpack and modern tools. This is an example project demonstrating how you can build a frontend part of the JavaScript
application using Vaadin components and Vaadin Router library, and leverage the benefits of the modern tools.
Lumo version ‚Üó
|
Material version ‚Üó
Latest Polymer 3 and up-to-date webcomponentsjs polyfill
UI built using latest Vaadin components shipped as ES modules
Application with two different themes: Lumo and Material
Vaadin Router configured for code splitting and lazy loading
webpack 4 for easy development and production bundling
Up-to-date Babel 7 verified to work nice with Custom Elements
Modern build for evergreen browsers using BabelMultiTargetPlugin
Minification of JavaScript using Terser supporting ES2015+
Minification of HTML and CSS in tagged template literals
Automatic service worker generation using Workbox
Automatic bundle analysis and report generation
Web server using express and History API middleware
Compressing static files for production using gzip and Brotli algorithm
Serving compressed files using express-static-gzip middleware
Start webpack-dev-server on localhost http://127.0.0.1:3000:
Run production build:
Serve the built output on localhost http://127.0.0.1:8000:
Run production build and start HTTP server to show bundle report:
Check out material branch for Material version of the starter, and a full diff of changes.
Using import.meta suggested by Polymer docs is not supported out of the box, see webpack/webpack#6719.
Support can be added with babel-plugin-bundled-import-meta or
webpack loader import-meta-url-loader"
2838,"wiredjs,wired-elements","Collection of custom elements that appear hand drawn. Great for wireframes or a fun look.. Wired Elements is a series of basic UI Elements that have a hand drawn look. These can be used for wireframes, mockups, or just the fun hand-drawn look. 

The elements are drawn with enough randomness that no two renderings will be exactly the same - just like two separate hand drawn shapes. 
Play with wired-elements:
The package (wired-elements) exports all components in the wired category. List of all wired elements can be found here.
Add wired-elements to your project:
or add individual controls
Import into your module script:
Alternatively, load a bundled version from the dist folder or from CDN:
Learn about web components here.
To view details of each component - properties, events, css-properties, etc, are provided in their package folder. 
List of all packages
Demo of all components is available at wiredjs.com.
View the Dev environment page for instructions.
MIT License (c) Preet Shihn"
2839,"wix,stylable","Stylable - CSS for components . Stylable enables you to write reusable, highly-performant components. Each component exposes a style API that maps its internal parts so you can reuse components across teams without sacrificing stylability.
Scopes styles to components so they don't ""leak"" and clash with other styles.
Enables custom pseudo-classes and pseudo-elements that abstract the internal structure of a component. These can then be styled externally.
Cuts down on the resulting CSS bundles using ""rule-shaking"" and other optimizations
At build time, the preprocessor converts the Stylable CSS into a minimal, flat, static, valid vanilla CSS that works cross-browser.
Learn more in our Documentation Center.
There are two options for installing Stylable:
Create a new project based on Stylable react-scripts, using create-react-app
Install Stylable and its webpack plugin to an existing webpack based project
For details on both options, see Install & Configure.
Mr. Potato Bruce - A small app showcasing Stylable, created using @stylable/react-scripts
Manual Vue Integration - Simple example showing how to manually integrate Stylable into a Vue project (proof of concept)
Various webpack project setups - An example of possible webpack configurations
This repository is a mono-repo containing multiple packages that together comprise the Stylable ecosystem. It uses Lerna and Yarn workspaces to manage the various packages and their dependencies.
Read our contributing guidelines for details on our code of conduct, and the process for submitting pull requests.
Copyright (c) 2017 Wix.com Ltd. All Rights Reserved. Use of this source code is governed by a BSD license."
2840,"Wscats,virtual-dom","ÂÖ≥‰∫éVueÔºåReactÔºåPreactÂíåOmiÁ≠âÊ°ÜÊû∂Ê∫êÁ†ÅÁöÑËß£ËØª. createElement()
diff()"
2841,"rough-stuff,wired-elements","Collection of custom elements that appear hand drawn. Great for wireframes or a fun look.. Wired Elements is a series of basic UI Elements that have a hand drawn look. These can be used for wireframes, mockups, or just the fun hand-drawn look. 

Play with wired-elements:
The package (wired-elements) exports all components in the wired category. List of all wired elements can be found here.
Add wired-elements to your project:
Or load the ES module directly through unpkg
Import into your module script:
or 
Learn about web components here.
To view details of each component - properties, events, css-properties, etc, are provided in the docs folder.
Demo of all components is available at wiredjs.com.
wired-elements was built using RoughJS and Lit.
Become a sponsor of the Rough suite of libraries
Become a financial contributor and help us sustain our community. [Contribute]

Support this project with your organization. Your logo will show up here with a link to your website. [Contribute]










MIT License (c) Preet Shihn"
2842,"microsoft,fast","The adaptive interface system for modern web experiences.. This is the FAST monorepo, containing web component packages, tools, examples, and documentation. FAST tech can be used √† la carte or as a suite to build enterprise-grade websites, applications, components, design systems, and more.
:star: We appreciate your star, it helps!
FAST is a collection of technologies built on Web Components and modern Web Standards, designed to help you efficiently tackle some of the most common challenges in website and application design and development.
TL;DR
Create reusable UI components with @microsoft/fast-element, all based on W3C Web Component standards.
Use our @microsoft/fast-foundation library to rapidly build W3C OpenUI-based design systems without re-implementing component logic.
Leverage modern, W3C standards-based SSR for Web Components by plugging in @microsoft/fast-ssr.
Bring all the pieces together to build SPAs and rich experiences with our Web Components router by installing @microsoft/fast-router.
React users can drop in @microsoft/fast-react-wrapper to turn any Web Component into a native React component.
Integrate FAST Web Components with any library, framework, or build system. You can adopt incrementally without re-writing your existing systems.
For an in-depth explanation of FAST see our docs introduction.


The @microsoft/fast-element library is a lightweight means to easily build performant, memory-efficient, standards-compliant Web Components. FAST Elements work in every major browser and can be used in combination with any front-end framework or even without a framework. To get up and running with @microsoft/fast-element see the Getting Started guide.


The @microsoft/fast-foundation package is a library of Web Component classes, templates, and other utilities intended to be composed into registered Web Components by design systems (e.g. Fluent Design, Material Design, etc.). The exports of this package can generally be thought of as un-styled base components that implement semantic and accessible markup and behavior.
This package does not export Web Components registered as custom elements - it exports parts and pieces intended to be composed into Web Components, allowing you to implement your own design language by simply applying CSS styles and behaviors without having to write all the JavaScript that's involved in building production-quality component implementations.


The @microsoft/fast-ssr package contains a NodeJS solution for rendering FAST templates and components. While primarily intended for supporting server-side rendering (SSR) scenarios, it also allows FAST to be used as a general purpose HTML templating solution.


The @microsoft/fast-router package contains a history-based navigation and routing solution designed around Web Components. By using fast-router, you can create multi-page and full application experiences. The router works with any Web Components, but has special support for Web Components built on FAST.


@fluentui/web-components is a library of Web Components that composes @microsoft/fast-foundation. @fluentui/web-components makes use of different stylesheets and may include components that specifically support Microsoft's Fluent design language.
The Fluent UI Web Components are built on @microsoft/fast-element and @microsoft/fast-foundation. The source for @fluentui/web-components is hosted in the Fluent UI monorepo.
We hope you're excited by the possibilities that FAST presents. But, you may be wondering where to start. Here are a few statements that describe various members of our community. We recommend that you pick the statement you most identify with and follow the links where they lead. You can always come back and explore another topic at any time.
""I just want ready-made components!""
""I want to build my own design system.""
""I want to build my own components.""
""I need to integrate FAST with another framework or build system.""
""I want to look at a quick reference.""
Looking to get answers to questions or engage with us in realtime? Our community is most active on Discord. Submit requests and issues on GitHub, or join us by contributing on some good first issues via GitHub.
Get started here with the Contributor Guide.
We look forward to building an amazing open source community with you!
There are a million and one great ways to build your next website or application. To support the technologies you choose, creating unopinionated code is at the center of every decision we make in FAST.
This principle of being unopinionated manifests in several important ways including:
A flat component architecture that lets you compose what you need without struggling with rigid patterns and complex objects.
Separating base components from styles and design systems to support multiple implementations without re-writing or duplicating styles. Use the design system to customize existing styled components, or build your own styles, with your design system, without having to rebuild or duplicate the base components.
Framework agnostic tooling that lets you use our development tools with any view framework.
The ability to replace almost any FAST package with your package of choice. Just use one package or leverage our entire suite of packages to build your next project from the ground up; it's your call.
Leverage our (upcoming!) FAST CLI to accelerate your design or development workflow. You can create new projects from scratch, create design systems, and add or customize from dozens of components in our foundation library.
Widely available design systems from companies like Microsoft (Fluent), Google (Material), or Salesforce (Lightning) are useful when it is essential to align with a platform or take advantage of a polished system at low cost, but many companies have a design system of their own, and some may have multiple design systems or variations.
Because FAST has abstracted base components from their style, you get a head start on your design system by building on top of tried and true base components and style libraries like our offerings for color, animation, and elevation.
Join the community and chat with us in real-time on Discord.
Submit requests and issues on GitHub.
Contribute by helping out on some of our recommended first issues on GitHub."
2843,"vmware-archive,clarity","Clarity is a scalable, accessible, customizable, open source design system built with web components. Works with any JavaScript framework, built for enterprises, and designed to  be inclusive.. NOTE: The Clarity Design System has moved and is now split into two repositories, one for Clarity Angular and one for Clarity Core. This repository is now for archived purposes only.


Clarity is an open source design system that brings together UX
guidelines, design resources, and coding implementations with Web Components. This
repository includes everything you need to build, customize, test, and deploy
Clarity. For complete documentation, visit the Clarity website.
If you are looking for Clarity Angular, our previous implementation of Clarity built
in Angular, please see the angular branch for the latest version there.
Clarity is published as five npm packages:
 Contains the Web
Components that work in any JavaScript framework.
 Contains shims for core usage in Angular environment
 Contains shims for core usage in React environment
 Our open source sans-serif typeface.
Visit our documentation at https://clarity.design/get-started/
For documentation on the Clarity Design System, including a list of components
and example usage, see our website.
The Clarity project team welcomes contributions from the community. For more
detailed information, see our contribution guidances.
The Clarity Design System is licensed under the MIT license.
If you find a bug or want to request a new feature, please open a GitHub issue.
Include a link to the reproduction scenario you created by forking one of the
Clarity Stackblitz Templates for the version you are using at
Clarity StackBlitz templates.
For our support policies please visit https://clarity.design/get-started/support/
For questions, ideas, or just reaching out to the team feel free to open a discussion in our GitHub Disscussion section."
2844,"openui,open-ui","Maintain an open standard for UI and promote its adherence and adoption.. Since the beginning, web browsers have provided form controls and other website-level UI controls for web designers and developers to leverage in creating interfaces for their users. The web became what it is today precisely because websites are interactive. People search, select, log in, upload content, purchase, ask for what they need --- all through the power of controls.
Having the building blocks of user interfaces supplied by HTML makes it far easier for web developers to create interfaces for their users. Browser-supplied form and UI controls robustly respond to user needs. The same control can behave differently on different types of devices. They provide deep, accessible integration with all hardware and software. They adjust to unexpected conditions precisely because they are handled by the browser.¬†
The first set of form controls were specified in the early days of HTML, in 1993. They allow for entering text, pressing buttons, uploading files, checking checkboxes, and selecting radio buttons. From the beginning, the visual design of these form controls has been dictated by the browser, often designed to blend in with the underlying operating system.
Over a decade later, by 2004--2008, it was clear more form and website-level UI controls were needed. ""Web 2.0"" had energized interactivity on the web, and designers were asking for user interfaces that HTML did not support. To implement these designs, web developers turned to third-party plugins like Flash, non-standard technology like ActiveX, or emerging frameworks like jQuery. As the culture of using the web ignited around the world, incredibly-common interaction design patterns became the new normal.
HTML5 was born of the idea of ""paving the cowpaths"". The WHAT Working Group (WHATWG) embarked on an effort to take the most popular patterns, seen on millions of websites, and codify those patterns in HTML itself. Web developers would not need plug-ins or scripts, they could simply use HTML to create rich forms for entering a number, a URL, a password, or an email address; choosing a date and time; filling out a search field; picking a color; choosing a range from a slider; or choosing an item from a predefined list. For the first time, web developers could use HTML for creating placeholder text, specifying which field should capture focus, or making a form field required. The new HTML elements made it incredibly easy to build forms that are faster, more secure, and completely accessible.
But another 15 years have gone by since the last major revision to form and UI interfaces. Most complex web projects today need far more than what HTML5 form and UI controls provide. And so, all-too-often today's web developers turn to heavy JavaScript frameworks to build the user interfaces their designers are asking for. These custom interfaces are rarely fully accessible. They slow down the page, consume power, open security vulnerabilities and exclude people.¬†
Additionally, today's projects often reject existing built-in form and UI controls because they require more agency over the look and feel of the interface. Web designers demand the ability to express their project's branding across every element on the page, including all user interfaces. Current form and website-level UI controls do not allow for this.
It's time to modernize HTML once again, and standardize the underlying technology needed by web developers to create the most common patterns of form and website-level UI controls. HTML alone won't be enough, however. New CSS and JavaScript are needed as well. And rather than simply standardize specific interfaces, it's time to create a more powerful underlying architecture so the creators of web sites and apps can design and build their own ideas for interfaces.
The Open UI Community Group is tasked with facilitating a larger architectural plan for how HTML, CSS, JS, and Web APIs can be combined to provide needed technology so web developers can create modern custom user interfaces.¬†
Once foundational planning is done, each needed web standard will be defined in the appropriate working group. Open UI is tasked with creating recommendations for those working groups, not defining the standards themselves.¬†
The Open UI community group is focused on improving form controls and other website-level UI controls on the web by pursuing the following:
Research
Document universal component patterns seen in popular 3rd-party web development frameworks.
Capture commonly-used language for component names and parts, states, behaviors, and transition triggers.
Conduct informal developer-facing user research.
Discover gaps or bugs in what's possible with current web technology.
Plan
Debate and define guiding Open UI Design Principles.
Define developer needs discovered by research.
Document group progress at open-ui.org and github.com/openui/open-ui.
Recommend
Write draft proposals for targeted improvements to form controls and other website-level UI controls, their styling, and behavior to HTML, CSS, JavaScript, Accessibility or Web APIs.
Deliver the draft proposals as suggestions to the WHATWG, CSSWG, W3C, TC39 and other relevant standards bodies for further debate, adoption, and for implementation in browsers after becoming official HTML, CSS, JS, ARIA or Web API specifications.¬†
Open issues for any bugs discovered with relevant browsers or working groups.
Any design, innovation, invention or specification of novel or unique UI patterns or controls, or features that are iconic to a specific platform.
Any attempt to determine or specify the default look or behavior of these controls in the context of a particular operating system or hardware device.
We welcome everyone to get involved in Open UI, check out our Get Involved page on our site on the ways in which you can engage with the community.
This repository is being used for work in the W3C Open UI Community Group, governed by the W3C Community License
Agreement (CLA). To make substantive contributions,
you must join the Open UI CG prior to making a PR."
2845,"github,github-elements","GitHub's Web Component collection.. GitHub's Web Component collection.
We have 17 open source custom elements:
An input element that validates its value with a server endpoint.
Repository | Example
Auto-complete input values from server search results.
Repository | Example
Copy element text content or input values to the clipboard.
Repository | Example
A modal dialog that&#39;s opened with &lt;details&gt;.
Repository | Example
A menu opened with &lt;details&gt;.
Repository | Example
Attach files via drag and drop or file input.
Repository | Example
Display elements in a subtree that match filter input text.
Repository | Example
Backports native emoji characters to browsers that don&#39;t support them by replacing the characters with fallback images.
Repository | Example
A custom element for cropping a square image. Returns x, y, width, and height.
Repository | Example
A client-side includes tag.
Repository | Example
Markdown formatting buttons for text inputs.
Repository | Example
Web component extensions to the standard &lt;time&gt; element.
Repository | Example
An input element that sends its value to a server endpoint and renders the response body.
Repository | Example
An accessible tab container element with keyboard support.
Repository | Example
Drag and drop task list items.
Repository | Example
Activates a suggestion menu to expand text snippets as you type.
Repository | Example
A custom element that shows text as if it were being typed
Repository | Example"
2900,"gregberge,loadable-components","The recommended Code Splitting library for React ‚úÇÔ∏è‚ú®. 
  

React code splitting made easy. Reduce your bundle size without stress ‚úÇÔ∏è‚ú®.









See the documentation at loadable-components.com for more information about using Loadable Components!
Quicklinks to some of the most-visited pages:
Loadable Components is an MIT-licensed open source project. It's an independent project with ongoing development made possible thanks to the support of these awesome backers. If you'd like to join them, please consider:
Sponsor me on GitHub ‚ù§Ô∏è.
Licensed under the MIT License, Copyright ¬© 2017-present Greg Berg√©.
See LICENSE for more information."
2901,"electron,forge",":electron: A complete tool for building and publishing Electron applications. A complete tool for building modern Electron applications.
Electron Forge unifies the existing (and well maintained) build tools for
Electron development into a simple, easy to use package so that anyone can
jump right in to Electron development.
Website |
Goals |
Docs and Usage |
Configuration |
Support |
Contributing |
Changelog
Note: The major version bump between v5.0.0 and v6.0.0 contains major breaking API changes and improvements. If you are new to Forge, we highly recommend using the latest version. If using an older version of Forge, we recommend upgrading to v6.0.0 or later.
Pre-requisities:
Node 14.17.5 or higher
Git
If you have a more recent version of npm or yarn, you can use
npx,
or
yarn create.
Alternatively (less recommended):
For more information on creating a new project from a template, see our CLI documentation.
For Electron Forge documentation and usage you should check out our website:
electronforge.io
Starting with Electron should be as simple as a single command.
Developers shouldn't have to worry about setting up build tooling,
native module rebuilding, etc. Everything should ""just work"" for them out
of the box.
Everything from creating the project to packaging the project for release
should be handled by one core dependency in a standard way while still offering
users maximum choice and freedom.
With these goals in mind, under the hood this project uses, among others:
@electron/rebuild:
Automatically recompiles native Node.js modules against the correct
Electron version.
Electron Packager:
Customizes and bundles your Electron app to get it ready for distribution.
If you are interested in reporting/fixing issues and contributing directly to the code base, please see CONTRIBUTING.md for more information on what we're looking for and how to get started.
Please report bugs or feature requests in our issue tracker.
You can find help for debugging your Electron Forge on the Support page, and ask questions in the official Electron Discord server, where there is a dedicated channel for Electron Forge."
2902,"tamagui,tamagui","Universal UI kit and style system for React Native + Web - with an optimizing compiler üöÑ. 
  



  Style React Native and Web with an optimizing compiler


@tamagui/core - Universal style system on top of React Native + Web.
@tamagui/static - Optimizing compiler that works with core and tamagui.
tamagui - Complete universal UI kit built on top of @tamagui/core.
See tamagui.dev for documentation.
Tamagui lets you share more code between web and native apps while improving, rather than sacrificing, DX, performance, and code maintainability.
It does this with an optimizing compiler that outputs platform-specific optimizations and understands a rich ""CSS-in-JS"" style system with support for turning even inline styles with logic into flattened nodes.
The compiler generates atomic CSS and partially evaluated code that gains significant runtime performance. It evaluates across module boundaries, flattening a large % of styled components in your app (with easy to follow rules and debug tools to know when its working and not)
Within the ~500x¬≤ responsive browser section on the homepage, 49 inline styled components are flattened to their defined tags like div. The front page the site gains nearly 10-20% in Lighthouse scores depending on the weather.
Learn more on the website.
Tamagui is a monorepo that makes it easy to contribute. Install:
While developing, you'll want to run the build watcher in a dedicated terminal:
It's easiest to use the sandbox project to test and develop things for web:
This runs a client-side only vite build of tamagui, with a complete configuration already set up.
To test on native, kitchen-sink is equally light weight and well set up:
Once you've made changes, you can add tests. All compiler and CSS generation tests live in packages/static.
Before submitting a PR, check everything works across every combination of environments.
To do so, run the site, first in development to test if it works entirely at runtime:
You replace _app.tsx to return just your component/use case. If it looks good, try running again with the compiler on:
Finally, if that looks good, build to production and test that:
This flow ensures it works with Vite, Webpack, Metro, Next.js with SSR, and with the compiler both on and off.
Our plan is to add integration tests to cover all this and more soon!"
2903,"themesberg,flowbite","The most popular and open-source library of Tailwind CSS components. 
    
      
    
    Build websites even faster with components on top of Tailwind CSS



    
    
    
    


For full documentation, visit flowbite.com.
Flowbite can be included as a plugin into an existing Tailwind CSS project and it is supposed to help you build websites faster by having a set of web components to work with built with the utility classes from Tailwind CSS.
Make sure that you have Node.js and Tailwind CSS installed. 
Install Flowbite as a dependency using NPM by running the following command:
Require Flowbite as a plugin inside the tailwind.config.js file:
Make sure that you add the template path to the tailwind.config.js file:
Include the main JavaScript file to make interactive elements work:
The quickest way to get started working with Flowbite is to simply include the CSS and JavaScript into your project via a CDN service such as UNPKG or CDNJS (content delivery networks).
Require the following minified stylesheet inside the head tag:
And include the following javascript file before the end of the body tag:
One of the most popular way of using Flowbite is to include the bundled Javascript file which is UMD ready using a bundler such as Webpack or Parcel which makes sure that all of the data attributes and functionality will work out-of-the-box.
You can directly import the main JavaScript file inside your bundled app-bundle.js file like this:
This file has access to all of the components and it automatically applies event listeners to the data attributes.
The preferred way to use the interactive UI components from Flowbite is via the data attributes interface which allows us to add functionality via the HTML element attributes and most of the examples on our documentation applies this strategy.
For example, to set up a modal component all you need to do is use data-modal-target and data-modal-{toggle|show|hide} to toggle, show, or hide the component by clicking on any trigger element.
You can also use the init functions to set up the event listeners yourself. Here's an example how you can do it with Vue or Nuxt:
The initFlowbite function sets up all of the init functions for dropdowns, modals, navbars, tooltips and so on to hook onto the data attributes. Alternatively, you can also initialise each component category class separately with initDropdowns or initModals.
You can view more examples by browsing the components from Flowbite.
Flowbite also offers an API for using the components programmatically and it supports both CJS and ESM for JavaScript which can be helpful if you need to expand the default capabilities of the data attributes interface and get access to function callbacks.
Here's an example how you can import and create a new Modal component inside JavaScript:
Check out the JavaScript behaviour section of each component's page to learn how you can use this.
Flowbite supports type declarations for the interactive UI components including object interfaces and parameter types. Check out the following examples to learn how you can use types with Flowbite.
Additionally to our code above, we will now import some relevant types from the Flowbite package, namely the ModalOptions and ModalInterface:
Generally speaking, all of the components have an interface definition that you can use whenever you create a new object to make sure that you're using the correct types of parameters and methods.
When creating a new modal you can set the ModalInterface as the main type:
Flowbite also supports type definitions for the options object so if you want to set the placement of the modal based on types, here's how you would do that:
Learn more about Flowbite and TypeScript in the quickstart guide.
The awesome open-source community also built and currently maintains the following standalone libraries for React, Vue, Svelte, and Angular:
We also wrote integration guides for the following front-end frameworks and libraries:
Flowbite has a great integration with most of the back-end frameworks because it relies on vanilla JavaScript:
Flowbite is an open source collection of UI components built with the utility classes from Tailwind CSS that you can use as a starting point when coding user interfaces and websites.
<table>
  <tr>
    <td width=""33.3333%"">Alerts</td>
    <td width=""33.3333%"">Badge</td>
    <td width=""33.3333%"">Breadcrumbs</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Buttons</td>
    <td width=""33.3333%"">Button group</td>
    <td width=""33.3333%"">Cards</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Dropdown</td>
    <td width=""33.3333%"">Forms</td>
    <td width=""33.3333%"">List group</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Typography</td>
    <td width=""33.3333%"">Modal</td>
    <td width=""33.3333%"">Tabs</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Navbar</td>
    <td width=""33.3333%"">Pagination</td>
    <td width=""33.3333%"">Timeline</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Progress bar</td>
    <td width=""33.3333%"">Tables</td>
    <td width=""33.3333%"">Toast</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Tooltips</td>
    <td width=""33.3333%"">Datepicker</td>
    <td width=""33.3333%"">Spinner</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Footer</td>
    <td width=""33.3333%"">Accordion</td>
    <td width=""33.3333%"">Sidebar</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Carousel</td>
    <td width=""33.3333%"">Avatar</td>
    <td width=""33.3333%"">Rating</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Input Field</td>
    <td width=""33.3333%"">File Input</td>
    <td width=""33.3333%"">Search Input</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Select</td>
    <td width=""33.3333%"">Textarea</td>
    <td width=""33.3333%"">Checkbox</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Radio</td>
    <td width=""33.3333%"">Toggle</td>
    <td width=""33.3333%"">Range Slider</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Floating Label</td>
    <td width=""33.3333%"">Mega Menu</td>
    <td width=""33.3333%"">Skeleton</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">KBD (keyboard)</td>
    <td width=""33.3333%"">Drawer (offcanvas)</td>
    <td width=""33.3333%"">Popover</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Video</td>
    <td width=""33.3333%"">Heading</td>
    <td width=""33.3333%"">Paragraph</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Blockquote</td>
    <td width=""33.3333%"">Image</td>
    <td width=""33.3333%"">List</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Link</td>
    <td width=""33.3333%"">Text</td>
    <td width=""33.3333%"">Horizontal line (HR)</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Speed Dial</td>
    <td width=""33.3333%"">Stepper</td>
    <td width=""33.3333%"">Indicators</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
  <tr>
    <td width=""33.3333%"">Bottom Navigation</td>
    <td width=""33.3333%"">Sticky Banner</td>
    <td width=""33.3333%"">Gallery (Masonry)</td>
  </tr>
  <tr>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
    <td width=""33.3333%"">
        
            
        
    </td>
  </tr>
</table>

If you need the Figma files for the components you can check out our website for more information:
üé® Get access to the Figma design files
Check out Flowbite Blocks to get access to over 310+ website sections coded in Tailwind CSS and Flowbite:
üì¶ Check out Flowbite Blocks
Get access to all premium features including the Figma design system, access to all Flowbite Block sections and a dashboard UI interface:
üíé Check out Flowbite Pro
If you need help or just want to discuss about the library join the community on Github:
‚å®Ô∏è Discuss about Flowbite on GitHub
For casual chatting with others using the library:
üí¨ Join the Flowbite Discord Server
Video tutorials and presentations using Flowbite:
üé• Subscribe to our YouTube channel
The Flowbite name and logos are trademarks of Bergside Inc.
üìù Read about the licensing terms
üìÄ Brand guideline and trademark usage agreement"
2904,"TypeStrong,ts-loader","TypeScript loader for webpack. 

  ts-loader

  
    This is the TypeScript loader for webpack.
    
    
    Installation
    ¬∑
    Report Bug
    ¬∑
    Request Feature
  


<!-- toc -->

<!-- tocstop -->

or
You will also need to install TypeScript if you have not already.
or
Use webpack like normal, including webpack --watch and webpack-dev-server, or through another
build system using the Node.js API.
We have a number of example setups to accommodate different workflows. Our examples can be found here.
We probably have more examples than we need.  That said, here's a good way to get started:
I want the simplest setup going.  Use ""vanilla"" ts-loader
I want the fastest compilation that's available.  Use fork-ts-checker-webpack-plugin.  It performs type checking in a separate process with ts-loader just handling transpilation.
As your project becomes bigger, compilation time increases linearly. It's because typescript's semantic checker has to inspect all files on every rebuild. 
The simple solution is to disable it by using the transpileOnly: true option, but doing so leaves you without type checking and will not output declaration files.
You probably don't want to give up type checking; that's rather the point of TypeScript. So what you can do is use the fork-ts-checker-webpack-plugin.
It runs the type checker on a separate process, so your build remains fast thanks to transpileOnly: true but you still have the type checking.
If you'd like to see a simple setup take a look at our example.
ts-loader supports Yarn Plug‚Äôn‚ÄôPlay.  The recommended way to integrate is using the pnp-webpack-plugin.
ts-loader works very well in combination with babel and babel-loader. There is an example of this in the official TypeScript Samples. 
TypeScript: 3.6.3+
webpack: 5.x+ (please use ts-loader 8.x if you need webpack 4 support)
node: 12.x+
A full test suite runs each night (and on each pull request). It runs both on Linux and Windows, testing ts-loader against major releases of TypeScript. The test suite also runs against TypeScript@next (because we want to use it as much as you do).
If you become aware of issues not caught by the test suite then please let us know. Better yet, write a test and submit it in a PR!
Create or update webpack.config.js like so:
Add a tsconfig.json file. (The one below is super simple; but you can tweak this to your hearts desire)
The tsconfig.json file controls
TypeScript-related options so that your IDE, the tsc command, and this loader all share the
same options.
If you want to be able to debug your original source then you can thanks to the magic of sourcemaps. There are 2 steps to getting this set up with ts-loader and webpack.
First, for ts-loader to produce sourcemaps, you will need to set the tsconfig.json option as ""sourceMap"": true.
Second, you need to set the devtool option in your webpack.config.js to support the type of sourcemaps you want. To make your choice have a read of the devtool webpack docs. You may be somewhat daunted by the choice available. You may also want to vary the sourcemap strategy depending on your build environment. Here are some example strategies for different environments:
devtool: 'inline-source-map' - Solid sourcemap support; the best ""all-rounder"". Works well with karma-webpack (not all strategies do)
devtool: 'eval-cheap-module-source-map' - Best support for sourcemaps whilst debugging.
devtool: 'source-map' - Approach that plays well with UglifyJsPlugin; typically you might use this in Production
Loading css and other resources is possible but you will need to make sure that
you have defined the require function in a declaration file.
Then you can simply require assets or chunks per the webpack documentation.
The same basic process is required for code splitting. In this case, you import modules you need but you
don't directly use them. Instead you require them at split points. See this example and this example for more details.
TypeScript 2.4 provides support for ECMAScript's new import() calls. These calls import a module and return a promise to that module. This is also supported in webpack - details on usage can be found here. Happy code splitting!
To output declaration files (.d.ts), you can set ""declaration"": true in your tsconfig and set ""transpileOnly"" to false.
If you use ts-loader with  ""transpileOnly"": true along with fork-ts-checker-webpack-plugin, you will need to configure fork-ts-checker-webpack-plugin to output definition files, you can learn more on the plugin's documentation page: https://github.com/TypeStrong/fork-ts-checker-webpack-plugin#typescript-options
To output a built .d.ts file, you can use the DeclarationBundlerPlugin in your webpack config.
The build should fail on TypeScript compilation errors as of webpack 2. If for some reason it does not, you can use the webpack-fail-plugin.
For more background have a read of this issue.
If you want to resolve modules according to baseUrl and paths in your tsconfig.json then you can use the tsconfig-paths-webpack-plugin package. For details about this functionality, see the module resolution documentation.
This feature requires webpack 2.1+ and TypeScript 2.0+. Use the config below or check the package for more information on usage.
There are two types of options: TypeScript options (aka ""compiler options"") and loader options. TypeScript options should be set using a tsconfig.json file. Loader options can be specified through the options property in the webpack configuration:
If you want to speed up compilation significantly you can set this flag.
However, many of the benefits you get from static type checking between different dependencies in your application will be lost. transpileOnly will not speed up compilation of project references.
It's advisable to use transpileOnly alongside the fork-ts-checker-webpack-plugin to get full type checking again. To see what this looks like in practice then either take a look at our example.
Tip: When you add the fork-ts-checker-webpack-plugin to your webpack config, the transpileOnly will default to true, so you can skip that option.
If you enable this option, webpack 4 will give you ""export not found"" warnings any time you re-export a type:
The reason this happens is that when typescript doesn't do a full type check, it does not have enough information to determine whether an imported name is a type or not, so when the name is then exported, typescript has no choice but to emit the export. Fortunately, the extraneous export should not be harmful, so you can just suppress these warnings:
If you're using HappyPack or thread-loader to parallelise your builds then you'll need to set this to true. This implicitly sets *transpileOnly* to true and WARNING! stops registering all errors to webpack.
It's advisable to use this with the fork-ts-checker-webpack-plugin to get full type checking again. IMPORTANT: If you are using fork-ts-checker-webpack-plugin alongside HappyPack or thread-loader then ensure you set the syntactic diagnostic option like so:
This will ensure that the plugin checks for both syntactic errors (eg const array = [{} {}];) and semantic errors (eg const x: number = '1';). By default the plugin only checks for semantic errors (as when used with ts-loader in transpileOnly mode, ts-loader will still report syntactic errors).
Also, if you are using thread-loader in watch mode, remember to set poolTimeout: Infinity so workers don't die.
These options should be functions which will be used to resolve the import statements and the &lt;reference types=""...""&gt; directives instead of the default TypeScript implementation. It's not intended that these will typically be used by a user of ts-loader - they exist to facilitate functionality such as Yarn Plug‚Äôn‚ÄôPlay.
Provide custom transformers - only compatible with TypeScript 2.3+ (and 2.4 if using transpileOnly mode). For example usage take a look at typescript-plugin-styled-components or our test.
You can also pass a path string to locate a js module file which exports the function described above, this useful especially in happyPackMode. (Because forked processes cannot serialize functions see more at related issue)
This is important if you read from stdout or stderr and for proper error handling.
The default value ensures that you can read from stdout e.g. via pipes or you use webpack -j to generate json output.
Can be info, warn or error which limits the log output to the specified log level.
Beware of the fact that errors are written to stderr and everything else is written to stderr (or stdout if logInfoToStdOut is true).
If true, no console.log messages will be emitted. Note that most error
messages are emitted via webpack which is not affected by this flag.
You can squelch certain TypeScript errors by specifying an array of diagnostic
codes to ignore.
Only report errors on files matching these glob patterns.
This can be useful when certain types definitions have errors that are not fatal to your application.
Allows use of TypeScript compilers other than the official one. Should be
set to the NPM name of the compiler, eg ntypescript.
Allows you to specify where to find the TypeScript configuration file.
You may provide
just a file name. The loader then will search for the config file of each entry point in the respective entry point's containing folder. If a config file cannot be found there, it will travel up the parent directory chain and look for the config file in those folders.
a relative path to the configuration file. It will be resolved relative to the respective .ts entry file.
an absolute path to the configuration file.
Please note, that if the configuration file is outside of your project directory, you might need to set the context option to avoid TypeScript issues (like TS18003).
In this case the configFile should point to the tsconfig.json and context to the project root.
If false, disables built-in colors in logger messages.
By default ts-loader formats TypeScript compiler output for an error or a warning in the style:
If that format is not to your taste you can supply your own formatter using the errorFormatter option. Below is a template for a custom error formatter. Please note that the colors parameter is an instance of chalk which you can use to color your output. (This instance will respect the colors option.)
If the above formatter received an error like this:
It would produce an error message that said:
And the bit after ""Does not compute.... "" would be red.
Allows overriding TypeScript options. Should be specified in the same format
as you would do for the compilerOptions property in tsconfig.json.
Advanced option to force files to go through different instances of the
TypeScript compiler. Can be used to force segregation between different parts
of your code.
A list of regular expressions to be matched against filename. If filename matches one of the regular expressions, a .ts or .tsx suffix will be appended to that filename.
If you're using HappyPack or thread-loader with ts-loader, you need use the string type for the regular expressions, not RegExp object.
This is useful for *.vue file format for now. (Probably will benefit from the new single file format in the future.)
Example:
webpack.config.js:
index.vue
We can handle .tsx by quite similar way:
webpack.config.js:
tsconfig.json (set jsx option to preserve to let babel handle jsx)
index.vue
Or if you want to use only tsx, just use the appendTsxSuffixTo option only:
The default behavior of ts-loader is to act as a drop-in replacement for the tsc command,
so it respects the include, files, and exclude options in your tsconfig.json, loading
any files specified by those options. The onlyCompileBundledFiles option modifies this behavior,
loading only those files that are actually bundled by webpack, as well as any .d.ts files included
by the tsconfig.json settings. .d.ts files are still included because they may be needed for
compilation without being explicitly imported, and therefore not picked up by webpack.
The default behavior of ts-loader is to act as a drop-in replacement for the tsc command,
so it respects the useCaseSensitiveFileNames set internally by typescript. The useCaseSensitiveFileNames option modifies this behavior,
by changing the way in which ts-loader resolves file paths to compile. Setting this to true can have some performance benefits due to simplifying the file resolution codepath.
By default, ts-loader will not compile .ts files in node_modules.
You should not need to recompile .ts files there, but if you really want to, use this option.
Note that this option acts as a whitelist - any modules you desire to import must be included in
the ""files"" or ""include"" block of your project's tsconfig.json.
See: https://github.com/Microsoft/TypeScript/issues/12358
And in your tsconfig.json:
If set, will parse the TypeScript configuration file with given absolute path as base path.
Per default the directory of the configuration file is used as base path. Relative paths in the configuration
file are resolved with respect to the base path when parsed. Option context allows to set option
configFile to a path other than the project root (e.g. a NPM package), while the base path for ts-loader
can remain the project root.
Keep in mind that not having a tsconfig.json in your project root can cause different behaviour between ts-loader and tsc.
When using editors like VS Code it is advised to add a tsconfig.json file to the root of the project and extend the config file
referenced in option configFile. For more information please read the PR that
is the base and read the PR that contributed this option.
webpack:
Extending tsconfig.json:
Note that changes in the extending file while not be respected by ts-loader. Its purpose is to satisfy the code editor.
By default whenever the TypeScript compiler needs to check that a file/directory exists or resolve symlinks it makes syscalls. It does not cache the result of these operations and this may result in many syscalls with the same arguments (see comment with example).
In some cases it may produce performance degradation.
This flag enables caching for some FS-functions like fileExists, realpath and directoryExists for TypeScript compiler. Note that caches are cleared between compilations.
ts-loader has opt-in support for project references. With this configuration option enabled, ts-loader will incrementally rebuild upstream projects the same way tsc --build does. Otherwise, source files in referenced projects will be treated as if they‚Äôre part of the root project.
In order to make use of this option your project needs to be correctly configured to build the project references and then to use them as part of the build. See the Project References Guide and the example code in the examples which can be found here.
Because TS will generate .js and .d.ts files, you should ignore these files, otherwise watchers may go into an infinite watch loop. For example, when using webpack, you may wish to add this to your webpack.conf.js file:
It's worth noting that use of the LoaderOptionsPlugin is only supposed to be a stopgap measure. You may want to look at removing it entirely.
We do not support HMR as we did not yet work out a reliable way how to set it up.
If you want to give webpack-dev-server HMR a try, follow the official webpack HMR guide, then tweak a few config options for ts-loader:
Set transpileOnly to true (see transpileOnly for config details and recommendations above).
Inside your HMR acceptance callback function, maybe re-require the module that was replaced.
This is your TypeScript loader! We want you to help make it even better. Please feel free to contribute; see the contributor's guide to get started.
ts-loader was started by James Brantly, since 2016 John Reilly has been taking good care of it. If you're interested, you can read more about how that came to pass.
MIT License"
2905,"esbuild-kit,esbuild-loader","Webpack loader for esbuild: Speed up your build ‚ö°Ô∏è. Speed up your Webpack build with esbuild! üî•
esbuild is a JavaScript bundler written in Go that supports blazing fast ESNext & TypeScript transpilation and JS minification.
esbuild-loader lets you harness the speed of esbuild in your Webpack build by offering faster alternatives for transpilation (eg. babel-loader/ts-loader) and minification (eg. Terser)!
Curious how much faster your build will be? See what users are saying.
ü§´ Psst! Want to power up your Node.js with esbuild?
Checkout our new project tsx, an esbuild enhanced Node.js runtime that can run TypeScript instantly!
<sub>Support this project by ‚≠êÔ∏è starring and sharing it. Follow me to see what other cool projects I'm working on! ‚ù§Ô∏è</sub>
Use esbuild-loader to transform new JavaScript syntax to support older browsers, and TypeScript to JavaScript
In your Webpack configuration, add a new rule for esbuild-loader matching the files you want to transform (e.g. .js, .jsx, .ts, .tsx).
If you were using other loaders before (e.g. babel-loader/ts-loader), make sure to remove them.
webpack.config.js:
Note:
In this setup, esbuild determines how to handle each file based on the extension: .js files will be treated as JS (no JSX allowed), .jsx files as JSX, .ts as TS (no TSX allowed), and so on. See ebuild docs on Content Types for more information.
To force a specific handler on different file extensions (e.g. JSX in .js files), use the loader option.
If you have a tsconfig.json file in your project, esbuild-loader will automatically load it.
If you use a custom name, you can pass it in the path via tsconfig option:
Behind the scenes, get-tsconfig is used to load the tsconfig, and to also resolve the extends property if it exists.
You can also use the tsconfigRaw option to pass in a raw tsconfig object, but it will not resolve the extends property.
‚ö†Ô∏è esbuild only supports a subset of tsconfig options (see TransformOptions interface) and does not do type-checks. It's recommended to use a type-aware IDE or tsc --noEmit for type-checking instead. It is also recommended to enable isolatedModules and esModuleInterop options in your tsconfig by the esbuild docs.
Use tsconfig-paths-webpack-plugin to add support for tsconfig.json#paths.
Since esbuild-loader only uses esbuild to transform code, it cannot help Webpack with resolving paths.
You can replace JS minifiers like Terser or UglifyJs. Checkout the benchmarks to see how much faster esbuild is. The target option tells esbuild that it can use newer JS syntax to perform better minification.
In webpack.config.js:
If you're not using TypeScript, JSX, or any syntax unsupported by Webpack, you can also leverage the minifier for transpilation (as an alternative to Babel). It will be faster because there's less files to work on and will produce a smaller output because the polyfills will only be bundled once for the entire build instead of per file. Simply set the target option on the minifier to specify which support level you want.
There are two ways to minify CSS, depending on your setup. You should already have CSS setup in your build using css-loader.
If the CSS is extracted and emitted as a separate file, you can replace CSS minification plugins like css-minimizer-webpack-plugin with the EsbuildPlugin.
Assuming the CSS is extracted using something like MiniCssExtractPlugin, in webpack.config.js:
If your CSS is not emitted as a CSS file, but rather loaded via JS using something like style-loader, you can use the loader for minification.
In webpack.config.js:
esbuild-loader comes with a version of esbuild it has been tested to work with. However, esbuild has a frequent release cadence, and while we try to keep up with the important releases, it can get outdated.
To work around this, you can use the implementation option in the loader or the plugin to pass in your own version of esbuild (eg. a newer one).
‚ö†Ô∏è esbuild is not stable yet and can have dramatic differences across releases. Using a different version of esbuild is not guaranteed to work.
The implementation option will be removed once esbuild reaches a stable release. Instead esbuild will become a peerDependency so you always provide your own.
If you'd like to see working Webpack builds that use esbuild-loader for basic JS, React, TypeScript, Next.js, etc. check out the examples repo:
The loader supports all Transform options from esbuild.
Note:
Source-maps are automatically configured for you via devtool.  sourcemap/sourcefile options are ignored.
The root tsconfig.json is automatically detected for you. You don't need to pass in tsconfigRaw unless it's in a different path.
Here are some common configurations and custom options:
Type: string
Pass in the file path to a custom tsconfig file. If the file name is tsconfig.json, it will automatically detect it.
Type: string | Array&lt;string&gt;
Default: 'es2015'
The target environment (e.g. es2016, chrome80, esnext).
Read more about it in the esbuild docs.
Type: 'js' | 'jsx' | 'ts' | 'tsx' | 'css' | 'json' | 'text' | 'base64' | 'file' | 'dataurl' | 'binary' | 'default'
Default: 'default'
The loader to use to handle the file. See the type for possible values.
By default, it automatically detects the loader based on the file extension.
Read more about it in the esbuild docs.
Type: string
Default: React.createElement
Customize the JSX factory function name to use.
Read more about it in the esbuild docs.
Type: string
Default: React.Fragment
Customize the JSX fragment function name to use.
Read more about it in the esbuild docs.
Type: { transform: Function }
Custom esbuild-loader option.
Use it to pass in a different esbuild version.
The loader supports all Transform options from esbuild.
Type: string | Array&lt;string&gt;
Default: 'esnext'
Target environment (e.g. 'es2016', ['chrome80', 'esnext'])
Read more about it in the esbuild docs.
Here are some common configurations and custom options:
Type: 'iife' | 'cjs' | 'esm'
Default:
iife if both of these conditions are met:
Webpack's target is set to web
esbuild's target is not esnext
undefined (no format conversion) otherwise
The default is iife when esbuild is configured to support a low target, because esbuild injects helper functions at the top of the code. On the web, having functions declared at the top of a script can pollute the global scope. In some cases, this can lead to a variable collision error. By setting format: 'iife', esbuild wraps the helper functions in an IIFE to prevent them from polluting the global.
Read more about it in the esbuild docs.
Type: boolean
Default: true
Enable JS minification. Enables all minify* flags below.
To have nuanced control over minification, disable this and enable the specific minification you want below.
Read more about it in the esbuild docs.
Type: boolean
Minify JS by removing whitespace.
Type: boolean
Minify JS by shortening identifiers.
Type: boolean
Minify JS using equivalent but shorter syntax.
Type: 'none' | 'inline' | 'eof' | 'external'
Default: 'inline'
Read more about it in the esbuild docs.
Type: boolean
Default: false
Whether to minify CSS files.
Type: string | RegExp | Array&lt;string | RegExp&gt;
To only apply the plugin to certain assets, pass in filters include
Type: string | RegExp | Array&lt;string | RegExp&gt;
To prevent the plugin from applying to certain assets, pass in filters to exclude
Type: { transform: Function }
Use it to pass in a different esbuild version.
No. esbuild plugins are only available in the build API. And esbuild-loader uses the transform API instead of the build API for two reasons:
The build API is for creating JS bundles, which is what Webpack does. If you want to use esbuild's build API, consider using esbuild directly instead of Webpack.
The build API reads directly from the file-system, but Webpack loaders operate in-memory. Webpack loaders are essentially just functions that are called with the source-code as the input. Not reading from the file-system allows loaders to be chainable. For example, using vue-loader to compile Single File Components (.vue files), then using esbuild-loader to transpile just the JS part of the SFC.
No. The inject option is only available in the build API. And esbuild-loader uses the transform API.
However, you can use the Webpack equivalent ProvidePlugin instead.
If you're using React, check out this example on how to auto-import React in your components.
No. If you really need them, consider porting them over to a Webpack loader.
And please don't chain babel-loader and esbuild-loader. The speed gains come from replacing babel-loader.
Running esbuild as a standalone bundler vs esbuild-loader + Webpack are completely different:
esbuild is highly optimized, written in Go, and compiled to native code. Read more about it here.
esbuild-loader is handled by Webpack in a JS runtime, which applies esbuild transforms per file. On top of that, there's likely other loaders & plugins in a Webpack config that slow it down.
Using any JS bundler introduces a bottleneck that makes reaching those speeds impossible. However, esbuild-loader can still speed up your build by removing the bottlenecks created by babel-loader, ts-loader, Terser, etc.
According to the esbuild FAQ, it will not be supported.
Consider these type-checking alternatives:
Using an IDEs like VSCode or WebStorm that has live type-checking built in
Running tsc --noEmit to type check
Integrating type-checking to your Webpack build as a separate process using fork-ts-checker-webpack-plugin
Node.js enhanced with esbuild to run TypeScript and ESM.
Webpack-integrated Mocha test-runner with Webpack 5 support.
Localize/i18nalize your Webpack build. Optimized for multiple locales!"
2906,"MoOx,phenomic","DEPRECATED. Please use Next.js instead.. Modular website compiler (React, Webpack, Reason and whatever you want)
‚úÖ Status




üí¨ Want to discuss or ask a question?



üì¶ Git Mirrors
GitHub |
GitLab |
BitBucket
There are plenty of
examples available.
Just take a look!
‚ú® Check out our
CONTRIBUTING
guide to get started.
‚áÑ Pull/Merge requests and ‚òÖ Stars are always welcome.
For bugs and feature requests, please
create an issue.
Pull requests must be accompanied by passing automated tests. See
CONTRIBUTING
for more information.
Donation is a way to contribute.
You can help us via our OpenCollective page.
Thank you to all the people who have already contributed to phenomic!

Thank you to all our backers!
[Become a backer]

Thank you to all our sponsors! (please ask your company to also support this
open source project by
becoming a sponsor)









"
2907,"webpack-contrib,copy-webpack-plugin","Copy files and directories with webpack. 
  
    
  








Copies individual files or entire directories, which already exist, to the build directory.
To begin, you'll need to install copy-webpack-plugin:
or
or
Then add the plugin to your webpack config. For example:
webpack.config.js
Note
copy-webpack-plugin is not designed to copy files generated from the build process; rather, it is to copy files that already exist in the source tree, as part of the build process.
Note
If you want webpack-dev-server to write files to the output directory during development, you can force it with the writeToDisk option or the write-file-webpack-plugin.
Note
You can get the original source filename from Asset Objects.
patterns
options
The plugin's signature:
webpack.config.js
Type:
Default: undefined
Glob or path from where we copy files.
Globs accept fast-glob pattern-syntax.
Glob can only be a string.
Warning
Don't use directly \\ in from option if it is a glob (i.e path\to\file.ext) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.
On Windows, the forward slash and the backward slash are both separators.
Instead please use /.
webpack.config.js
If you define from as absolute file path or absolute folder path on Windows, you can use windows path segment (\\)
But you should always use forward-slashes in glob expressions
See fast-glob manual.
The context behaves differently depending on what the from is (glob, file or dir).
More examples
Type:
Default: compiler.options.output
Output path.
Warning
Don't use directly \\ in to (i.e path\to\dest) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.
On Windows, the forward slash and the backward slash are both separators.
Instead please use / or path methods.
webpack.config.js
Allows to modify the writing path.
Warning
Don't return directly \\ in to (i.e path\to\newFile) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.
On Windows, the forward slash and the backward slash are both separators.
Instead please use / or path methods.
webpack.config.js
webpack.config.js
Type:
Default: options.context|compiler.options.context
A path that determines how to interpret the from path.
Warning
Don't use directly \\ in context (i.e path\to\context) option because on UNIX the backslash is a valid character inside a path component, i.e., it's not a separator.
On Windows, the forward slash and the backward slash are both separators.
Instead please use / or path methods.
webpack.config.js
The context option can be an absolute or relative path. If context is a relative, then it is converted to absolute based to compiler.options.context
To determine the structure from which the found resources will be copied to the destination folder, the context option is used.
If from is a file, then context is equal to the directory in which this file is located. Accordingly, the result will be only the file name.
If from is a directory, then context is the same as from and is equal to the directory itself. In this case, the result will be a hierarchical structure of the found folders and files relative to the specified directory.
If from is a glob, then regardless of the context option, the result will be the structure specified in the from option
More examples
Type:
Default: undefined
Allows to configure the glob pattern matching library used by the plugin. See the list of supported options
To exclude files from the selection, you should use globOptions.ignore option
webpack.config.js
Type:
Default: undefined
Note
To ignore files by path please use the globOptions.ignore option.
webpack.config.js
Type:
Default: undefined
Determinate what is to option - directory, file or template.
Sometimes it is hard to say what is to, example path/to/dir-with.ext.
If you want to copy files in directory you need use dir option.
We try to automatically determine the type so you most likely do not need this option.
webpack.config.js
webpack.config.js
webpack.config.js
Type:
Default: false
Overwrites files already in compilation.assets (usually added by other plugins/loaders).
webpack.config.js
Type:
Default: 0
Allows to specify the priority of copying files with the same destination name.
Files for patterns with higher priority will be copied later.
To overwrite files, the force option must be enabled.
webpack.config.js
Type:
Default: undefined
Allows to modify the file contents.
webpack.config.js
Type:
Default: undefined
webpack.config.js
webpack.config.js
Type:
Default: false
webpack.config.js
Enable/disable and configure caching.
Default path to cache directory: node_modules/.cache/copy-webpack-plugin.
Enables/Disable transform caching.
webpack.config.js
Enables transform caching and setup cache directory and invalidation keys.
webpack.config.js
You can setup invalidation keys using a function.
Simple function:
webpack.config.js
Async function:
webpack.config.js
Type:
Default: undefined
Allows you to modify the contents of multiple files and save the result to one file.
Note
The to option must be specified and point to a file. It is allowed to use only [contenthash] and [fullhash] template strings.
webpack.config.js
Type:
Default: false
Doesn't generate an error on missing file(s).
Type:
Default: undefined
Allows to add assets info.
webpack.config.js
webpack.config.js
type:
default: 100
limits the number of simultaneous requests to fs
webpack.config.js
Take for example the following file structure:
Everything that you specify in from will be included in the result:
webpack.config.js
Result:
If you want only content src/directory-nested/, you should only indicate glob in from. The path to the folder in which the search should take place, should be moved to context.
webpack.config.js
Result:
webpack.config.js
Result:
Technically, this is **/* with a predefined context equal to the specified directory.
webpack.config.js
Result:
Result:
Technically, this is a filename with a predefined context equal to path.dirname(pathToFile).
webpack.config.js
Result:
webpack.config.js
Removes all directory references and only copies file names.
Warning
If files have the same name, the result is non-deterministic.
webpack.config.js
Result:
webpack.config.js
Result:
Useful if you need to simply copy *.js files to destination ""as is"" without evaluating and minimizing them using Terser.
webpack.config.js
When using yarn workspaces ormonorepos, relative copy paths from node_modules can be broken due to the way packages are hoisting.
To avoid this, should explicitly specify where to copy the files from using require.resolve.
webpack.config.js
Please take a moment to read our contributing guidelines if you haven't yet done so."
2976,"jsx-eslint,eslint-plugin-react","React-specific linting rules for ESLint. ===================




React specific linting rules for eslint
It is also possible to install ESLint globally rather than locally (using npm install -g eslint). However, this is not recommended, and any plugins or shareable configs that you use must be installed locally in either case.
Use our preset to get reasonable defaults:
If you are using the new JSX transform from React 17, extend react/jsx-runtime in your eslint config (add ""plugin:react/jsx-runtime"" to ""extends"") to disable the relevant rules.
You should also specify settings that will be shared across all the plugin rules. (More about eslint shared settings)
If you do not use a preset you will need to specify individual rules and add extra configuration.
Add ""react"" to the plugins section.
Enable JSX support.
With eslint 2+
Enable the rules that you would like to use.
This plugin exports a recommended configuration that enforces React good practices.
To enable this configuration use the extends property in your .eslintrc config file:
See eslint documentation for more information about extending configuration files.
This plugin also exports an all configuration that includes every available rule.
This pairs well with the eslint:all rule.
Note: These configurations will import eslint-plugin-react and enable JSX in parser options.
From v8.21.0, eslint announced a new config system.
In the new system, .eslintrc* is no longer used. eslint.config.js would be the default config file name.
In eslint v8, the legacy system (.eslintrc*) would still be supported, while in eslint v9, only the new system would be supported.
And from v8.23.0, eslint CLI starts to look up eslint.config.js.
So, if your eslint is &gt;=8.23.0, you're 100% ready to use the new config system.
You might want to check out the official blog posts,
https://eslint.org/blog/2022/08/new-config-system-part-1/
https://eslint.org/blog/2022/08/new-config-system-part-2/
https://eslint.org/blog/2022/08/new-config-system-part-3/
and the official docs.
The default export of eslint-plugin-react is a plugin object.
Refer to the official docs.
The schema of the settings.react object would be identical to that of what's already described above in the legacy config section.
<!-- markdownlint-disable-next-line no-duplicate-heading -->

There're also 3 shareable configs.
eslint-plugin-react/configs/all
eslint-plugin-react/configs/recommended
eslint-plugin-react/configs/jsx-runtime
If your eslint.config.js is ESM, include the .js extension (e.g. eslint-plugin-react/recommended.js). Note that the next semver-major will require omitting the extension for these imports.
Note: These configurations will import eslint-plugin-react and enable JSX in languageOptions.parserOptions.
In the new config system, plugin: protocol(e.g. plugin:react/recommended) is no longer valid.
As eslint does not automatically import the preset config (shareable config), you explicitly do it by yourself.
You can of course add/override some properties.
Note: Our shareable configs does not preconfigure files or languageOptions.globals.
For most of the cases, you probably want to configure some properties by yourself.
The above example is same as the example below, as the new config system is based on chaining.
<!-- begin auto-generated rules list -->

üíº Configurations enabled in.\
üö´ Configurations disabled in.\
üèÉ Set in the jsx-runtime configuration.\
‚òëÔ∏è Set in the recommended configuration.\
üîß Automatically fixable by the --fix CLI option.\
üí° Manually fixable by editor suggestions.\
‚ùå Deprecated.
<!-- end auto-generated rules list -->

Rules of Hooks: eslint-plugin-react-hooks
JSX accessibility: eslint-plugin-jsx-a11y
React Native: eslint-plugin-react-native
eslint-plugin-react is licensed under the MIT License."
2977,"import-js,eslint-plugin-import","ESLint plugin with rules that help validate proper imports.. This plugin intends to support linting of ES2015+ (ES6+) import/export syntax, and prevent issues with misspelling of file paths and import names. All the goodness that the ES2015+ static module syntax intends to provide, marked up in your editor.
IF YOU ARE USING THIS WITH SUBLIME: see the bottom section for important info.
<!-- begin auto-generated rules list -->

üíº Configurations enabled in.\
‚ö†Ô∏è Configurations set to warn in.\
üö´ Configurations disabled in.\
‚ùó Set in the errors configuration.\
‚òëÔ∏è Set in the recommended configuration.\
‚å®Ô∏è Set in the typescript configuration.\
üö∏ Set in the warnings configuration.\
üîß Automatically fixable by the --fix CLI option.\
üí° Manually fixable by editor suggestions.\
‚ùå Deprecated.
<!-- end auto-generated rules list -->

Available as part of the Tidelift Subscription.
The maintainers of eslint-plugin-import and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.
All rules are off by default. However, you may configure them manually
in your .eslintrc.(yml|json|js), or extend one of the canned configs:
You may use the following snippet or assemble your own config using the granular settings described below it.
Make sure you have installed [@typescript-eslint/parser] and [eslint-import-resolver-typescript] which are used in the following configuration.
With the advent of module bundlers and the current state of modules and module
syntax specs, it's not always obvious where import x from 'module' should look
to find the file behind module.
Up through v0.10ish, this plugin has directly used substack's [resolve] plugin,
which implements Node's import behavior. This works pretty well in most cases.
However, webpack allows a number of things in import module source strings that
Node does not, such as loaders (import 'file!./whatever') and a number of
aliasing schemes, such as [externals]: mapping a module id to a global name at
runtime (allowing some modules to be included more traditionally via script tags).
In the interest of supporting both of these, v0.11 introduces resolvers.
Currently Node and webpack resolution have been implemented, but the
resolvers are just npm packages, so third party packages are supported (and encouraged!).
You can reference resolvers in several ways (in order of precedence):
as a conventional eslint-import-resolver name, like eslint-import-resolver-foo:
with a full npm module name, like my-awesome-npm-module:
with a filesystem path to resolver, defined in this example as a computed property name:
Relative paths will be resolved relative to the source's nearest package.json or
the process's current working directory if no package.json is found.
If you are interesting in writing a resolver, see the spec for more details.
You may set the following settings in your .eslintrc:
A list of file extensions that will be parsed as modules and inspected for
exports.
This defaults to ['.js'], unless you are using the react shared config,
in which case it is specified as ['.js', '.jsx']. Despite the default,
if you are using TypeScript (without the plugin:import/typescript config
described above) you must specify the new extensions (.ts, and also .tsx
if using React).
If you require more granular extension definitions, you can use:
Note that this is different from (and likely a subset of) any import/resolver
extensions settings, which may include .json, .coffee, etc. which will still
factor into the no-unresolved rule.
Also, the following import/ignore patterns will overrule this list.
A list of regex strings that, if matched by a path, will
not report the matching module if no exports are found.
In practice, this means rules other than no-unresolved will not report on any
imports with (absolute filesystem) paths matching this pattern.
no-unresolved has its own ignore setting.
An array of additional modules to consider as ""core"" modules--modules that should
be considered resolved but have no path on the filesystem. Your resolver may
already define some of these (for example, the Node resolver knows about fs and
path), so you need not redefine those.
For example, Electron exposes an electron module:
that would otherwise be unresolved. To avoid this, you may provide electron as a
core module:
In Electron's specific case, there is a shared config named electron
that specifies this for you.
Contribution of more such shared configs for other platforms are welcome!
An array of folders. Resolved modules only from those folders will be considered as ""external"". By default - [""node_modules""]. Makes sense if you have configured your path or webpack to handle your internal paths differently and want to consider modules from some folders, for example bower_components or jspm_modules, as ""external"".
This option is also useful in a monorepo setup: list here all directories that contain monorepo's packages and they will be treated as external ones no matter which resolver is used.
If you are using yarn PnP as your package manager, add the .yarn folder and all your installed dependencies will be considered as external, instead of internal.
Each item in this array is either a folder's name, its subpath, or its absolute prefix path:
jspm_modules will match any file or folder named jspm_modules or which has a direct or non-direct parent named jspm_modules, e.g. /home/me/project/jspm_modules or /home/me/project/jspm_modules/some-pkg/index.js.
packages/core will match any path that contains these two segments, for example /home/me/project/packages/core/src/utils.js.
/home/me/project/packages will only match files and directories inside this directory, and the directory itself.
Please note that incomplete names are not allowed here so components won't match bower_components and packages/ui won't match packages/ui-utils (but will match packages/ui/utils).
A map from parsers to file extension arrays. If a file extension is matched, the
dependency parser will require and use the map key as the parser instead of the
configured ESLint parser. This is useful if you're inter-op-ing with TypeScript
directly using webpack, for example:
In this case, @typescript-eslint/parser
must be installed and require-able from the running eslint module's location
(i.e., install it as a peer of ESLint).
This is currently only tested with @typescript-eslint/parser (and its predecessor,
typescript-eslint-parser) but should theoretically work with any moderately
ESTree-compliant parser.
It's difficult to say how well various plugin features will be supported, too,
depending on how far down the rabbit hole goes. Submit an issue if you find strange
behavior beyond here, but steel your heart against the likely outcome of closing
with wontfix.
See resolvers.
Settings for cache behavior. Memoization is used at various levels to avoid the copious amount of fs.statSync/module parse calls required to correctly report errors.
For normal eslint console runs, the cache lifetime is irrelevant, as we can strongly assume that files should not be changing during the lifetime of the linter process (and thus, the cache in memory)
For long-lasting processes, like [eslint_d] or [eslint-loader], however, it's important that there be some notion of staleness.
If you never use [eslint_d] or [eslint-loader], you may set the cache lifetime to Infinity and everything should be fine:
Otherwise, set some integer, and cache entries will be evicted after that many seconds have elapsed:
A regex for packages should be treated as internal. Useful when you are utilizing a monorepo setup or developing a set of packages that depend on each other.
By default, any package referenced from import/external-module-folders will be considered as ""external"", including packages in a monorepo like yarn workspace or lerna environment. If you want to mark these packages as ""internal"" this will be useful.
For example, if your packages in a monorepo are all in @scope, you can configure import/internal-regex like this
SublimeLinter-eslint introduced a change to support .eslintignore files
which altered the way file paths are passed to ESLint when linting during editing.
This change sends a relative path instead of the absolute path to the file (as ESLint
normally provides), which can make it impossible for this plugin to resolve dependencies
on the filesystem.
This workaround should no longer be necessary with the release of ESLint 2.0, when
.eslintignore will be updated to work more like a .gitignore, which should
support proper ignoring of absolute paths via --stdin-filename.
In the meantime, see roadhump/SublimeLinter-eslint#58
for more details and discussion, but essentially, you may find you need to add the following
SublimeLinter config to your Sublime project file:
Note that ${project}/code matches the code provided at folders[0].path.
The purpose of the chdir setting, in this case, is to set the working directory
from which ESLint is executed to be the same as the directory on which SublimeLinter-eslint
bases the relative path it provides.
See the SublimeLinter docs on chdir
for more information, in case this does not work with your project.
If you are not using .eslintignore, or don't have a Sublime project file, you can also
do the following via a .sublimelinterrc file in some ancestor directory of your
code:
I also found that I needed to set rc_search_limit to null, which removes the file
hierarchy search limit when looking up the directory tree for .sublimelinterrc:
In Package Settings / SublimeLinter / User Settings:
I believe this defaults to 3, so you may not need to alter it depending on your
project folder max depth."
2978,"emacs-lsp,lsp-mode","Emacs client/library for the Language Server Protocol. 

<hr>

  <strong>homepage</strong> ‚Ä¢
  <strong>installation</strong> ‚Ä¢
  <strong>languages</strong> ‚Ä¢
  <strong>settings</strong> ‚Ä¢
  <strong>tutorials</strong> ‚Ä¢
  <strong>troubleshooting</strong> ‚Ä¢
  <strong>screenshots</strong> ‚Ä¢
  <strong>FAQ</strong>

<hr>

:heart: Community Driven
:gem: Fully featured - supports all features in Language Server Protocol v3.14.
:rocket: Fast - see performance section.
:star2: Flexible - choose between full-blown IDE with flashy UI or minimal distraction free.
:gear: Easy to configure - works out of the box and automatically upgrades if additional packages are present.
Client for Language Server
Protocol
(v3.14). lsp-mode aims to
provide IDE-like experience by providing optional integration with the
most popular Emacs packages like company, flycheck and projectile.
Non-blocking asynchronous calls
Real-time Diagnostics/linting via
flycheck (recommended) or
flymake when Emacs > 26 (requires flymake>=1.0.5)
Code completion - company-capf / completion-at-point (note that
company-lsp is no
longer supported).
Hovers - using lsp-ui
Code actions - via lsp-execute-code-action, modeline (recommended) or lsp-ui sideline.
Code outline - using builtin
imenu
or helm-imenu
Code navigation - using builtin
xref,
lsp-treemacs tree views
or lsp-ui peek functions.
Code lens
Symbol highlights
Formatting
Project errors on modeline
Debugger - dap-mode
Helm integration -
helm-lsp
Ivy integration - lsp-ivy
Consult integration - consult-lsp
Treemacs integration -
lsp-treemacs
Semantic tokens as defined by LSP 3.16 (compatible language servers include recent development builds of clangd and rust-analyzer)
which-key integration
for better discovery
System Crafters channel
Emacs IDE Videos
skybert's emacsconf
presentation (Java)
thatwist's ScalaUA Conference
presentation
(Scala)
lsp-docker - provide
docker image with preconfigured language servers with corresponding
emacs configuration.
company-box -
company frontend with icons.
dap-mode - Debugger
integration for lsp-mode.
eglot - An alternative
minimal LSP implementation.
which-key - Emacs
package that displays available keybindings in popup
projectile - Project
Interaction Library for Emacs
emacs-tree-sitter - Faster, fine-grained code highlighting via tree-sitter.
gccemacs - modified Emacs capable of compiling and running Emacs Lisp as native code.
Contributions are very much welcome!
NOTE
Documentation for clients is generated from doc comments in the clients
themselves (see
lsp-doc.el)
and some metadata (see
lsp-clients.json)
so please submit corrections accordingly.
The emacs-lsp organization has more than 20,000 lines of code, to keep all of this working,
we need to implement new features and help the community on a lot of issues.
You can help us keep going and improving it by supporting the project

Here it is a list of the current lsp-mode members and what they are
primary working on/responsible for.
<table id=""emacs-lsp-members"">
  <tr>
    <td align=""center"">
      
        
          
          
          <sub><b>totbwf</b></sub>
        
        
        F#
      
    </td>
    <td align=""center"">
      
        
          
          
          <sub><b>brotzeit</b></sub>
        
        
        Rust
      
    </td>
    <td align=""center"">
      
        
          
          
          <sub><b>dsyzling</b></sub>
        
        
        Scala
      
    </td>
    <td align=""center"">
      
        
          
          
          <sub><b>kurnevsky</b></sub>
        
        
        Scala | Rust
      
    </td>
    <td align=""center"">
      
        
          
          
          <sub><b>seagle0128</b></sub>
        
        
        Go | Python MS
      
    </td>
  </tr>
  <tr>
    <td align=""center"">
      
        
          
          
          <sub><b>sebastiansturm</b></sub>
        
        
        lsp-mode core | C++
      
    </td>
    <td align=""center"">
      
        
          
          
          <sub><b>vibhavp</b></sub>
        
        
        lsp-mode core
      
    </td>
    <td align=""center"">
      
        
          
          
          <sub><b>yyoncho</b></sub>
        
        
        lsp-mode core | Java
        
    </td>
    <td align=""center"">
      
        
          
          
          <sub><b>ericdallo</b></sub>
        
        
        Dart/Flutter | Clojure
      
    </td>
    <td align=""center"">
      
        
          
          
          <sub><b>danielmartin</b></sub>
        
        
        C++ | Swift
      
    </td>
  </tr>
  <tr>
    <td align=""center"">
      
        
          
          
          <sub><b>kiennq</b></sub>
        
        
        completions | pwsh
      
    </td>
    <td align=""center"">
      
        
          
          
          <sub><b>nbfalcon</b></sub>
        
        
        lsp-mode core | iedit
      
    </td>
    <td align=""center"">
      
        
          
          
          <sub><b>psibi</b></sub>
        
        
        Terraform | Nix
      
    </td>
    <td align=""center"">
      
        
          
          
          <sub><b>razzmatazz</b></sub>
        
        
        C# | F#
      
    </td>
  </tr>
</table>"
2979,"ixartz,Next-js-Boilerplate","üöÄüéâüìö Boilerplate and Starter for Next.js 13+, Tailwind CSS 3.2 and TypeScript ‚ö°Ô∏è Made with developer experience first: Next.js + TypeScript + ESLint + Prettier + Husky + Lint-Staged + Jest + Testing Library + Cypress + Commitlint + VSCode + Netlify + PostCSS + Tailwind CSS. 
  


üöÄ Boilerplate and Starter for Next.js, Tailwind CSS and TypeScript ‚ö°Ô∏è Made with developer experience first: Next.js, TypeScript, ESLint, Prettier, Husky, Lint-Staged, Jest, Testing Library, Commitlint, VSCode, Netlify, PostCSS, Tailwind CSS.
Clone this project and use it to create your own Next.js project. You can check a Next js templates demo.
Developer experience first:
‚ö° Next.js for Static Site Generator
üî• Type checking TypeScript
üíé Integrate with Tailwind CSS
‚úÖ Strict Mode for TypeScript and React 18
üìè Linter with ESLint (default NextJS, NextJS Core Web Vitals, Tailwind CSS and Airbnb configuration)
üíñ Code Formatter with Prettier
ü¶ä Husky for Git Hooks
üö´ Lint-staged for running linters on Git staged files
üöì Lint git commit with Commitlint
üìì Write standard compliant commit messages with Commitizen
ü¶∫ Unit Testing with Jest and React Testing Library
üß™ E2E Testing with Cypress
üë∑ Run tests on pull request with GitHub Actions
üéÅ Automatic changelog generation with Semantic Release
üîç Visual testing with Percy (Optional)
üí° Absolute Imports using @ prefix
üóÇ VSCode configuration: Debug, Settings, Tasks and extension for PostCSS, ESLint, Prettier, TypeScript, Jest
ü§ñ SEO metadata, JSON-LD and Open Graph tags with Next SEO
üó∫Ô∏è Sitemap.xml and robots.txt with next-sitemap
‚öôÔ∏è Bundler Analyzer
üñ±Ô∏è One click deployment with Vercel or Netlify (or manual deployment to any hosting services)
üåà Include a FREE minimalist theme
üíØ Maximize lighthouse score
Built-in feature from Next.js:
‚òï Minify HTML & CSS
üí® Live reload
‚úÖ Cache busting
All the Next.js pages are statically generated by default. You can easily switch to SSR adding getServerSideProps to your page.
Nothing is hidden from you, so you have the freedom to make the necessary adjustments to fit your needs and preferences.
Minimal code
SEO-friendly
üöÄ Production-ready
Build your SaaS product faster with React SaaS Boilerplate.

Find more Nextjs Themes.
Node.js 14+ and npm
Run the following command on your local environment:
Then, you can run locally in development mode with live reload:
Open http://localhost:3000 with your favorite browser to see your project.
You can easily configure Next js Boilerplate by making a search in the whole project with FIXME: for making quick customization. Here is some of the most important files to customize:
public/apple-touch-icon.png, public/favicon.ico, public/favicon-16x16.png and public/favicon-32x32.png: your website favicon, you can generate from https://favicon.io/favicon-converter/
src/styles/global.css: your CSS file using Tailwind CSS
src/utils/AppConfig.ts: configuration file
src/templates/Main.tsx: default theme
next-sitemap.config.js: sitemap configuration
You have access to the whole code source if you need further customization. The provided code is only example for you to start your project. The sky is the limit üöÄ.
The project enforces Conventional Commits specification. This means that all your commit messages must be formatted according to the specification. To help you write commit messages, the project uses Commitizen, an interactive CLI that guides you through the commit process. To use it, run the following command:
One of the benefits of using Conventional Commits is that it allows us to automatically generate a CHANGELOG file. It also allows us to automatically determine the next version number based on the types of commits that are included in a release.
You can see the results locally in production mode with:
The generated HTML and CSS files are minified (built-in feature from Next js). It will also remove unused CSS from Tailwind CSS.
You can create an optimized production build with:
Now, your blog is ready to be deployed. All generated files are located at out folder, which you can deploy with any hosting service.
All tests are colocated with the source code inside the same directory. So, it makes it easier to find them. Unfortunately, it is not possible with the pages folder which is used by Next.js for routing. So, what is why we have a pages.test folder to write tests from files located in pages folder.
Clone this repository on own GitHub account and deploy to Netlify:

Deploy this Next JS Boilerplate on Vercel in one click:

If you are VSCode users, you can have a better integration with VSCode by installing the suggested extension in .vscode/extension.json. The starter code comes up with Settings for a seamless integration with VSCode. The Debug configuration is also provided for frontend and backend debugging experience.
With the plugins installed on your VSCode, ESLint and Prettier can automatically fix the code and show you the errors. Same goes for testing, you can install VSCode Jest extension to automatically run your tests and it also show the code coverage in context.
Pro tips: if you need a project wide type checking with TypeScript, you can run a build with <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd> on Mac.
Everyone is welcome to contribute to this project. Feel free to open an issue if you have question or found a bug. Totally open to any suggestions and improvements.
Licensed under the MIT License, Copyright ¬© 2022
See LICENSE for more information.
Made with ‚ô• by CreativeDesignsGuru"
2980,"jsx-eslint,eslint-plugin-jsx-a11y","Static AST checker for a11y rules on JSX elements.. 
  
    
  
  
    
  
  
    
  
  
    
  
  
    
  


Get professional support for eslint-plugin-jsx-a11y on Tidelift
Static AST checker for accessibility rules on JSX elements.
This plugin does a¬†static evaluation of the JSX to spot accessibility issues in React apps. Because it only catches errors in static code, use it in combination with @axe-core/react to test the accessibility of the rendered DOM. Consider these¬†tools¬†just as one step of a larger a11y testing process and¬†always test your apps with assistive technology.
If you are installing this plugin via eslint-config-airbnb, please follow these instructions.
You'll first need to install ESLint:
Next, install eslint-plugin-jsx-a11y:
Note: If you installed ESLint globally (using the -g flag in npm, or the global prefix in yarn) then you must also install eslint-plugin-jsx-a11y globally.
Add jsx-a11y to the plugins section of your .eslintrc configuration file. You can omit the eslint-plugin- prefix:
Then configure the rules you want to use under the rules section.
You can also enable all the recommended or strict rules at once.
Add plugin:jsx-a11y/recommended or plugin:jsx-a11y/strict in extends:
As you are extending our configuration, you can omit ""plugins"": [""jsx-a11y""] from your .eslintrc configuration file.
To enable your custom components to be checked as DOM elements, you can set global settings in your
configuration file by mapping each custom component name to a DOM element type.
<!-- begin auto-generated rules list -->

üíº Configurations enabled in.\
üö´ Configurations disabled in.\
‚òëÔ∏è Set in the recommended configuration.\
üîí Set in the strict configuration.\
‚ùå Deprecated.
<!-- end auto-generated rules list -->

The following rules have extra options when in recommended mode:
If you are developing new rules for this project, you can use the create-rule
script to scaffold the new files.
An operating system will provide an accessibility API that maps application state and content onto input/output controllers such as a screen reader, braille device, keyboard, etc.
These APIs were developed as computer interfaces shifted from buffers (which are text-based and inherently quite accessible) to graphical user interfaces (GUIs). The first attempts to make GUIs accessible involved raster image parsing to recognize characters, words, etc. This information was stored in a parallel buffer and made accessible to assistive technology (AT) devices.
As GUIs became more complex, the raster parsing approach became untenable. Accessibility APIs were developed to replace them. Check out NSAccessibility (AXAPI) for an example. See Core Accessibility API Mappings 1.1 for more details.
Browsers support an Accessibility API on a per operating system basis. For instance, Firefox implements the MSAA accessibility API on Windows, but does not implement the AXAPI on OSX.
From the W3 Core Accessibility API Mappings 1.1
The accessibility tree and the DOM tree are parallel structures. Roughly speaking the accessibility tree is a subset of the DOM tree. It includes the user interface objects of the user agent and the objects of the document. Accessible objects are created in the accessibility tree for every DOM element that should be exposed to assistive technology, either because it may fire an accessibility event or because it has a property, relationship or feature which needs to be exposed. Generally, if something can be trimmed out it will be, for reasons of performance and simplicity. For example, a &lt;span&gt; with just a style change and no semantics may not get its own accessible object, but the style change will be exposed by other means.
Browser vendors are beginning to expose the AX Tree through inspection tools. Chrome has an experiment available to enable their inspection tool.
You can also see a text-based version of the AX Tree in Chrome in the stable release version.
Navigate to chrome://accessibility/ in Chrome.
Toggle the accessibility off link for any tab that you want to inspect.
A link labeled show accessibility tree will appear; click this link.
Balk at the wall of text that gets displayed, but then regain your conviction.
Use the browser's find command to locate strings and values in the wall of text.
A browser constructs an AX Tree as a subset of the DOM. ARIA heavily informs the properties of this AX Tree. This AX Tree is exposed to the system level Accessibility API which mediates assistive technology agents.
We model ARIA in the aria-query project. We model AXObjects (that comprise the AX Tree) in the axobject-query project. The goal of the WAI-ARIA specification is to be a complete declarative interface to the AXObject model. The in-draft 1.2 version is moving towards this goal. But until then, we must consider the semantics constructs afforded by ARIA as well as those afforded by the AXObject model (AXAPI) in order to determine how HTML can be used to express user interface affordances to assistive technology users.
eslint-plugin-jsx-a11y is licensed under the MIT License."
2981,"steven-tey,precedent","An opinionated collection of components, hooks, and utilities for your Next.js project.. 
  

Precedent


  Building blocks for your Next project



  
    
  
  
    
  



  <strong>Introduction</strong> ¬∑
  <strong>One-click Deploy</strong> ¬∑
  <strong>Tech Stack + Features</strong> ¬∑
  <strong>Author</strong>


Precedent is an opinionated collection of components, hooks, and utilities for your Next.js project.
You can deploy this template to Vercel with the button below:

You can also clone & create this repo locally with the following command:
https://user-images.githubusercontent.com/28986134/212368288-12f41e37-aa8c-4e0a-a542-cf6d23410a65.mp4
Next.js ‚Äì React framework for building performant apps with the best developer experience
Auth.js ‚Äì¬†Handle user authentication with ease with providers like Google, Twitter, GitHub, etc.
Prisma ‚Äì¬†Typescript-first ORM for Node.js
Vercel ‚Äì¬†Easily preview & deploy changes with git
Railway ‚Äì¬†Easily provision a PostgreSQL database (no login required)
Tailwind CSS ‚Äì¬†Utility-first CSS framework for rapid UI development
Radix ‚Äì¬†Primitives like modal, popover, etc. to build a stellar user experience
Framer Motion ‚Äì¬†Motion library for React to animate components with ease
Lucide ‚Äì¬†Beautifully simple, pixel-perfect icons
@next/font ‚Äì¬†Optimize custom fonts and remove external network requests for improved performance
@vercel/og ‚Äì Generate dynamic Open Graph images on the edge
react-wrap-balancer ‚Äì¬†Simple React component that makes titles more readable
useIntersectionObserver ‚Äì¬† React hook to observe when an element enters or leaves the viewport
useLocalStorage ‚Äì¬†Persist data in the browser's local storage
useScroll ‚Äì React hook to observe scroll position (example)
nFormatter ‚Äì¬†Format numbers with suffixes like 1.2k or 1.2M
capitalize ‚Äì Capitalize the first letter of a string
truncate ‚Äì Truncate a string to a specified length
use-debounce ‚Äì¬†Debounce a function call / state update
TypeScript ‚Äì¬†Static type checker for end-to-end typesafety
Prettier ‚Äì¬†Opinionated code formatter for consistent code style
ESLint ‚Äì¬†Pluggable linter for Next.js and TypeScript
Vercel Analytics ‚Äì¬†Track unique visitors, pageviews, and more in a privacy-friendly way
Steven Tey (@steventey)"
3041,"Lissy93,dashy","üöÄ A self-hostable personal dashboard built for you. Includes status-checking, widgets, themes, icon packs, a UI editor and tons more!. Dashy

  <i>Dashy helps you organize your self-hosted services by making them accessible from a single place</i>
   
  
  
  <b>User Showcase</b> | <b>Live Demo</b> | <b>Getting Started</b> | <b>Documentation</b> | <b>GitHub</b>
  
  
    
  
  
    
  
  
    
  
  
    
  
  
   
  
  
    
  


<details>
  <summary><b>Table of Contents</b></summary>
  

**Getting Started**

**Feature Overview**

**Community**


</details>

üìÉ Support for multiple pages
üö¶ Real-time status monitoring for each of your apps/links
üìä Use widgets to display info and dynamic content from self-hosted services
üîé Instant search by name, domain, or tags + customizable hotkeys & keyboard shortcuts
üé® Many built-in color themes, with UI color editor and support for custom CSS
üß∏ Many icon options - Font-Awesome, homelab icons, auto-fetching Favicon, images, emojis, etc.
üíÇ Optional authentication with multi-user access, configurable privileges, and SSO support
üåé Multi-language support, with 10+ human-translated languages, and more on the way
‚òÅ Optional, encrypted, free off-site cloud backup and restore feature available
üíº A workspace view, for easily switching between multiple apps simultaneously
üõ©Ô∏è A minimal view, for use as a fast-loading browser Startpage
üñ±Ô∏è Choose app launch methods: new tab, same tab, clipboard, pop-up modal, or open in workspace view
üìè Customizable layout, sizes, text, component visibility, sort order, behavior, etc.
üñºÔ∏è Options for a full-screen background image, custom nav-bar links, HTML footer, title, etc.
üöÄ Easy to setup with Docker, or on bare metal, or with 1-Click cloud deployment
‚öôÔ∏è Easy single-file YAML-based configuration, and option to configure app through the UI
‚ú® Under active development with improvements and new features added regularly 
ü§è Small bundle size, fully responsive UI, and PWA for basic offline access
üÜì 100% free and open-source
üîê Strong focus on privacy
üåà And loads more...
‚¨ÜÔ∏è Back to Top
Live Instances: Demo 1 (Live Demo) ‚îÜ Demo 2 (Dashy Links) ‚îÜ Demo 3 (Dev Preview)
Screenshots: Checkout the Showcase, to see example dashboards from the community
Spin up your own demo:  or docker run -p 8080:80 lissy93/dashy

  


‚¨ÜÔ∏è Back to Top
For full setup instructions, see: Deployment
You will need Docker installed on your system
Or

See also: examples with Docker Compose. Dashy is also available via GHCR, and tags for other architectures (arm32v7, arm64v8, etc.) and set versions are supported
Once you've got Dashy running, see App Management Docs for info on using health checks, updating, backups, web-server configs, logs, performance, security, and more.
You will need git, the latest or LTS version of Node.js and (optionally) Yarn installed on your system.
Clone the Repo: git clone https://github.com/Lissy93/dashy.git and cd dashy
Configuration: Fill in your settings in ./public/conf.yml
Install dependencies: yarn
Build: yarn build
Run: yarn start
See docs: Full list of Dashy's commands
Dashy supports 1-Click deployments on several popular cloud platforms. To spin up a new instance, just click a link below:
For more 1-click cloud deployments, see Cloud Deployment
‚¨ÜÔ∏è Back to Top
For full configuration documentation, see: Configuring
Dashy is configured through a YAML file, located at ./public/conf.yml. In addition, you can find a complete list of available options in the Configuring Docs. The config can also be edited and saved directly through the UI.
‚¨ÜÔ∏è Back to Top
For full theming documentation, see: Theming
Dashy comes pre-bundled with several built-in themes, which you can preview, apply and edit through the UI. With the theme configurator and support for custom CSS, everything is in place to quickly develop your own unique-looking dashboard.

  
    
  



  
    
  


‚¨ÜÔ∏è Back to Top
For full iconography documentation, see: Icons
Both sections and items can have an icon associated with them, defined under the icon attribute. With several different icon packs supported, you'll be able to find the perfect thumbnail for any app or service.
The following icon types are supported:
Favicon - Automatically fetch an apps icon from its Favicon or logo image
Icon Packs - Use any icon from font-awesome, simple-icons or material icons
Emoji - Any valid emoji can be used as an icon
Generative - Unique, auto-generated images for easily identifying services
URL - Pass the URL of any valid image in to have it fetched and rendered
Local - Store custom images locally and reference by filename
Homelab Icons - Using dashboard-icons for logos of commonly self-hosted services

  


‚¨ÜÔ∏è Back to Top
For full monitoring documentation, see: Status Indicators
Dashy has an optional feature to check if each app/ service is up and responding, then display a small status indicator icon. Hovering over it will show additional stats like response time and status code.
Status indicators can be globally enabled by setting appConfig.statusCheck: true or enabled/ disabled on a per-item basis. Status is checked on page load, but you can allow continuous polling by specifying a time interval between checks, in seconds under appConfig.statusCheckInterval. You can also use a different endpoint for status checking, with statusCheckUrl, and if needed, pass in custom headers under statusCheckHeaders.

  


‚¨ÜÔ∏è Back to Top
For full widget documentation, see: Widgets
You can display dynamic content from services in the form of widgets. There are several pre-built widgets availible for showing useful info, and integrations with commonly self-hosted services, but you can also easily create your own for almost any app.

  


‚¨ÜÔ∏è Back to Top
For full authentication documentation, see: Authentication
Dashy has full support for secure single-sign-on using Keycloak for secure, easy authentication, see setup docs for a full usage guide.
There is also a basic auth feature, which doesn't require additional setup. To enable this, add an auth attribute under appConfig, containing an array of users, each with a username, SHA-256 hashed password and optional user type. Basic auth also supports several access control features, including read-only guest access and granular controls.
Other access control systems are also supported, see the Alternative Auth Methods docs.
‚¨ÜÔ∏è Back to Top
As well as the default homepage, there is also:
A minimal view, valid for use as a browser start page
A workspace view, useful for visiting many apps simultaneously
You can change the view from the UI, using the switch icon in the top-right corner, or select a default view in the config under appConfig.startingView attribute.

  <b>Example of Workspace View</b>
  



  <b>Example of Minimal View</b>
  


‚¨ÜÔ∏è Back to Top
For full documentation on views and opening methods, see: Alternate Views
There are several different ways you can launch apps. You can specify the default opening method for any given item under the target attribute or set a site-wide default under appConfig.defaultOpeningMethod. Right-click on an item to item for all options. The following options are supported:
sametab - The app will be launched in the current tab
newtab - The app will be launched in a new tab (or use Ctrl + Click)
modal - Launch app in a resizable/ movable popup modal on the current page (or use Alt + Click)
workspace - Changes to Workspace view and launches app
clipboard - Copy the app's URL to your system clipboard
top - Opens in the top-most browsing context, useful if you're accessing Dashy through an iframe
‚¨ÜÔ∏è Back to Top
For full documentation on searching, see: Searching & Shortcuts
Quickly finding and launching applications is the primary aim of Dashy. To that end, instant search and customizable keyboard shortcuts are built-in.
To start filtering, start typing‚Äîno need to select the search bar or use any special key. Then use either the tab key or arrow keys to select and move between results, and hit enter to launch the currently selected application.
For apps that you use regularly, you can set a custom keybinding. Use the hotkey parameter on a certain item to specify a numeric key between 0 - 9. You can then launch that app by just pressing that key.
You can also add custom tags to a given item to make finding them based on keywords easier. For example, in the following example, searching for 'Movies' will show 'Plex'
To search the web directly through Dashy, just press enter after typing your query. Options for web search are set under appConfig.webSearch. There is built-in support for 10+ search engines, or use your own custom provider or self-hosted instance. With the web search, you can also define your bangs to redirect results to any given app, website, or search engine, when the query is preceded with a certain character sequence (usually beginning in /, ! or :).
Hit Esc at any time to close any open apps, clear the search field, or hide any modals.
‚¨ÜÔ∏è Back to Top
For full config documentation, see: Configuring
As well as passing in a YAML config file, you can also configure the app directly through the UI and preview changes live.
To edit any section or item, right-click on it, and select ""Edit"", or enter the Edit Mode (using the Pen icon in the top-right), then click any part of the page to edit. Changes will be visible immediately but will not be saved until clicking ""Save to Disk"" or ""Save Locally"".
Under the config menu, you can export, view, backup, or reset app config and edit the raw config file in a text editor with built-in schema validation. It's recommended to keep a backup of your config.

  



  


‚¨ÜÔ∏è Back to Top
For full backup documentation, see: Cloud Backup & Sync
Dashy has an optional built-in feature for securely backing up your config to a hosted cloud service and then restoring it on another instance. This is useful not only for backing up your configuration off-site but also enables Dashy to be used without having to write a YAML config file.
All data is fully E2E encrypted before being sent to the backend (done in CloudBackup.js using crypto.js 's AES method). The data is then sent to a Cloudflare worker and stored in a KV data store.
‚¨ÜÔ∏è Back to Top
For full internationalization documentation, see: Multi-Language Support
Dashy supports multiple languages and locales. When available, your language should be automatically detected and applied on load. But you can also select a language through the UI (under config --> Switch Language) or set appConfig.language to your language (specified as a 2-digit ISO 639-1 code), as seen below, e.g. language: de.
üá¨üáß English: en - Default
üá¶üá™ Arabic: ar - Auto-generated
üáßüá© Bengali: bn - Contributed by @soaibsafi
üáßüá¨ Bulgarian: bg - Contributed by @asenov
üá®üá≥ Chinese: cn - Contributed by @FormatToday
üá®üáø Czech: cs - Contributed by @Tuzi555
üá©üá∞ Danish: da - Contributed by @lordpansar
üá≥üá± Dutch: nl - Contributed by @evroon
üá´üá∑ French: fr - Contributed by @EVOTk
üá©üá™ German: de - Contributed by @Niklashere
üáÆüá≥ Hindi: hi - Auto-generated
üáÆüáπ Italian: it - Contributed by @alexdelprete
üáØüáµ Japanese: ja - Auto-generated
üá∞üá∑ Korean: ko - Contributed by @boggy-cs
üá≥üá¥ Norwegian Bokm√•l: nb - Contributed by @rubjo
üáµüá± Polish: pl - Contributed by @skaarj1989
üáµüáπ Portuguese: pt - Contributed by @LeoColman
üá∑üá∫ Russian: ru - Auto-generated
üá∏üá∞ Slovak: sk - Contributed by @Smexhy
üá∏üáÆ Slovenian: sl - Contributed by @UrekD
üá™üá∏ Spanish: es - Contributed by @lu4t
üá∏üá™ Swedish: sv - Contributed by @BOZG
üáπüáº Traditional Chinese: zh-TW - Contributed by @stanly0726
üáπüá∑ Turkish: tr - Contributed by @imsakg
üè¥‚Äç‚ò†Ô∏è Pirate: pirate - Contributed by @Lissy93
I would love Dashy to be available to everyone without language being a barrier to entry. If you've got a few minutes to spare, consider adding translations for your language. It's a quick task, and all text is in a single JSON file. Since any missing text will fall back to English, you don't need to translate it all.
‚¨ÜÔ∏è Back to Top
For full multi-page documentation, see: Pages & Sections
Within your dashboard, you can have as many sub-pages as you require. To load additional pages, specify a name, and path to a config file under pages. The config file can be either local (stored in /public), or remote (located anywhere accessible).
Or
If running on bare metal, Dashy requires Node V 16.0.0 or later, LTS (16.13.2) is recommended.
If running in Docker container, the recommended base image is Alpine (3.15)
The hardware requirements vary depending on where and how you are running Dashy. Generally speaking, on a bare-metal system or Docker container, 1GB of memory should be more than enough, and depending on whether you are using your own assets, then 1GB of disk space should be sufficient. 
If you are using one of the 1-click cloud deployment methods, serving the app through a CDN or using a static hosting provider, then there are no specific requirements, as the built app is just a series of static JS files, and so is very light-weight.
Dashy also wells run on low-powered ARM-based single board computers, such as a Raspberry Pi (tested on Pi 3)
Browser Support
‚¨ÜÔ∏è Back to Top
If you're having trouble getting Dashy up and running, or have a question about usage or configuration, feel free to ask. The best place to do this is via the Discussions.
If you've found something which isn't working as it should, please raise a bug by opening a ticket.
It's best to check the docs, previous issues and troubleshooting guide first.
‚¨ÜÔ∏è Back to Top
For full details and other ways you can help out, see: Contributing
If you're using Dashy and would like to help support its development, then that would be awesome! Contributions of any type, any size, are always very much appreciated, and we will appropriately credit you for your effort.
Several areas that we need a bit of help with at the moment are:
Translating - Help make Dashy available to non-native English speakers by adding your language
Donate a small amount by Sponsoring @Lissy93 on GitHub and receive some extra perks!
Complete a short survey to have your say about future features
Share your dashboard in the Showcase, to inspire others
Spread the word by sharing Dashy or a screenshot of your dashboard to help new users discover it
Submit a PR to add a new feature, fix a bug, update the docs, add a theme, widget or something else
Star Dashy on GitHub/ DockerHub or leave an upvote / review on these platforms

‚¨ÜÔ∏è Back to Top
For a complete list of credits, and attributions to packages used within Dashy, see: Credits
Thank you so much to everyone who has helped with Dashy so far; every contribution is very much appreciated.
Huge thanks to the sponsors helping to support Dashy's development!
<!-- readme: sponsors -start -->
<table>
<tr>
    <td align=""center"">
        
            
            
            <sub><b>Peng1can</b></sub>
        
    </td>
    <td align=""center"">
        
            
            
            <sub><b>Eddy Lazzarin</b></sub>
        
    </td>
    <td align=""center"">
        
            
            
            <sub><b>Anand Chowdhary</b></sub>
        
    </td>
    <td align=""center"">
        
            
            
            <sub><b>David Young</b></sub>
        
    </td>
    <td align=""center"">
        
            
            
            <sub><b>Carol Ouellet</b></sub>
        
    </td>
    <td align=""center"">
        
            
            
            <sub><b>Zach Biles</b></sub>
        
    </td></tr>
<tr>
    <td align=""center"">
        
            
            
            <sub><b>Ulises Gasc√≥n</b></sub>
        
    </td>
    <td align=""center"">
        
            
            
            <sub><b>Brian McGonagill</b></sub>
        
    </td>
    <td align=""center"">
        
            
            
            <sub><b>Vlad Timofeev</b></sub>
        
    </td>
    <td align=""center"">
        
            
            
            <sub><b>Jason Ash</b></sub>
        
    </td>
    <td align=""center"">
        
            
            
            <sub><b>DRXAquosus</b></sub>
        
    </td>
    <td align=""center"">
        
            
            
            <sub><b>Rafael Anjos</b></sub>
        
    </td></tr>
<tr>
    <td align=""center"">
        
            
            
            <sub><b>Ratty222</b></sub>
        
    </td>
    <td align=""center"">
        
            
            
            <sub><b>Jtfinley72</b></sub>
        
    </td></tr>
</table>
<!-- readme: sponsors -end -->



‚¨ÜÔ∏è Back to Top
For full development documentation, see: Developing



Before getting started, you'll need Git, Node and optionally Yarn (run npm i -g yarn) installed.
To set up the development environment:
Get Code: git clone https://github.com/Lissy93/dashy.git  and cd dashy
Install dependencies: yarn
Start dev server: yarn dev
Open the browser: http://localhost:8080
When you're ready, you can build the production app with yarn build, and then run it with yarn start
If you're new to web development, I've put together a short list of resources to help beginners get started
Repo Status:





‚¨ÜÔ∏è Back to Top
For full docs, see: Documentation Contents
üí® Quick Start - TDLR guide on getting Dashy up and running in under 5 minutes
üöÄ Deployment - Full guide on setting up Dashy on various different environments
üîß Configuring - Complete list of all available options in the config file
üíª Management - Managing your app, updating, security, web server configuration, etc
üöí Troubleshooting - Common errors and problems, and how to fix them
üõ°Ô∏è Authentication - Guide to setting up authentication to protect your dashboard
üåà Alternate Views - Outline of available pages / views and item opening methods
üíæ Backup & Restore - Guide to backing up config with Dashy's cloud sync feature
üß∏ Icons - Outline of all available icon types for sections and items, with examples
üåê Multi-Language Support - Switching languages, and adding a new locales
üö¶ Status Indicators - Using Dashy to monitor uptime and status of your apps
üîç Searching  & Shortcuts - Searching, launching methods + keyboard shortcuts
üé® Theming - Complete guide to applying, writing and modifying themes + styles
üìä Widgets - List of all dynamic content widgets, with usage guides and examples
üß± Developing - Running Dashy development server locally, and general workflow
üõéÔ∏è Development Guides - Common development tasks, to help new contributors
üíñ Contributing - How to contribute to Dashy
üåü Showcase - See how others are using Dashy, and share your dashboard
üèÜ Credits - Shout out to the amazing people who have contributed so far
üóûÔ∏è Release Workflow - Info about releases, CI and automated tasks
üîê Privacy & Security - List of requests, potential issues, and security resources
üìÑ License - Copy of the MIT License
‚öñÔ∏è Legal - Licenses of direct dependencies
üìè Code of Conduct - Contributor Covenant Code of Conduct
üå≥ Changelog - Details of recent changes, and historical versions
‚¨ÜÔ∏è Back to Top
For upcoming features that will be released in the near future, see the Current Roadmap
For past updates, see the Changelog
‚¨ÜÔ∏è Back to Top
A few self-hosted web apps serve a similar purpose to Dashy. If you're looking for a dashboard, and Dashy doesn't meet your needs, I highly recommend you check these projects out! 
Flame by @pawelmalak (MIT)
Homer (Apache License 2.0)
Organizr (GPL-3.0 License)
Heimdall (MIT)
Smashing (MIT)
See more üëâ Awesome Self-Hosted
‚¨ÜÔ∏è Back to Top
Dashy is Licensed under MIT X11
TDLR; You can do whatever you like with Dashy: use it in private or commercial settings,
redistribute and modify it. But you must display this license and credit the author.
There is no warranty that this app will work as expected, and the author cannot be held
liable for anything that goes wrong.
For more info, see TLDR Legal's Explanation of MIT

‚¨ÜÔ∏è Back to Top

  
  
    
  
  
  
    
  
  
  <i>Thank you for Visiting</i>
"
3042,"ionic-team,capacitor","Build cross-platform Native Progressive Web Apps for iOS, Android, and the Web ‚ö°Ô∏è. 

  


  ‚ö°Ô∏è Cross-platform apps with JavaScript and the Web ‚ö°Ô∏è



  
  
  
  


  
  


Capacitor lets you run web apps natively on iOS, Android, Web, and more with a single codebase and cross-platform APIs.
Capacitor provides a cross-platform API and code execution layer that makes it easy to call Native SDKs from web code and to write custom native plugins that your app may need. Additionally, Capacitor provides first-class Progressive Web App support so you can write one app and deploy it to the app stores and the mobile web.
Capacitor comes with a Plugin API for building native plugins. Plugins can be written inside Capacitor apps or packaged into an npm dependency for community use. Plugin authors are encouraged to use Swift to develop plugins in iOS and Kotlin (or Java) in Android.
Capacitor was designed to drop-in to any existing modern web app. Run the following commands to initialize Capacitor in your app:
Next, install any of the desired native platforms:
For new apps, we recommend trying the Ionic Framework with Capacitor.
To begin, install the Ionic CLI (npm install -g @ionic/cli) and start a new app:
In spirit, Capacitor and Cordova are very similar. Capacitor offers backward compatibility with a vast majority of Cordova plugins.
Capacitor and Cordova differ in that Capacitor:
takes a more modern approach to tooling and plugin development
treats native projects as source artifacts as opposed to build artifacts
is maintained by the Ionic Team üíôüòä
See the docs for more details.
No, you do not need to use Ionic Framework with Capacitor. Without the Ionic Framework, you may need to implement Native UI yourself. Without the Ionic CLI, you may need to configure tooling yourself to enable features such as livereload. See the docs for more details.
See CONTRIBUTING.md.
Made possible by the Capacitor community. üíñ
<!-- CONTRIBUTORS:START -->


  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  


<!-- CONTRIBUTORS:END -->"
3043,"maxence-charriere,go-app","A package to build progressive web apps with Go programming language and WebAssembly.. 
    
        
    



    
    
    
    
    
    


Go-app is a package for building progressive web apps (PWA) with the Go programming language (Golang) and WebAssembly (Wasm).
Shaping a UI is done by using a declarative syntax that creates and compose HTML elements only by using the Go programing language.
It uses Go HTTP standard model.
An app created with go-app can out of the box runs in its own window, supports offline mode, and is SEO friendly.

go-app requirements:
Go 1.18 or newer
Go-app uses a declarative syntax so you can write reusable component-based UI elements just by using the Go programming language.
Here is a Hello World component that takes an input and displays its value in its title:
Apps created with go-app complies with Go standard HTTP package interfaces.
Read the Getting Started document.
This project exists thanks to all the people who contribute. [Contribute].

Become a financial contributor and help us sustain go-app development. [Contribute]

Support this project with your organization. Your logo will show up here with a link to your website. [Contribute]









"
3044,"andreasbm,web-skills","A visual overview of useful skills to learn as a web developer. <!-- ‚ö†Ô∏è This README has been generated from the file(s) ""blueprint.md"" ‚ö†Ô∏è-->
Web Skills

    Web Skills is a visual overview of useful skills to learn as a web developer. Go to https://andreasbm.github.io/web-skills to check out the visual overview or scroll through this readme to get the overview as a list. If you like the project you are very welcome to become a stargazer ü§©


    
        
    


<details>
<summary>üìñ Table of Contents</summary>


[![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png)](#table-of-contents)

[‚û§ FAQ](#-faq)

[What is Web Skills?](#what-is-web-skills)

[How did you choose the skills?](#how-did-you-choose-the-skills)

[How can I support you?](#how-can-i-support-you)

[How can I get involved?](#how-can-i-get-involved)

[How can I keep track of what skills I know?](#how-can-i-keep-track-of-what-skills-i-know)

[I am overwhelmed! Help me!](#i-am-overwhelmed-help-me)

[Why haven't you included XYZ Technology?](#why-havent-you-included-xyz-technology)

[What does the ""experimental"" banner mean?](#what-does-the-experimental-banner-mean)

[How can I get in contact with you?](#how-can-i-get-in-contact-with-you)

[‚û§ Fundamentals](#-fundamentals)

[HTML](#html)

[Syntax](#syntax)

[Basic Tags](#basic-tags)

[Forms](#forms)

[SEO](#seo)

[Discoverable Content](#discoverable-content)

[Svg](#svg)

[Best Practices](#best-practices)

[CSS](#css)

[Syntax](#syntax-1)

[Selectors](#selectors)

[Specificity](#specificity)

[Pseudo Selectors](#pseudo-selectors)

[Box Model](#box-model)

[Margin Collapsing](#margin-collapsing)

[Colors](#colors)

[Calc](#calc)

[Layout](#layout)

[Flex](#flex)

[Grid](#grid)

[Transforms](#transforms)

[Animations](#animations)

[Responsive Design](#responsive-design)

[Media Queries](#media-queries)

[Relative Units](#relative-units)

[Images](#images)

[CSS Variables](#css-variables)

[Best Practices](#best-practices-1)

[Javascript](#javascript)

[Syntax](#syntax-2)

[Spread](#spread)

[Destructuring](#destructuring)

[DOM](#dom)

[DOM Manipulation](#dom-manipulation)

[Events](#events)

[Objects](#objects)

[Prototype](#prototype)

[Classes](#classes)

[Regex](#regex)

[Template Literals](#template-literals)

[Promises](#promises)

[Callbacks](#callbacks)

[Async/await](#asyncawait)

[Fetch](#fetch)

[Web Animations](#web-animations)

[Modules](#modules)

[Intl](#intl)

[Canvas](#canvas)

[Documentation](#documentation)

[Best Practices](#best-practices-2)

[The Browser](#the-browser)

[Standardization](#standardization)

[W3C](#w3c)

[TC39](#tc39)

[WHATWG](#whatwg)

[Specifications](#specifications)

[Browser Engines](#browser-engines)

[Webkit](#webkit)

[Blink](#blink)

[Gecko](#gecko)

[HTTP](#http)

[The Internet](#the-internet)

[Polyfills](#polyfills)

[Debugging](#debugging)

[Developer console](#developer-console)

[‚û§ Accessibility](#-accessibility)

[The why](#the-why)

[Screen Readers](#screen-readers)

[Accessibility tree](#accessibility-tree)

[ARIA](#aria)

[Accessible HTML](#accessible-html)

[Alt text](#alt-text)

[Accessible CSS](#accessible-css)

[Accessible forms](#accessible-forms)

[UI States](#ui-states)

[Keyboard Accessibility](#keyboard-accessibility)

[Focus](#focus)

[Accessible Colors](#accessible-colors)

[Laws & Policies](#laws--policies)

[Audits](#audits)

[‚û§ Web Components](#-web-components)

[Custom Elements](#custom-elements)

[HTML Templates](#html-templates)

[Shadow DOM](#shadow-dom)

[Shadow Parts](#shadow-parts)

[Slots](#slots)

[Best practices](#best-practices)

[Constructible Stylesheets](#constructible-stylesheets)

[Form Participation](#form-participation)

[‚û§ Progressive Webapps](#-progressive-webapps)

[API's](#apis)

[Storage](#storage)

[Routing](#routing)

[History API](#history-api)

[Service Workers](#service-workers)

[Offline first](#offline-first)

[Push notifications](#push-notifications)

[Web App manifest](#web-app-manifest)

[Add to homescreen](#add-to-homescreen)

[Pointer Events](#pointer-events)

[Loading Performance](#loading-performance)

[App shell](#app-shell)

[Render-Blocking Resources](#render-blocking-resources)

[Compression](#compression)

[Performance metrics](#performance-metrics)

[Largest Contentful Paint](#largest-contentful-paint)

[Total Blocking Time](#total-blocking-time)

[Time to Interactive](#time-to-interactive)

[Lazy Loading](#lazy-loading)

[Dynamic Import](#dynamic-import)

[Offscreen images](#offscreen-images)

[Critical Request Chains](#critical-request-chains)

[Tree shaking](#tree-shaking)

[Codesplitting](#codesplitting)

[PRPL Pattern](#prpl-pattern)

[Resource Prioritization](#resource-prioritization)

[Caching](#caching)

[Rendering Performance](#rendering-performance)

[Rendering](#rendering)

[Event loop](#event-loop)

[Microtask](#microtask)

[Stack](#stack)

[Heap](#heap)

[RAIL Model](#rail-model)

[requestAnimationFrame](#requestanimationframe)

[requestIdleCallback](#requestidlecallback)

[Critical Rendering Path](#critical-rendering-path)

[The Pixel Pipeline](#the-pixel-pipeline)

[Style calculations](#style-calculations)

[Transforms](#transforms-1)

[Paint areas](#paint-areas)

[Layout Trashing](#layout-trashing)

[Layers](#layers)

[Debounce](#debounce)

[CSS Containment](#css-containment)

[Web Workers](#web-workers)

[Security](#security)

[HTTPS](#https)

[Browser Sandbox](#browser-sandbox)

[OWASP](#owasp)

[Cross-Site Scripting](#cross-site-scripting)

[Clickjacking](#clickjacking)

[Content Security Policy](#content-security-policy)

[Audits](#audits-1)

[Performance budgets](#performance-budgets)

[Lighthouse](#lighthouse)

[Chrome DevTools](#chrome-devtools)

[‚û§ Build tools](#-build-tools)

[Package Managers](#package-managers)

[NPM](#npm)

[Yarn](#yarn)

[Module Bundlers](#module-bundlers)

[Rollup](#rollup)

[Webpack](#webpack)

[Parcel](#parcel)

[Snowpack](#snowpack)

[Linters and formatters](#linters-and-formatters)

[Prettier](#prettier)

[ESLint](#eslint)

[Task Runners](#task-runners)

[NPM Scripts](#npm-scripts)

[Transpilers](#transpilers)

[Babel](#babel)

[Typescript](#typescript)

[CSS Pre-processors](#css-pre-processors)

[SASS](#sass)

[PostCSS](#postcss)

[Node.js](#nodejs)

[‚û§ Frameworks & Libraries](#-frameworks--libraries)

[lit-element](#lit-element)

[Vue](#vue)

[React](#react)

[Angular](#angular)

[Svelte](#svelte)

[Stencil](#stencil)

[‚û§ Testing](#-testing)

[Testing Methodologies](#testing-methodologies)

[Unit Testing](#unit-testing)

[Integration Testing](#integration-testing)

[System Testing](#system-testing)

[Acceptance Testing](#acceptance-testing)

[Smoke Testing](#smoke-testing)

[Performance Testing](#performance-testing)

[Usability Testing](#usability-testing)

[White Box Testing](#white-box-testing)

[Black Box Testing](#black-box-testing)

[Automated Testing](#automated-testing)

[Manual Testing](#manual-testing)

[Continuous integration](#continuous-integration)

[A/B Testing](#ab-testing)

[Test Runners](#test-runners)

[Karma](#karma)

[Mocha](#mocha)

[Jasmine](#jasmine)

[Cypress](#cypress)

[Ava](#ava)

[Best Practices](#best-practices-3)

[‚û§ Architecture & paradigms](#-architecture--paradigms)

[Paradigms](#paradigms)

[Programming Paradigms](#programming-paradigms)

[Object Oriented Programming](#object-oriented-programming)

[S.O.L.I.D](#solid)

[Functional programming](#functional-programming)

[Recursion](#recursion)

[Higher-Order Functions](#higher-order-functions)

[Currying](#currying)

[Monads](#monads)

[Architecture](#architecture)

[Design Patterns](#design-patterns)

[Singleton](#singleton)

[Observer](#observer)

[Prototype](#prototype-1)

[Bridge](#bridge)

[Proxy](#proxy)

[Chain of responsibility](#chain-of-responsibility)

[Constructor](#constructor)

[CSS Methodologies](#css-methodologies)

[BEM](#bem)

[SMACSS](#smacss)

[OOCSS](#oocss)

[‚û§ Team Collaboration](#-team-collaboration)

[Version Control](#version-control)

[Git](#git)

[Github](#github)

[Bitbucket](#bitbucket)

[Management](#management)

[Agile Development](#agile-development)

[Scrum](#scrum)

[Kanban](#kanban)

[Waterfall Development](#waterfall-development)

[Test Driven Development](#test-driven-development)

[‚û§ Design & UX](#-design--ux)

[Color Theory](#color-theory)

[Color Wheel](#color-wheel)

[Typography](#typography)

[Font Size](#font-size)

[Line Spacing](#line-spacing)

[C.R.A.P](#crap)

[Contrast](#contrast)

[Repetition](#repetition)

[Alignment](#alignment)

[Proximity](#proximity)

[Consistency](#consistency)

[Spacing](#spacing)

[Error Handling](#error-handling)

[Loading](#loading)

[The Golden Ratio](#the-golden-ratio)

[Mobile First](#mobile-first)

[Hit Targets](#hit-targets)

[Design Systems](#design-systems)

[Material Design](#material-design)

[Fluent Design](#fluent-design)

[Accessibility](#accessibility)

[Best Practices](#best-practices-4)

[‚û§ The Modern Web](#-the-modern-web)

[Streams](#streams)

[Media Streams](#media-streams)

[Media Recorder](#media-recorder)

[Web RTC](#web-rtc)

[Screen Capture](#screen-capture)

[Generators](#generators)

[Speech Synthesis](#speech-synthesis)

[Web Sockets](#web-sockets)

[Geolocation](#geolocation)

[Device orientation & motion](#device-orientation--motion)

[Fullscreen](#fullscreen)

[Variable Fonts](#variable-fonts)

[HTTP/2](#http2)

[Payment Request API](#payment-request-api)

[Web Audio](#web-audio)

[Observers](#observers)

[Mutation Observer](#mutation-observer)

[Intersection Observer](#intersection-observer)

[Resize Observer](#resize-observer)

[Performance Observer](#performance-observer)

[Scrollsnapping](#scrollsnapping)

[Web Assembly](#web-assembly)

[Beacon](#beacon)

[Clipboard](#clipboard)

[Share](#share)

[Performance API](#performance-api)

[Gamepad API](#gamepad-api)

[Speech Recognition](#speech-recognition)

[Interaction Media Queries](#interaction-media-queries)

[Browser Extensions](#browser-extensions)

[Pointer Lock API](#pointer-lock-api)

[Picture In Picture](#picture-in-picture)

[Proxies](#proxies)

[Houdini](#houdini)

[Project Fugu](#project-fugu)

[Web Authentication API](#web-authentication-api)

[Credentials Manager API](#credentials-manager-api)

[Native File System](#native-file-system)

[Shape Detection](#shape-detection)

[Web Bluetooth](#web-bluetooth)

[Web USB](#web-usb)

[Web XR](#web-xr)

[Presentation](#presentation)

[Network Information API](#network-information-api)

[‚û§ Algorithms & Data structures](#-algorithms--data-structures)

[Data structures](#data-structures)

[Arrays](#arrays)

[Queues & Stacks](#queues--stacks)

[Trees](#trees)

[Binary Indexed Tree](#binary-indexed-tree)

[Heap](#heap-1)

[Red-black Tree](#red-black-tree)

[Trie](#trie)

[K-D Tree](#k-d-tree)

[Hash Tables](#hash-tables)

[Linked Lists](#linked-lists)

[Graphs](#graphs)

[Analysis](#analysis)

[Time complexity](#time-complexity)

[Cost model](#cost-model)

[Order of Growth](#order-of-growth)

[Big O notation](#big-o-notation)

[Space Complexity](#space-complexity)

[Algorithms](#algorithms)

[Sorting](#sorting)

[Insertion Sort](#insertion-sort)

[Quicksort](#quicksort)

[Mergesort](#mergesort)

[Heapsort](#heapsort)

[Searching](#searching)

[Binary Search](#binary-search)

[Breadth First Search](#breadth-first-search)

[Depth First Search](#depth-first-search)

[Dijkstra's Algorithm](#dijkstras-algorithm)

[String Search](#string-search)

[Hashing](#hashing)

[‚û§ Databases & Servers](#-databases--servers)

[Databases](#databases)

[Relational Databases](#relational-databases)

[SQL](#sql)

[MySQL](#mysql)

[PostgreSQL](#postgresql)

[Non-relational Databases](#non-relational-databases)

[Redis](#redis)

[MongoDB](#mongodb)

[Data Modelling](#data-modelling)

[ER Diagram](#er-diagram)

[Keys](#keys)

[Indexing](#indexing)

[Data Integrity](#data-integrity)

[Normalization](#normalization)

[Functional Dependencies](#functional-dependencies)

[Normal Forms](#normal-forms)

[Transactions](#transactions)

[ACID](#acid)

[Serializability](#serializability)

[Locks](#locks)

[Deadlocks](#deadlocks)

[Precedence graph](#precedence-graph)

[Servers](#servers)

[Architectural Models](#architectural-models)

[Client-Server](#client-server)

[Proxy Server](#proxy-server)

[Peer-To-Peer](#peer-to-peer)

[Middleware](#middleware)

[Request-Reply Protocol](#request-reply-protocol)

[UDP](#udp)

[TCP](#tcp)

[REST API](#rest-api)

[CRUD](#crud)

[Express](#express)

[GraphQL](#graphql)

[GNU/Linux](#gnulinux)

[Docker](#docker)

[SSH](#ssh)

[‚û§ Contributors](#-contributors)

[‚û§ License](#-license)
</details>


Web Skills is a visual overview of useful skills to learn as a web developer. It is useful for people who just started learning about web development and for people who have been in the field for years and want to learn new things. As a beginner, I would encourage you not to see this website as the definitive list of what you need to know but as an example of what you can learn and where you can start. The skills are arranged in chronological order based on what learning path I recommend you to take but feel free to jump around freely.
The skills are derived from a combination of 10 years of experience, a bachelor in software engineering and what I personally find to be the most useful to know on a day-to-day basis. Therefore, you'll notice that it's missing a lot of things. For example, I am not a PHP developer - because of this, PHP is not included. If you were a PHP developer, this overview would probably look a lot different.
I am spending my spare time building Web Skills for free because I want to help people get into web development. My motivation comes from people finding Web Skills useful, so if you like the project feel free to support me in any way you like! For example, you are more than welcome to become a stargazer, share Web Skills with your friends and followers or create blog articles linking to Web Skills. If you want to, it will absolutely make my day if you support me with a cup of coffee! <3
You are welcome to get involved in any way you like. If you want to, you can go to the issues page and help me fix the spelling, fix issues or suggest some new features. Any involvement is highly appreciated!
If you scroll to the bottom of the page, you will find a button that says ""Sign in with Google"". If you click this button and sign in, you will be able to mark skills as completed.
I totally understand if you are a bit overwhelmed by the amount of skills on the page ‚Äì but I can assure you that this overview includes much, much more than most people will ever need to know. My main goal is to provide a visual overview of web development and make people hungry for learning more. One of the things I absolute love about being a developer is learning new skills. I think it is amazing to be in a field where you can do what you do for a lifetime and still learn something new! People cannot be an expert in every skill on this page so try to find what excites you the most and become really good at that.
The skills are based on what I personally find to be the most useful on a day-to-day basis. If you think something really important is missing, you can always suggest it on the issues page.
When a skill is described as experimental, it means that the technology is immature and currently in the process of being added to the Web platform (or considered for addition). Think carefully before you start using experimental technology in any kind of production project. The definition used in Web Skills is based on the excellent definition used on MDN. You are very welcome to open an issue if you see a skill you believe should be marked as ""experimental"" or have the banner removed.
Reach out to me on Twitter at @AndreasMehlsen or take a look at my website if you want to learn more about what other projects I'm working on.

Learn the basics of HTML and get comfortable with it's syntax and main concepts.
[ ]  MDN - HTML Basics
[ ]  MDN - Introduction to HTML
[ ]  Codecademy - Learn HTML
Get familiar with the basic HTML tags
[ ]  MDN - HTML elements reference
[ ]  Tutorialspoint - Basic HTML tags
[ ]  Elated - First 10 HTML tags
[ ]  W3Schools - HTML tags
Learn how to design efficient forms, validating them effectively and keeping the user informed along the way.
[ ]  MDN - HTML forms
[ ]  Google Web - Forms
[ ]  W3Schools - Forms
Learn how to make your content search-friendly.
[ ]  web.dev - Discoverable
[ ]  Google Search - Get Started
[ ]  Google Search - SEO basics
[ ]  web.dev - SEO audits
Learn how to structure your HTML in a way that provides a rich experience when sharing it online.
[ ]  Google Web - Social Discovery
[ ]  Google Search - Search Features
[ ]  Google Search - Structured Data
[ ]  web.dev - Easily discoverable
Learn how to work with SVG files to make graphics look crisp across all screen resolutions.
[ ]  MDN - Adding vector graphics to the Web
[ ]  SVG on the web
Learn the best practices of writing HTML.
[ ]  MDN - HTML guidelines
[ ]  W3Schools - HTML Coding Conventions
Learn the basics of CSS and get comfortable with it's syntax and main concepts.
[ ]  MDN - CSS Basics
[ ]  W3Schools - CSS Tutorial
[ ]  Supercharged - CSS Selectors
[ ]  MDN - CSS first steps
[ ]  MDN - CSS building blocks
[ ]  MDN - CSS values and units
[ ]  MDN - CSS Syntax
Learn about CSS selectors and how to effeciently target DOM elements.
[ ]  MDN - CSS selectors
[ ]  MDN - All selectors
[ ]  CSS Tricks - Child and Sibling Selectors
[ ]  CSS Tricks - All Selectors
[ ]  W3Schools - CSS Combinators
Learn what specificity means and how to use it when writing CSS.
[ ]  MDN - Specificity
[ ]  MDN - Cascade and inheritance
[ ]  dev.to - CSS Specificity
[ ]  Specificity Calculator
[ ]  W3Schools - CSS Specificity
Learn how to use pseudo selectors.
[ ]  MDN - Pseudo-classes
[ ]  CSS Tricks - Meet the Pseudo Class Selectors
[ ]  When do the :hover, :focus, and :active pseudo-classes apply?
[ ]  W3Schools - CSS Pseudo-elements
[ ]  W3Schools - CSS Pseudo-classes
Learn what the CSS box model means.
[ ]  MDN - Introduction to the CSS basic box model
[ ]  MDN - The box model
[ ]  CSS Tricks - Inheriting box-sizing
Learn about margin collapsing.
[ ]  MDN - Mastering margin collapsing
[ ]  Margin Collapse in CSS: What, Why, and How
[ ]  CSS Tricks - What You Should Know About Collapsing Margins
[ ]  What's the Deal with Collapsible Margins?
[ ]  What‚Äôs the Deal with Margin Collapse?
Learn the different ways you can define colors in CSS.
[ ]  MDN - Color
[ ]  MDN - <color>
[ ]  W3Schools - CSS Colors
Learn how to use the CSS calc function.
[ ]  MDN - Calc
[ ]  CSS Tricks - A Couple of Use Cases for Calc()
Learn the different layout types for web.
[ ]  Chrome Dev - Basic Layout
[ ]  W3Schools - CSS Website Layout
[ ]  MDN - Document and website structure
[ ]  MDN - CSS layout
Learn how to create layouts using flexbox.
[ ]  MDN - Flexbox
[ ]  A Complete Guide to Flexbox
[ ]  MDN - Flexbox
[ ]  Flexbox Froggy
[ ]  Flexbox Defense
Learn how to create layouts using CSS Grid.
[ ]  MDN - Grids
[ ]  A Complete Guide to CSS Grid
[ ]  MDN - CSS Grid
[ ]  CSS Grid Garden
[ ]  Supercharged - CSS Grids
Learn the different ways to transform elements through CSS.
[ ]  MDN - transform
[ ]  CSS Tricks - Transform
Learn how to animate elements through CSS using keyframes.
[ ]  MDN - Using CSS animations
[ ]  CSS Tricks - Animation
Learn how to make your website responsive so it works across different screen sizes.
[ ]  MDN - Responsive design
[ ]  Responsive Web Design Fundamentals by Google
[ ]  Google Dev - Responsive Design
[ ]  Google Dev - UX Patterns
[ ]  Google Dev - Responsive Content
[ ]  Codelabs - Responsive Design
Learn how use media queries to build responsive layout.
[ ]  CSS Tricks - CSS Media Queries & Using Available Space
[ ]  MDN - Using media queries
[ ]  MDN - Using Media Queries for Accessibility
Learn how to use relative units for properties such as font sizes and spacing.
[ ]  MDN - Sizing items in CSS
[ ]  MDN - CSS values and units
[ ]  The CSS Workshop - Relative Units
[ ]  CSS Tricks - Fun with Viewport Units
[ ]  dev.to - 15 CSS Relative units
Learn how to make images responsive, always showing the best possible version for the screen size.
[ ]  Google Devs - Responsive Images
[ ]  MDN - Responsive Images
Learn how to define and use CSS variables.
[ ]  MDN - Using CSS custom properties
[ ]  Google Devs - CSS Variables: Why Should You Care?
[ ]  dev.to - CSS Quickies: CSS Variables
[ ]  CSS Variables explained with 5 examples
Learn the best practices of writing CSS.
[ ]  MDN - CSS guidelines
[ ]  MDN - Organizing your CSS
[ ]  Speckyboy - Good and bad CSS practices
Learn the basics of Javascript and get comfortable with it's syntax and main concepts.
[ ]  MDN - Javascript First Steps
[ ]  MDN - Javascript Basics
[ ]  MDN - Javascript Building Blocks
Learn how the spread syntax can help you when working with arrays.
[ ]  MDN - Spread syntax
[ ]  Freecodecamp - An introduction to Spread syntax
[ ]  Object rest and spread properties
Learn how destructuring can help you when working with objects.
[ ]  MDN - Destructuring assignment
[ ]  MDN - ES6 In Depth: Destructuring
[ ]  javascript.info - Destructuring assignment
Learn how the HTML is represented as objects that comprise the structure and content of a document.
[ ]  MDN - DOM Introduction
[ ]  Freecodecamp - What's the DOM
[ ]  Introduction to the DOM
[ ]  htmldom.dev
Learn how to query HTML elements through Javascript and manipulate them.
[ ]  MDN - Locating DOM elements using selectors
[ ]  Supercharged - querySelector
Learn how to dispatch and listen for events.
[ ]  MDN - Introduction to events
[ ]  MDN - Creating and triggering events
[ ]  Event Bubbling and Event Capturing in JavaScript
[ ]  Freecodecamp - A simplified explanation of event propagation
[ ]  JavaScript Events Explained
[ ]  MDN - addEventListener()
[ ]  MDN - removeEventListener(
[ ]  Event order
Learn how to create and use objects.
[ ]  MDN - Introducing JavaScript objects
[ ]  MDN - Working with objects
[ ]  javascript.info - Objects
[ ]  MDN - this
[ ]  W3Schools - The JavaScript this Keyword
[ ]  MDN - bind()
[ ]  MDN - new operator
[ ]  MDN - new.target
[ ]  Data Structures: Objects and Arrays
Learn how to extend objects and functions through its prototype.
[ ]  The prototype chain
[ ]  Prototypes in JavaScript
[ ]  dev.to - JavaScript Visualized: Prototypal Inheritance
Learn how to define and use classes. Get somewhat comfortable with some of the object oriented concepts such as inheritence and encapsulation.
[ ]  MDN - Classes
[ ]  Medium - ES6 Classes
[ ]  MDN - Inheritance
[ ]  MDN - Object Oriented Programming
[ ]  MDN - super
Learn how to use regex to extract information from strings.
[ ]  MDN - Regular Expressions
[ ]  javascript.info - Regular expressions
[ ]  MDN - RegExp
Learn how template literals and tagged templates and help you manipulate strings.
[ ]  MDN - Template literals
[ ]  MDN - ES6 In Depth: Template strings
[ ]  Google Devs - Getting Literal With ES6 Template Strings
Learn how to use promises and what asynchronous code means.
[ ]  Google Devs - JavaScript Promises: an Introduction
[ ]  MDN - Promise
[ ]  Master the JavaScript Interview: What is a Promise?
Learn how to use callbacks and why they are not always a good idea.
[ ]  MDN - Callback function
[ ]  JavaScript: What the heck is a Callback?
[ ]  javascript.info - Callbacks
Learn how to use the async and await keywords to make it easier to write asynchronous code.
[ ]  MDN - async function
[ ]  Google Devs - Async functions
[ ]  javascript.info - Async/await
Learn how to use the fetch API to fetch data.
[ ]  Google Devs - Introduction to fetch
[ ]  Google Devs - Networking
[ ]  Freecodecamp - Fetch practical guide
[ ]  MDN - CORS
[ ]  Alligator - Fetch API
[ ]  Supercharged - Fetch
[ ]  Codelabs - Fetch 
Learn how to use web animations to animate elements in the DOM.
[ ]  Google Devs - Animations
[ ]  MDN - Using The Web Animations API
[ ]  CSS Tricks - CSS Animations vs Web Animations API
Learn how to modularize your code into ES6 modules using the export and import keywords.
[ ]  MDN - Export
[ ]  MDN - Import
[ ]  V8 - Modules
[ ]  Freecodecamp - A Practical guide to ES6 modules
Learn how to localize your website using the Intl API.
[ ]  MDN - Intl
[ ]  MDN - Date Time Format
[ ]  New Intl APIs in JavaScript
Learn how to paint graphics onto a canvas.
[ ]  MDN - Canvas tutorial
[ ]  MDN - Canvas API
[ ]  CSS Tricks - Manipulating Pixels Using Canvas
Learn how to create good documentation and why it is important.
[ ]  Getting Started with JSDoc
[ ]  A beginner‚Äôs guide to writing documentation
[ ]  Write Good Documentation
[ ]  The power of jsDoc
[ ]  Document your Javascript code with JSDoc
Learn the best practices of writing Javascript.
[ ]  MDN - JavaScript guidelines
[ ]  Airbnb - JavaScript Style Guide
[ ]  Principles of Writing Consistent, Idiomatic JavaScript
[ ]  5 JavaScript Style Guides
[ ]  JavaScript Style Guide and Coding Conventions
Learn why web standards are important and how new specifications are standardised.
[ ]  Wikipedia - Web Standards
[ ]  What Are Web Standards?
[ ]  A Comprehensive Explanation of Web Standards
Learn what W3C are doing and how they are moving the web forward.
[ ]  W3C - About
[ ]  W3C - Standards
[ ]  W3C - Process
[ ]  Web Standards Guide
[ ]  W3C - Groups
[ ]  The W3C At Twenty-Five
Learn what TC39 are doing and how they are moving the web forward.
[ ]  The TC39 process for ECMAScript features
[ ]  Github - TC39
[ ]  Ecma International - Programme of work
[ ]  Wikipedia - Ecma International
Learn what WHATWG are doing and how they are moving the web forward.
[ ]  WHATWG - FAQ
[ ]  WHATWG - Standards
[ ]  MDN - WHATWG
[ ]  W3C vs. WHATWG HTML5 Specs
[ ]  WHATWG - HTML
[ ]  Wikipedia - WHATWG
Learn how to read specifications developed by the standards committees.
[ ]  How to Read the ECMAScript Specification
[ ]  How to Read W3C Specs
[ ]  Learning CSS by reading specs
[ ]  Understanding the CSS Specifications
Learn what a browser engine is and get an overview of the browser landscape and market share.
[ ]  Medium - Browser Engines
[ ]  Wikipedia - Comparison
[ ]  HTML5 Rocks - How Browsers Work
[ ]  Demystifying Browsers
Learn about the Webkit browser engine.
[ ]  Webkit
Learn about the Blink browser engine.
[ ]  Blink
Learn about the Gecko browser engine.
[ ]  Gecko
Learn how data is distributed through the HTTP protocol.
[ ]  MDN - HTTP
[ ]  MDN - HTTP Glossary
[ ]  MDN - An overview of HTTP
[ ]  Wikipedia - Hypertext Transfer Protocol
Learn the basics of how the internet works.
[ ]  MDN - How does the Internet work?
[ ]  Youtube - How the Internet Works in 5 Minutes
[ ]  Explain That Stuff - Internet
[ ]  Stanford - How Does the Internet Work?
[ ]  How the Internet Works
Learn how it is possible to use polyfills to increase the browser support for your website.
[ ]  MDN - Polyfill
[ ]  Introduction To Polyfills & Their Usage
[ ]  W3C - Polyfills and the evolution of the Web
[ ]  Can I use
Learn about the basics concepts of debugging.
[ ]  Google Devs - Inspect and Edit Pages and Styles
[ ]  MDN - Cross browser testing
[ ]  5 things to remember for better debugging of your code
Learn how to use the developer console to debug your code.
[ ]  MDN - Console
[ ]  Google Devs - Console API Reference
[ ]  Google Devs - Get Started with Chrome DevTools
[ ]  Google Devs - Console Utilities API Reference
[ ]  MDN - Debugging CSS
[ ]  MDN - Debugging HTML
[ ]  javascript.info - Debugging in Chrome
[ ]  14 JavaScript debugging tips
[ ]  The definitive guide to debugging JavaScript
[ ]  Youtube - Chrome DevTools 101
[ ]  Chrome Devs - Quickly monitor events
[ ]  Youtube - 14 Must Know Chrome Dev Tools Tricks

Learn what accessibility is and why it is important.
[ ]  Google Devs - Accessibility Fundamentals
[ ]  A11ycasts with Rob Dodson
[ ]  Udacity - Chromevox Lite
[ ]  Dev.to - Why Accessibility Matters
[ ]  Abilitynet - Why Accessibility Matters
[ ]  Udacity - Web Accessibility
[ ]  Youtube - Headings, Landmarks, and Tabs
Learn about assistive technology such as screen readers that reads sections of the page aloud based on the current focus.
[ ]  The A11Y Project - Screen Reader Myths
[ ]  The A11Y Project - NVDA Screen Reader
[ ]  The A11Y Project - OS X Voiceover
[ ]  Webaim - Screen Reader Survey
Learn about the accessibility tree and how assistive technology uses it.
[ ]  Google Devs - The Accessibility Tree
Learn how to use ARIA descriptions an labels to help assistive technology understanding your website.
[ ]  Google Devs - ARIA Labels
[ ]  Google Devs - Hiding and updating content
[ ]  The A11Y Project - ARIA States
[ ]  The A11Y Project - ARIA Properties
Learn how to write HTML in such as way that assistive technology better understands it.
[ ]  Google Devs - Introduction to Semantics
[ ]  MDN - Accessibility HTML
[ ]  Webaim - Skip navigation
[ ]  w3c - Headings
[ ]  Freecodecamp - Semantic Elements
Learn how to use the alt attribute to provide a useful text alternative to this image.
[ ]  Google Devs - Text Alternatives for Images
[ ]  Webaim - Accessible Images
[ ]  Webaim - Alternative text
Learn how to write CSS in such as way that assistive technology better understands it.
[ ]  Webaim - CSS
Learn how to build accessible forms that makes it usable to as many people as possible.
[ ]  Webaim - Forms
[ ]  Itnext - Form Accessibility Gudie
Learn how to make the state of each UI element clear.
[ ]  Google Devs - Accessible Styles
Learn how to make it easy for keyboard users to navigate your site.
[ ]  Webaim - Keyboard
[ ]  Smashing Magazine - Web with just a keyboard
Learn how to create a sensible tab order and how to make it easy for the users to locate the currently focused element.
[ ]  web.dev - Control focus with tabindex
[ ]  Google Devs - Focus
[ ]  Google Devs - Dom Order Matters
[ ]  Google Devs - Using Tabindex
[ ]  Google Devs - Track Focus
[ ]  MDN - :focus-visible
[ ]  MDN - :focus-within
Learn how to select colors in such a way that users, including those with visual disabilities, can perceive the content on the page.
[ ]  Webaim - Contrast and Color
[ ]  The A11Y Project - Check contrast
[ ]  The A11Y Project - What is color contrast?
[ ]  Designing accessible color systems
Learn about the governmental policies related to web accessibility.
[ ]  W3C - Laws & Policies
[ ]  Webaim - Laws around the world
[ ]  Webaim - Section 508
[ ]  Webaim - WCAG 2 Checklist
[ ]  A11Y.dev - Lawsuits
Learn how to conduct an accessibility review to improve the overall experience of using your site. Remember, good accessibility equals good UX!
[ ]  web.dev - Accessibility audits
[ ]  Google Devs - How to review
[ ]  Webaim - Accessibility Tools
[ ]  Google Devs - Accessibility Reference
[ ]  Webaim - Wave
[ ]  Google Chrome - NoCoffee Extension
[ ]  Digital A11Y - Accessibility Plugins
[ ]  Google Devs - Accessibility for teams
[ ]  WCAG 2.0 checklists
[ ]  How to Meet WCAG (Quick Reference)

Learn how to create new HTML tags with Custom Elements.
[ ]  Google Devs - Custom Elements
[ ]  MDN - Using Custom Elements
[ ]  CSS Tricks - Creating a Custom Element from Scratch
[ ]  Javascript.info - Custom Elements
[ ]  dev.to - An introduction to Custom Elements
[ ]  itnext - Introduction to Web Components
[ ]  web.dev - Web Components
Learn how to use HTML templates to create flexible templates that can then be used to populate the Shadow DOM.
[ ]  MDN - Using Templates & Slots
[ ]  Javascript.info - Template Element
[ ]  MDN - The Content Template element
Learn how to encapsulate your CSS using Shadow DOM.
[ ]  Google Devs - Shadow DOM
[ ]  MDN - Using Shadow DOM
[ ]  MDN - Shadow Tree
[ ]  CSS Tricks - Encapsulating Style and Structure
[ ]  itnext - Introduction to Web Components
[ ]  Monica - Shadow DOM: fast and encapsulated styles
Learn how to style the inside of a shadow tree from outside of that Shadow Tree by using Shadow Parts.
[ ]  Fergald - CSS Shadow ::part and ::theme
[ ]  MDN - ::part
[ ]  W3C - CSS Shadow Parts
[ ]  Monica - ::part and ::theme, an explainer
[ ]  Youtube - CSS Shadow Parts
[ ]  Chrome Status - ::part and ::theme
Learn how to compose Custom Elements by using slots.
[ ]  Alligator.io - Composing Custom Elements
[ ]  Javascript.info - Slots Composition
[ ]  MDN - HTML <slot> element
[ ]  Component.kitchen - A history of the HTML slot element
Get familiar with best practices when it comes to building Web Components.
[ ]  Google Devs - Custom Element Best Practices
[ ]  Webcomponents.org - Web Components Best Practices
[ ]  mateusortiz - Web Components the Right Way
[ ]  dev.to - Making Web Components for Different Contexts
Learn how the Constructible Stylesheets proposal enables reusable styles when using shadow dom.
[ ]  Google Devs - Constructable Stylesheets
[ ]  W3C - Constructable Stylesheet Objects
[ ]  dev.to - Why Would Anyone Use Constructible Stylesheets
[ ]  Benjamin Farrel - Adopt a Design System
[ ]  WICG - Constructable Stylesheet Objects
[ ]  Chrome Status - Constructible Stylesheets
Learn how the Form Participation API proposal enables elements, other than built-in form control elements, to participate in form submission and validation.
[ ]  Form Participation API Explained
[ ]  Chrome Status - Form-associated custom elements
[ ]  web-platform-tests - Form Participation
[ ]  Google Devs - Form-associated custom elements
[ ]  web.dev - More capable form controls
[ ]  W3C - Creating a form-associated custom element

Learn how to store data for your web app.
[ ]  MDN - Storage
[ ]  MDN - Web Storage API
[ ]  MDN - Cookies
[ ]  MDN - IndexedDB API
[ ]  Google Devs - View And Edit Local Storage
[ ]  MDN - Client-side storage
Learn what routing means in single page applications.
[ ]  How Single-Page Applications Work
[ ]  Static Apps - Routing URLs in Static Web Apps
[ ]  Routing With Single Page Applications or Client Side Routing
Learn how to use the history API to add single page applicaiton routing to your web app.
[ ]  MDN - Working with the History API
[ ]  MDN - History API
[ ]  Single-page application routing in vanilla JavaScript
[ ]  CSS Tricks - Using the HTML5 History API
[ ]  The History API
[ ]  Google Devs - History API: Scroll Restoration
[ ]  MDN - The Document Base URL element
Learn how to register a service worker to provide a rich native-like experience.
[ ]  Google Devs - Service Workers: an Introduction
[ ]  Google Devs - The Service Worker Lifecycle
[ ]  Google Devs - Service Worker Registration
[ ]  MDN - Service Worker API
[ ]  Google Devs - High-performance service worker loading
[ ]  Codelabs - Scripting the service worker
[ ]  Codelabs - Caching files with the service worker
[ ]  Codelabs - Adding a Service Worker
[ ]  Google Devs - Debugging Service Workers
[ ]  Caching best practices
Learn how to make your web app working offline with an offline first approach.
[ ]  Google Devs - The Offline Cookbook
[ ]  Udacity - Offline Web Applications
[ ]  Offline First
[ ]  Google Devs - Offline UX Considerations
[ ]  Google Devs - Offline Storage for Progressive Web Apps
[ ]  Codelabs - Offline quickstart
[ ]  Codelabs - Adding a Service Worker and Offline into your Web App
[ ]  Supercharged - Offline Links
[ ]  MDN - Online and offline events
[ ]  MDN - Making PWAs work offline
Learn how to add push notifications to your web app.
[ ]  Google Devs - Adding Push Notifications to a Web App
[ ]  MDN - How to make PWAs re-engageable
[ ]  MDN - Notifications API
Learn how to tell the browser about your web app and how it should behave when 'installed' by creating a web app manifest.
[ ]  Google Devs - Web App Manifest
[ ]  web.dev - Add a web app manifest
[ ]  W3C - Web App Manifest
[ ]  MDN - How to make PWAs installable
Learn how to make your web app installable.
[ ]  web.dev - Installable
[ ]  Google Devs - App Install Banners
[ ]  MDN - Add to Home screen
Learn how to handle inputs from pointing devices such as a mouse, pen/stylus or touch.
[ ]  MDN - Pointer Events
[ ]  Google Devs - Add Touch to Your Site
[ ]  Google Devs - Pointing the Way Forward
[ ]  Google Devs - Touch Action Options
[ ]  W3C - Pointer Events
Learn how to use an app shell to provide an instant and reliable experience to users on repeat visits
[ ]  Google Devs - The App Shell Model
[ ]  MDN - Architecture of an app
Learn about render-blocking resources and why they are bad for the user-experience.
[ ]  MDN - Render-blocking resources
[ ]  Google Devs - Render-Blocking Resources
Learn how to minimize the overall download size by optimizing and compressing resources.
[ ]  Google Devs - Optimizing Encoding and Transfer Size
[ ]  Google Devs - Replace Animated GIFs with Video
[ ]  Squoosh
[ ]  Google Devs - Text Content
[ ]  Google Devs - Optimize Images
[ ]  web.dev - Reduce JavaScript execution time
Learn why it is important to measure performance and which metrics you should prioritize.
[ ]  Google Devs - User-centric Performance Metrics
[ ]  Udacity - Website Performance Optimization
[ ]  Udacity - Browser Rendering Optimization
Learn about Largest Contentful Paint and how it impacts the overall performance.
[ ]  web.dev - Largest Contentful Paint
[ ]  web.dev - Lighthouse Largest Contentful Paint
[ ]  Medium - New Performance Metric: What is Largest Contentful Paint?
Learn about Total Blocking Time and how it impacts the overall performance.
[ ]  web.dev - First CPU Idle
[ ]  Google Devs - Total Blocking Time
Learn about Time to Interactive and how it impacts the overall performance.
[ ]  web.dev - Total Blocking Time
[ ]  Google Devs - Time to Interactive
Learn how to use lazy loading to lower the initial page payload and load time.
[ ]  Google Devs - Lazy Loading Images and Video
[ ]  Addy Osmani - Lazy Loading Images
[ ]  web.dev - Native lazy-loading for the web
Learn how to use dynamic import to lazy load javascript.
[ ]  V8 - Dynamic import()
[ ]  JavaScript dynamic import() & export
[ ]  MDN - Dynamic Import
[ ]  TC39 - proposal-dynamic-import
Learn why offscreen images increase the load time and how to avoid them by lazy loading images.
[ ]  web.dev - Defer offscreen images
[ ]  Google Devs - Properly Size Images
[ ]  web.dev - Native lazy-loading for the web
[ ]  Addy Osmani - Native image lazy-loading for the web!
Learn about the critical request chains and how to find them in your web app.
[ ]  Google Devs - Critical Request Chains
[ ]  web.dev - Minimize critical requests depth
Learn how to use tree shaking to eliminate dead code.
[ ]  Google Devs - Reduce JavaScript Payloads
[ ]  How to Clean Up Your JavaScript
Learn about codesplitting an how dividing your code into multiple chunks makes your web app faster.
[ ]  Google Devs - Reduce JavaScript Payloads
[ ]  All you need to know about JavaScript code splitting
Learn how to use the PRPL pattern to make web apps more performant.
[ ]  Google Devs - The PRPL Pattern
[ ]  Google Devs - JavaScript Start-up Optimization
[ ]  Ben Schwarz - Real world performance
[ ]  The Cost of Javascript
Learn about resource prioritization and how to inform the browser about the importance of a resource.
[ ]  Google Devs - Resource Prioritization
[ ]  Eliminating Roundtrips with Preconnect
[ ]  Addy Osmani - Preload, Prefetch And Priorities in Chrome
[ ]  web.dev - Preconnect to required origins
[ ]  Preload, prefetch and other <link> tags
Learn about caching and how it can be uses to make web apps load faster.
[ ]  Google Devs - HTTP Caching
[ ]  MDN - HTTP caching
Learn about rendering, how a page is rendered and why it is important to keep your web app interactive and smooth running.
[ ]  Google Devs - Constructing the Object Model
[ ]  Google Devs - Rendering Performance
[ ]  Google Devs - Render-tree Construction
[ ]  Google Devs - Render Blocking CSS
Learn about the event loop and how Javascript simulate like it‚Äôs running our commands in a multi-thread environment.
[ ]  Youtube - Jake Archibald: In The Loop
[ ]  Understanding JavaScript
[ ]  JavaScript Event Loop Explained
[ ]  Youtube - What the heck is the event loop anyway?
[ ]  The JavaScript Event Loop
[ ]  dev.to - JavaScript Visualized: Event Loop
Learn about microtasks and the microtask queue.
[ ]  Tasks, microtasks, queues and schedules
[ ]  MDN - Using microtasks in JavaScript
[ ]  javascript.info - Microtasks and macrotasks
[ ]  javascript.info - Microtasks
Learn about the stack and how to investigate the staack trace when debugging.
[ ]  Javascript Stack Trade - Using it to debug
[ ]  MDN - console.trace()
[ ]  V8 - Stack trace API
[ ]  Confused about Stack and Heap?
Learn about the heap and how to investigate the heap snapshots when debugging.
[ ]  Google Devs - Memory Problems
[ ]  Google Devs - Memory Terminology
[ ]  Google Devs - How to Record Heap Snapshots
[ ]  Confused about Stack and Heap?
[ ]  Google Devs - How to Use the Allocation Profiler Tool
Learn how to use the RAIL model to ensure a good user experience.
[ ]  Google Devs - RAIL
[ ]  Google Devs - Why Performance Matters
[ ]  Google Devs - Get Started With Analyzing
[ ]  Google Devs - Animations and Performance
[ ]  Google Devs - CSS Versus JavaScript Animations
[ ]  Google Devs - Choosing the Right Easing
[ ]  Google Devs - Animating Modal Views
[ ]  MDN - CSS and JavaScript animation performance
[ ]  MDN - Performance fundamentals
[ ]  Youtube - Fast By Default
Learn how to use the requestAnimationFrame API to create butter-smooth animations.
[ ]  Google Devs - Optimize JavaScript Execution
[ ]  MDN - requestAnimationFrame()
Learn how to use the requestIdleCallback to defer heavy tasks.
[ ]  MDN - Background Tasks API
[ ]  Google Dev - requestIdleCallback
[ ]  MDN - requestIdleCallback()
Learn about the critical rendering path and how to identify it.
[ ]  Google Devs - Critical Rendering Path
[ ]  MDN - Critical Rendering Path
[ ]  Understanding the critical rendering path
Learn about the five key points in the pixels-to-screen pipeline.
[ ]  Google Devs - The pixel pipeline
[ ]  Pixels are expensive
[ ]  Google Devs - The Applied Science of Runtime Performance
[ ]  CSS Triggers
Learn how to optimize your CSS to avoid heavy style calculations.
[ ]  Google Devs - Style Calculations
Learn about transforms and how it is possible to avoid both layout and paint.
[ ]  Google Devs - Use transform and opacity for animations
[ ]  Achieving 60 FPS Animations with CSS3
[ ]  HTML5 Rocks - High Performance Animations
Learn about paint areas and how it is possible to reduce them.
[ ]  Google Devs - Paint Areas
[ ]  CSS Tricks - Browser painting
[ ]  HTML5 Rocks - Avoiding Unnecessary Paints
Learn about layout trashing and how to avoid it.
[ ]  Google Devs - Layout Thrashing
[ ]  Beware JavaScript Layout Thrashing!
[ ]  Layout thrashing cheatsheet
Learn about layers and how to promote an element to another layer.
[ ]  Google Devs - Manage Layer Count
[ ]  HTML5 Rocks - Accelerated Rendering in Chrome
[ ]  Layers and how to force them
Learn how to debounce computationally expensive code to avoid blocking the UI.
[ ]  Google Devs - Debounce Your Input Handlers
[ ]  What is Debouncing?
[ ]  Level Up - Debounce in JavaScript
Learn how to use CSS containment to improve the performance of your web app.
[ ]  Google Devs - CSS Containment
[ ]  W3C - CSS Containment Module
[ ]  An introduction to CSS Containment
[ ]  MDN - Contain
[ ]  CSS Tricks - CSS containment
Learn how to use web workers to run a script operation in a background thread separate from the main execution thread.
[ ]  MDN - Web Workers API
[ ]  HTML5 Rocks - The Basics of Web Workers
[ ]  When should you be using Web Workers?
Learn about HTTPS and why a website should always be protected with HTTPS.
[ ]  Google Devs - Why HTTPS Matters
[ ]  Google Devs - Enabling HTTPS on Your Servers
[ ]  Google Devs - Mixed Content
[ ]  Youtube - Stories from the field
Learn about the sandbox security mechanism and how it restricts the execution environment.
[ ]  web.dev - Browser sandbox
[ ]  Wikipedia - Sandbox (computer security)
[ ]  Howtogeek - Sandboxes Explained
Learn about the OWASP organization and how they help with web application security.
[ ]  Wikipedia - OWASP
[ ]  OWASP - About
[ ]  OWASP - OWASP Top 10
[ ]  OWASP - Cheatsheets
[ ]  Youtube - OWASP
[ ]  OWASP Top 10 Security Risks
[ ]  Wikipedia - Web application security
Learn about cross-site scripting and how it is possible mitigate these kind of attacks.
[ ]  MDN - Cross-site scripting
[ ]  OWASP - Cross-site Scripting (XSS)
[ ]  OWASP - XSS Cheatsheet
[ ]  Excess XSS
Learn about clickjacking and how it is possible to mitigate these kind of attacks.
[ ]  OWASP - Clickjacking
[ ]  Wikipedia - Clickjacking
[ ]  web.dev - Same-origin policy
[ ]  OWASP - Clickjacking Cheatsheet
Learn about content security policy and how it can help to detect and mitigate certain types of attacks.
[ ]  MDN - Content Security Policy (CSP)
[ ]  Google Devs - CSP
Learn about performance budgets and how you can create one for your web app.
[ ]  web.dev - Performance Budgets
[ ]  Google Devs - Performance Budget
[ ]  Addy Osmani - Start Performance Budgeting
Learn about lighthouse and how it can be used to audit your web app.
[ ]  Google Devs - Lighthouse
[ ]  Youtube - Staying off the Rocks
[ ]  web.dev - Measure
Learn about the Chrome DevTools and how it can be used to audit your web app.
[ ]  Google Devs - Chrome DevTools
[ ]  Google Devs - Inspect animations
[ ]  Investigate animation performance with DevTools

Learn about package managers and how they make managing dependencies easier.
[ ]  Freecodecamp - How JavaScript package managers work
[ ]  Guide to JavaScript frontend package managers
Learn about NPM and how it can be used to manage dependencies.
[ ]  npmjs - About npm
[ ]  npmjs - Getting started
[ ]  Introduction to npm and basic npm commands
[ ]  An Absolute Beginner's Guide to Using npm
Learn about Yarn and how it can be used to manage dependencies.
[ ]  Yarnpkg - Getting Started
[ ]  Facebook Engineering - Yarn
Learn about module bundler and how they can help bundling your code.
[ ]  dev.to - What is a module bundler?
[ ]  Freecodecamp - Let‚Äôs learn how module bundlers work
[ ]  JavaScript Bundlers, a Comparison
Learn how you can use Rollup to bundle your code.
[ ]  Rollup - Introduction
[ ]  How to Bundle JavaScript With Rollup
Learn how you can use Webpack to bundle your code.
[ ]  Webpack - Getting Started
[ ]  Webpack: A Gentle Introduction to the Module Bundler
Learn how you can use Parcel to bundle your code.
[ ]  Parcel - Getting Started
[ ]  Parcel, a simpler webpack
Learn how Snowpack can replace the traditional app bundler during development.
[ ]  Snowpack
[ ]  Snowpack - Quickstart
[ ]  Github - Snowpack
[ ]  Pika - About
[ ]  A Future Without Webpack
Learn how you can improve your code quality with linters and formatters.
[ ]  Improve Your JavaScript Code Quality With Linters
[ ]  Why you should always use a Linter
Learn how you can use Prettier to format your code.
[ ]  Prettier - What is Prettier?
[ ]  Let the computer do the formatting
[ ]  Prettier - Playground
[ ]  Prettier - Integrating with Linters
Learn how you can use ESLint to lint your code.
[ ]  Eslint - Getting Started
[ ]  Streamline Code Reviews with ESLint + Prettier
[ ]  Prettier vs ESLint: What‚Äôs The Difference?
Learn about task runners and how you can automate code execution.
[ ]  The Advantages of Using Task Runners
[ ]  Being Productive With Task Runners
Learn about NPM scripts and how you can run your own.
[ ]  CSS Tricks - Why npm Scripts?
[ ]  Helpers and tips for npm run scripts
Learn what transpilers are and why we need them.
[ ]  Scotch - Javascript Transpilers
[ ]  What JavaScript Programmers Need to Know about Transpilers
[ ]  Wikipedia - Source-to-source compiler
Learn about Babel and how you can use it to transpile your code.
[ ]  Complete Babel 7 Guide for Beginners
[ ]  Babel - What is Babel?
[ ]  Babel - Usage Guide
[ ]  A Beginner‚Äôs Guide to Babel
[ ]  Moving to ES6 ‚Äî Babel and Transpilers
Learn how to use Typescript and how it can help making your code typesafe.
[ ]  Typescript - Documentation
[ ]  Typescript: Why should one use i?
[ ]  Why TypeScript is the best way to write Front-end in 2019
Learn about CSS pre-processors and why we need them.
[ ]  MDN - CSS preprocessor
[ ]  Advantages of Using a Preprocessor
[ ]  Deconfusing Pre- and Post-processing
Learn about SASS and how you can use it to simplify your styles.
[ ]  SASS - Guide
[ ]  10 Reasons to Use a CSS Preprocessor in 2018
Learn about PostCSS and how you can use its ecosystem of plugins to extend your CSS build pipeline.
[ ]  PostCSS
[ ]  What is PostCSS?
[ ]  Introduction to PostCSS
[ ]  Getting started with PostCSS in 2019
Learn how to use Node.js.
[ ]  Node.js
[ ]  Introduction to Node.js
[ ]  Node.js - Guides
[ ]  W3Schools - Node.js tutorial

Learn how to use lit-element for creating fast, lightweight web components.
[ ]  lit-element
[ ]  Google Devs - Lightning-fast templates
[ ]  Vaadin - Creating a LitElement project
[ ]  dev.to - Web Components: from zero to hero, part three
Learn about Vue and how you can use it for building web apps.
[ ]  Vue
[ ]  Vue - CLI
[ ]  Getting Started with Vue
Learn about React and how you can use it for building web apps.
[ ]  React
[ ]  web.dev - React
[ ]  Getting Started with React
Learn about Angular and how you can use it for building web apps.
[ ]  Angular
[ ]  web.dev - Angular
[ ]  Angular - CLI
Learn about Svelte and how it can convert your component into highly efficient imperative code.
[ ]  Svelte
[ ]  Github - Svelte FAQ
[ ]  Svelte - Rethinking reactivity
Learn how Stencil can be used for generating small, fast web components.
[ ]  Stencil
[ ]  Alligator - Getting Started With Stencil
[ ]  How to Build Reusable Web Components Using Stenciljs

Learn about various software testing methodologies and why it is important to test your code.
[ ]  Wikipedia - Software testing
[ ]  Software Testing Methodologies
[ ]  Learn The Methods & Tools
Learn about unit testing and how it can be used to test individual units of code.
[ ]  Unit Testing Tutorial
[ ]  Wikipedia - Unit testing
[ ]  What is Unit Testing?
[ ]  The Arrange, Act and Assert (AAA) Pattern
Learn about integration testing and how it can be used to test modules as a group.
[ ]  Integration Testing Tutorial
[ ]  What is Integration Testing?
[ ]  Integration Testing
Learn about system testing and how it can be used to test the fully integrated software product.
[ ]  System Testing Tutorial
[ ]  What is System Testing?
[ ]  System Testing
Learn about acceptance testing and how it can be used to test the software for acceptability
[ ]  What is User Acceptance Testing?
[ ]  Acceptance Testing
[ ]  What is Acceptance Testing?
Learn about smoke testing and how it can be used to ensure that critical functionalities of the program are working fine.
[ ]  Sanity Testing Vs Smoke Testing
[ ]  Smoke Testing
Learn about performance testing and how it can be used to determine the responsiveness and stability of a program.
[ ]  Performance Testing Tutorial
[ ]  Performance Testing
[ ]  Wikipedia - Software performance testing
Learn about usability testing and how it can be used to determine if the system is easily usable for the end-user.
[ ]  What is Usability Testing?
[ ]  Usability Testing
[ ]  Wikipedia - Usability testing
Learn about white box testing and how it can be used to test the software's internal structure, design, and coding.
[ ]  What is White Box Testing?
[ ]  White Box Testing
Learn about black box testing and how a test can be carried out without looking at the internal code.
[ ]  What is Black Box Testing?
[ ]  Black Box Testing
Learn about automated testing and when it should be applied.
[ ]  What is Automated Testing?
[ ]  Automated Testing Tutorial
Learn about manual testing and when it should be applied.
[ ]  Manual Testing Tutorial
[ ]  Wikipedia - Manual Testing
[ ]  What is Manual Testing?
Learn about continuous integration and it can enable iterative software development.
[ ]  dev.to - Continuous Integration Explained
[ ]  Continuous Integration Tutorial
[ ]  Wikipedia - Continuous integration
Learn about A/B testing and how it can be used to optimize your web app.
[ ]  dev.to - A/B testing: introduction
[ ]  dev.to - When Not To A/B Test
[ ]  A/B Testing
[ ]  Wikipedia - A/B testing
Learn about test runners and how they can help running tests.
[ ]  Classifications of Testing Software
[ ]  Udacity - Javascript Testing
[ ]  JavaScript Unit Testing Frameworks
Learn about the Karma test runner.
[ ]  Karma
[ ]  Getting started with Karma and Mocha
Learn about the Mocha testing framework.
[ ]  Mocha
[ ]  A quick and complete guide to Mocha testing
[ ]  How to test JavaScript with Mocha
Learn about the Jasmine testing frameworks.
[ ]  Jasmine
[ ]  How to set up a testing environment with Jasmine and karma
Learn how to use Cypress for end-to-end-testing.
[ ]  Cypress
[ ]  End-to-End Testing with Cypress
Learn about the Ava test runner.
[ ]  Github - Ava
[ ]  A Fresh Take On JavaScript Testing
[ ]  Freecodecamp - How you can test your Node.js applications
Learn about the best practices when it comes to testing.
[ ]  Javascript Testing Best Practices
[ ]  What are the best practices in software Testing?
[ ]  7 Software Testing Best Practices

Learn how programming languages can be categoried into different paraigmes based on their features.
[ ]  Wikipedia - Programming paradigm
[ ]  Introduction of Programming Paradigms
[ ]  What Are JavaScript Programming Paradigms?
Learn about object oriented programming and how objects can make your code easier to read and debug.
[ ]  MDN - Object-oriented JavaScript
[ ]  Freecodecamp - An introduction to Object-Oriented Programming
[ ]  Introduction to Object Oriented Programming in JavaScript
Learn about the SOLID design pricinples that can make your code more understandable, flexible and maintainable.
[ ]  Wikipedia - SOLID
[ ]  S.O.L.I.D: The First 5 Principles of Object Oriented Design
[ ]  S.O.L.I.D The first 5 principles of Object Oriented Design with JavaScript
Learn about functional programming and how it can make your code easier to read and debug.
[ ]  An introduction to functional programming in JavaScript
[ ]  Functional Programming in JavaScript
[ ]  The power of functional programming in Javascript
[ ]  An introduction to Functional Programming
[ ]  dev.to - Basic Functional Programming Patterns in JavaScript
[ ]  Functional-ish JavaScript
Learn about recursion and when it can be used to make your code more readable.
[ ]  Learn and Understand Recursion in JavaScript
[ ]  Understanding Recursion in JavaScript
[ ]  Freecodecamp - Recursion in JavaScript
[ ]  javascript.info - Recursion and stack
Learn about higher-order functions and when it can be used to make your code more readable.
[ ]  Higher-Order Functions
[ ]  Freecodecamp - A quick intro to Higher-Order Functions
[ ]  Wikipedia - Higher-Order function
[ ]  Understanding Higher-Order Functions in JavaScript
Learn about currying and when it can be used to make your code more readable.
[ ]  dev.to - All you need to know about currying
[ ]  JavaScript: Currying and Partial Application
[ ]  Curry and Function Composition
[ ]  Wikipedia - Currying
Learn about monads and when it can be used to make your code more readable.
[ ]  Youtube - Monad, FunFunFunction
[ ]  Youtube - Functors, FunFunFunction 
[ ]  Functional JavaScript - Functors, Monads, and Promises
[ ]  Wikipedia - Monad
[ ]  JavaScript Monads Made Simple
[ ]  Implementing JavaScript Functors and Monads
[ ]  MDN - Array.prototype.flatMap()
Learn how commonly occurring problems can be solved using design patterns.
[ ]  Wikipedia - Software design pattern
[ ]  The 7 Most Important Software Design Patterns
[ ]  Software Design Patterns
[ ]  Design Patterns
[ ]  JavaScript Design Patterns
[ ]  Design Patterns in TypeScript
Learn about the singleton design pattern and when it should be used.
[ ]  Singleton Pattern
[ ]  Singleton Example
[ ]  Wikipedia - Singleton Pattern
Learn about the observer design pattern and when it should be used.
[ ]  Observer Pattern
[ ]  Observer Example
[ ]  Wikipedia - Observer Pattern
Learn about the prototype design pattern and when it should be used.
[ ]  Prototype Pattern
[ ]  Prototype Example
[ ]  Wikipedia - Prototype pattern
Learn about the bridge design pattern and when it should be used.
[ ]  Bridge Pattern
[ ]  Bridge Example
[ ]  Wikipedia - Bridge pattern
Learn about the proxy design pattern and when it should be used.
[ ]  Proxy Pattern
[ ]  Proxy Example
[ ]  Wikipedia - Proxy pattern
Learn about the chain of responsibility design pattern and when it should be used.
[ ]  Chain of Responsibility Pattern
[ ]  Chain of Responsibility Example
[ ]  Wikipedia - Chain of responsibility
Learn about the constructor design pattern and when it should be used.
[ ]  The Constructor Pattern
[ ]  Fundamental Object Design Patterns in JavaScript
[ ]  Difference between Constructor pattern and Prototype pattern
Learn how CSS can be structured using CSS methodologies.
[ ]  A Look at Some CSS Methodologies
[ ]  A web designer's guide to CSS methodologies
[ ]  Understanding CSS Writing Methodologies
Learn about the BEM methodology and when it should be used.
[ ]  Get BEM
[ ]  CSS Tricks - BEM 101
[ ]  What is BEM? And Why you should use it in your project.
Learn about the SMACSS methodology and when it should be used.
[ ]  SMACSS
[ ]  BEM vs SMACSS
Learn about the OOCSS methodology and when it should be used.
[ ]  OOCSS
[ ]  An Introduction To Object Oriented CSS
[ ]  The Future of Writing CSS

Learn about git and how it is used for version control.
[ ]  Learn Git Branching
[ ]  Git Handbook
[ ]  Github Cheatsheet
[ ]  Visualizing Git
[ ]  Codecademy - Learn Gitthis
[ ]  Git Hint
Learn how to use Github.
[ ]  What is GitHub?
[ ]  GitHub Learning Lab
[ ]  Wikipedia - Github
Learn how to use Bitbucket.
[ ]  Wikipedia - Bitbucket
[ ]  Tutorial: Learn Bitbucket with Git
[ ]  Getting Started with Bitbucket for Version Control
Learn about agile development and when to use it.
[ ]  Wikipedia - Agile software development
[ ]  What is agile methodology?
[ ]  What is Agile Software Development?
Learn about scrum and when to use it.
[ ]  Scrum Tutorial
[ ]  Scrum - Overview
Learn about kanban and when to use it.
[ ]  Kanban Tutorial
[ ]  What is kanban?
[ ]  Kanban Fundamentals
Learn about waterfall development and when to use it.
[ ]  Waterfall Model
[ ]  Waterfall vs. Agile
[ ]  Waterfall Model: What and when
Learn about test driven development and when to use it.
[ ]  Wikipedia - Test-driven development
[ ]  Red, Green, Refactor
[ ]  Freecodecamp - Test Driven Development
[ ]  TDD Changed My Life
[ ]  dev.to - Test-driven development in JavaScript

Learn about color theory and how you can make your own color schemes.
[ ]  All you need to know about colors in UI Design
[ ]  The Role of Color in UX
[ ]  10 Questions of Color Theory
[ ]  Wikipedia - Color Theory
[ ]  The Meaning of Color
[ ]  50 Gorgeous Color Schemes
Learn how to use the color wheel when making a color scheme.
[ ]  Color Theory: Brief Guide For Designers
[ ]  Color theory and the color wheel
[ ]  The fundamentals of understanding color theory
[ ]  Adobe - Color wheel
Learn about typography and how to describe fonts.
[ ]  Google - Understanding typography
[ ]  How to Understand Typography
[ ]  Typography Elements Everyone Needs to Understand
[ ]  Youtube - 10 rules to help you rule type
[ ]  Font Design
[ ]  Typography Tutorial for Beginners
[ ]  A Crash Course in Typography
[ ]  Type Classifications
[ ]  Google Fonts
[ ]  7 web typography rules
[ ]  15 Best Practices To Excellent UI
Learn about font sizes and how to choose the right one.
[ ]  Type scale
[ ]  The importance of font size
[ ]  Website font size: Size does matter
[ ]  CSS Tricks - font-size
[ ]  CSS Tricks - Fluid Typography
Learn about line spacing and how to choose the right one.
[ ]  Best UX practices for line spacing
[ ]  Line spacing
[ ]  Why you should go big with line spacing
[ ]  CSS Tricks - line-height
Learn how the C.R.A.P. design principles can help you point out the qualities (or flaws) in a design.
[ ]  Build Better User Experience
[ ]  CRAP Principles
[ ]  The Non-Designer's Design Book
[ ]  Youtube - The Non-Designers Design Book
[ ]  How CRAP Will Make You a Better Designer
[ ]  The Big Four: Contrast, Repetition, Alignment, Proximity
Learn how the principles of contrast can help you when designing.
[ ]  Designing with contrast: 20 tips from a designer
[ ]  Contrast Design principle of Graphic Design
[ ]  Contrast In Design
[ ]  Fully understanding contrast in design
Learn how the principles of repetition can help you when designing.
[ ]  Repetition Design principle of Graphic Design
[ ]  Repetition Principle of Design
[ ]  Repetition, Pattern, and Rhythm
[ ]  Repetition, principles of design
[ ]  How to Use Repetition Effectively
Learn how the principles of alignment can help you when designing.
[ ]  Alignment Design principle of Graphic Design
[ ]  Alignment Principle Of Design
[ ]  The Art Of Alignment In Graphic Design
[ ]  Introduction to Alignment
Learn how the principles of proximity can help you when designing.
[ ]  Proximity Design principle of Graphic Design
[ ]  How to Use Proximity Effectively
[ ]  Proximity Principle Of Design
[ ]  Gestalt Theory for UX Design: Principle of Proximity
[ ]  Principles of Design: Proximity
Learn why consistency is one of the most important building-blocks in a design.
[ ]  Design principle: Consistency
[ ]  Consistency, A Key Design Principle
[ ]  Consistency: MORE than what you think
[ ]  Principle of Consistency in User Interface Design
[ ]  The value of consistent design
Learn how to use space in your design.
[ ]  Space in Design Systems
[ ]  How to use spacing margin and spacing in design
[ ]  How To Use Space In Design
[ ]  Importance of White Space in Design
[ ]  Negative Space in Design
[ ]  How to Change Line Spacing in InDesign
Learn how to improve the user experience by handling errors in an intuitive way.
[ ]  Design an Error Handling System before you structure your App
[ ]  UI Error Handling
[ ]  Creating Error Messages
Learn how a loading state can improve the user experience.
[ ]  Everything you need to know about skeleton screens
[ ]  Engaging users with progressive loading in skeleton screen
[ ]  Design and code responsive Skeleton Screens
[ ]  How to Speed Up Your UX with Skeleton Screens
[ ]  A Bone to Pick with Skeleton Screens
[ ]  When to use loaders & empty states
[ ]  Empty/Loading State
[ ]  When You Need to Show a Button‚Äôs Loading State
[ ]  Stop Using Loading Spinner
Learn how the golden ratio can help you when choose measurements for your design.
[ ]  The Golden Ratio in Design
[ ]  A guide to the Golden Ratio for designers
[ ]  What is the golden ratio
[ ]  The Golden Ratio: A designer's guide
[ ]  Golden Ratio: What It Is And Why Should You Use It In Design
[ ]  Golden Ratio Typography (GRT) Calculator
[ ]  How to Use the Golden Ratio
[ ]  Golden Ratio in Design
[ ]  How To Use The Golden Ratio In Design
Learn about designing for mobile first and why it is important.
[ ]  Complete guide to mobile first design
[ ]  What is Mobile First Design?
[ ]  A Hands-On Guide to Mobile-First Responsive Design
[ ]  Mobile First Design
Learn about hit targets can why they should not be neglected.
[ ]  Finger-Friendly Design
[ ]  Size matters! Accessibility and Touch Targets
[ ]  Optimal Size and Spacing for Mobile Buttons
Learn what design systems are and get familiar with some.
[ ]  A guide to design systems
[ ]  What the heck is a design system?
[ ]  Everything you need to know about Design Systems
[ ]  What is a Design System?
[ ]  What's a Design System
Learn about material design and get familiar with the core principles.
[ ]  Google - Material Design
[ ]  Google - Material Components
[ ]  Google - Material Develop
[ ]  Google - Material Tutorial
[ ]  Wikipedia - Material Design
Learn about fluent design and get familiar with the core principles.
[ ]  Microsoft - Fluent Design System
[ ]  Microsoft - Fluent UI Toolkit
[ ]  Wikipedia - Fluent Design System
[ ]  Fluent: Design Behind the Design
[ ]  Iconic Icons: Designing the World of Windows
[ ]  Evolving the Microsoft Fluent Design System
Learn how and why it is important to design for accessibility.
[ ]  Designing For Accessibility And Inclusion
[ ]  Designing for accessibility is not that hard
[ ]  Designing Accessible Experiences at Scale
[ ]  Material Design - Accessibility
[ ]  W3C - Designing for Web Accessibility
[ ]  Accessibility in government
[ ]  W3C - Visual Presentation
Learn about some of the best practices when designing.
[ ]  13 Website Design Best Practices For 2019
[ ]  Design Best Practices
[ ]  Refactoring UI
[ ]  Refactoring UI | CSS Day 2019
[ ]  Dieter Ram' 10 principles for good design

Learn about streams and how they can help you effeciently transporting data.
[ ]  MDN - Streams
[ ]  MDN - Streams API concepts
[ ]  Experimenting with the Streams API
[ ]  WHATWG - Streams
Learn about media streams and how it is possible to get a stream to device specific hardware such as the camera or microphone.
[ ]  MDN - Media Streams API
[ ]  MDN - Image Capture API
[ ]  MDN - mediaDevices.getUserMedia()
[ ]  W3C - Media Capture and Streams
Learn how to use the media recorder API to record media streams.
[ ]  MDN - MediaStream Recording API
[ ]  Media Recorder API Demo
[ ]  WTC - MediaStream Recording
[ ]  What Web Can Do Today - Recording Media
Learn how to use Web RTC for establishing real-time communication.
[ ]  MDN - WebRTC API
[ ]  WebRTC - Getting Started
[ ]  WebRTC samples
[ ]  Wikipedia - WebRTC
[ ]  What Web Can Do Today - WebRTC
Learn how to use the Screen Capture API for recording the screen.
[ ]  MDN - Screen Capture API
[ ]  dev.to - Intro to Screen Capture API
[ ]  W3C - Screen Capture
Learn how to use generator functions to define iterative algorithms by writing functions whose execution is not continuous.
[ ]  MDN - Iterators and generators
[ ]  Functional JavaScript - Streams
[ ]  Understanding Generators with Examples
[ ]  MDN - function*
[ ]  MDN - yield*
[ ]  dev.to - JavaScript Visualized: Generators and Iterators
[ ]  javascript.info - Generators
[ ]  Medium - A Simple Guide to Understanding Javascript Generators
Learn how the speech synthesis API can help you converting text to speech.
[ ]  Google Devs - Web apps that talk
[ ]  MDN - window.speechSynthesis
[ ]  MDN - SpeechSynthesis
[ ]  W3C - Web Speech API
[ ]  The Speech Synthesis API
Learn about web sockets and how you can push data to your web app.
[ ]  MDN - Websockets API
[ ]  What are Web Sockets?
[ ]  HTML5 Rocks - Introducing WebSockets
[ ]  WHATWG - Web sockets
Learn how to ask the user for permission to the location.
[ ]  MDN - Geolocation API
[ ]  Alligrator - Using the Geolocation API
[ ]  Google Maps Platform - Displaying User Position on Maps
[ ]  What Web Can Do Today - Geolocation
Learn how to measure the orientation and motion of the device.
[ ]  MDN - Detecting device orientation
[ ]  W3C - DeviceOrientation Event Specification
[ ]  HTML5 Rocks - Introduction
[ ]  What Web Can Do Today - Device Position
[ ]  W3C - Generic Sensor API
[ ]  MDN - Sensor APIs
[ ]  Google Devs - Sensors For The Web
Learn how to use the fullscreen API to give the user a more immersive experience when needed.
[ ]  MDN - Fullscreen API
[ ]  Google Devs - Let Your Content Do the Talking
[ ]  David Walsh - Fullscreen API
Learn how to use variable fonts and how it is possible to customize fonts without the need for loading more.
[ ]  v-fonts
[ ]  MDN - Variable fonts guide
[ ]  Google Devs - Introduction to variable fonts
[ ]  Supercharged - Variable Fonts
Learn about the faster and more convenient HTTP/2 protocol.
[ ]  Google Devs - Introduction to HTTP/2
[ ]  Wikipedia - HTTP/2
[ ]  HTTP/2: the difference between HTTP/1.1
[ ]  HTTP/2 - FAQ
[ ]  Why turning on HTTP/2 was a mistake
Learn about the payment request API and how it can help monetize your web app.
[ ]  MDN - Payment Request API
[ ]  Codelabs - Payment Request API
[ ]  What Web Can Do Today - Payments
[ ]  W3C - Payment Request API
[ ]  Google Devs - Introduction to the Payment Request API
Learn how to use the Web Audio API to add audio to your web app.
[ ]  MDN - Using the Web Audio API
[ ]  MDN - Web Audio API
[ ]  W3C - Web Audio API
[ ]  HTML5 Rocks - Getting Started with Web Audio API
[ ]  All You Need to Know About the Web Audio API
[ ]  Alligator - Your First Steps with the Web Audio API
Learn about the observer pattern and get comfortable concepts such as subjects and observers.
[ ]  Javascript Observers and You
[ ]  How to Use the Observable Pattern in JavaScript
[ ]  Wikipedia - Publish‚Äìsubscribe pattern
[ ]  The Observer Pattern with Vanilla JavaScript
Learn how to use the Mutation Observer API to get informed about changes to the DOM.
[ ]  MDN - MutationObserver
[ ]  Listening to the DOM changes with MutationObserver
[ ]  David Walsh - MutationObserver API
[ ]  javascript.info - Mutation observer
[ ]  WHATWG - Mutation observers
Learn how to use the Intersection Observer API can help you detect when an element is visible on the screen.
[ ]  MDN - Intersection Observer API
[ ]  W3C - Intersection Observer
[ ]  Google Devs - Trust is Good, Observation is Better
[ ]  CSS Tricks - An Explanation of Intersection Observers
[ ]  Understanding the Intersection Observer API in JavaScript
[ ]  CSS Tricks - A Few Functional Uses for Intersection Observer
[ ]  google Devs - An event for CSS position:sticky
Learn how to use the Resize Observer API to get informed when the element resizes.
[ ]  MDN - Resize Observer API
[ ]  Google Devs - It‚Äôs Like document.onresize for Elements
[ ]  Alligator - A Look at the Resize Observer JavaScript API
[ ]  David Walsh - Resize Observer
Learn how the Performance Observer API can help you get information about the performance of your web app.
[ ]  MDN - Long Tasks API
[ ]  MDN - PerformanceObserver
[ ]  Google Devs - Efficient Access to Performance Data
Learn about the Scrollsnapping API and how it can help you provide an intuitive experience when scrolling.
[ ]  CSS Tricks - Practical CSS Scroll Snapping
[ ]  CSS Tricks - Introducing CSS Scroll Snap Points
[ ]  Google Devs - Well-Controlled Scrolling with CSS Scroll Snap
[ ]  MDN - CSS Scroll Snap
[ ]  The scroll-snap-* Properties
Learn about Web Assembly and how it opens up the playing field for new types of web apps.
[ ]  MDN - WebAssembly Concepts
[ ]  MDN - WebAssembly
[ ]  dev.to - Why the heck is everyone talking about WebAssembly?
[ ]  Introduction to Web Assembly
[ ]  Google Codelabs - An Introduction to Web Assembly
[ ]  How We Used WebAssembly To Speed Up Our Web App By 20X
[ ]  Google Devs - WebAssembly
Learn how the Beacon API can help you send data to endpoints before the user closes the page.
[ ]  MDN - sendBeacon
[ ]  MDN - Using the Beacon API
[ ]  Logging Activity With The Web Beacon API
Learn about the Clipboard API and how it can help you copy and paste data.
[ ]  MDN - Clipboard
[ ]  What Web Can Do Today - Clipboard (Copy & Paste)
[ ]  Google Devs - Image Support for the Async Clipboard API
Learn how the Web Share API can help users sharing your web app.
[ ]  MDN - Share
[ ]  Google Devs - Introducing the Web Share API
[ ]  Google Devs - Registering as a Share Target
[ ]  CSS Tricks - How to Use the Web Share API
[ ]  The Web Share API
[ ]  dev.to - How to implement the Web Share API with a fallback
Learn about the Performance API and how it can help you monitor the performance of the device.
[ ]  MDN - Performance
[ ]  MDN - performance.measure()
[ ]  CSS Tricks - Breaking Down the Performance API
[ ]  Google Devs - Assessing Loading Performance
[ ]  MDN - Performance Specifications
[ ]  MDN - Performance Timeline
Learn how the Gamepad API can help you integrate with various controllers such as an x-box or playstation controller
[ ]  MDN - Using the Gamepad API
[ ]  MDN - Gamepad API
[ ]  luser - Gamepad Test
[ ]  MDN - Implementing controls using the Gamepad API
Learn how to use the Speech Recognition API to analyze speech.
[ ]  MDN - Using the Web Speech API
[ ]  David Walsh - JavaScript Speech Recognition
[ ]  MDN - SpeechRecognition
[ ]  MDN - Web Speech API
[ ]  Github - web-speech-api
[ ]  What Web Can Do Today - Speech Recognition
Learn how to use Interaction Media Queries to optimize the user experience for the specific type of device.
[ ]  Introducing CSS Interaction Media Queries
[ ]  MDN - Media features
[ ]  Touch Devices Should Not Be Judged By Their Size
[ ]  Interaction Media Features and their potential
[ ]  W3C - Interaction Media Features
[ ]  What Web Can Do Today - Pointing Device Adaptation
Learn how to build browser extensions to enhance the functionality of your browser.
[ ]  MDN - Browser Extensions
[ ]  Chrome - What are extensions?
[ ]  Chrome - Getting Started with Extensions
[ ]  Youtube - Google Chrome Extensions
Learn how to use the Pointer Lock API to get the raw mouse movement and lock the target of mouse events to a single element.
[ ]  MDN - Pointer Lock API
[ ]  W3C - Pointer Lock
[ ]  Use the Pointer Lock API to Restrict Mouse Movement
Learn how to use the Picture-In-Picture API to watch videos in a floating window (always on top of other windows).
[ ]  Google Devs - Watch video using Picture-in-Picture
[ ]  Picture-in-Picture Sample
[ ]  CSS Tricks - An Introduction to Picture-in-Picture
[ ]  dev.to - Implement Picture-in-Picture on the Web
[ ]  Medium - How to use ‚Äúpicture in picture üì∫‚Äù in JavaScript.
Learn how to use proxies to intercept certain operations and implement custom behaviors.
[ ]  MDN - Meta programming
[ ]  MDN - Proxy
[ ]  A practical guide to Javascript Proxy
[ ]  Introducing Javascript ES6 Proxies
[ ]  Medium - How to use JavaScript Proxies for Fun and Profit
Learn about the Houdini project and get excited about the future of CSS.
[ ]  Google Devs - Houdini, Demystifying CSS
[ ]  web.dev - Smarter custom properties
[ ]  CSS Houdini Experiments
[ ]  Interactive Introduction to CSS Houdini
[ ]  W3C - CSS Houdini Wiki
[ ]  Google Devs - Houdini's Animation Worklet
Learn about Project Fugu project and get excited about the future of the Web.
[ ]  Our commitment to a more capable web
[ ]  Web Capabilities (Fugu)
[ ]  Chromium Bugs - Fugu
[ ]  Google Devs - Unlocking new capabilities for the web
[ ]  Youtube - Unlocking New Capabilities for the Web
[ ]  Controlling Access to Powerful Web Platform Features
Learn how to use the Web Authentication API to provide a strong authentication with public key cryptography.
[ ]  MDN - Web Authentication API
[ ]  W3C - Web Authentication: An API for accessing Public Key Credentials
[ ]  Google Devs - Enabling Strong Authentication with WebAuthn
[ ]  Introduction to Web Authentication: The New W3C Spec
[ ]  Microsoft - Web Authentication and Windows Hello
[ ]  Web Authentication: What It Is and What It Means for Passwords
Learn about the Credentials Manager API proposal and how it can help authenticating users.
[ ]  MDN - Credential Management API
[ ]  Google Devs - The Credential Management API
[ ]  Google Devs - Sign in Users
[ ]  Google Devs - Save Credentials from Forms
[ ]  What Web Can Do Today - Credentials
Learn how the Native File System API proposal enables interacting with files on the user's local device.
[ ]  Google Devs - The Native File System API
[ ]  Github - Native File System
[ ]  W3C - Native File System
[ ]  Native File System Web API - Chromium Security Model
[ ]  Chromestatus - Native File System
[ ]  W3C - File API
Learn how the Shape Detection API proposal can be use to detect shapes such as faces or barcodes in pictures.
[ ]  W3C - Accelerated Shape Detection in Images
[ ]  web.dev - A Picture is Worth a Thousand Words
[ ]  Github - Shape Detection API Specification
[ ]  Introduction to the Shape Detection API
[ ]  Face detection using Shape Detection API
Learn how the Web Bluetooth API proposal can be used to connect with nearby devices.
[ ]  MDN - Web Bluetooth API
[ ]  Google Devs - Interact with Bluetooth devices
[ ]  What Web Can Do Today - Bluetooth
[ ]  W3C - Web Bluetooth
[ ]  Web Bluetooth Samples
Learn the Web USB API proposal can be used to connect with hardware through a cable.
[ ]  MDN - USB
[ ]  WICG - Web USB
[ ]  Google Devs - Access USB Devices on the Web
[ ]  What Web Can Do Today - Web USB
Learn how to use Web XR API proposal for virtual- and augmented reality experiences.
[ ]  MDN - WebXR Device API
[ ]  Google Devs - Welcome to the immersive web
[ ]  New API to Bring Augmented Reality to the Web
[ ]  W3C - WebXR Device API
Learn how the Presentation API proposal enables your web app to use the presentation display mode in the browser or at an external display device.
[ ]  MDN - Presentation API
[ ]  What Web Can Do Today - Presentation Features
[ ]  Google Devs - Present web pages to secondary attached displays
[ ]  W3C - Presentation API
Learn how the Network Information API proposal can give you information about the state of the network.
[ ]  MDN - Network Information API
[ ]  Addy Osmani - Adaptive Serving
[ ]  W3C - Network Information API
[ ]  Network Information API Sample
[ ]  What Web Can Do Today - Network Type & Speed

Learn how and when arrays should be used.
[ ]  javascript.info - Arrays
[ ]  Freecodecamp - Arrays, A Visual Introduction for Beginners
[ ]  Wikipedia - Array data structure
[ ]  MDN - Array
Learn how and when queues and stacks should be used.
[ ]  Stacks and Queues
[ ]  Difference between Stack and Queue Data Structures
[ ]  Data Structures: Stacks & Queues
[ ]  Stacks vs. Queues In JavaScript
Learn how and when trees should be used.
[ ]  Wikipedia - Tree (data structure)
[ ]  Freecodecamp - Everything you need to know about tree data structure
[ ]  Data Structure and Algorithms - Tree
Learn how and when binary indexed trees should be used.
[ ]  Wikipedia - Fenwick tree
[ ]  What is the intuition behind a binary indexed tree?
[ ]  Binary Indexed Tree or Fenwick Tree
[ ]  Fenwick Tree / Binary Indexed Tree
[ ]  Youtube - Binary Indexed Tree
[ ]  Github - fast-binary-indexed-tree-js
Learn how and when heaps should be used.
[ ]  Wikipedia - Heap (data structure)
[ ]  Tutorialspoint - Heap Data Structure
[ ]  Learning to Love Heaps
[ ]  How to implement Heap Data structure in JavaScript
[ ]  Youtube - Data Structures: Heaps
Learn how and when red-black trees should be used.
[ ]  Wikipedia - Red‚Äìblack tree
[ ]  Painting Nodes Black With Red-Black Trees
[ ]  Red-Black Tree
[ ]  Red Black Trees in JavaScript
[ ]  Github - Red‚ÄìBlack Tree
Learn how and when tries should be used.
[ ]  Wikipedia - Trie
[ ]  Trie (Insert and Search)
[ ]  Trying to Understand Tries
[ ]  Trie, Datastructure
[ ]  Youtube - Data Structures: Tries
[ ]  Practical Data Structures: Tries
[ ]  Trie, visualization
Learn how and when K-D trees should be used.
[ ]  Wikipedia - k-d tree
[ ]  Github - k-d Tree JavaScript Library
[ ]  kd-Trees
[ ]  Youtube - KD Tree Algorithm
Learn how and when hash tables should be used.
[ ]  Wikipedia - Hash table
[ ]  Hash tables explained
[ ]  Basics of Hash Tables
[ ]  Javascript Hash Table
[ ]  Objects and Hash Tables in Javascript
Learn how and when linked lists should be used.
[ ]  Wikipedia - Linked list
[ ]  Introduction to Linked Lists
[ ]  Linked Lists in JavaScript
[ ]  The Little Guide of Linked List in JavaScript
Learn how and when graphs should be used.
[ ]  Wikipedia - Graph theory
[ ]  Implementation of Graph in JavaScript
[ ]  Graphs and Graph Algorithms
[ ]  The Javascript Developer‚Äôs Guide to Graphs
Learn about time complexity and how it can be used to analyze an algorithm.
[ ]  Wikipedia - Time complexity
[ ]  Time Complexity of Algorithms
[ ]  Freecodecamp - An Introduction to Time Complexity
[ ]  8 time complexities that every programmer should know
[ ]  Time Complexity Analysis in JavaScript
[ ]  An intro to Algorithms
Learn how to setup a cost model for an algorithm.
[ ]  Wikipedia - Analysis of algorithms
[ ]  Analysis of Algorithms
[ ]  The cost of JavaScript in 2019
Learn how to make an order-of-growth classification to classify the cost model.
[ ]  Quora - What is the meaning of 'order of growth'
[ ]  Orders of Growth
[ ]  Coursera - Order-of-Growth Classifications
Learn how to use Big O notation to classify the time complexity of an algorithm.
[ ]  Wikipedia - Big O notation
[ ]  Time Complexity/Big O Notation
[ ]  Big O Notation in JavaScript
[ ]  Big O in JS: The basic that you need to know
[ ]  Big O in JavaScript
[ ]  dev.to - What is Big O Notation, and Why is it Useful?
[ ]  dev.to - Big-O Notation Useful guide
Learn about space complexity and how it can be used to analyze an algorithm.
[ ]  Space Complexity of Algorithms
[ ]  Google Devs - Fix Memory Problems
[ ]  Google Devs - Memory Terminology
[ ]  Google Devs - How to Record Heap Snapshots
[ ]  Debugging Memory Leaks in JavaScript
[ ]  Wikipedia - Space complexity
[ ]  Space Complexity
Learn about the most important sorting algorithms and figure out what challenges there are involved with implementing one.
[ ]  A Guide To Sorting Algorithms in JavaScript
[ ]  dev.to - Sorting Algorithms with Javascript
[ ]  Introduction to Sorting
[ ]  Implementing Sorting Algorithms in JavaScript
[ ]  Algorithms ‚Äì Sorting Algorithms in JavaScript
Learn about the insertion sort algorithm.
[ ]  Wikipedia - Insertion sort
[ ]  Insertion Sort
[ ]  Insertion Sort Algorithm
[ ]  Insertion Sorting for Beginners in JS
[ ]  Algorithms: Insertion Sort in JavaScript
Learn about the quicksort algorithm.
[ ]  Wikipedia - Quicksort
[ ]  A Quick Explanation of Quick Sort
[ ]  QuickSort
[ ]  Implementing Quicksort in JavaScript
[ ]  Computer science in JavaScript: Quicksort
Learn about the mergesort algorithm.
[ ]  Wikipedia - Merge sort
[ ]  Merge Sort Algorithm in JavaScript
[ ]  A Simplified Explanation of Merge Sort
[ ]  Overview of merge sort
[ ]  Freecodecamp - The Merge Sort Algorithm Explained
Learn about the heapsort algorithm.
[ ]  Wikipedia - Heapsort
[ ]  Heapify All The Things With Heap Sort
[ ]  Heap Sort Algorithm
[ ]  Heapsort Algorithm
[ ]  Heap Sort
Learn about the most important searching algorithms and figure out what challenges there are involved with implementing one.
[ ]  Wikipedia - Search algorithm
[ ]  Search Algorithms with ES6
[ ]  Introduction to Searching Algorithms
[ ]  Implement linear and binary search algorithms with Javascript
[ ]  Searching Algorithms In Javascript
Learn about the binary search algorithm.
[ ]  Wikipedia - Binary search algorithm
[ ]  How to implement a Binary search algorithm
[ ]  Binary Search
[ ]  What Is Binary Search, A Detailed Step-By-Step
[ ]  Programming with JS: Binary Search
[ ]  Binary Search In JavaScript
Learn about the breadth first search algorithm.
[ ]  Wikipedia - Breadth-first search
[ ]  Breaking Down Breadth-First Search
[ ]  Breadth First Search in JavaScript
[ ]  Github - Breadth-First Search (BFS)
[ ]  The Magician‚Äôs Guide to Algorithms
Learn about the depth first search algorithm.
[ ]  Wikipedia - Depth-first search
[ ]  Depth First Search Algorithm
[ ]  Depth first and breadth first search on trees
[ ]  Breadth-first vs Depth-first Tree Traversal
[ ]  Github - Depth-First Search (DFS)
Learn about dijkstra's algorithm.
[ ]  Wikipedia - Dijkstra's algorithm
[ ]  Dijkstra‚Äôs algorithm
[ ]  How to implement Dijkstra‚Äôs Algorithm
[ ]  A Walkthrough of Dijkstra‚Äôs Algorithm
Learn about various algorithms for searching in strings.
[ ]  Wikipedia - String-searching algorithm
[ ]  Boyer Moore String Search
[ ]  Boyer‚ÄìMoore string-search algorithm
Learn about hashing algorithms.
[ ]  Wikipedia - Hash function
[ ]  How Encryption Works
[ ]  Cryptography for JavaScript: Hash Function
[ ]  Github - hash.js

Learn about relational databases and how to use them.
[ ]  Wikipedia - Relational database
[ ]  Relational database
[ ]  Everything you need to know about (Relational) Databases
[ ]  What are relational databases?
[ ]  What is a Relational Database Management System?
Learn how to write SQL statements to communicate with a database.
[ ]  Learn SQL
[ ]  Wikipedia - SQL
[ ]  A beginners guide to SQL
[ ]  The Last SQL Guide for Data Analysis You‚Äôll Ever Need
[ ]  SQL Tutorial
Learn about the open-source relational database management system called MySQL.
[ ]  MySQL
[ ]  Wikipedia - MySQL
[ ]  Tutorialspoint - MySQL Tutorial
[ ]  MySQL Definition
[ ]  Getting Started with MySQL
Learn about the open-source relational database management system called PostgreSQL.
[ ]  PostgreSQL
[ ]  Wikipedia - PostgreSQL
[ ]  PostgreSQL Tutorial
[ ]  Postgres Guide
Learn about non-relational databases and how to use them.
[ ]  What Is A Non Relational Database
[ ]  Wikipedia - NoSQL
[ ]  dev.to - Relational SQL vs. Non-Relational NoSQL Databases
[ ]  Non-relational data and NoSQL
[ ]  Non-Relational Database
Learn about the open-source non-relational database management system called Redis.
[ ]  Redis
[ ]  Try Redis
[ ]  Wikipedia - Redis
[ ]  An introduction to Redis data types and abstractions
[ ]  Redis - Documentation
[ ]  Redis: What and Why?
[ ]  Tutorialspoint - Redis Tutorial
Learn about the open-source non-relational database management system called MongoDB.
[ ]  MongoDB
[ ]  MongoDB - Documentation
[ ]  MongoDB - University
[ ]  Tutorialspoint - MongoDB Tutorial
[ ]  Youtube - MongoDB In 30 Minutes
Learn how data modelling can help your database design.
[ ]  Chapter 5 Data Modelling
[ ]  Wikipedia - Database Model
[ ]  Wikipedia - Database Modelling
[ ]  What is Data Modelling?
[ ]  Data Modeling Definition
Learn how to model your data using ER diagrams.
[ ]  Tutorialspoint - DBMS, Data Models
[ ]  Entity Relationship Diagram
[ ]  Youtube - Entity Relationship Diagram Tutorial
[ ]  Wikipedia - Entity‚Äìrelationship model
[ ]  Entity Relationship Diagram
Learn how to figure out what types of keys to use and where to use them.
[ ]  Introduction to Database Keys
[ ]  7 Different Types of Database Keys
[ ]  Database Management: Keys
[ ]  Database Keys
[ ]  Youtube - Database Keys
Learn how to use indexing to speed up your database.
[ ]  Indexing in Databases
[ ]  Wikipedia - Database index
[ ]  Database Indexes Explained
[ ]  Indexing in Databases with EXAMPLES
[ ]  What Does Indexing Do?
[ ]  An in-depth look at Database Indexing
[ ]  Indexing your database data ‚Äî the easy way
Learn how to assure the accuracy and consistency of data.
[ ]  Wikipedia - Data Integrity
[ ]  What is Data Integrity and Why Is It Important?
[ ]  hat is Data Integrity?
[ ]  What is Data Integrity?
[ ]  Data Integrity
[ ]  Youtube - Database Design, Data Integrity
Learn how data normalization can help you decrease data redundancy and improve data integrity in your database.
[ ]  Wikipedia - Database normalization
[ ]  Database Normalization (Explained in Simple English)
[ ]  What is Normalization?
[ ]  Normal Forms in DBMS
[ ]  Database normalization
[ ]  Database Normalization Explained
Learn how to find functional dependencies to improve your database design.
[ ]  Full Functional Dependency in Database Normalization
[ ]  Stackoverflow - Functional dependency and normalization
[ ]  Tutorialspoint - DBMS, Normalization
[ ]  Functional Dependencies and Normalization
[ ]  DBMS Functional Dependency
[ ]  Wikipedia - Armstrong's axioms
[ ]  Armstrong's Axioms in Functional Dependency
Learn how normal forms can help you normalize your database.
[ ]  Wikipedia - Normal forms
[ ]  1NF, 2NF, 3NF and BCNF in Database
[ ]  Chapter 12 Normalization
[ ]  Wikipedia - Boyce‚ÄìCodd normal form
[ ]  Boyce-Codd Normal Form (BCNF)
[ ]  Wikipedia - Third normal form
Learn how transactions can group a set of database tasks into a single execution unit.
[ ]  Wikipedia - Database transaction
[ ]  Stackoverflow - What is a database transaction?
[ ]  Tutorialspoint - DBMS, Transaction
[ ]  Why do you need to know transactions?
[ ]  SQL Transactions
Learn about the ACID properties of transactions.
[ ]  A beginner‚Äôs guide to ACID
[ ]  DBMS Transaction Management: ACID Properties
[ ]  ACID Properties in DBMS
[ ]  Wikipedia - ACID
[ ]  ACID properties of transactions
[ ]  A Primer on ACID Transactions
[ ]  Stackoverflow - How do ACID and database transactions work?
Learn how to determine whether a schedule is serializable and leaves the database in a consistent state.
[ ]  Wikipedia - Serializability
[ ]  Transaction Serializability in DBMS
[ ]  DBMS Serializability
[ ]  View Serializability in DBMS Transactions
[ ]  Conflict Serializability in DBMS
Learn about locks and when they should be used.
[ ]  Wikipedia - Record locking
[ ]  Database Locking: What, why and how?
[ ]  A beginner‚Äôs guide to locking and lost updates
[ ]  Monitoring SQL Database Locks
[ ]  Implementation of Locking in DBMS
Learn about deadlocks and why they should be avoided.
[ ]  Deadlock in DBMS
[ ]  Wikipedia - Deadlock
[ ]  What is a Deadlock?
[ ]  Oracle - Deadlocks
[ ]  Deadlock Definition
[ ]  Introduction to Deadlock
[ ]  dev.to - Understanding SQL Server Deadlocks
Learn how to create a precedence graph to test for conflict serializability of a schedule.
[ ]  Wikipedia - Precedence graph
[ ]  Youtube - How to draw a precedence graph
[ ]  Precedence Graph to check Conflict Serializable Schedule
[ ]  Testing for conflict serializablity
[ ]  Precedence Graph, DBMS
Learn about the fundamental architectural server models.
[ ]  Server Architecture
[ ]  Youtube - Architectural model
[ ]  Architectural Model
[ ]  Distributed Systems: Models and Design
Learn about the client-server model.
[ ]  Wikipedia - Client-server model
[ ]  Client Server Architecture
[ ]  Understanding What Client Server Architecture Is All About
[ ]  Wikipedia - Client-server
[ ]  Client-server model (client-server architecture)
[ ]  Client-Server Model
[ ]  Learn more about Client-Server Model
Learn about the proxy-server model.
[ ]  Wikipedia - Proxy Server
[ ]  Youtube - What is a Proxy Server?
[ ]  What is a Proxy Server and How Does it Work?
[ ]  Proxy Server Definition
[ ]  What is a proxy server?
Learn about the peer-to-peer model.
[ ]  Wikipedia - Peer-to-peer
[ ]  Youtube - What is a Peer to Peer Network? 
[ ]  What's a Peer-to-Peer (P2P) Network?
[ ]  Peer-to-peer (P2P)
[ ]  Make a P2P connection in 10 minutes
Learn about middleware.
[ ]  Wikipedia - Middleware
[ ]  Middleware Definition
[ ]  Quora - Why is Middleware important?
[ ]  What is middleware?
[ ]  What is Middleware? Technology‚Äôs Go-to Middleman
Learn how computers communicate with eachother using the request-reply protocol.
[ ]  Wikipedia - Request Response
[ ]  Youtube - Event-Driven Architecture
[ ]  Request/Reply
[ ]  Enterprise Integration - Request-Reply
Learn about the UDP transport layer protocol.
[ ]  UDP (User Datagram Protocol)
[ ]  Wikipedia - User Datagram Protocol
[ ]  User Datagram Protocol (UDP)
[ ]  Youtube - Explained! UDP and TCP
[ ]  User Datagram Protocol
Learn about the TCP transport layer protocol.
[ ]  TCP (Transmission Control Protocol)
[ ]  Wikipedia - Transmission Control Protocol
[ ]  TCP/IP (Transmission Control Protocol/Internet Protocol)
[ ]  Services and Segment structure in TCP
[ ]  TCP and UDP in Transport Layer
Learn how an API can be designed to be RESTful.
[ ]  Wikipeia - Representational state transfer
[ ]  Learn REST: A RESTful Tutorial
[ ]  Youtube - REST API concepts and examples
[ ]  REST API Tutorial
[ ]  What is a REST API?
Learn about the CRUD operations.
[ ]  Wikipedia - Create, read, update and delete
[ ]  Codecademy - What is CRUD?
[ ]  What is the Difference between REST and CRUD?
[ ]  Youtube - Introduction to CRUD Operations
[ ]  REST was NEVER about CRUD
Learn about the Node.js web application framework called Express.
[ ]  Express
[ ]  Tutorialspoint - Express Framework
[ ]  Youtube - Express.js & Node.js Course for Beginners
[ ]  Understanding Node.js & Express.js fundamentals
[ ]  Wikipedia - Express.js
Learn how to use the GraphQL query language.
[ ]  GraphQL
[ ]  Youtube - Introduction to GraphQL
[ ]  Github - GraphQL Specification
[ ]  The Fullstack Tutorial for GraphQL
Learn about the GNU/Linux operating system
[ ]  Linux and the GNU System
[ ]  Wikipedia - GNU/Linux naming controversy
[ ]  What is GNU/Linux?
[ ]  GNU Linux
Learn how to use Docker.
[ ]  Docker
[ ]  Wikipedia - Docker (software)
[ ]  Docker for beginners
[ ]  What is Docker?
[ ]  Get Started, Part 1: Orientation and setup
Learn how to use SSH and learn how to connect to a device using an SSH client.
[ ]  Wikipedia - Secure Shell
[ ]  Secure Shell (SSH)
[ ]  SSH command in Linux with Examples
[ ]  How to Establish a Connection Using SSH


Licensed under MIT."
3045,"cotes2020,jekyll-theme-chirpy","A minimal, responsive, and powerful Jekyll theme for presenting professional writing.. 

  A minimal, responsive and feature-rich Jekyll theme for technical writing.

  [![Gem Version](https://img.shields.io/gem/v/jekyll-theme-chirpy?color=brightgreen)](https://rubygems.org/gems/jekyll-theme-chirpy)
  [![CI](https://github.com/cotes2020/jekyll-theme-chirpy/actions/workflows/ci.yml/badge.svg)](https://github.com/cotes2020/jekyll-theme-chirpy/actions/workflows/ci.yml)
  [![Codacy Badge](https://app.codacy.com/project/badge/Grade/4e556876a3c54d5e8f2d2857c4f43894)](https://www.codacy.com/gh/cotes2020/jekyll-theme-chirpy/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=cotes2020/jekyll-theme-chirpy&amp;utm_campaign=Badge_Grade)
  [![GitHub license](https://img.shields.io/github/license/cotes2020/jekyll-theme-chirpy.svg)](https://github.com/cotes2020/jekyll-theme-chirpy/blob/master/LICENSE)
  [![996.icu](https://img.shields.io/badge/link-996.icu-%23FF4D5B.svg)](https://996.icu)

  [**Live Demo ‚Üí**][demo]

  [![Devices Mockup](https://chirpy-img.netlify.app/commons/devices-mockup.png)][demo]



<details>
  <summary>
    <i>Click to view features</i>
  </summary>
  

Dark / Light Theme Mode

Localized UI language

Pinned Posts

Hierarchical Categories

Trending Tags

Table of Contents

Last Modified Date of Posts

Syntax Highlighting

Mathematical Expressions

Mermaid Diagram & Flowchart

Dark / Light Mode Images

Embed Videos

Disqus / Utterances / Giscus Comments

Search

Atom Feeds

Google Analytics

Page Views Reporting

SEO & Performance Optimization

  
</details>

To explore usage, development, and upgrade guide of the project, please refer to
the Wiki.
Welcome to report bugs, help improve the code or submit new features.
For more information, please see the ""Contributing Guidelines"".
This theme is mainly built with Jekyll ecosystem,
Bootstrap, Font Awesome and some other wonderful tools.
The avatar and favicon design come from Clipart Max.
Thanks to all the contributors. Also, folks who submitted issues
or unmerged PRs should not be forgotten. Because they reported bugs, shared ideas,
or inspired me to write more readable documentation.
Last but not least, thanks to JetBrains for providing the
Open Source Development license.
If you'd like to sponsor this project, the following options are available.



This work is published under MIT License."
3046,"shadowwalker,next-pwa","Zero config PWA plugin for Next.js, with workbox üß∞. This plugin is powered by workbox and other good stuff.
   
üëã Share your awesome PWA project üëâ here
Features
0Ô∏è‚É£ Zero config for registering and generating service worker
‚ú® Optimized precache and runtime cache
üíØ Maximize lighthouse score
üéà Easy to understand examples
üì¥ Completely offline support with fallbacks example üÜï
üì¶ Use workbox and workbox-window v6
üç™ Work with cookies out of the box
üîâ Default range requests for audios and videos
‚òï No custom server needed for Next.js 9+ example
üîß Handle PWA lifecycle events opt-in example
üìê Custom worker to run extra code with code splitting and typescript support example
üìú Public environment variables available in custom worker as usual
üêû Debug service worker with confidence in development mode without caching
üåè Internationalization (a.k.a I18N) with next-i18next example
üõ† Configurable by the same workbox configuration options for GenerateSW and InjectManifest
üöÄ Spin up a GitPod and try out examples in rocket speed
‚ö° Support blitz.js (simply add to blitz.config.js)
üî© (Experimental) precaching .module.js when next.config.js has experimental.modern set to true
NOTE 1 - next-pwa version 2.0.0+ should only work with next.js 9.1+, and static files should only be served through public directory. This will make things simpler.
NOTE 2 - If you encounter error TypeError: Cannot read property **'javascript' of undefined** during build, please consider upgrade to webpack5 in next.config.js.

If you are new to next.js or react.js at all, you may want to first checkout learn next.js or next.js document. Then start from a simple example or progressive-web-app example in next.js repository.
Update or create next.config.js with
After running next build, this will generate two files in your public: workbox-*.js and sw.js, which will automatically be served statically.
If you are using Next.js version 9 or newer, then skip the options below and move on to Step 2.
If you are using Next.js older than version 9, you'll need to pick an option below before continuing to Step 2.
Copy files to your static file hosting server, so that they are accessible from the following paths: https://yourdomain.com/sw.js and https://yourdomain.com/workbox-*.js.
One example is using Firebase hosting service to host those files statically. You can automate the copy step using scripts in your deployment workflow.
For security reasons, you must host these files directly from your domain. If the content is delivered using a redirect, the browser will refuse to run the service worker.
When an HTTP request is received, test if those files are requested, then return those static files.
Example server.js
The following setup has nothing to do with next-pwa plugin, and you probably have already set them up. If not, go ahead and set them up.
Create a manifest.json file in your public folder:
Add the following into _document.jsx or _app.tsx, in &lt;Head&gt;:
Tip: Put the viewport head meta tag into _app.js rather than in _document.js if you need it.
Offline fallbacks are useful when the fetch failed from both cache and network, a precached resource is served instead of present an error from browser.
To get started simply add a /_offline page such as pages/_offline.js or pages/_offline.jsx or pages/_offline.ts or pages/_offline.tsx. Then you are all set! When the user is offline, all pages which are not cached will fallback to '/_offline'.
Use this example to see it in action
next-pwa helps you precache those resources on the first load, then inject a fallback handler to handlerDidError plugin to all runtimeCaching configs, so that precached resources are served when fetch failed.
You can also setup precacheFallback.fallbackURL in your runtimeCaching config entry to implement similar functionality. The difference is that above method is based on the resource type, this method is based matched url pattern. If this config is set in the runtimeCaching config entry, resource type based fallback will be disabled automatically for this particular url pattern to avoid conflict.
There are options you can use to customize the behavior of this plugin by adding pwa object in the next config in next.config.js:
disable: boolean - whether to disable pwa feature as a whole
default: false
set disable: false, so that it will generate service worker in both dev and prod
set disable: true to completely disable PWA
if you don't need to debug service worker in dev, you can set disable: process.env.NODE_ENV === 'development'
register: boolean - whether to let this plugin register service worker for you
default to true
set to false when you want to handle register service worker yourself, this could be done in componentDidMount of your root app. you can consider the register.js as an example.
scope: string - url scope for pwa
default: basePath in next.config.js or /
set to /app so that path under /app will be PWA while others are not
sw: string - service worker script file name
default: /sw.js
set to another file name if you want to customize the output file name
runtimeCaching - caching strategies (array or callback function)
default: see the Runtime Caching section for the default configuration
accepts an array of cache entry objects, please follow the structure here
Note: the order of the array matters. The first rule that matches is effective. Therefore, please ALWAYS put rules with larger scope behind the rules with a smaller and specific scope.
publicExcludes - an array of glob pattern strings to exclude files in the public folder from being precached.
default: ['!noprecache/**/*'] - this means that the default behavior will precache all the files inside your public folder but files inside /public/noprecache folder. You can simply put files inside that folder to not precache them without config this.
example: ['!img/super-large-image.jpg', '!fonts/not-used-fonts.otf']
buildExcludes - an array of extra pattern or function to exclude files from being precached in .next/static (or your custom build) folder
default: []
example: [/chunks\/images\/.*$/] - Don't precache files under .next/static/chunks/images (Highly recommend this to work with next-optimized-images plugin)
doc: Array of (string, RegExp, or function()). One or more specifiers used to exclude assets from the precache manifest. This is interpreted following the same rules as Webpack's standard exclude option.
cacheStartUrl - whether to cache start url
default: true
dynamicStartUrl - if your start url returns different HTML document under different state (such as logged in vs. not logged in), this should be set to true.
default: true
effective when cacheStartUrl set to true
recommend: set to false if your start url always returns same HTML document, then start url will be precached, this will help to speed up first load.
dynamicStartUrlRedirect - if your start url redirect to another route such as /login, it's recommended to setup this redirected url for the best user experience.
default: undefined
effective when dynamicStartUrlRedirect set to true
fallbacks - config precached routes to fallback when both cache and network not available to serve resources.
if you just need a offline fallback page, simply create a /_offline page such as pages/_offline.js and you are all set, no configuration necessary
default: object
fallbacks.document - fallback route for document (page), default to /_offline if you created that page
fallbacks.image - fallback route for image, default to none
fallbacks.audio - fallback route for audio, default to none
fallbacks.video - fallback route for video, default to none
fallbacks.font - fallback route for font, default to none
cacheOnFrontEndNav - enable additional route cache when navigate between pages with next/link on front end. Checkout this example for some context about why this is implemented.
default: false
note: this improve user experience on special use cases but it also adds some overhead because additional network call, I suggest you consider this as a trade off.
~~subdomainPrefix: string - url prefix to allow hosting static files on a subdomain~~
~~default: """" - i.e. default with no prefix~~
~~example: /subdomain if the app is hosted on example.com/subdomain~~
deprecated, use basePath instead
reloadOnOnline - changes the behaviour of the app when the device detects that it has gone back ""online"" and has a network connection. Indicate if the app should call location.reload() to refresh the app.
default: true
customWorkerDir - customize the directory where next-pwa looks for a custom worker implementation to add to the service worker generated by workbox. For more information, check out the custom worker example.
default: worker
next-pwa uses workbox-webpack-plugin, other options which could also be put in pwa object can be found ON THE DOCUMENTATION for GenerateSW and InjectManifest. If you specify swSrc, InjectManifest plugin will be used, otherwise GenerateSW will be used to generate service worker.
next-pwa uses a default runtime cache.js
There is a great chance you may want to customize your own runtime caching rules. Please feel free to copy the default cache.js file and customize the rules as you like. Don't forget to inject the configurations into your pwa config in next.config.js.
Here is the document on how to write runtime caching configurations, including background sync and broadcast update features and more!
Use a convention like {command: 'doSomething', message: ''} object when postMessage to service worker. So that on the listener, it could do multiple different tasks using if...else....
When you are debugging service worker, constantly clean application cache to reduce some flaky errors.
If you are redirecting the user to another route, please note workbox by default only cache response with 200 HTTP status, if you really want to cache redirected page for the route, you can specify it in runtimeCaching such as options.cacheableResponse.statuses=[200,302].
When debugging issues, you may want to format your generated sw.js file to figure out what's really going on.
Force next-pwa to generate worker box production build by specify the option mode: 'production' in your pwa section of next.config.js. Though next-pwa automatically generate the worker box development build during development (by running next) and worker box production build during production (by running next build and next start). You may still want to force it to production build even during development of your web app for following reason:
Reduce logging noise due to production build doesn't include logging.
Improve performance a bit due to production build is optimized and minified.
If you just want to disable worker box logging while keeping development build during development, simply put self.__WB_DISABLE_DEV_LOGS = true in your worker/index.js (create one if you don't have one).
It is common developers have to use userAgent string to determine if users are using Safari/iOS/MacOS or some other platform, ua-parser-js library is a good friend for that purpose.
ServiceWorker, MessageChannel, & postMessage by Nicol√°s Bevacqua
MIT"
3047,"elegantapp,pwa-asset-generator","Automates PWA asset generation and image declaration. Automatically generates icon and splash screen images, favicons and mstile images. Updates manifest.json and index.html files with the generated images according to Web App Manifest specs and Apple Human Interface guidelines.. Automates PWA asset generation and image declaration. Automatically generates icon and splash screen images, favicons and mstile images. Updates manifest.json and index.html files with the generated images according to Web App Manifest specs and Apple Human Interface guidelines.


When you build a PWA with a goal of providing native-like experiences on multiple platforms and stores, you need to meet with the criteria of those platforms and stores with your PWA assets; icon sizes and splash screens. Such criteria are;
Google's Android platform respects Web App Manifest API specs, and it expects you to provide at least 2 icon sizes in your manifest file - https://web.dev/add-manifest/#icons ü§î
Apple's iOS currently doesn't support Web App Manifest API specs. You need to introduce custom html tags to set icons and splash screens to your PWA ü§î
You need to introduce a special html link tag with rel apple-touch-icon to provide icons for your PWA when it's added to home screen. Read more about it on Apple's Icon Guidelines and Safari Web Content Guide.
You need to introduce a special html link tag with rel apple-touch-startup-image to provide a splash screen for your PWA to display when it's opened and in the background. You need to create a splash screen image for every resolution on Apple's Launch Screen Guidelines and html tag with media attr for each image like &lt;link rel=""apple-touch-startup-image"" href=""temp/apple-splash-2048-2732.png"" media=""(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)""&gt;. Unfortunately, this requirement is not documented on the Safari Web Content Guide sufficiently.
Creating icon and splash screen images for all the platforms, maintaining sizes and quality for all and adding html tags for each image can be overwhelming. So, why not automate it? üí°
PWA Asset Generator automates the image generation in a creative way. Having Puppeteer at its core enables lots of possibilities.
Generates both icons and splash screens with optional --icon-only --splash-only --landscape-only and --portrait-only flags ‚ú®
Updates your manifest.json and index.html files automatically for declaring generated image assets üôå
Scrapes the latest specs from Apple Human Interface guidelines website via Puppeteer to make your PWA ready for all/recent iOS devices out there ü§ñ
Supports offline mode and uses static spec data when things go wrong with scraping üì¥
Updates static spec data before each release automatically and monitors spec changes everyday üîÑ
Uses the Chrome browser as it‚Äôs a canvas of your fav image editor. It uses a shell HTML on the fly as an art board and centers your logo before taking screenshots for each resolution via Puppeteer ü§ñ
You can provide your source in multiple formats; a local image file, a local HTML file, a remote image or HTML file üôå
When it‚Äôs an image source, it is centered over the background option you provide üåÖ
When it‚Äôs an HTML source, you can go as creative as you like; position your logo, use SVG filters, use variable fonts, use gradient backgrounds, use media queries while generating dark mode splash screens, use typography and etc. Your HTML file is rendered on Chrome before taking screenshots for each resolution üé®
Uses puppeteer-core instead of puppeteer and only installs Chromium if it doesn't exist on the system. Saves waste of ~110-150mb of disk space and many seconds from the world per each user üåé‚ö°Ô∏è
Supports dark mode splash screens on iOS! So, you can provide both light üåï and dark üåö splash screen images to differentiate your apps look & feel based on user preference üåô
Supports PWA maskable icons by declaring them in manifest file adaptively üñº
Supports flexible tag formatting and path customization options to comply with various development environments. You can adjust your output using single quotes --single-quotes, self-closing tags --xhtml, path prefixes --path and path overrides --path-override üìù
Supports generating classic web app icons such as favicons --favicon and Windows static tiles --mstile ‚è™
Read more about npx here.
pwa-asset-generator is not only a CLI. It's a CLI wrapper around a JavaScript module. It's possible to access the underlying API of the library as it's described in below example;
Any image format that a Chrome browser can render within an &lt;img&gt; HTML tag, is a compatible image input. It can be an icon, an SVG file, a JPEG or PNG logo, even a WebP image.
pwa-asset-generator uses a Chrome tab as an art board. Your input image is being scaled to fit the viewport of the target device resolution while generating splash screens. Since your input image is being scaled for generating splash screens, it's best advised to use a vector image - like an SVG file as an input.
There's no particular safe margin requirement as 10% padding is added around your image input by default with CSS. That being said, you can customize the padding as it's described in the next answer. The library uses a similar approach while generating icons too, with the same default padding 10% around the image input. See it in action here at this tweet to understand the concept.
The default value for the padding surrounding the image is 10%. But it's just a css padding value that you can configure and override yourself with -p --padding option.
You can use a more advanced padding value based on your taste and goal;
Larger logo: --padding ""calc(50vh - 20%) calc(50vw - 40%)""
Smaller logo: --padding ""calc(50vh - 5%) calc(50vw - 10%)""
You can create your own html input file which uses css media queries and provides different padding options based on breakpoints: https://material.io/design/layout/responsive-layout-grid.html#breakpoints
Although the default background color is transparent, there's another option that you need to use for generating transparent images: opaque.
You need to run your CLI command with --opaque false option in order to get the transparency; pwa-asset-generator logo.svg --opaque false --type png.
This might be confusing for some, but it's necessary to support the use of background values with alpha channels.
Default behaviour of the library is to generate a favicon along with app icons. So, it's not possible to generate one without other.
However, you can use this workaround to work with this edge case:
First, generate a favicon with --opaque false --icon-only --favicon --type png options.
Then, overwrite app icons with --background ""#FFF"" --icon-only options.
You need to execute two consequent commands in order to generate both dark mode and light mode splash screens for you PWA running on iOS.
Here's a pair of example commands that can be used for generating both modes;
As you can see from the demonstration of dark mode splash screens at this tweet, users have to re-add a PWA to the home screen in order to react to a system setting change.
An existing PWA on a home screen will not be able to recognize changed system settings for it's launch image. This is a limitation on iOS.
Even though they're deprecated, device-width and device-height media queries are still being used by iOS to declare splash screen images for web apps added to a home screen.
When it's an exact match with device's resolution, iOS displays the splash screen as a launch image on bookmarks / PWAs added to a home screen.
If you don't have HTML files in your project, and have a JSX/TSX files instead, you can either use --xhtml option or self-generate the meta tags.
The --xhtml option allows you to generate the required meta tags with self-closing them - &lt; /&gt;. This will allow copying generated tags directly to a JSX/TSX file.
Alternatively, you can use static data that this library exports to generate the required meta tags! pwa-asset-generator exposes the static Apple device specification data via it's module API. Here's an example JSX snippet;
pwa-asset-generator uses pretty for formatting your index.html file with a simple, opinionated output.
A recommended way to maintain the same format for your index.html file would be using Prettier and adding the following script to your project's package.json file.
Executing npm run format:index after using pwa-asset-generator assures the same format for your HTML file.
pwa-asset-generator depends on Puppeteer, and it's screenshot API for image generation. Puppeteer doesn't provide compression settings for PNG files for the time being.
However, you can use one of the lossless / lossy compression libraries - like pngquant to compress the generated PNG images.
In case of getting ""No usable sandbox!"" error on Linux, you need to enable system sandboxing.
PAG provides users the --no-sandbox option to tackle this issue. Note that there are limitations for this option; it can only be used on Linux platforms and HTML inputs are disabled for security purposes.
We're glad you enjoy PWA Asset Generator, and it saved you your precious time. Become one of the backers and help us maintain this project!"
3048,"dot-cafe,beam.cafe","üå† Blazing fast file transfer app focused on user-experience. Fastest way to share files without uploading them.. 
    



    Beam up something. Instantly. Anonymously.




  
  
  
  
  
  



    beam.cafe is a supercharged file-sharing application which lets you share files instantly, fully anonymously and direct.
    Beam Up Something!


I consider this project to have reached a final state.
Today I would do many things differently (more component based, less interdependent modules etc.) than I did a year / years ago.
I finished this project shortly after graduating high school and do not intent to actively work on it anymore. 
It was a great project and I learned many things from working on it though :)
It'll stay deployed until March 2022. Thereafter I'll take it down for security reason.
Update: Because of financial reasons I decided to take it down at the beginning of November 2021.  
beam.cafe knows very little about you - the names of your files, your IP and well, that's it.
If you send over a file it won't get saved somewhere on the server but instead will be streamed from your local machine over the server of beam.cafe directly to your peer.
You can always check who's downloading or streaming your files and, in case a link fell into the wrong hands, invalidate a file. Also, beam.cafe comes with a wide set of features:
üíª It's a PWA! You can install it on desktop and on your phone.
üå† Blazing fast - No need to upload your files to unknown servers, your files are served directly from your local machine.
üåä Streamable - Movies, large pictures or just a large audio-file? Stream it instead of downloading all of it!
üéÅ Tiny - Beam Cafe only uses libraries with a minimal footprint such as preact, graceful-ws and nanopop.
üîß Customizable - Many settings around security, appearance, notifications and more!
üåú Multi-themed - Light theme or dark theme? beam.cafe has both, even a high-contrast mode.
ü¶æ Accessible - High contrast theme paired with modern aria-labels will make using it an ease (PR's are welcome!).
‚ú® Modern - A modern design makes using beam.cafe a breeze.
You'll need both the frontend and backend to work on it:
The API will listen on port 8080 and the front-end will be served from 3000, make sure these ports are open on your machine.
beam.cafe can be set up using docker-compose:
Make sure to update the variables in your .env file before starting it.
The documentation about backend.json can be found here. The backend.json file will be merged with the default.json config file so it's okay to leave it empty ({}).
If you're using nginx you can check out this to see how to configure it properly.
If you're using apache feel free to open an issue / PR to get that added as well.
Go here to see how to set beam.cafe up manually.
... or just try it out!





Maintaining a beaming cafe costs time and, although very little thanks to concept of beam.cafe, money. If you want you can support me on GitHub, Patreon, or you could buy me a coffee.
You've found a bug, have an idea for a future or want to make a PR? Check out our contribution guidelines to get started!

Many thanks to  icons8 for the icons!
Special thanks to  Nathan S. for finding a name for this app!
"
3094,"webpack-contrib,babel-minify-webpack-plugin","[DEPRECATED] Babel Minify Webpack Plugin. 
  <!-- replace with accurate logo e.g from https://worldvectorlogo.com/ -->
  
    
  
  Babel Minify Webpack Plugin
  A Webpack Plugin for babel-minify - A babel based minifier


Install

Usage

Options

minifyOpts are passed on to babel-preset-minify. You can find a list of all available options in the package directory.
Default: {}
test: Test to match files against. Default: /\.js($|\?)/i
include: Files to include. Default: undefined
exclude: Files to exclude. Default: undefined
comments: Preserve Comments. Default: /^\**!|@preserve|@license|@cc_on/, falsy value to remove all comments. Accepts function, object with property test (regex), and values.
sourceMap: Configure a sourcemap style. Default: webpackConfig.devtool
parserOpts: Configure babel with special parser options.
babel: Pass in a custom babel-core instead. Default: require(""babel-core"")
minifyPreset: Pass in a custom babel-minify preset instead. Default: require(""babel-preset-minify"")
Why

You can also use babel-loader for webpack and include minify as a preset and should be much faster than using this - as babel-minify will operate on smaller file sizes. But then, why does this plugin exist at all? -
A webpack loader operates on single files and the minify preset as a webpack loader is going to consider each file to be executed directly in the browser global scope (by default) and will not optimize some things in the toplevel scope. To enable optimizations to take place in the top level scope of the file, use mangle: { topLevel: true } in minifyOptions.
When you exclude node_modules from being run through the babel-loader, babel-minify optimizations are not applied to the excluded files as it doesn't pass through the minifier.
When you use the babel-loader with webpack, the code generated by webpack for the module system doesn't go through the loader and is not optimized by babel-minify.
A webpack plugin can operate on the entire chunk/bundle output and can optimize the whole bundle and you can see some differences in minified output. But this will be a lot slower as the file size is usually really huge. So there is another idea where we can apply some optimizations as a part of the loader and some optimizations in a plugin.
Maintainers

<table>
  <tbody>
    <tr>
      <td align=""center"">
        
        
        Boopathi Rajaa
      </td>
      <td align=""center"">
        
        
        Juho Veps√§l√§inen
      </td>
      <td align=""center"">
        
        
        Joshua Wiens
      </td>
      <td align=""center"">
        
        
        Kees Kluskens
      </td>
      <td align=""center"">
        
        
        Sean Larkin
      </td>
    </tr>
  <tbody>
</table>"
3095,"YutHelloWorld,vortex-react","üê†  A react starter kit.  Redux or mobx, react-router-dom, webpack3, all is in.. Get start with React, Redux, RR4 üöÄ
Release 2.0.0 was build with create-react-app
üëâ Online  
<details>
<summary><strong>Table of Contents</strong></summary>

</details>

React
ES6
Redux
React-Router-Dom
Reactstrap + Bootstrap\^4.0.0-alpha.6 (UI)
Sass
Before the start, we recommend you read these documentation.
You can try ES6 and JSX in Babel REPL.
We recommend node 6.x + npm 5.x + yarn ^0.27.5„ÄÇ


Thank you to all the people who already contributed to vortex-react!
liadbiz"
3096,"zetachang,react-native-dotenv","A Babel preset let you import application configs from .env file (zero runtime dependency). Let you import environment variables from a .env file in React Native, don't need any native code integration.



Add the react-native-dotenv preset to your .babelrc file at the project root.
If you haven't got .babelrc set up for React Native, remember to install metro-react-native-babel-preset first.
Add your app configuration in an .env file.
Now you can import it in your .js file.
As you can see, it's implemented as a babel plugin. All referenced imported members are replaced as the values specified in the .env file.
The example above will get compiled as below.
Manually edit the file importing react-native-dotenv by either adding an empty line or whitespace will work.
Yes, simply create a separate .env.production file and the default release process of react-native will pickup the right config.
You can use the Release configuration to launch the Simulator. (Only supported in RN v0.39+)
Command‚åò + M to launch the developer menu in Android emulator.
Tap DevSettings.
Toggle JS Dev Mode.
Sadly, it's not available so far. One of the workaround is generating .env file before triggering RN's bundle script automatically using either shell script or your own custom build pipeline.
David Chang
@zetachang
MIT License, see LICENSE file for detail."
3097,"nylas,nylas-mail",":love_letter: An extensible desktop mail app built on the modern web.  Forks welcome!. Nylas Mail was an open-source mail client built on the modern web with Electron, React, and Flux. It was designed to be easy to extend, and many third-party plugins are available that add functionality to the client. 
‚ö†Ô∏è Nylas Mail was initially released and open-sourced in early 2015 and was maintained by Nylas until Spring 2017. While Nylas no longer supports Nylas Mail, you can download the latest release or build it from source. There are also several forks that are being actively developed and maintained.
Install Homebrew
Install NVM & Redis brew install nvm redis
Install Node 6 via NVM: nvm install 6
npm install
Install Node 6+ via NodeSource (trusted):
curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
sudo apt-get install -y nodejs
Install Redis locally sudo apt-get install -y redis-server redis-tools
benefit of letting us use subdomains.
npm install
npm run client: Starts the app
npm run test-client: Run the tests
npm run lint-client: Lint the source (ESLint + Coffeelint + LESSLint)
This repository contains the full source code to the Nylas Mail client and it's backend services. It is divided into the following packages:
Isomorphic Core: Shared code across local client and cloud servers
Client App: The main Electron app for Nylas Mail
mirrored to open source repo.
Client Sync: The local mailsync engine integreated in Nylas Mail
Client Private Plugins: Private Nylas Mail plugins (like SFDC)
Cloud API: The cloud-based auth and metadata APIs for N1
Cloud Core: Shared code used in all remote cloud services
Cloud Workers: Cloud workers for services like send later
See /packages for the separate pieces. Each folder in /packages is
designed to be its own stand-alone repository. They are all bundled here
for the ease of source control management.
In early 2016, the Nylas Mail team wrote extensive documentation for the app that was intended for plugin developers. This documentation lives on GitHub Pages and offers a great overview of the app's architecture and important classes. Here are some good places to get started:
The team has also given conference talks and published blog posts about the client:
When you download and build Nylas Mail from source it runs without its cloud components. The concept of a ""Nylas ID"" / subscription has been removed, and plugins that require server-side processing are disabled by default. (Plugins like Snooze, Send Later, etc.)
In order to use these plugins and get the full Nylas Mail experience, you need to deploy the backend infrastructure located in the cloud-* packages. Deploying these services is challenging because they are implemented as microservices and designed to be run at enterprise scale with Redis, Postgres, etc. Because these backend services must access your email account, it is also important to use security best-practices (at the very least, SSL, encryption at rest, and a partitioned VPC). For more information about building and deploying this part of the stack, check out the cloud-core README.
The Nylas Mail user interface is styled using CSS, which means it's easy to modify and extend. Nylas Mail comes stock with a few beautiful themes, and there are many more which have been built by community developers

Darkside (designed by Jamie Wilson)
Taiga (designed by Noah Buscher)
Ubuntu (designed by Ahmed Elhanafy)
Less Is More (designed by Alexander Adkins)
Download and unzip the repo
In Nylas Mail, select Developer &gt; Install a Package Manually...
Navigate to where you downloaded the theme and select the root folder. The theme is copied into the ~/.nylas-mail folder for your convinence
Select Change Theme... from the top level menu, and you'll see the newly installed theme. That's it!
Want to dive in more? Try creating your own theme!
Some plugins come pre-installed, and are a great starting points for creating your own:
Translate‚ÄîWorks with 10 languages
Quick Replies‚ÄîSend emails faster with templates
Emoji Keyboard‚ÄîInsert emoji by typing a colon (:) followed by the name of an emoji symbol
Note these are not tested or officially supported by Nylas, but we still think they are really cool! If you find bugs with them, please open GitHub issues on their individual project pages, not the Nylas Mail (N1) repo page. Thanks!
When you install packages, they're moved to ~/.nylas-mail/packages, and Nylas Mail runs apm install on the command line to fetch dependencies listed in the package's package.json
There are several forks of Nylas Mail that you should check out. If you're just learning about Nylas Mail, it is highly recommended you use one of these instead.
Mailspring - Significant rewrite by one of the original authors focused on performance and cloud plugins
Nylas Mail Lives - Community effort to fix bugs and improve the client! (Seeking Maintainers)"
3098,"jamiebuilds,babel-handbook",":blue_book: A guided handbook on how to use Babel and how to create plugins for Babel.. Written by Jamie Kyle
A guided handbook on how to use Babel and how to create plugins for Babel.
Translations
Request another translation
If you are reading a non-English translation of this document you will find a
number of English words that are programming concepts. If these were translated
to other languages there would be a lack of consistency and fluency when reading
about them. In many cases you will find the literal translation followed by the
English term in parenthesis (). For example: Abstract Syntax Trees (ASTs).
Special thanks to @sebmck,
@hzoo,
@jdalton,
@abraithwaite,
@robey, and others for their
amazing help on this handbook."
3099,"ben-rogerson,twin.macro","ü¶π‚Äç‚ôÇÔ∏è Twin blends the magic of Tailwind with the flexibility of css-in-js (emotion, styled-components, stitches and goober) at build time.. 
  
    
  
  
    
  



    The <em>magic</em> of Tailwind with the <em>flexibility</em> of css-in-js.
    
    
    
    
    
    üåü New: Twin v3 now includes full Tailwind plugin support and moreRelease notes ‚Üí
    
    
    
      
    


Style jsx elements using Tailwind classes:
Nest Twin‚Äôs tw import within a css prop to add conditional styles:
Or mix sass styles with the css import:
const Input = ({ hasHover }) => (
  <input css={[twborder, hasHover && hoverStyles]} />
)
And clone and style existing components:
Switch to the styled import to add conditional styling:
Or use backticks to mix with sass styles:
const Input = () => <StyledInput hasBorder />
üëå Simple imports - Twin collapses imports from common styling libraries into a single import:
üêπ Adds no size to your build - Twin converts the classes you‚Äôve used into css objects using Babel and then compiles away, leaving no runtime code
üç± Apply variants to multiple classes at once with variant groups
üõé Helpful suggestions for mistypings - Twin chimes in with class and variant values from your Tailwind config:
üñåÔ∏è Use the theme import to add values from your tailwind config
See more examples using the theme import ‚Üí
üí° Works with the official tailwind vscode plugin - Avoid having to look up your classes with auto-completions straight from your Tailwind config - setup instructions ‚Üí
üí• Add !important to any class with a trailing or leading bang!
Add !important to multiple classes with bracket groups:
Twin works with many modern stacks - take a look at these examples to get started:
Parcelstyled-components / emotion / emotion (ts)
Webpackstyled-components (ts) / emotion (ts)
Preactstyled-components / emotion / goober
Create React Appstyled-components / emotion
Vitestyled-components (ts) / emotion (ts)
Jest / React Testing Librarystyled-components (ts) / emotion (ts) üéâ
Gatsbystyled-components / emotion
Next.jsstyled-components / styled-components (ts) / emotion / emotion (ts) / stitches (ts)
Blitz.jsemotion (ts)
Storybookstyled-components (ts) / emotion
yarn/npm workspaces + Next.js + shared ui componentsstyled-components
Yarn workspaces + Rollupemotion
Drop into our Discord server for announcements, help and styling chat.

üî• Docs: The prop styling guide - A must-read guide to level up on prop styling
üî• Docs: The styled component guide - A must-read guide on getting productive with styled components
Docs: Options - Learn about the features you can tweak via the twin config
Plugin: babel-plugin-twin - Use the tw and css props without adding an import
Example: Advanced theming - Add custom theming the right way using css variables
Example: React + Tailwind breakpoint syncing - Sync your tailwind.config.js breakpoints with react
Helpers: Twin VSCode snippets - For devs who want to type less
Plugins: VSCode plugins - VScode plugins that work with twin
Article: ""Why I Love Tailwind"" by Max Stoiber - Max (inventor of styled-components) shares his thoughts on twin
This project stemmed from babel-plugin-tailwind-components so a big shout out goes to Brad Cornes for the amazing work he produced. Styling with tailwind.macro has been such a pleasure."
3171,"notion-enhancer,notion-enhancer","an enhancer/customiser for the all-in-one productivity workspace notion.so. an enhancer/customiser for the all-in-one productivity workspace notion.so (app)
read the docs online"
3172,"floccusaddon,floccus",":cloud: Sync your bookmarks privately across browsers and devices. Sync your bookmarks privately across browsers an devices
  
üîñ Syncs your real, native browser bookmarks directly
‚ò∏ Sync via Nextcloud Bookmarks, Google Drive or any WebDAV-compatible service
‚öõ Use any browser that supports Web extensions (e.g. Firefox, Chrome, Edge, Opera, Brave, Vivaldi, ...; Safari not yet)
üì≤ Install the floccus Android app to access your bookmarks on your phone
üíº Create as many sync profiles as you need
üöö Control sync strategy (i.e. uni- or bidirectional), ‚è≥ sync interval and üìÇ synced folder
üì¶ Easily export your configuration
üîí Keep your credentials secure with an encryption passphrase

If you'd like to support the creation and maintenance of this software, please consider donating. :)
If you don't know how to start with Floccus, read these guides.
If you need help, talk to us on gitter, matrix (#marcelklehr_floccus:gitter.im), in the official Nextcloud Bookmarks talk channel, or drop me a mail! :wave:
Emojis: MySQL doesn't support emojis out of the box, so if you're syncing to nextcloud and getting Error code 500 from nextcloud, check the nextcloud log for SQL errors and proceed as explained in the nextcloud docs if you get charset errors.
If you need help sorting out problems, try the gitter chat room: https://gitter.im/marcelklehr/floccus
Is this a good idea? I think so. If you'd like to know more, check out the considerations file
Cirrus floccus is a type of cloud, that <del>can sync your browser data</del> looks very nice.
This project exists thanks to all the people who contribute.
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><sub><b>Bernd Wechner</b></sub>üêõ ü§î ‚ö†Ô∏è</td>
    <td align=""center""><sub><b>jlbprof</b></sub>üíª üêõ ‚ö†Ô∏è</td>
    <td align=""center""><sub><b>TeutonJon78</b></sub>üêõ ü§î</td>
    <td align=""center""><sub><b>Scott P.</b></sub>üêõ ü§î</td>
    <td align=""center""><sub><b>Lantizia</b></sub>üêõ ü§î</td>
    <td align=""center""><sub><b>TCB13</b></sub>üíª ü§î üîå üåç</td>
    <td align=""center""><sub><b>gohrner </b></sub>üêõ</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Tank-Missile</b></sub>üêõ</td>
    <td align=""center""><sub><b>Torsten Kurbad</b></sub>üêõ</td>
    <td align=""center""><sub><b>gerroon</b></sub>üêõ</td>
    <td align=""center""><sub><b>Matija Nalis</b></sub>ü§î üí¨ üêõ</td>
    <td align=""center""><sub><b>Marcel Klehr</b></sub>üí¨ üíª üñã üé® üìñ üöá üöß üìÜ</td>
    <td align=""center""><sub><b>binsee</b></sub>üíª</td>
    <td align=""center""><sub><b>Marc Shapiro</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>Marllus Lustosa</b></sub>üíª</td>
    <td align=""center""><sub><b>Izzy</b></sub>üêõ ü§î üöá</td>
    <td align=""center""><sub><b>sunjam</b></sub>ü§î ‚ö†Ô∏è</td>
    <td align=""center""><sub><b>Danny Siminiuk</b></sub>‚ö†Ô∏è ü§î</td>
    <td align=""center""><sub><b>Seirade</b></sub>ü§î üêõ</td>
    <td align=""center""><sub><b>pinpontitit</b></sub>ü§î üêõ üíª</td>
    <td align=""center""><sub><b>Motte</b></sub>üíª üêõ</td>
  </tr>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the all-contributors specification.
All contributions, code, feedback and strategic advice, are welcome. If you have a question you can contact me directly via email or simply open an issue on the repository. I'm also always happy for people helping me test new features -- see the issues for announcements of beta versions.
Translations can now be provided over at transifex.

Clone this repository.
Install the latest LTS version of node.js.
In the root of your floccus repo, run npm install.
Run npm run build to build.
Find out more on how to develop browser extensions here: https://extensionworkshop.com/.
For building the android app you'll need Android Studio
Open the android/ folder in Android studio and build the App like any other Android app.
npm run build and npm run watch will push changes to android/ as necessary.
npm run build
Run the following to automatically compile changes as you make them:
npm run watch
npm run build-release
Thank you to all our backers! üôè [Become a backer]

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor]










(c) Marcel Klehr
MPL-2.0 (see LICENSE.txt)"
3173,"ClearURLs,Addon","ClearURLs is an add-on based on the new WebExtensions technology and will automatically remove tracking elements from URLs to help protect your privacy.. 


  
ClearURLs is an add-on based on the new WebExtensions technology and is optimized for Firefox and Chrome based browsers.
This extension will automatically remove tracking elements from URLs to help protect your privacy when browsing the Internet, 
which is regularly updated by us and can be found here.
Many websites use tracking elements in the URL (e.g. https://example.com?utm_source=newsletter1&amp;utm_medium=email&amp;utm_campaign=sale) to mark your online activity. 
All that tracking code is not necessary for a website to be displayed or work correctly and can therefore be removed‚Äîthat is exactly what ClearURLs does.
Another common example are Amazon URLs. If you search for a product on Amazon you will see a very long URL, such as: 
Indeed most of the above URL is tracking code. Once ClearURLs has cleaned the address, it will look like this:
https://www.amazon.com/dp/exampleProduct
Removes tracking from URLs automatically in the background
Blocks some common ad domains (optional)
Has a built-in tool to clean up multiple URLs at once
Supports redirection to the destination, without tracking services as middleman
Adds an entry to the context menu so that links can be copied quickly and cleanly
Blocks hyperlink auditing, also known as ping tracking (see also this article)
Prevents ETag tracking
Prevents tracking injection over history API (see also: The replaceState() method)
Prevents Google from rewriting the search results (to include tracking elements)
Prevents Yandex from rewriting the search results (to include tracking elements)
Reasoning for needed permissions can be found under here.

Here you can download the packed files for the Firefox- and Chrome-Dev:
If you want to test whether ClearURLs works correctly on your system, you can go to this test page: https://test.clearurls.xyz/
If you have any suggestions or complaints, please create an issue.
Note: If you have any suggestions or complaints regarding the rules, please create an issue in this repo or email us rules.support (at) clearurls.xyz (this mail will automatically create a new issue in this repo).
You want to help translating ClearURLs into many languages? ‚Äì Nice
You can choose between two options to contribute. You can create a merge request, or you can use the POEditor to translate ClearURLs.
Hint: The description field in the translation files are only an information for what the translation is used. 
It is not necessary to translate the description field; in the most cases it is empty.
If you want to create a merge request, you must open the path _locales/en/messages.json in the ClearURLs repo 
and translate the english terms into terms of your language. Once you have translated all the terms, you make a pull request of your translation. 
Please push your translation into the folder _locales/{language code}/messages.json.
Uroute used ClearURLs to filter/clean URL before launching browser
Scrub used ClearURLs to filter/clean URLs as cog for the Red Discord bot
Unalix small, dependency-free, fast Python package for removing tracking fields from URLs
Unalix-nim small, dependency-free, fast Nim package and CLI tool for removing tracking fields from URLs
UnalixAndroid simple Android app that removes link masking/tracking and optionally resolves shortened links
ClearURLs is part of Mozilla's recommended extensions program
Reasoning for needed permissions you can find under this wiki page.
We use some third-party scripts in our add-on. The authors and licenses are listed below.
WebExtension browser API Polyfill |
Copyright by Mozilla |
MPL-2.0
Bootstrap v4.3.1 |
Copyright 2011-2016 Twitter, Inc. |
MIT
jQuery v3.6.0 |
Copyright JS Foundation and other contributors |
MIT
DataTables v1.10.20 |  Copyright (c) 2008-2015 SpryMedia Limited | MIT
Pickr v1.7.0 | Copyright (c) 2018 - 2020 Simon Reinisch |
MIT
Font Awesome v5.12.0 | Copyright (c) @fontawesome |
Font Awesome Free License"
3174,"argos-ci,jest-puppeteer","Run tests using Jest & Puppeteer üé™‚ú®. jest-puppeteer is a Jest preset that enables end-to-end testing with Puppeteer. It offers a straightforward API for launching new browser instances and interacting with web pages through them.
Add jest-puppeteer as a preset in your Jest configuration file ""jest.config.js"":
Note
Ensure you remove any existing testEnvironment options from your Jest configuration
To write a test, create a new file with a .test.js extension, and include your test logic using the page exposed by jest-puppeteer. Here's a basic example:
Argos is a powerful visual testing tool that allows to review visual changes introduced by each pull request.
By integrating Argos with jest-puppeteer, you can easily capture and compare screenshots to ensure the visual consistency of your application.
To get started with Argos, follow these steps:
Install the packages
Take screenshots during E2E tests with: await argosScreenshot(page, ""/screenshots/myScreenshot.png"")
Include the following command in your CI workflow to upload screenshots to Argos: npx @argos-ci/cli upload ./screenshots
After installing Argos, learn how to review visual changes in your development workflow.
In this example, an already-running instance of Chrome is used by passing the active WebSocket endpoint to the connect option. This can be particularly helpful when connecting to a Chrome instance running in the cloud.
It can be challenging to write integration tests with the Puppeteer API, as it is not specifically designed for testing purposes.
To simplify the writing tests process, the expect-puppeteer API offers specific matchers when making expectations on a Puppeteer Page.
Here are some examples:
Debugging tests can sometimes be challenging. Jest Puppeteer provides a debug mode that allows you to pause test execution and inspect the browser. To activate debug mode, call jestPuppeteer.debug() in your test:
Remember that using jestPuppeteer.debug() will pause the test indefinitely. To resume, remove or comment out the line and rerun the test. To prevent timeouts during debugging, consider increasing Jest's default timeout:
Jest Puppeteer allows to start a server before running your tests suite and will close it after the tests end. To automatically start a server, you have to add a server section to your jest-puppeteer.config.cjs file and specify the command to start server and a port number:
Other options are documented in jest-dev-server.
To customize Puppeteer instance, you can update the jest-puppeteer.config.cjs file.
For example, to launch Firefox browser instead of default chrome, you can set the launch.product property to ""firefox"".
You can also update the browser context to use the incognito mode to have isolation between instances. Read jest-puppeteer-environment readme to learn more about the possible options.
Default config values:
If you are using custom setup files, you must include expect-puppeteer in your setup to access the matchers it offers. Add the following to your custom setup file:
Be cautious when setting your custom setupFilesAfterEnv and globalSetup, as it may result in undefined globals. Using multiple projects in Jest is one way to mitigate this issue.
If you need to use your custom environment, you can extend the PuppeteerEnvironment.
First, create a JavaScript file for your custom environment:
Next, assign your JavaScript file's path to the testEnvironment property in your Jest configuration:
Your custom setup and teardown will now be executed before and after each test suite, respectively.
You can create custom globalSetup and globalTeardown methods. For this purpose, jest-environment-puppeteer exposes the setup and teardown methods, allowing you to integrate them with your custom global setup and teardown methods, as shown in the example below:
Then assigning your js file paths to the globalSetup and globalTeardown property in your Jest configuration.
Now, your custom globalSetup and globalTeardown will be executed once before and after all test suites, respectively.
Jest Puppeteer employs cosmiconfig for configuration file support, allowing you to configure Jest Puppeteer in various ways (listed in order of precedence):
A ""jest-puppeteer"" key in your package.json file.
A .jest-puppeteerrc file in either JSON or YAML format.
A .jest-puppeteerrc.json, .jest-puppeteerrc.yml, .jest-puppeteerrc.yaml, or .jest-puppeteerrc.json5 file.
A .jest-puppeteerrc.js, .jest-puppeteerrc.cjs, jest-puppeteer.config.js, or jest-puppeteer.config.cjs file that exports an object using module.exports.
A .jest-puppeteerrc.toml file.
By default, the configuration is searched for at the root of the project. To define a custom path, use the JEST_PUPPETEER_CONFIG environment variable.
Ensure that the exported configuration is either a config object or a Promise that returns a config object.
Provides access to the Puppeteer Browser.
Provides access to a Puppeteer Page that is opened at the start (most commonly used).
Provides access to a browser context that is instantiated when the browser is launched. You can control whether each test has its own isolated browser context using the browserContext option in your configuration file.
A helper for making Puppeteer assertions. For more information, refer to the documentation.
Put test in debug mode.
Jest is suspended (no timeout)
A debugger instruction to Chromium, if Puppeteer has been launched with { devtools: true } it will pause
To reset global.page before each test, use the following code:
To reset global.browser, global.context, and global.page before each test, use the following code:
TypeScript is natively supported from v8.0.0, for previous versions, you have to use community-provided types.
Most Continuous Integration (CI) platforms restrict the number of threads you can use. If you run multiple test suites, the tests may timeout due to Jest attempting to run Puppeteer in parallel, and the CI platform being unable to process all parallel jobs in time.
A solution to this issue is to run your tests serially in a CI environment. Users have found that running tests serially in such environments can result in up to 50% performance improvements.
You can achieve this through the CLI by running:
Alternatively, you can set Jest to use a maximum number of workers that your CI environment supports:
Jest Puppeteer provides five global variables: browser, page, context, puppeteerConfig, and jestPuppeteer.
To prevent errors related to these globals, include them in your ESLint configuration:
Special thanks to Fumihiro Xue for providing an excellent Jest example."
3175,"mherrmann,selenium-python-helium","Selenium-python but lighter: Helium is the best Python library for web automation.. Selenium-python is great for web
automation. Helium makes it easier to use. For example:

Under the hood, Helium forwards each call to Selenium. The difference is that
Helium's API is much more high-level. In Selenium, you need to use HTML IDs,
XPaths and CSS selectors to identify web page elements. Helium on the other hand
lets you refer to elements by user-visible labels. As a result, Helium scripts
are typically 30-50% shorter than similar Selenium scripts. What's more, they
are easier to read and more stable with respect to changes in the underlying web
page.
Because Helium is simply a wrapper around Selenium, you can freely mix the two
libraries. For example:
So in other words, you don't lose anything by using Helium over pure Selenium.
In addition to its more high-level API, Helium simplifies further tasks that are
traditionally painful in Selenium:
Web driver management: Helium ships with its own copies of ChromeDriver
and geckodriver so you don't need to download and put them on your PATH.
iFrames: Unlike Selenium, Helium lets you interact with elements inside
nested iFrames, without having to first ""switch to"" the iFrame.
Window management. Helium notices when popups open or close and focuses /
defocuses them like a user would. You can also easily switch to a window by
(parts of) its title. No more having to iterate over Selenium window handles.
Implicit waits. By default, if you try click on an element with Selenium
and that element is not yet present on the page, your script fails. Helium by
default waits up to 10 seconds for the element to appear.
Explicit waits. Helium gives you a much nicer API for waiting for a
condition on the web page to become true. For example: To wait for an element
to appear in Selenium, you would write:
With Helium, you can write:
To get started with Helium, you need Python 3 and Chrome or Firefox.
If you already know Python, then the following command should be all you need:
Otherwise - Hi! I would recommend you create a virtual environment in the
current directory. Any libraries you download (such as Helium) will be placed
there. Enter the following into a command prompt:
This creates a virtual environment in the venv directory. To activate it:
Then, install Helium using pip:
Now enter python into the command prompt and (for instance) the commands in
the animation at the top of this page (from helium import *, ...).
I've compiled a cheatsheet that quickly teaches you all
you need to know to be productive with Helium.
The documentation for this project can be found
here.
I have too little spare time to maintain this project for free. If you'd like
my help, please go to my web site to ask about my
consulting rates. Otherwise, unless it is very easy for me, I will usually not
respond to emails or issues on the issue tracker. I will however accept and
merge PRs. So if you add some functionality to Helium that may be useful for
others, do share it with us by creating a Pull Request. For instructions, please
see Contributing below.
I find Helium extremely useful in my own projects and feel it should be more
widely known. Here's how you can help with this:
Star this project on GitHub.
Tell your friends and colleagues about it.
Share it on other social media
Write a blog post about Helium.
With this, I think we can eventually make Helium the de-facto standard for web
automation in Python.
Pull Requests are very welcome. Please follow the same coding conventions as the
rest of the code, in particular the use of tabs over spaces. Also, read through my
PR guidelines.
Doing this will save you (and me) unnecessary effort.
Before you submit a PR, ensure that the tests still work:
This runs the tests against Chrome. To run them against Firefox, set the
environment variable TEST_BROWSER to firefox. Eg. on Mac/Linux:
On Windows:
If you do add new functionality, you should also add tests for it. Please see
the tests/ directory for what this might look like.
I (Michael Herrmann) originally developed Helium in 2013 for a Polish IT startup
called BugFree software. (It could be that you have seen Helium before at
https://heliumhq.com.) We shut down the company at the end of 2019 and I felt it
would be a shame if Helium simply disappeared from the face of the earth. So I
invested some time to modernize it and bring it into a state suitable for open
source.
Helium used to be available for both Java and Python. But because I now only
use it from Python, I didn't have time to bring the Java implementation up to
speed as well. Similarly for Internet Explorer: Helium used to support it, but
since I have no need for it, I removed the (probably broken) old implementation."
3176,"qawolf,qawolf","üê∫ Create browser tests 10x faster. 

QA Wolf - Ship confidently

We take testing off your plate. We build complete coverage in 4 months and keep you there. You get unlimited, parallel test runs on our infrastructure, and we guarantee zero flakes. It‚Äôs like magic but it‚Äôs QA Wolf.


<a align=""center"" href=""https://twitter.com/intent/tweet?text=%F0%9F%90%BA+QA+Wolf%3A+Ship+confidently&url=https%3A%2F%2Fqawolf.com"">


At QA Wolf, we‚Äôre building the magical QA experience that we wanted when we were managing engineering teams. With zero effort on your part, we get you to 80% automated test coverage in 4 months ‚Äî and keep you there. 
We plan. You‚Äôll get a test matrix covering every user flow in your web app, from happy path to edge case and everything in between. 
We automate. Using vanilla, open source Microsoft Playwright so that there‚Äôs no vendor lock-in ‚Äî you own every test. 
We run. Every test in full parallel, on our own infrastructure, as many times as you want ‚Äî no extra charge. 
We triage. When tests fail, we have full-time human QA engineers review the tests. We clear out all the noise of flaky tests and give you clear, human-verified bug reports. 
We maintain. Flaky and broken tests are fixed automatically, 24-hours a day. 
We integrate. Into your CI/CD, your issue tracker, your messaging app ‚Äî we‚Äôll feel like part of your team. 
It‚Äôs truly everything you could possibly want from automated testing. And it‚Äôs half the cost of an in-house QA engineer. 
Let‚Äôs talk about your testing needs and how QA Wolf can help you stop bugs from reaching production without waiting hours or days for QA. Find a time that works for you.
Keep any eye out for new job openings here. 
We use several open source tools and want to thank everyone who contributes to those great projects, particularly Microsoft's Playwright library."
3177,"seleniumbase,SeleniumBase","Python framework for browser automation and testing.. <!-- SeleniumBase Docs -->

<meta property=""og:site_name"" content=""SeleniumBase"">
<meta property=""og:title"" content=""SeleniumBase: Python Web Automation and E2E Testing"" />
<meta property=""og:description"" content=""Fast, easy, and reliable Web/UI testing with Python."" />
<meta property=""og:keywords"" content=""Python, pytest, selenium, webdriver, testing, automation, seleniumbase, framework, dashboard, recorder, reports, screenshots"">
<meta property=""og:image"" content=""https://seleniumbase.github.io/cdn/img/mac_sb_logo_5b.png"" />
<link rel=""icon"" href=""https://seleniumbase.github.io/img/logo7.png"" />
SeleniumBase



Create reliable end-to-end browser tests with Python

    


üöÄ Start |
üè∞ Features |
üìö Examples |
üéõÔ∏è Options |
üå† Scripts |
üì± Phone

üìò APIs |
 üî° Formats |
üìä Dashboard |
üî¥ Recorder |
üóæ Locales |
üåê Grid

üéñÔ∏è GUI |
üì∞ TestPage |
üóÇÔ∏è CasePlans |
üïµÔ∏è Inspector |
üß¨ Hybrid |
üíª Farm

üëÅÔ∏è How |
üöù Migrate |
‚ôªÔ∏è Templates |
üöâ NodeGUI |
üì∂ Charts |
üöé Tours

ü§ñ CI/CD |
üïπÔ∏è JSMgr |
üåè Translator |
üéûÔ∏è Presenter |
üõÇ Boxes |
üñºÔ∏è Visual



<a id=""multiple_examples"">
<b>Example:</b> test_coffee_cart.py from ./examples/

(<code>--demo</code> mode slows down tests and highlights actions)



Here's a preview of that test:
<details>
<summary> ‚ñ∂Ô∏è How is <b>SeleniumBase</b> different from raw Selenium? (<b>click to expand</b>)</summary>


üí° SeleniumBase is a Python framework for browser automation and testing. SeleniumBase uses Selenium/WebDriver APIs, and incorporates test-runners such as <code>pytest</code>, <code>nosetests</code>, and <code>behave</code> to provide organized structure, test discovery, test execution, test state (<i>eg. passed, failed, or skipped</i>), and command-line options for changing default settings (<i>such as choosing the browser to use</i>). With raw Selenium, you would need to set up your own options-parser for configuring tests from the command-line.

üí° With raw Selenium, commands that use selectors need to specify the type of selector (eg. <code>""css selector"", ""button#myButton""</code>). With SeleniumBase, there's auto-detection between CSS Selectors and XPath, which means you don't need to specify the type of selector in your commands (<i>but optionally you could</i>).

üí° SeleniumBase methods often perform multiple actions in a single method call. For example, <code>self.type(selector,text)</code> does the following:1. Waits for the element to be visible.2. Waits for the element to be interactive.3. Clears the text field.4. Types in the new text.5. Presses Enter/Submit if the text ends in ""\n"".With raw Selenium, those actions require multiple method calls.

üí° SeleniumBase uses default timeout values when not set:
‚úÖ<code>self.click(""button"")</code>
With raw Selenium, methods would fail instantly (<i>by default</i>) if an element needed more time to load:
‚ùå<code>self.driver.find_element(by=""css selector"", value=""button"").click()</code>
(Reliable code is better than unreliable code.)

üí° SeleniumBase lets you change the explicit timeout values of methods:
‚úÖ<code>self.click(""button"",timeout=10)</code>
With raw Selenium, that requires more code:
‚ùå<code>WebDriverWait(driver,10).until(EC.element_to_be_clickable(""css selector"", ""button"")).click()</code>
(Simple code is better than complex code.)

üí° SeleniumBase gives you clean error output when a test fails. With raw Selenium, error messages can get very messy.

üí° SeleniumBase gives you the option to generate a dashboard and reports for tests. It also saves screenshots from failing tests to the <code>./latest_logs/</code> folder. Raw Selenium does not have these options out-of-the-box.

üí° SeleniumBase includes desktop GUI apps for running tests, such as <b>SeleniumBase Commander</b> for <code>pytest</code>, and <b>SeleniumBase Behave GUI.</b>

üí° SeleniumBase has its own Recorder & Test Generator that can create tests from manual browser actions. SeleniumBase also has many other useful tools and console scripts for getting things done quickly. (<i>See the documentation for more details!</i>)


</details>

<details>
<summary> ‚ñ∂Ô∏è Learn about different ways of writing tests (<b>click to expand</b>)</summary>


üìòüìù An example test with the <b>BaseCase</b> class. Runs with <b>pytest</b> or <b>nosetests</b>. (Learn more)

üìóüìù An example test with the <b><code>sb</code></b> <code>pytest</code> fixture. Runs with <b>pytest</b>.

üìôüìù An example test with the <b><code>SB</code></b> Context Manager. Runs with pure <b><code>python</code></b>.

üìïüìù An example test with <b>behave-BDD</b> Gherkin structure. Runs with <b><code>behave</code></b>. (Learn more)


</details>

<a id=""python_installation"">
 Set up Python & Git:

üîµ Add <b>Python</b> and <b>Git</b> to your System PATH.
üîµ Using a Python virtual env is recommended.
<a id=""install_seleniumbase"">
 Install SeleniumBase:

You can install seleniumbase from GitHub or PyPI:
üîµ Installing seleniumbase from a GitHub clone:
To upgrade an existing install from a GitHub clone:
üîµ Installing seleniumbase from PyPI:
(Add --upgrade OR -U to upgrade SeleniumBase.)
(Add --force-reinstall to upgrade indirect libraries.)
(Use pip3 if multiple versions of Python are present.)
To upgrade an existing install from PyPI:
üîµ Type seleniumbase or sbase to verify that SeleniumBase was installed successfully:
 Downloading web drivers:

‚úÖ SeleniumBase automatically downloads web drivers as needed, such as chromedriver, edgedriver, and geckodriver.
‚úÖ To manually download a webdriver, see Console Scripts OR Webdriver Installation.
<a id=""basic_example_and_usage"">
 Basic Example & Usage:

üîµ If you've cloned SeleniumBase, you can run tests from the examples/ folder.
Here's my_first_test.py:

(Uses --chrome by default.)

<b>Here's the code for my_first_test.py:</b>

By default, CSS Selectors are used for finding page elements.
If you're new to CSS Selectors, games like CSS Diner can help you learn.
For more reading, here's an advanced guide on CSS attribute selectors.
<a id=""common_methods"">
 Here are some common SeleniumBase methods that you might find in tests:

üîµ For the complete list of SeleniumBase methods, see: <b>Method Summary</b>
<a id=""fun_facts"">
 Fun Facts / Learn More:

‚úÖ SeleniumBase automatically handles common WebDriver actions such as launching web browsers before tests, saving screenshots during failures, and closing web browsers after tests.

‚úÖ SeleniumBase lets you customize test runs from the command-line.

‚úÖ SeleniumBase uses simple syntax for commands. Example:

SeleniumBase tests can be run with <code>pytest</code> or <code>nosetests</code>. (There's also a behave BDD format.)
‚úÖ <code>pytest</code> includes automatic test discovery. If you don't specify a specific file or folder to run, <code>pytest</code> will automatically search through all subdirectories for tests to run based on the following criteria:

Python files that start with test_ or end with _test.py.
Python methods that start with test_.
With a SeleniumBase pytest.ini file present, you can modify default discovery settings. The Python class name can be anything because seleniumbase.BaseCase inherits unittest.TestCase, which triggers autodiscovery.
‚úÖ You can do a pre-flight check to see which tests would get discovered by <code>pytest</code> before the real flight:

‚úÖ You can be more specific when calling <code>pytest</code> on a file:

‚úÖ No More Flaky Tests! SeleniumBase methods automatically wait for page elements to finish loading before interacting with them (<i>up to a timeout limit</i>). This means <b>you no longer need random <span><code>time.sleep()</code></span> statements</b> in your scripts.

‚úÖ SeleniumBase supports all major browsers and operating systems:
<b>Browsers:</b> Chrome, Edge, Firefox, and Safari.
<b>Systems: </b>Linux/Ubuntu, macOS, and Windows.

‚úÖ SeleniumBase works on all popular CI/CD platforms:
     

‚úÖ SeleniumBase includes an automated/manual hybrid solution called <b>MasterQA</b>, which speeds up manual testing by having automation perform all the browser actions while the manual tester handles validation.

‚úÖ For a full list of SeleniumBase features, Click Here.

<a id=""detailed_instructions"">
 Detailed Instructions:

<a id=""seleniumbase_demo_mode"">
üîµ <b>Demo Mode</b> helps you see what a test is doing. If a test is moving too fast for your eyes, run it in <b>Demo Mode</b>, which pauses the browser briefly between actions, highlights page elements being acted on, and displays assertions:
üîµ You can use the following calls in your scripts to help you debug issues:
üîµ To pause an active test that throws an exception or error, (and keep the browser window open while Debug Mode begins in the console), add --pdb as a pytest option:
(pdb console commands: n, c, s => next, continue, step).
<a id=""pytest_options"">
üîµ Here are some useful command-line options that come with <code>pytest</code>:
<a id=""new_pytest_options"">
üîµ SeleniumBase provides additional <code>pytest</code> command-line options for tests:
(See the full list of command-line option definitions here. For detailed examples of command-line options, see customizing_test_runs.md)
üîµ During test failures, logs and screenshots from the most recent test run will get saved to the latest_logs/ folder. Those logs will get moved to archived_logs/ if you add --archive_logs to command-line options, or have ARCHIVE_EXISTING_LOGS set to True in settings.py, otherwise log files with be cleaned up at the start of the next test run. The test_suite.py collection contains tests that fail on purpose so that you can see how logging works.
An easy way to override seleniumbase/config/settings.py is by using a custom settings file.
Here's the command-line option to add to tests: (See examples/custom_settings.py)
--settings_file=custom_settings.py
(Settings include default timeout values, a two-factor auth key, DB credentials, S3 credentials, and other important settings used by tests.)
üîµ To pass additional data from the command-line to tests, add --data=""ANY STRING"".
Inside your tests, you can use self.data to access that.
 Test Directory Configuration:

üîµ When running tests with pytest, you'll want a copy of pytest.ini in your root folders. When running tests with nosetests, you'll want a copy of setup.cfg in your root folders. These files specify default configuration details for tests. Folders should also include a blank __init__.py file, which allows your tests to import files from that folder.
üîµ sbase mkdir DIR creates a folder with config files and sample tests:
That new folder will have these files:
<b>ProTip‚Ñ¢:</b> You can also create a boilerplate folder without any sample tests in it by adding -b or --basic to the sbase mkdir command:
That new folder will have these files:
Of those files, the pytest.ini config file is the most important, followed by a blank __init__.py file. There's also a setup.cfg file (only needed for nosetests). Finally, the requirements.txt file can be used to help you install seleniumbase into your environments (if it's not already installed).
 Log files from failed tests:

Let's try an example of a test that fails:
You can run it from the examples/ folder like this:
üîµ You'll notice that a logs folder, ""latest_logs"", was created to hold information about the failing test, and screenshots. During test runs, past results get moved to the archived_logs folder if you have ARCHIVE_EXISTING_LOGS set to True in settings.py, or if your run tests with --archive-logs. If you choose not to archive existing logs, they will be deleted and replaced by the logs of the latest test run.
 The SeleniumBase Dashboard:

üîµ The --dashboard option for pytest generates a SeleniumBase Dashboard located at dashboard.html, which updates automatically as tests run and produce results. Example:

üîµ Additionally, you can host your own SeleniumBase Dashboard Server on a port of your choice. Here's an example of that using Python 3's http.server:
üîµ Now you can navigate to http://localhost:1948/dashboard.html in order to view the dashboard as a web app. This requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (Use CTRL+C to stop the http server.)
üîµ Here's a full example of what the SeleniumBase Dashboard may look like:

<a id=""creating_visual_reports"">
 Generating Test Reports:

<h4><b>Pytest Reports:</b></h4>

üîµ Using --html=report.html gives you a fancy report of the name specified after your test suite completes.

üîµ When combining pytest html reports with SeleniumBase Dashboard usage, the pie chart from the Dashboard will get added to the html report. Additionally, if you set the html report URL to be the same as the Dashboard URL when also using the dashboard, (example: --dashboard --html=dashboard.html), then the Dashboard will become an advanced html report when all the tests complete.
üîµ Here's an example of an upgraded html report:

If viewing pytest html reports in Jenkins, you may need to configure Jenkins settings for the html to render correctly. This is due to Jenkins CSP changes.
You can also use --junit-xml=report.xml to get an xml report instead. Jenkins can use this file to display better reporting for your tests.
<h4><b>Nosetest Reports:</b></h4>

The --report option gives you a fancy report after your test suite completes.

(NOTE: You can add --show-report to immediately display Nosetest reports after the test suite completes. Only use --show-report when running tests locally because it pauses the test run.)
<h4><b>Behave Dashboard & Reports:</b></h4>

(The behave_bdd/ folder can be found in the examples/ folder.)

You can also use --junit to get .xml reports for each Behave feature. Jenkins can use these files to display better reporting for your tests.
<h4><b>Allure Reports:</b></h4>

See: https://docs.qameta.io/allure/
SeleniumBase no longer includes allure-pytest as part of installed dependencies. If you want to use it, install it first:
Now your tests can create Allure results files, which can be processed by Allure Reports.
 Using a Proxy Server:

If you wish to use a proxy server for your browser tests (Chromium or Firefox), you can add --proxy=IP_ADDRESS:PORT as an argument on the command line.
If the proxy server that you wish to use requires authentication, you can do the following (Chromium only):
SeleniumBase also supports SOCKS4 and SOCKS5 proxies:
To make things easier, you can add your frequently-used proxies to PROXY_LIST in proxy_list.py, and then use --proxy=KEY_FROM_PROXY_LIST to use the IP_ADDRESS:PORT of that key.
 Changing the User-Agent:

üîµ If you wish to change the User-Agent for your browser tests (Chromium and Firefox only), you can add --agent=""USER AGENT STRING"" as an argument on the command-line.
 Handling Pop-Up / Pop Up Alerts:

üîµ <code>self.accept_alert()</code> automatically waits for and accepts alert pop-ups. <code>self.dismiss_alert()</code> automatically waits for and dismisses alert pop-ups. On occasion, some methods like <code>self.click(SELECTOR)</code> might dismiss a pop-up on its own because they call JavaScript to make sure that the <code>readyState</code> of the page is <code>complete</code> before advancing. If you're trying to accept a pop-up that got dismissed this way, use this workaround: Call <code>self.find_element(SELECTOR).click()</code> instead, (which will let the pop-up remain on the screen), and then use <code>self.accept_alert()</code> to accept the pop-up (more on that here). If pop-ups are intermittent, wrap code in a try/except block.
 Building Guided Tours for Websites:

üîµ Learn about SeleniumBase Interactive Walkthroughs (in the examples/tour_examples/ folder). It's great for prototyping a website onboarding experience.
<a id=""utilizing_advanced_features"">

 Production Environments & Integrations:


<details>
<summary> ‚ñ∂Ô∏è Here are some things you can do to set up a production environment for your testing. (<b>click to expand</b>)</summary>

<ul>
<li>You can set up a Jenkins build server for running tests at regular intervals. For a real-world Jenkins example of headless browser automation in action, check out the SeleniumBase Jenkins example on Azure or the SeleniumBase Jenkins example on Google Cloud.</li>

<li>You can use the Selenium Grid to scale your testing by distributing tests on several machines with parallel execution. To do this, check out the SeleniumBase selenium_grid folder, which should have everything you need, including the Selenium Grid ReadMe, which will help you get started.</li>

<li>If you're using the SeleniumBase MySQL feature to save results from tests running on a server machine, you can install MySQL Workbench to help you read & write from your DB more easily.</li>

<li>If you're using AWS, you can set up an Amazon S3 account for saving log files and screenshots from your tests. To activate this feature, modify settings.py with connection details in the S3 section, and add <code>--with-s3-logging</code> on the command-line when running your tests.</li>
</ul>

Here's an example of running tests with some additional features enabled:

</details>

<a id=""detailed_method_specifications"">
 Detailed Method Specifications and Examples:

üîµ Navigating to a web page: (and related commands)
<b>ProTip‚Ñ¢:</b> You can use the <code>self.get_page_source()</code> method with Python's <code>find()</code> command to parse through HTML to find something specific. (For more advanced parsing, see the BeautifulSoup example.)
üîµ Clicking:
To click an element on the page:
ProTip‚Ñ¢: In most web browsers, you can right-click on a page and select Inspect Element to see the CSS selector details that you'll need to create your own scripts.
üîµ Typing Text:
<code>self.type(selector, text)</code>  # updates the text from the specified element with the specified value. An exception is raised if the element is missing or if the text field is not editable. Example:
You can also use <code>self.add_text()</code> or the WebDriver <code>.send_keys()</code> command, but those won't clear the text box first if there's already text inside.
üîµ Getting the text from an element on a page:
üîµ Getting the attribute value from an element on a page:
üîµ Asserting existence of an element on a page within some number of seconds:
(NOTE: You can also use: self.assert_element_present(ELEMENT))
üîµ Asserting visibility of an element on a page within some number of seconds:
(NOTE: The short versions of that are self.find_element(ELEMENT) and self.assert_element(ELEMENT). The find_element() version returns the element.)
Since the line above returns the element, you can combine that with .click() as shown below:
ProTip‚Ñ¢: You can use dots to signify class names (Ex: div.class_name) as a simplified version of div[class=""class_name""] within a CSS selector. 
You can also use *= to search for any partial value in a CSS selector as shown below:
üîµ Asserting visibility of text inside an element on a page within some number of seconds:
(NOTE: self.find_text(TEXT, ELEMENT) and self.wait_for_text(TEXT, ELEMENT) also do this. For backwards compatibility, older method names were kept, but the default timeout may be different.)
üîµ Asserting Anything:
üîµ Useful Conditional Statements: (with creative examples)
‚ùì is_element_visible(selector):  (visible on the page)
‚ùì is_element_present(selector):  (present in the HTML)
‚ùì is_text_visible(text, selector):  (text visible on element)

<details>
<summary> ‚ñ∂Ô∏è Click for a longer example of <code>is_text_visible():</code></summary>

</details>

‚ùì is_link_text_visible(link_text):
üîµ Switching Tabs:
If your test opens up a new tab/window, you can switch to it. (SeleniumBase automatically switches to new tabs that don't open to <code>about:blank</code> URLs.)

üîµ <b>ProTip‚Ñ¢:</b> iframes follow the same principle as new windows - you need to specify the iframe if you want to take action on something in there
üîµ Executing Custom jQuery Scripts:
jQuery is a powerful JavaScript library that allows you to perform advanced actions in a web browser.
If the web page you're on already has jQuery loaded, you can start executing jQuery scripts immediately.
You'd know this because the web page would contain something like the following in the HTML:

üîµ It's OK if you want to use jQuery on a page that doesn't have it loaded yet. To do so, run the following command first:

<details>
<summary> ‚ñ∂Ô∏è Here are some examples of using jQuery in your scripts. (<b>click to expand</b>)</summary>

(Most of the above commands can be done directly with built-in SeleniumBase methods.)

</details>

üîµ Some websites have a restrictive Content Security Policy to prevent users from loading jQuery and other external libraries onto their websites. If you need to use jQuery or another JS library on such a website, add --disable-csp on the command-line.

<details>
<summary> ‚ñ∂Ô∏è In this example, JavaScript creates a referral button on a page, which is then clicked. (<b>click to expand</b>)</summary>

(Due to popular demand, this traffic generation example has been included in SeleniumBase with the <code>self.generate_referral(start_page, end_page)</code> and the <code>self.generate_traffic(start_page, end_page, loops)</code> methods.)

</details>

üîµ Using deferred asserts:
Let's say you want to verify multiple different elements on a web page in a single test, but you don't want the test to fail until you verified several elements at once so that you don't have to rerun the test to find more missing elements on the same page. That's where deferred asserts come in. Here's the example:

<code>deferred_assert_element()</code> and <code>deferred_assert_text()</code> will save any exceptions that would be raised.
To flush out all the failed deferred asserts into a single exception, make sure to call <code>self.process_deferred_asserts()</code> at the end of your test method. If your test hits multiple pages, you can call <code>self.process_deferred_asserts()</code> before navigating to a new page so that the screenshot from your log files matches the URL where the deferred asserts were made.
üîµ Accessing Raw WebDriver:
If you need access to any commands that come with standard WebDriver, you can call them directly like this:

(In general, you'll want to use the SeleniumBase versions of methods when available.)
üîµ Retrying failing tests automatically:
You can use <code>--reruns=NUM</code> to retry failing tests that many times. Use <code>--reruns-delay=SECONDS</code> to wait that many seconds between retries. Example:

You can use the <code>@retry_on_exception()</code> decorator to retry failing methods. (First import: <code>from seleniumbase import decorators</code>). To learn more about SeleniumBase decorators, click here.

 Wrap-Up

<b>Congratulations on getting started with SeleniumBase!</b>

<b>If you see something, say something!</b>
   



<b>If you like SeleniumBase, star us! ‚≠ê</b>


https://github.com/mdmintz


 





<span></span>
<span></span>
<span></span>



"
3178,"QasimWani,LeetHub","Automatically sync your leetcode solutions to your github account - top 5 trending GitHub repository. 
  
  
  LeetHub - Automatically sync your code to GitHub.
  
  



  
    
  
  
    
  
  
    
  
  
    
  
  
    
  
  
    
  



  
    
  

  [![Chrome](https://user-images.githubusercontent.com/53124886/111952712-34f12300-8aee-11eb-9fdd-ad579a1eb235.png)](https://chrome.google.com/webstore/detail/leethub/aciombdipochlnkbpcbgdpjffcfdbggi) [![Firefox](https://user-images.githubusercontent.com/53124886/126341427-4a4e57aa-767a-467e-83d2-b31fa3564441.png)](https://addons.mozilla.org/en-US/firefox/addon/leethub/)



A chrome extension that automatically pushes your code to GitHub when you pass all tests on a Leetcode problem. 


 <strong>1.</strong> Recruiters <em>want</em> to see your contributions to the Open Source community, be it through side projects, solving algorithms/data-structures, or contributing to existing OS projects.
As of now, GitHub is developers' #1 portfolio. LeetHub just makes it much easier (autonomous) to keep track of progress and contributions on the largest network of engineering community, GitHub.

 <strong>2.</strong> There's no easy way of accessing your leetcode problems in one place! 
Moreover, pushing code manually to GitHub from Leetcode is very time consuming. So, why not just automate it entirely without spending a SINGLE additional second on it? 

<h4> Your LeetHub portfolio could look like  this!  </h4>
It's as simple as:
<ol>
  <li>After installation, launch LeetHub.</li>
  <li>Click on ""authorize with GitHub"" button to automatically set up your account with LeetHub.</li>
  <li>Setup an existing/new repository with LeetHub (private by default) by clicking ""Get Started"" button.</li>
  <li>Begin Leetcoding! To view your progress, simply click on the extension!</li>
</ol>


The coding interview is arguably the most important part of your interview process, given you get the interview first. As someone who's received multiple internship offers from Fortune 100 companies, getting the interview in the first place is not easy!
And that's what LeetHub is supposed to do: indirectly improving your coding skills while improving your portfolio to ACE that interview at <em>insert_name_here</em>!



<ol>
  <li>Fork this repo and clone to your local machine</li>
  <li>Go to chrome://extensions </li>
  <li>Enable Developer mode by toggling the switch on top right corner</li>
  <li>Click 'Load unpacked'</li>
  <li>Select the entire LeetHub folder</li>
  <li>Run ""npm run setup"" to install the developer dependencies</li>
</ol>

Other npm commands available:"
3179,"hardkoded,puppeteer-sharp","Headless Chrome .NET API. Puppeteer Sharp is a .NET port of the official Node.JS Puppeteer API.
Slack channel #puppeteer-sharp
As Puppeteer-Sharp is a NetStandard 2.0 library, the minimum platform versions are .NET Framework 4.6.1 and .NET Core 2.0. Read more.
If you have issues running Chrome on Linux, the Puppeteer repo has a great troubleshooting guide.
X-server is required on Linux.
Some of the best ways to contribute are to try things out file bugs and fix issues.
If you have an issue or a question:
Ask a question on Stack Overflow.
File a new issue.
See this document for information on how to contribute.
<!-- snippet: ScreenshotAsync -->
<a id='snippet-screenshotasync'>
<sup>snippet source | anchor</sup>
<!-- endSnippet -->

You can also change the view port before generating the screenshot
<!-- snippet: SetViewportAsync -->
<a id='snippet-setviewportasync'>
<sup>snippet source | anchor</sup>
<!-- endSnippet -->

<!-- snippet: PdfAsync -->
<a id='snippet-pdfasync'>
<sup>snippet source | anchor</sup>
<!-- endSnippet -->

<!-- snippet: SetContentAsync -->
<a id='snippet-setcontentasync'>
<sup>snippet source | anchor</sup>
<!-- endSnippet -->

<!-- snippet: Evaluate -->
<a id='snippet-evaluate'>
<sup>snippet source | anchor</sup>
<!-- endSnippet -->

Support us with a monthly donation and help us continue our activities. Become a backer.





Thanks to JetBrains for a community Resharper license to use on this project."
3244,"webextension-toolbox,webextension-toolbox","Small CLI toolbox for cross-browser WebExtension development. 

 





Small cli toolbox for creating cross-browser WebExtensions.
If you want to get started quickly check out the yeoman generator for this project.
chrome (auto polyfilled)
opera (auto polyfilled)
firefox
edge
Works with react.js out of the box!
Run $ npm i react react-dom and you are ready to go.
The build task creates bundles for:
Firefox (.xpi)
Chrome (.zip)
Opera (.crx)
Edge (.zip)
Validates your manifest.json while compiling.
Uses default fields (name, version, description) from your package.json
Allows you to define vendor specific manifest keys.
manifest.json 
If the vendor is chrome it compiles to:
If the vendor is opera it compiles to:
else it compiles to:
The webextension standard is currently only supported by firefox and edge. This toolbox adds the necessary polyfills for chrome and opera. 
This way many webextension apis will work in chrome and opera out of the box. 
In addition to that, this toolbox comes with babel-preset-env.
Compiles the extension via webpack to dist/&lt;vendor&gt;.
Watches all extension files and recompiles on demand.
Reloads extension or extension page as soon something changed.
Sets process.env.NODE_ENV to development.
Sets process.env.VENDOR to the current vendor.
Note: For Microsoft Edge, it is not allowed to connect to localhost with WebSocket.
You need to disable ""Include all local (intranet) sites not listed in other zones"" under ""Internet options"":

or using Registry Editor (regedit):
Compile extension via webpack to dist/&lt;vendor&gt;.
Minifies extension Code.
Sets process.env.NODE_ENV to production.
Sets process.env.VENDOR to the current vendor.
Packs extension to packages.
Always use the webextension browser api. Webextension-Toolbox will polyfill it for you in chrome and opera.
All javascript files located at the root of your ./app or ./app/scripts directory will create a seperate bundle.
In order to extend our usage of webpack, you can define a function that extends its config via webextension-toolbox-config.js.
As WebExtension Toolbox uses webpack‚Äôs devtool feature under the hood, you can also customize the desired devtool with the --devtool argument.
For example, if you have problems with source maps on Firefox, you can try the following command:
Please see Issue #58 for more information on this
For testing WebExtension Toolbox, we rely mainly on Azure Pipelines and Travis.
We try to target every platform our users use: Linux, macOS or Windows
Regarding Node.js versions, we try to target what would our users would use:
Last version in Maintenance LTS (currentl: v8)
Active LTS (currently v10)
Current (currently: v11)
Currently, passing all tests is required to merge a Pull Request
<table>
  <tr>
    <th>CI/CD vendor</th>
    <th>Operating System</th>
    <th>NodeJS versions</th>
  </tr>
  <tr>
    <td rowspan=""3"">Azure Pipelines</td>
    <td>Ubuntu (ubuntu-16.04)</td>
    <td rowspan=""3"">
      <ul>
        <li>8.x</li>
        <li>10.x</li> 
        <li>11.x</li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>macOS (macOS-10.13)</td>
  </tr>
  <tr>
    <td>Windows (win1803)</td>
  </tr>
  <tr>
    <td>Travis CI</td>
    <td>Ubuntu Xenial 16.04</td>
    <td>
      <ul>
        <li>lts (10.x)</li>
        <li>current (11.x)</li>
      </ul>
    </td>
  </tr>
</table>
In other words, every pull request goes through on 11 test environment
If want to develop browser extensions for Firefox only web-ext might be a better fit for you, since it supports, extension signing, better manifest validation and auto mounting.
Nevertheless if you want to develop cross browser extensions using
the same development experience in every browser
a single codebase
react
and custom webpack configuration
webextension-toolbox might be your tool of choice. 
Copyright 2018 Henrik Wenz
This project is free software released under the MIT license."
3245,"wilfredwee,photon-australis","Bringing sexy curves back to Firefox Photon.. Bringing sexy curves back to Firefox Photon.









Because all you sexy Firefox users deserve something sexier than ugly, blocky square. (Who wants to be square, right?)
Since Firefox 57+, the only way to customize your browser UI is through userChrome.css. Learn more here.
Rough instructions:
Go to your Firefox browser, type about:config in your url bar.
Search for toolkit.legacyUserProfileCustomizations.stylesheets and set it to true
Type about:profiles in your url bar.
Under the profile that is in use (The message is something like This is the profile in use and it cannot be deleted.), click Open Folder on the Root Directory row.
If that folder does not have a chrome folder, create a folder, name it chrome.
In the chrome folder, create a file named userChrome.css
Determine what Firefox theme you are using:
Click the icon with 3 lines on the top right corner to open the context Menu.
Select Customize.
At the bottom left of your screen, select Themes.
Choose or determine which theme you want to use, they can either be Dark, Default, or Light.
Copy and paste the code that matches your Firefox theme: Dark, Default, Light into your userChrome.css file that you have created.
WARNING: Newer versions of Firefox with Mojave or Windows 10 Dark Mode will cause Firefox to use the Dark theme by default. In this case, you should use the userChrome-dark.css theme.
Restart Firefox and enjoy some sexy curves :D
Fret not! Please create an issue and I'll see what I can do.
Please follow these instructions created by a helpful Redditor: https://www.reddit.com/r/FirefoxCSS/comments/bzd5dz/help_with_australis_css/"
3246,"gorhill,uBlock","uBlock Origin - An efficient blocker for Chromium and Firefox. Fast and lean.. 
<sub>

</sub>
uBlock Origin (uBO)


<sub><b>BEWARE!</b> uBO is (and has always been) COMPLETELY UNRELATED to the website <code>ublock.org</code>.</sub>









uBO is NOT an ""ad blocker""; it is a wide-spectrum content blocker for Chromium and Firefox with CPU and memory efficiency as primary features. After a new installation, the default behavior of uBO is to block ads, trackers, and malware sites through EasyList, EasyPrivacy, Peter Lowe's Blocklist, Online Malicious URL Blocklist, and uBO's filter lists.
Privacy Policy
Visit the wiki for documentation.
For support, questions, or help, visit /r/uBlockOrigin.
uBO is NOT an ""ad blocker""; it is a wide-spectrum content blocker. uBO blocks ads through the EasyList filter syntax and extends the syntax to work with custom rules and filters. Furthermore, the advanced mode allows uBO to work in default-deny mode, which will cause all 3rd-party network requests to be blocked by default unless allowed by the user.
It is important to note that using a blocker is NOT theft. Do not fall for this creepy idea. The ultimate logical consequence of blocking = theft is the criminalization of the inalienable right to privacy.
Ads, ""unintrusive"" or not, are just the visible portion of the privacy-invading means entering your browser when you visit most sites. uBO's primary goal is to help users neutralize these privacy-invading methods in a way that welcomes those users who do not wish to use more technical, involved means (such as uMatrix).
EasyList, EasyPrivacy, Peter Lowe's Blocklist, Online Malicious URL Blocklist, and uBO's filter lists are default enabled when you install uBO. Many other lists are available to block trackers, analytics, and more. Hosts files are also supported.
Once you install uBO, you may easily unselect any preselected filter lists if you think uBO blocks too much. For reference, Adblock Plus installs with only EasyList, ABP filters, and Acceptable Ads enabled by default.
Required Permissions
Chrome Web Store
Microsoft Edge Add-ons (Published by: Nicole Rolls)
Opera Add-ons
Development Build
uBO should be compatible with any Chromium-based browser.
Firefox Add-ons
Development Build
Do NOT use any other content blocker concurrently with uBO to benefit from its higher efficiency. uBO will perform as well as or better than most of the other popular ad blockers. Other blockers can prevent uBO's privacy or anti-blocker-defusing features from working correctly.
Do NOT use uBO along with other similarly-purposed blockers.
Manual Installation
Deploying uBO
Releases Page
Manifesto
Free. Open-source. For users by users. No donations sought.
Without the preset filter lists, this extension is nothing. If you ever want to contribute something, think about the people working hard to maintain the filter lists you are using, which were made available to use by all for free.
You can help contribute by translating uBO on Crowdin.
GPLv3
<!----------------------------------------------------------------------------->

<!---------------------------------[ Internal ]-------------------------------->

<!----------------------------------[ Badges ]--------------------------------->"
3247,"mozilla-mobile,firefox-ios","Firefox for iOS. Download on the App Store.
This branch works with Xcode 14.1.0, Swift 5.7 and supports iOS 13 and above.
Please note: Both Intel and M1 macs are supported üéâ and we use swift package manager.
Please make sure you aim your pull requests in the right direction.
For bug fixes and features for a specific release, use the version branch.
We encourage you to participate in this open source project. We love Pull Requests, Issue Reports, Feature Requests or any kind of positive contribution. Please read the Mozilla Community Participation Guidelines and our Firefox for iOS contributing guidelines first.
Chat: See #fx-ios for general discussion, or open a Github discussion.
Issues: File a new issue ‚Ä¢ Existing bugs
Want to contribute on the codebase but don't know where to start? Here is a list of issues that are contributor friendly. 
Install the latest Xcode developer tools from Apple.
Install, Brew, Node, and a Python3 virtualenv for localization scripts:
Clone the repository:
Install Node.js dependencies, build user scripts and update content blocker:
Open Client.xcodeproj in Xcode.
Make sure to select the Fennec scheme in Xcode.
Select the destination device you want to build on.
Run the app with Cmd + R or by pressing the build and run button.
‚ö†Ô∏è Important: In case you have dependencies issues with SPM, please try the following:
Xcode -> File -> Packages -> Reset Package Caches
User Scripts (JavaScript injected into the WKWebView) are compiled, concatenated, and minified using webpack. User Scripts to be aggregated are placed in the following directories:
This reduces the total possible number of User Scripts down to four. The compiled output from concatenating and minifying the User Scripts placed in these folders resides in /Client/Assets and are named accordingly:
AllFramesAtDocumentEnd.js
AllFramesAtDocumentStart.js
MainFrameAtDocumentEnd.js
MainFrameAtDocumentStart.js
To simplify the build process, these compiled files are checked-in to this repository. When adding or editing User Scripts, these files can be re-compiled with webpack manually. This requires Node.js to be installed, and all required npm packages can be installed by running npm install in the project's root directory. User Scripts can be compiled by running the following npm command in the root directory of the project:"
3248,"microsoft,playwright-python","Python version of the Playwright testing and automation library.. Playwright is a Python library to automate Chromium, Firefox and WebKit browsers with a single API. Playwright delivers automation that is ever-green, capable, reliable and fast. See how Playwright is better.
https://playwright.dev/python/docs/intro
More comfortable in another programming language? Playwright is also available in
Java"
3249,"arkenfox,user.js","Firefox privacy, security and anti-tracking: a comprehensive user.js template for configuration and hardening. A user.js is a configuration file that can control Firefox settings - for a more technical breakdown and explanation, you can read more in the wiki

The arkenfox user.js is a template which aims to provide as much privacy and enhanced security as possible, and to reduce tracking and fingerprinting as much as possible - while minimizing any loss of functionality and breakage (but it will happen).
Everyone, experts included, should at least read the wiki, as it contains important information regarding a few user.js settings. There is also an interactive current release, thanks to icpantsparti2.
Note that we do not recommend connecting over Tor on Firefox. Use the Tor Browser if your threat model calls for it, or for accessing hidden services.
Also be aware that the arkenfox user.js is made specifically for desktop Firefox. Using it as-is in other Gecko-based browsers can be counterproductive, especially in the Tor Browser.
Literally thousands of sources, references and suggestions. Many thanks, and much appreciated."
3318,"iorate,ublacklist","Blocks specific sites from appearing in Google search results. Blocks specific sites from appearing in Google search results
Chrome Web Store / Firefox Add-ons / App Store (for macOS and iOS, thanks to Group-Leafy)
This extension prevents the sites you specify from appearing in Google search results.
You can add rules on search result pages, or on sites to be blocked by clicking the toolbar icon. Rules can be specified either by match patterns (e.g. *://*.example.com/*) or by regular expressions (e.g. /example\.(net|org)/).
You can synchronize rulesets across devices via cloud storage. At the moment, Google Drive and Dropbox are supported.
You can also subscribe to public rulesets. Some subscriptions are listed on the website:
https://iorate.github.io/ublacklist/subscriptions
This extension is available in the below search engines.
*1 In Firefox, only if ""Open links in new tab"" is turned off
*2 Only if ""Always play videos on Qwant.com"" is turned off
*3 Only certain public instances are supported
To publish a ruleset as a subscription, place a ruleset file encoded in UTF-8 on a suitable HTTP(S) server, and publish the URL. Here is an example hosted on GitHub:
https://raw.githubusercontent.com/iorate/ublacklist-example-subscription/master/uBlacklist.txt
In uBlacklist >=6.6.0 for Chrome, subscription links are available. To add a subscription with name and url, the following URL can be used as a shortcut to the options page:
For the above example:
https://iorate.github.io/ublacklist/subscribe?name=Example&url=https%3A%2F%2Fraw.githubusercontent.com%2Fiorate%2Fublacklist-example-subscription%2Fmaster%2FuBlacklist.txt
To build this extension, Node.js>=16 and Yarn are required.
Before opening a pull request, you should make sure that yarn lint, yarn test, and yarn build-all pass.
NOTE: The API keys and secrets for the sync feature are not included in this repository. To develop the sync feature, set your own API keys and secrets in the .env file.
To add a locale,
Determine an ISO language code such as en referring to kLanguageInfoTable.
Copy src/locales/en.json.ts to src/locales/${languageCode}.json.ts and translate entries.
Open src/scripts/dayjs-locales.ts and import the dayjs locale.
To localize description and screenshots on web stores, create web-store-assets/${languageCode}/ and add files.
Screenshot localization is available only on Chrome Web Store.
Screenshots should be 1280x800.
iorate (Twitter)
uBlacklist is licensed under MIT License."
3319,"honestbleeps,Reddit-Enhancement-Suite","Reddit Enhancement Suite. Reddit Enhancement Suite (RES) is a suite of modules that enhances your Reddit browsing experience.
For general documentation, visit the Reddit Enhancement Suite Wiki.
Hi there! Thanks for checking out RES on GitHub. A few important notes:
RES is licensed under GPLv3, which means you're technically free to do whatever you wish in terms of redistribution as long as you maintain GPLv3 licensing. However, I ask out of courtesy that should you choose to release your own, separate distribution of RES, you please name it something else entirely. Unfortunately, I have run into problems in the past with people redistributing under the same name, and causing me tech support headaches.
I ask that you please do not distribute your own binaries of RES (e.g. with bugfixes, etc). The version numbers in RES are important references for tech support so that we can replicate bugs that users report using the same version they are, and when you distribute your own - you run the risk of polluting/confusing that. In addition, if a user overwrites his/her extension with your distributed copy, it may not properly retain their RES settings/data depending on the developer ID used, etc.
I can't stop you from doing any of this. I'm just asking out of courtesy because I already spend a great deal of time providing tech support and chasing down bugs, and it's much harder when people think I'm the support guy for a separate branch of code.
Thanks!
Steve Sobel
steve@honestbleeps.com
See CONTRIBUTING.md.
See LICENSE.
See the changelog/ directory for individual versions or https://redditenhancementsuite.com/releases/ for all versions."
3320,"qunash,chatgpt-advanced","A browser extension that augments your ChatGPT prompts with web results.. 
WebChatGPT

[![Discord](https://img.shields.io/discord/1060110102188797992?color=green&label=Join%20server&logo=discord)](https://discord.gg/nmCjvyVpnB) [![Twitter Follow](https://img.shields.io/twitter/follow/hahahahohohe?label=follow%20me&style=social)](https://twitter.com/hahahahohohe)

This browser extension `adds web access` capability to [ChatGPT](https://chat.openai.com/). Get much more relevant and up-to-date answers from the chatbot!

![image](https://user-images.githubusercontent.com/3750161/214144292-4fb34667-015a-43f3-906d-1d2d065d67f0.png)



[][link-chrome] [][link-firefox]

[][link-chrome] [][link-chrome]

[][link-firefox]
[][link-firefox]


https://user-images.githubusercontent.com/3750161/214155508-5c1ad4d8-b565-4fe0-9ce7-e68aed11e73d.mp4
<details>
   <summary>Manual installation</summary>

Download the prebuilt chrome zip file from [here](https://github.com/qunash/chatgpt-advanced/tree/main/build).

Unzip the file.

Open `chrome://extensions` in Chrome / `edge://extensions` in Microsoft Edge.

Enable developer mode (top right corner).

Click on `Load unpacked` and select the unzipped folder.

Go to [ChatGPT](https://chat.openai.com/chat/) and enjoy!

Download prebuilt firefox zip file from [here](https://github.com/qunash/chatgpt-advanced/tree/main/build).

Go to `about:debugging#/runtime/this-firefox`.

Click `Load Temporary Add-on` button, then select the zip file you re-zipped.

Open Firefox, go to `about:config` and set `xpinstall.signatures.required` to `false`.

Go to `about:addons`

Click on the gear icon in the top right corner of the Add-ons page and select `Install Add-on From File`.

Select the zip file and click open.

Firefox will prompt you to confirm the installation of the addon. Click Install.

The addon will be installed and will appear in the list of installed addons on the Add-ons page.

Go to [ChatGPT](https://chat.openai.com/chat/) and enjoy!
</details>

<details>
<summary>Build from source</summary>

`git clone https://github.com/qunash/chatgpt-advanced.git`

`npm install`

`npm run build-prod`

Grab your zip extension from `build/` folder
</details>


DuckDuckGo.
The extension requires access to all websites because there is no backend server to process web requests, and everything happens locally in the browser. There are two modes: web searching using DDG, and extracting webpage text from URLs. Web searching requires access to DuckDuckGo, while URL text extraction requires access to any website. This is why the access to all websites permission is required.
Some other ChatGPT extensions are known to interfere with WebChatGPT. If you are experiencing issues with the toolbar not showing up, please try disabling any other ChatGPT extensions that you have installed and reloading the page. If you continue to experience issues, feel free to reach out to us on our Discord server for assistance.
The extension currently only supports web searching using the DuckDuckGo search engine. However, you can use DuckDuckGo bangs to get search results from thousands of other websites. For example, !pm to search on PubMed, !gsc ‚Äì on Google Scholar, etc. You can find the full list of available bangs on the DuckDuckGo website. Simply type the bang followed by your search query to perform the search on the corresponding website.
No, the extension does not collect any user data or analytics.

Contributions are welcome! Please submit pull requests to the dev branch.

Like this free project? Please consider supporting me to keep it running."
3321,"uku,Unblock-Youku","A Chrome extension helping users access their web services while traveling outside mainland China. A Chrome extension helping users access their web services while traveling outside mainland China. You can find this extension on Chrome Web Store at http://uku.im/chrome.
Installing/using the software/service, you agree that the software/service is only for study purposes and its authors and/or service providers take no responsibilities for any consequences.
The source code is released under AGPL v3 or (at your option) any later version.
Please visit this page for an up-to-date list of our contributors.
Update URLs and server configs under the folder configs/.
Run npm ci to install dependencies exactly as they are listed in the package-lock.json file.
Run npm run lint to check the coding style of all source code.
Run npm run test to create a zip file for uploading to Chrome Web Store and run tests against it.
Change headerless in jest-puppeteer.config.js to false to see the browser UI while the tests are running."
3322,"ansh,jiffyreader.com","A Browser Extension for faster reading on ANY website!. A Browser Extension for Faster Reading on ANY website!




Below is a screenshot demonstrating how the extension works by bolding out the initial parts of all text on any page when clicked. There are toggles and sliders to customize it to your preference so you can enjoy your time reading. You must agree this is awesome right?

The best way to install this extension is to follow the instructions below. However, we will also periodically be releasing this extension on the various stores under the name  Jiffy Reader. 
Download via Chrome Store or follow the instructions below
Click here to download the latest jiffyReader-chrome.zip release
Extract the file
Open Chrome
Enter chrome://extensions  in the address bar 
Enable developer mode with the toggle on the top right side of the page if it is not enabled already
Click load unpacked on the left side of the page
Find and select the extracted folder, this extension should now be installed
To pin the extension, click the puzzle icon on the top right of Chrome, then pin the extension.
The extensions default reading mode is set to off when installed
See the faq section on how to use the extension, customize it (global and per site settings) and excluding sites from always on
Download via the Mozilla Firefox Plugin/Add-on Store or follow the instructions below
Download jiffyReader-firefox.xpi by right clicking here and choose Save link as to download the latest jiffyReader-firefox.xpirelease
Open Firefox
Enter about:debugging#/runtime/this-firefox  in the address bar 
Click Load Temporary Add-on... and navigate to the path of the downloaded jiffyReader-firefox.xpi and select it to install it
The extensions default reading mode is set to off when installed
See the faq section on how to use the extension, customize it (global and per site settings) and excluding sites from always on
<strong>Firefox will remove the extension when the browser is closed if the extension is not downloaded from the store.</strong>
Download via the App Store here or TestFlight here. This works for both macOS and iOS. We are working on getting it approved to download directly via the App Store. If you want to build the app yourself, follow the instructions below
We will be converting the web extension for Safari usage. This will require a macOS computer and the latest version of XCode installed.
Use git clone to clone the Jiffy Reader repo locally.
Run xcrun safari-web-extension-converter /path/to/extension --bundle-identifier com.jiffyreader.app to convert the extension.
Open the Safari app on your Mac and make sure to click Develop -&gt; Allow Unsigned Extensions in the top menu bar.
Open the project in XCode and click run!
Go to settings
Scroll to the bottom and select About {browser name}
Tap the browser logo five times
Go back to settings and in the Advanced section, select Custom Add-on collection
Type 17432789 as the collection owner (user ID)
Type jiffyreader as the collection name. The browser will close to apply the settings.
Go to Add-ons/Add-ons manager to install the add-on. 
<strong>For convenience you may want to enable the extension by default by clicking on the Turn On Always button in the add-on's menu.</strong>
Download: Click here to download the latest jiffyReader-opera.crx release
Extract the file
Open Opera
Enter opera://extensions  in the address bar 
Enable developer mode with the toggle on the top right side of the page if it is not enabled already
Click load unpacked on the left side of the page
Find and select the extracted folder, this extension should now be installed and listed on the screen
To pin the extension, click the cube icon on the top right of Chrome, then pin the extension.
The extensions default reading mode is set to off when installed
See the faq section on how to use the extension, customize it (global and per site settings) and excluding sites from always on
Please follow the steps for chrome above
Download the kiwi browser if you do not already have it installed
Open kiwi browser
Navigate to the extension listing on  Chrome Store and 
Click the Add to Chrome button to install the extension
The extensions default reading mode is set to off when installed
See the faq section on how to use the extension, customize it (global and per site settings) and excluding sites from always on
(Note: Bookmarklet is not in active support and may break when new updates are released)
To install the bookmarklet, head over to this link
Thank you for installing JiffyReader. 
<strong>Read the 8 points below</strong> which will help you the most in getting you started with JiffyReader
Why did the browser open this page? because this is the first time you installed JiffyReader.
The extension is on the default settings and optimal for most websites.
Changes to settings are saved instantly and can be restored to the default optimal settings by clicking the Reset Settings button at the bottom of the extension.
If confused on how to use the buttons and sliders check out the section on what are the functions of the buttons and sliders.
You can find important resources such as the FAQ section, how to contribute and how to report issues on this page.
You can always get to this page by clicking the FAQ link in the footer of the extension popup.
For further help, check the table of contents or open an issue ticket using the links at the very top of this page.
You can close this page and return at anytime to find more help or clarification.
Click on the (on chrome: puzzle icon | on edge puzzle icon | on opera cube icon | on brave puzzle icon) 
Note: Firefox will auto pin the extension
Click on the pin icon next to jiffy reader to pin it next the address bar
Click on the pinned icon to access the settings/popup menu
Click on the more (3 vertical dots) button and scroll down
Click on Jiffy Reader to open the settings/popup ui
clicking this button enters global mode where your preferences are saved and applied to all other sites when you open them afterwards
Clicking this buttons activates and saves preferences only for the site you are presently on. 
Any changes you make with the other buttons and sliders persist for only this site.
Click this button to turn on/off the emphasis (bionification) of the text on the page.
Press ALT + B on chrome and ALT + W on firefox to achieve the same effect as clicking this button on chrome. see the shortcut-section for more info.
Use this slider to set how many words are left untouched/unbolded or un-emphasized after the first emphasized word or the first word.
0 means there will not be a single or any untouched words, all words are emphasized.
1 means exactly 1 word is left untouched before the next successive emphasized word.
2 means 2 words are left untouched so does 3 and 4.
Use this to control how much or how little of each word is emphasized you your liking .
Use this to control how faint(weakly visible) or strongly visible you want the edge(un-emphasized) part of words to appear.
Use this to select a means of creating emphasis using colors.
Use this to select a means of creating emphasis using bold variations or underline variations. 
Use these buttons to increase or decrease line height to strain and improve the comfort of reading.
Use this button to controls the default behavior which is if words on pages are or aren't emphasized when loaded by default.
Resets preferences of the currently engaged preference mode.
This extension works with google play books
Open or navigate to google play books
Click on any book in your library to read it and turn on the extension if not on already
You can search for new books (paid or free) and add to your library to start reading
Upload your Epub ebooks to Google Play Books reads to be able to read it with JiffyReader.  
Open google play books
Click the upload button
Select your epub file to complete the upload 
Click on the uploaded file to open it in the Google Play Books web reader. Have fun.
Open cloud convert to 
Upload your pdf file
Select your output format (html or epub)
Click convert to start the process
Click download 
Open your downloaded html file in your browser and turn on JiffyReader
For chrome permission issues, follow the steps in Enable file url permissions (Chrome)
For epub files follow the steps in Upload Epub to Google PlayBooks
JiffyReader does not collaborate with cloudconvert. Please consult their privacy policy for any privacy concerns.
Open the google docs document in your browser
Click File > click share > click publish to web
Click publish and copy the published link. Alternatively you can replace edit in the address bar with pub to access the published document
Open the published link in a new tab and turn on JiffyReader
Note: the document will be accessible to anyone on the internet as long as they have the correct link.
If you want do not want to publish the document to the web then please follow the alternative steps in Google Docs support (download method)
Click on File > click download
Download the document as an html (preferred) or epub optional Google Play Books Native (Epub)
Open the downloaded html with your browser and turn on JiffyReader
You may be required to enable permissions to access file urls for chrome. To do so follow Enable file permissions
(Chrome) Enable JiffyReader to work with tabs that have file urls by right clicking on the JiffyReader icon
Click manage extension
Find and enable work with file urls
Alt+B is the default toggle shortcut to turn on or off the extension
If preferred you may customize the extension shortcut with the help of the resources below
Opera: open the extension management tab and click the Keyboard shortcuts link to access the page for customizing opera shortcuts
This extension provides faster reading through facilitating the reading process by guiding the eyes through text with artificial fixation points.
As a result, the reader is only focusing on the highlighted initial letters and lets the brain center complete the word. This allows you to read in supersonic speed.
In a digital world dominated by shallow forms of reading, we aim to encourage a more in-depth reading and understanding of written content.
Visit the issues page to report, bugs or tell us about a feature you would like to see and hopefully we will get to you.
  Kindly allow for some time after submitting a issue for someone to get back to you.
  You can also see a list of open issues that you may contribute to by commenting to help out someone with a challenge or developing and opening a PR. See contribution section
Anyone is welcome to provide contributions to this project by submitting a PR (Pull Request) and it will be happily merged to provide features and fixes to the incredible people using the extension.
JiffyReader is in need of translation help for what ever language you can.
  To help: 
Please check that the language you would like to help with has not already been taken up by someone else by looking through both the open and closed tickets for translations.
Open a issue ticket and add the translation label to it along with the name of the language you want to translate. Use this shortcut link to open a new ticket
Copy either the english locale json  click here or spanish local json click here translate into the language you can assist with using your preferred editor or even ms word. 
Indicate the language you would like to help translate in the ticket title. This helps to eliminate duplicate work.
Attach any questions or updates to the ticket you are working on and someone will try and get to them within a day or two.
The translation files are json formats. You only need to worry about translating the text associated with the message key.
You can email the translated file or paste the entire translation as a new comment in the ticket you opened and we will take it from there.
Don't forget to indicate your name for attribution.
English: by JiffyReader maintainer
Spanish: by JiffyReader maintainer
Others coming soon: contributor name
JiffyReader has been updated to support displaying information in multiple languages thanks to a strong interest and constant emails and enquiries about it.
  We have implemented the required mechanisms to support displaying the extension in the language of your choice. The challenge we have now is to get as many translations as possible.
Clone the project
Open in VS Code or your favorite editor
Run yarn or npm i to install dependencies
Install pnpm if you don't already have it, use npm i -g pnpm
Run pnpm dev:chrome or pnpm run dev:chrome to build the development version. Substitute chrome for firefox if that is your preferred browser.
Follow the installation version for your preferred browser but navigate to the projectRootFolder/build/ and choose the folder that corresponds with your browser.
Copy .vscode/tasks.json.example to .vscode/tasks.json or enter cp .vscode/tasks.json.example .vscode/tasks.json in the terminal from the project root
Open vs code command pallet
Type and select Tasks: Manage Automatic Tasks in Folder
Click Allow Automatic Tasks in Folder.
Reload VS code. 
Change version in package.json, eg. ""version"": ""1.0.0""
Push a new tag to GitHub, eg. git tag 1.0.0 &amp;&amp; git push --tags
The Workflow should be running here
Check the release version here and edit release notes."
3323,"pbek,QOwnNotes","QOwnNotes is a plain-text file notepad and todo-list manager with markdown support and Nextcloud / ownCloud integration.. Installation |
Changelog |
Issues |
Shortcuts |
Documentation |
Screenshots |
Nextcloud API |
Nextcloud App Page |
ownCloud API |
Telegram Group |
IRC Chat |
Gitter Chat |
Mastodon |
Twitter |
Facebook |
QOwnNotes Web Companion Firefox extension |
QOwnNotes Web Companion Chrome extension |
QOwnNotes Web App |
QOwnNotes Tor Hidden Service







QOwnNotes is the open source notepad with
markdown support
and todo list manager for GNU/Linux, macOS and Windows,
that works together with Nextcloud Notes
and ownCloud Notes.
You are able to write down your thoughts with QOwnNotes and
edit or search for them later from your mobile device, like with
Nextcloud Notes for Android
or the Nextcloud / ownCloud web-service.
The notes are stored as plain text markdown files and are
synced with Nextcloud's/ownCloud's file sync functionality.
Of course other software, like Syncthing or
Dropbox can be used too.
If you like the concept of having notes accessible in plain text files, like it
is done in the Nextcloud / ownCloud notes apps to gain a maximum of freedom
then QOwnNotes is for you.
Visit the project page here: QOwnNotes project page
To manage your todo lists in the web and on your mobile devices, you need to
install the Tasks backend on Nextcloud
or ownCloud.
To get more on-line features for your notes, like versioning and trash access,
you might also want to install the QOwnNotesAPI
app on your server.
To access your ownCloud notes from your mobile device you may want to get one of these:
For Android and OwnCloud: MyOwnNotes
For Android and Nextcloud: Notes
For iOS: CloudNotes
On Android you could also use any sync-tool like Synchronize Ultimate or FolderSync
to sync your note files and use software like neutriNotes or
Markor to edit your notes.
On iOS Notebooks
may also work well (syncing notes via WebDAV).

You can visit the QOwnNotes project page for more screenshots.
written in C++ and optimized for low resource consumption (no CPU and memory-hungry Electron app)
multiple note folders can be used
you can use your existing text or markdown files, no need for an import most of the times
older versions of your notes can be restored from your Nextcloud / ownCloud server
(install QOwnNotesAPI on your server)
trashed notes can be restored from your Nextcloud / ownCloud server
(install QOwnNotesAPI on your server)
there also is a local trash
sub-string searching of notes is possible and search results are highlighted in the notes
application can be operated with customizable keyboard shortcuts
external changes of note files are watched (notes or note list are reloaded)
differences between current note and externally changed note are shown in a dialog
markdown highlighting of notes and a markdown preview
spellchecking support
tabbing support for editing notes
scripting support and an online script repository
where you can install scripts inside the application
QOwnNotes Web Companion browser extension
to a add notes from the selected text and other features
visit the Chrome Web Store
page to install the app on Google Chrome
visit the Firefox Add-ons page
page to install the app on Mozilla Firefox
notes are getting their name from the first line of the note text (just like
in the Nextcloud / ownCloud notes web-application) and the note text files are
automatically renamed, if the first line changes
this feature can also be turned off and you can use any filename you like
manage your Nextcloud / ownCloud todo lists (ownCloud tasks or Tasks Plus / Calendar Plus)
encryption of notes (AES-256 is built in or you can use custom encryption methods like
Keybase.io (encryption-keybase.qml) or
PGP (encryption-pgp.qml))
dark mode theme support
all panels can be placed wherever you want, they can even float or stack (fully dockable)
toolbars are fully customizable
support for freedesktop theme icons, so you can use QOwnNotes with your
native desktop icons and with your favorite dark desktop theme
QOwnNotes supports Freedesktop icon themes
support for hierarchical note tagging and note subfolders
support for sharing notes on your Nextcloud / ownCloud server
portable mode for carrying QOwnNotes around on USB sticks
Vim mode
distraction free mode, full-screen mode, typewriter mode
Evernote (now with large files) and Joplin import
QOwnNotes is available in over 60 different languages like English, German,
French, Polish, Chinese, Japanese, Russian, Portuguese, Hungarian, Dutch and Spanish
Your help is
very much appreciated to improve these translations or to translate
QOwnNotes in more languages
Join the fun at Crowdin
to help with the translations
To get the most current features you can build the application from the source
code. Download the latest source here:
QOwnNotes Source on GitHub as ZIP
Alternatively you can also checkout the code directly from the git repository:
Then download Qt Creator, you will also
need the packages qtwebsockets and qt5compat to build QOwnNotes with Qt6
(only qtwebsockets for Qt5). If you build under Windows, you want to stick to
MinGw 64-bit.
Afterwards open the project file src/QOwnNotes.pro and click on
Build / Build Project QOwnNotes.
Or you can build it directly in your terminal:
If you are going to work with the code, then you can do the following instead of the above:
The DEV_MODE variable enabled higher warning levels + precompiled headers.
Please feel free to contribute source code to this project, make suggestions or
report troubles on the QOwnNotes issues page!
You can also visit QOwnNotes on GitHub.
A desktop operating system, that supports Qt
Qt 5.5+
gcc 4.8+
This SOFTWARE PRODUCT is provided by THE PROVIDER ""as is"" and ""with all faults.""
THE PROVIDER makes no representations or warranties of any kind concerning the
safety, suitability, lack of viruses, inaccuracies, typographical errors, or
other harmful components of this SOFTWARE PRODUCT.
There are inherent dangers in the use of any software, and you are solely
responsible for determining whether this SOFTWARE PRODUCT is compatible with
your equipment and other software installed on your equipment. You are also
solely responsible for the protection of your equipment and backup of your data,
and THE PROVIDER will not be liable for any damages you may suffer in connection
with using, modifying, or distributing this SOFTWARE PRODUCT."
3324,"stefanbuck,awesome-browser-extensions-for-github","A collection of awesome browser extensions for GitHub.. All numbers are updated daily and include the overall  usage of an extension across all browsers, the last publish date and stars of the GitHub repository!
Submitting a new extension is easy as opening an Issue. In fact, this is all you have to do. Create a new issue, that's it! I'll take it from there. If you need to update an existing listing, please follow the formal pull request process.
Want to know more about this process? Check out the Codeless Contributions with GitHub Issue Forms post on my blog.





    Visit the web version with additional filter options.


<!-- DO NOT EDIT THIS LIST DIRECTLY. Rather you need to update data.json -->

Shows notifications when you get a new notification on GitHub and provides quick access to all notifications in a popup.
Installs: 148 | Stars: 74 | Last update: 4 Jun 2022
Removes clutter from your pull request by automatically marking as viewed files that aren't worth reviewing.
Installs: 35 | Stars: 7 | Last update: 14 Feb 2022
Next level code navigation for GitHub.
Installs: 610 | Stars: 45 | Last update: 20 Jul 2022
Visualize GitHub repos as d3 force-directed graphs. The extension gives you a quick overview of the size and composition of any repo.
Installs: 219 | Stars: 12 | Last update: 26 Apr 2022
The CoderStats link for GitHub Chrome extension displays a link to the CoderStats page for the currently displayed user or organization profile page on GitHub.
Installs: 806 | Stars: 18 | Last update: 20 Nov 2020
Show the # of PRs and other contributors stats in the Issues/PRs tab. Can be helpful for maintainers that want to know if it's a contributor's first PR.
Installs: 373 | Stars: 447 | Last update: 1 Mar 2021
Displays size of each file, download link and an option of copying file contents directly to clipboard
Installs: 40764 | Stars: 1785 | Last update: 25 Dec 2021
Easily search GIPHY to add a GIF into any GitHub comment box.
Installs: 8442 | Stars: 140 | Last update: 29 Nov 2022
Find the best GIFs for your awesome pull requests.
Installs: 136 | Stars: 22 | Last update: n/a
Quickly browse the history of a file from any git repository.
Installs: 8251 | Stars: 13244 | Last update: 6 May 2020
GitHub provides a page that only shows diffs with a .diff at the end of the URL of the pull request. This browser extension makes it easier to view csv diffs by using daff on that page.
Installs: 25 | Stars: 2 | Last update: 18 Apr 2021
Code folding - the ability to selectively hide and display sections of a code - is an invaluable feature in many text editors and IDEs. Now, developers can utilize that same style code-folding while poring over source code on the web in GitHub. Works for any type of indentation- spaces or tabs.
Installs: 3154 | Stars: 285 | Last update: 14 Jul 2022
Set custom tab size for code view on GitHub.com
Installs: 613 | Stars: 66 | Last update: 6 May 2019
Easily navigate through the changes in a file that has been edited on GitHub.
Installs: 220 | Stars: 19 | Last update: 24 Jun 2020
A browser extension which gives different filetypes different icons on GitHub.
Installs: 10000 | Stars: 1228 | Last update: 21 Mar 2023
Highlight selected word in GitHub source view like Sublime Text.
Installs: 1000 | Stars: 141 | Last update: 8 Oct 2019
Neat hovercards for GitHub.
Installs: 25738 | Stars: 1750 | Last update: 12 May 2021
Colorize issue and PR links to see their status (open, closed, merged).
Installs: 1015 | Stars: 293 | Last update: 4 Nov 2021
Displays npm package stats on GitHub
Installs: 657 | Stars: 56 | Last update: 31 May 2020
Lists repositories that are similar to the one being viewed
Installs: 273 | Stars: 32 | Last update: 10 Aug 2022
Revert closed GitHub issues from purple back to red
Installs: 27 | Stars: 37 | Last update: 16 Mar 2023
Automatically adds repository size to GitHub's repository summary.
Installs: 20000 | Stars: 1129 | Last update: 26 Jun 2020
Chrome extension to see story points in GitHub projects.
Installs: 683 | Stars: 60 | Last update: 17 Aug 2020
Generates a pie chart on user profile pages displaying a breakdown of what languages they have used in their repositories.
Installs: 1038 | Stars: 43 | Last update: 16 Jun 2022
This extension adds the simplicity of WYSIWYG editing to issues, comments, pull requests, wikis and discussions in GitHub. It accepts Markdown input and offers productive writing, starting with tables.
Installs: 2133 | Stars: 325 | Last update: 28 Nov 2022
Show vscode-icons in the repository browser.
Installs: 2000 | Stars: 259 | Last update: 30 Sep 2021
It can make the sub-directories and files of github repository as zip and download it
Installs: 103243 | Stars: 25 | Last update: 19 Jul 2022
Create, save, edit, pin, search and delete filters that you commonly use on the Github Issues and Pull Requests pages. You are able to scope filters to be shown globally (on each repo) or only have them show up on the repo you create them on. Pinning filters is also a feature that this extension allows you to do. So if you have several filters you use daily - you have a way to quickly access them, at the top of your list.
Installs: 464 | Stars: n/a | Last update: 22 Aug 2022
Extension to get back current and longest streak.
Installs: 730 | Stars: 220 | Last update: 10 Jan 2023
Replace browser new tab screen with GitHub trending projects.
Installs: 2000 | Stars: 340 | Last update: n/a
Hide dotfiles from the GitHub file browser.
Installs: 678 | Stars: 308 | Last update: 17 Sep 2021
Allows you to toggle between the normal GitHub contribution chart and an isometric pixel art version.
Installs: 10000 | Stars: 3326 | Last update: 25 Mar 2023
Chrome extension that adds a button in browser and links this button to a GitHub repository that you will configure, then on any webpage just click this extension button and it will add the given link with the title of the page in that repository.
Installs: 65 | Stars: 230 | Last update: 26 May 2018
See forks with the most stars under the names of repositories.
Installs: 1346 | Stars: 536 | Last update: 1 Sep 2021
Show Material icons for files/folders in repository file viewer. Display the same icons from vscode-material-icon-theme VSCode extension.
Installs: 9541 | Stars: 313 | Last update: 16 Mar 2023
An extension that creates direct links to imported modules, external or internal, on source code on GitHub. Supports multiple languages, including common ones like Rust, Go, Python and Ruby, but also odd ones like Nim, Haskell, Julia and Elm.
Installs: 59 | Stars: 247 | Last update: 27 Nov 2019
Chrome extension which helps you not to miss important changes in your news thread related to your repo
Installs: 27 | Stars: 14 | Last update: 1 Oct 2018
A Chrome and Firefox extension to quickly see your notifications in a popup without leaving the current page.
Installs: 450 | Stars: 139 | Last update: 9 May 2022
Displays your GitHub notifications unread count. Supports GitHub Enterprise and an option to only show unread count for issues you're participating in. You can click the icon to quickly see your unread notifications.
Installs: 10510 | Stars: 1673 | Last update: 10 Mar 2023
Filter your pull requests/issues in different categories giving you a big boost in productivity. Also suggests new trending repositories.
Installs: 130 | Stars: 127 | Last update: 5 Mar 2020
OctoLinker is the easiest and best way to navigate between files and projects on GitHub. It supports languages such as JavaScript, Ruby, Go, PHP, JAVA and more. It works with package.json as well as with Gemfiles.
Installs: 32297 | Stars: 5130 | Last update: 13 Nov 2022
OctoPermalinker is a browser extension that searches GitHub comments/files for links to files on branches, and adds a link to where the branch pointed when the comment/file was made/updated. This helps you avoid following a link that was broken after being posted. For context, here's some discussion about broken GitHub links: Don't link to line numbers in GitHub.
For example, suppose you're looking at a gist that links to a file on the master branch of a repo. At the time the gist was made, the link worked, but if the file gets removed, the link is broken. OctoPermalinker uses the gist creation date to add a permalink that still works.
Installs: 202 | Stars: 19 | Last update: 20 May 2017
The missing IntelliSense hint for GitHub and GitLab
Installs: 5000 | Stars: 952 | Last update: 4 Feb 2022
Useful for developers who frequently read source in GitHub and do not want to download or checkout too many repositories.
Installs: 438409 | Stars: 22399 | Last update: 12 Mar 2023
Revert GitHub's UI back to its classic look (before the June 23, 2020 update that has a flat, rounded and more whitespaced design).
Installs: 316 | Stars: 214 | Last update: 8 Aug 2021
This browser extension allows you to open files in your IDE directly from GitHub, assuming the repository you are working on is cloned on your computer. When a fragment of a file is displayed, your IDE opens the file and puts the cursor at the desired line.
Installs: 935 | Stars: 56 | Last update: 28 Nov 2022
Helps you keep track of incoming and outgoing PRs, and notifies you when you receive a pull request on GitHub.
Installs: 729 | Stars: 102 | Last update: 16 Oct 2022
Browser extension that shows which pull requests contain changes related to a file.
Installs: 50 | Stars: 96 | Last update: 15 Oct 2020
Extension that simplifies the GitHub interface and adds useful features.
Installs: 68066 | Stars: 20643 | Last update: 20 Mar 2023
Are they tabs? Are they spaces? How many? Never wonder again! Renders spaces as ¬∑ and tabs as ‚Üí in all the code on GitHub.
Installs: 633 | Stars: 72 | Last update: 25 Aug 2018
Introduces the Explore tab in the pull request interface where you can review changes ordered by importance and see the semantic context surrounding each change.
Installs: 41 | Stars: n/a | Last update: 10 Aug 2020
The Sourcegraph browser extension gives GitHub IDE-like powers when you're viewing code, pull requests, and diffs:
Go to definition
Find references
Powerful code search with regexp matching, diff searches, and other filters
Hover tooltips
File tree navigation
Installs: 101211 | Stars: 7534 | Last update: 10 Mar 2023
Make tab indented code more readable by forcing the tab size to 4 instead of 8.
Installs: 2000 | Stars: 282 | Last update: 25 Sep 2021
Helps you see easily which activities happened since you last visited GitHub.
Installs: 212 | Stars: 29 | Last update: n/a
Generate a magic link for your PR and post it on shared Slack channel, to entice reviewers to pick up your PR faster!
Installs: 1000 | Stars: n/a | Last update: 18 Feb 2023
ZenHub is the first and only project management suite that works natively within GitHub; enhancing your workflow with features built specifically for startups, fast-moving engineering teams, and the open-source community. The product is a browser extension that injects advanced functionality including real-time drag-and-drop Issue Task Boards, peer feedback via a +1 button, and support for uploading any file type directly into the GitHub interface. ZenHub makes it easy to centralize all processes into GitHub, keeping your team lean and agile.
Installs: 80000 | Stars: n/a | Last update: 18 Mar 2023
All your issues, PRs, repos and other work documents right in your new tab
Installs: 10146 | Stars: n/a | Last update: 9 Feb 2023
file tree for github, and more than that.
Installs: 10684 | Stars: n/a | Last update: 30 Jan 2023
Add breakpoints at 1400px, 1600px and 1800px for full GitHub experience on large screens. Also removes the truncating of file and directory names in the repository browser.
Installs: 2000 | Stars: 129 | Last update: 24 Jul 2020
gitpod streamlines developer workflows by providing ready-to-code development environments in your browser - powered by vs code.
Installs: 62953 | Stars: 117 | Last update: 24 Feb 2023
When viewing a repository on github.com that has a package.json file, this extension will introspect the dependencies in package.json and display links and description for each dependency, just below the repo's README.
Installs: 2089 | Stars: 687 | Last update: 14 Nov 2022
Extends GitHub pages with math, diagrams, embedded YouTube videos etc.
Installs: 465 | Stars: 78 | Last update: 10 Jan 2023"
3413,"Ferie,Cross-browser_Custom_HTML_Select_Tag_Arrow","A solution for the HTML Select tag that implement a custom arrow. Have you ever faced the problem that the HTML tag select has with its default arrow appearance on different browsers? Especially on the older Internet Explorers?
Well, if the answer is ""YES"", or maybe you want a drop-down arrow that appear the same in each browsers (including the old ones), here there is an easy trick.
You can find all the CSS code and some examples in this repository.
See the Custom Cross Browser Drop-down in action with all your browsers!!!
For these browser, it is easy to set the same background image for the drop-down in order to have the same arrow.
To do so, you have to reset the browser's default style for the select tag and set new background rules.
The appearance rules are set to none to reset browsers default ones, if you want to have the same aspect for each arrow, you should keep them in place.
The background rules in the examples are set with SVG inline images that represent different arrows. They are positioned 98% from left to keep some margin to the right border (you can easily modify the position as you wish).
In order to maintain the correct cross-browser behavior, the only other rule that have to be left in place is the outline. This rule resets the default border that appears (in some browsers) when the element is clicked. All the others rules can be easily modified if needed.
See the custom-dropdown.css file for more details about the other rules and examples.
This is the harder part... Or maybe not.
There is no standard rule to hide the default arrows for these browsers (like the select::-ms-expand for IE10+). The solution is to hide the part of the drop-down that contains the default arrow and insert an arrow icon font (or a SVG, if you prefer) similar to the SVG that is used in the other browsers (see the select CSS rule for more details about the inline SVG used).
The very first step is to set a class that can recognize the browser: this is the reason why I have used the conditional IE IFs at the beginning of the code. These IFs are used to attach specific classes to the html tag to recognize the older IE browser.
After that, every select in the HTML have to be wrapped by a div (or whatever tag that can wraps an element). At this wrapper just add the class that contains the icon font.
In easy words, this wrapper is used to simulate the select tag.
To act like a drop-down, the wrapper must have a border, because we hide the one that comes from the select.
Notice that we cannot use the select border because we have to hide the default arrow lengthening it 25% more than the wrapper. Consequently its right border should not be visible because we hide this 25% more by the overflow: hidden rule applied to the select itself.
The custom arrow icon-font is placed in the pseudo class :before where the rule content contains the reference for the arrow (in this case it is a right parenthesis).
We also place this arrow in an absolute position to center it as much as possible (if you use different icon fonts, remember to adjust them opportunely by changing top and left values and the font size).
NOTE: it is not possible, to change the option styles for browsers like IEs Chrome and Opera. Especially for the IEs there will be always an awful black border around the options box, when the drop-down is open.
You can easily create and substitute the background arrow or the icon font arrow, with every one that you want simply changing it in the background-image rule or making a new icon font file by yourself."
3414,"gw2ocs,gw2icon","Library to insert GW2's icons in your webpages in pure CSS3. GW2Icon is an icon font written in pure CSS3. It allows you to easily include Guild Wars 2 icon in your pages.
Put css/gw2icon.min.css in your css/ folder and img/gw2icon/ in your img/ folder.
Then, in your header, just add:
To include an icon in your page, write:
To view the icon list, please visit http://www.gw2icon.com/#icons.
font Awesome for the inspiration.
Icons are ¬© 2015 ArenaNet, Inc. All rights reserved."
3415,"helpscout,hs-icons","Help Scout's Icon Fonts. Help Scout's Icon font
Built using gulp.
Node
Gulp
If you do not have Node installed on your machine, we recommend installing it using Homebrew.
Run the following command in your command line:
Help Scout's icon font is compiled using Gulp. See the Getting Started guide for more information.
Similar to Bundler, all you have to do is run the following command, which will allow Gulp to do it's thing.
Icon font are automatically generated based on the folders and .svg files within the src directory.
The folder's name (e.g. awesome) will be used as the name of the icon font, and will appear in /dist/ once the font is compiled.
.svg files that are added/removed from directories within /src/ will be added/removed from the compiled fonts. The file name of the .svg file will be used for the class name of the icon in the compiled CSS.
Example:
To build the icon font, execute the following command in your command line:
This will compile the icon font (eot, svg, ttf, woff, woff2) and other files (.css, .scss, .html, .md). These files can be found in the /dist/ directory."
3416,"Ferie,cssCollapse","A jQuery plugin that collapses boxes of content using CSS3 transition (it can also works as an accordion). Are you still using jQuery? Would you like a nice CSS transition managed with jQuery? If the answer is ""Yes"" this is the right place for you.
This plugin was developed to slide the content of a hidden box using the CSS3 transitions rules.
See the cssCollapse jQuery plugin in action!
It works with the following parameters that can be overwritten if needed.
accordion: this variable set if the collapse has to behave like an accordion or not (the default is 'false', this means that if you want the accordion behavior, you have to call the plugin with the variable inside it set to 'true')
accordionContainer: this variable is the class that tells the plugin the container class for the accordion (the default is 'accordionContainer')
prefix: this is the prefix that you can use for all the classes of this plugin to distinguish the instances or the libraries or other plugins that you are using that in some cases can use the same class names (the default is 'cssCollapse-')
targetClass: this is the target class where the click perform the action. The target can be a link or a button or a box (the default is 'target')
targetSelected: this is the class that is put to the open accordion target (the default is 'selected')
hiddenContentClass: this is the class that contain the hidden content that has to be shown when the target class has been clicked (the default is 'hiddenContent')
collapseClass: this is the class that is put to show the hidden stuff. NOTE: if you change this class you have to modify also the CSS (the default is 'is-open')
iconClass: this is the general class that you have to add if you are using icon-fonts to indicate the opening and closing of the box (the default is 'collapseIcons')
iconOpen: this is the class for the icon-font when the hidden content is shown (the default is 'diff-added')
iconClose: this is the class for the icon-font when the hidden content is hidden (the default is 'diff-removed')
behavior: this is the CSS3 transitions name that you want to use examples are ease, linear, etc (the default is false to let the css rules works itself)
duration: this is the transitions speed that you want to use (the default is false to let the css rules works itself)
delay: this is the CSS3 transitions delay that you want to use (the default is false to let the css rules works itself)
accordionCloseLinkClass: this is the the class for the closing link inside the accordion, if needed (the default is 'closeAccordion')
noScrollClass: this is the the class that you have to use in your HTML near the target class, if you don't want to scroll the page when the target is clicked (the default class name is 'noScroll')
Get a copy of the plugin from the dist folder and add it to your project.
Apply the plugin to a DOM element that have to contain the target (the element that if it is clicked, collapse another element) and the hidden content (the element that is shown/hidden when the target is clicked) to make it work independently one to the other in the same page.
It can be applied also to the entire document if the same behavior is required for all the components inside the page.
Use the plugin as shown in the examples below and/or in the example.js file.
In the page you can use the following classes: 
.hiddenContent (if you want your content to be hidden when the page loads)
and/or
.hiddenContent.is-open (if you want your content to be shown when the page loads).
Use the CSS provided in the dist folder or structure it as shown below.
In the following example the CSS3 transitions will be then overwritten from the ones in the plugin, if specified.
This plugin, obviously, does not show the transitions on older browsers like Internet Explorer 9 and below, because they do not support CSS3 transitions.
The behavior on these browsers will be a simple hide/show of the hidden content."
3417,"samuelmeuli,iconsets.org","üåü Icon set discovery website for designers. Icon set discovery website for designers
Looking for an icon set for your next website? iconsets.org features a curated list of pretty icon sets.
To help you find the icon set which suits your needs, the website lets you filter icon sets by format, license, and price. All sets are presented with sample icons, and you can test their appearance on light and dark backgrounds.

Do you know a great icon set that you'd like to add to the list?
Fork and clone this repository
Add the following information about your icon set to the icon-sets.json file. Please insert your list entry such that the list is sorted by id.
Add six sample icons of your icon set under public/sample-icons/[set-id]/sample-icon-[1-6].svg. Please make sure of the following:
The SVG needs to contain id=""icon"" (because it is loaded with &lt;use&gt;)
The SVG must have the viewBox attribute set correctly (according to its height/width)
The color of the strokes or fills might need to be set to currentColor to match the light and dark themes
Run the web app and test whether the icon set is rendered correctly (see Development)
Create a pull request
Clone the project and install all dependencies:
git clone
make install to install all dependencies
make hooks to install the pre-commit hooks
Run make start to start the app. You can view it on localhost:3000.
""Glowing star"" emoji by Twitter, Inc. (Twemoji), licensed under CC-BY 4.0"
3418,"skayo,Iconmonstr-API","An unofficial API to access icons from iconmonstr.com. This is an unofficial API for iconmonstr.com!
Fetch icons, collections and other directly from their website.
This page crawls all data from iconmonstr.com, no database is used.
That's why the requests can take some time occasionally.
The API was made in PHP 7 with the limonade.php framework.
If you don't want to use my free-hosted API, you can install it by yourself.
All you need is PHP 7! (other versions not tested - might work)
There's no configuration or anything needed. Just upload the whole repo onto your server!
[ ] Better error messages
[ ] Search for collections
[ ] png support for icons (costumizing and coloring images and getting their download link)
Please note that the api is not fully RESTful!
Icons
Categories
Collections
Icon Requests

Get icons by search query
https://iconmonstr-api.2ix.at/icons/search/
GET https://iconmonstr-api.2ix.at/icons/search?query=Arrow&amp;filter=fill

Get popular icons
https://iconmonstr-api.2ix.at/icons/popular/
GET https://iconmonstr-api.2ix.at/icons/popular?page=12

Get new icons
https://iconmonstr-api.2ix.at/icons/new/
Note that other than at the /icons/search endpoint, there's only a fill-bold (no fill or bold by it's own)
GET https://iconmonstr-api.2ix.at/icons/new?page=3&amp;filter=thin

Get a specific icon
https://iconmonstr-api.2ix.at/icons/:slug/
GET https://iconmonstr-api.2ix.at/icons/github-1?fileType=svg"
3419,"tomhodgins,unicons","Unicons.css is a CSS file to make adding unicode characters to HTML in a semantic and easy to use way. Because Unicons.css is so lightweight you can include just one file to supplement or replace other icon font solutions on your site like FontAwesome. Unicons.css is a lightweight supplement or replacement for icon fonts like FontAwesome, as well as a semantic way to add unicode characters to your HTML markup.
It contains character codes for some of the hard-to-reach but useful characters buried deep within your font and giving us an easy way to select those using custom data attributes in HTML. This keeps your markup semantic and easy to edit, and lets you leverage many icons that may be installed on your target devices already without loading additional resources.
FontAwesome and other web-geared icon fonts are designed with icons for web applications, but the unicode standard which unicons.css supports includes general purpose pictograms that can also be useful in web applications as well as valuable mathematical, scientific, and international symbols that seem largely absent from websites today.
&lt;link href=""unicons.css"" type=""text/css"" rel=""stylesheet""&gt;
You can add Unicons to your HTML markup by applying the data-unicon HTML custom data attribute to any element, like the &lt;span&gt; element, by adding the name of the unicode character you want to insert as the attribute value. All names are written in lowercase letters with the spaces delimited by hyphens (-).
&lt;span data-unicon=""black-heart-suit""&gt;&lt;/span&gt;
The above HTML code would insert the '&#x2665;' character.
Right now unicons is simply a CSS file and a demo HTML character palette. Before using unicode characters in your project you need to be sure of two things: 1) you can anticipate which fonts these characters will display in, and 2) the font this displays in supports the character you're trying to insert. Unicons comes with no icons or font files of its own, so you may find varying support if you rely on the system fonts installed across different devices.
For a more bulletproof approach, supply your own font using @fontface in CSS. This way all visitors to your site will have the same support. You can select a font that supports the unicode characters you are looking for, and the Deja Vu font project is a great starting place to find free fonts you can embed online with excellent unicode suppport.
Check out the list of Open-source Unicode typefaces to find other free embedding possibilities
Create tailored versions of fonts for embedding online with FontSquirrel's @fontface generator
The @Font-Face Rule And Useful Web Font Tricks from Smashing Magazine
TIP: If you embed a custom font to use with unicons.css be sure to add a custom CSS style somewhere else in your project instructing unicons to use it. If you wanted to use a font named 'Custom-Font' you would add a snippet like:
Big thanks to Dave Gandy and Font Awesome project right here on Github for setting the bar for icon typography online, and for developing so many creative ideas about how to insert characters from a web font into CSS.
Another thanks out to FontSquirrel for making is easy to convert fonts to web formats, and lastly a shoutout to the Deja Vu project for making one free fonts with excellent unicode glyph support!"
3420,"awnion,custom-iosevka-nerd-font","Custom version of Iosevka font with Nerd Font Icons. 
  
  


[ ] Update images
[ ] Fix fontpatcher to make custom font family names
[ ] Make a release
[ ] Windows friendly fontfamily name
Check releases page
Iosevka has a lot of modificaions, but Nerd Font repo has only a few of them
don't need italic and oblique versions (so can speed up compilation)
need only specific font weights (e.g. 200 300 400 500)
need to fake bold weight to 500
need specific base font width
need nerd font icons
need oneliner to build everything :)
Changed m i l % 0 and others
Changed font weights (e.g. ""bold"" has weight 500)
No italic and oblique versions by default
Base font shape width is 6
For more options edit: private-build-plans.toml and build
Fonts will be in _output dir.
Iosevka webpage https://typeof.net/Iosevka/
Build Iosevka font using docker https://github.com/ejuarezg/containers/tree/master/iosevka_font#container-method
Nerd Font patcher https://github.com/ryanoasis/nerd-fonts"
3421,"HotpotDesign,Free-Icons","List of sources for free icons, spanning SVG, raster, and webfont formats. This list is maintained by Hotpot.ai. Hotpot is a new way to simplify graphic design. Hotpot helps you create attractive social media posts, App Store screenshots, Google Play screenshots, app icons, logos and other graphics for games, apps, and extensions.
This page was originally posted on Hotpot.ai, and is cross-referenced here for developer convenience and to simplify community contributions.
This page documents sources for free icons, spanning SVG, raster, and webfont formats.
To add or remove items from this list, please make a pull request.
https://hotpot.ai/free-icons
https://material.io/resources/icons/?style=baseline
https://svgrepo.com/
https://game-icons.net/
https://fatcow.com/free-icons
https://iconmonstr.com/
https://clipsafari.com/
http://fontello.com/
https://iconstore.co/
https://iconsvg.xyz/
https://illustrio.com/
https://ionicons.com/
https://simpleicons.org/
https://thenounproject.com/
https://flaticon.com/
https://github.com/vaadin/vaadin-icons
https://github.com/iconic/open-iconic
https://github.com/tailwindlabs/heroicons
https://github.com/coreui/coreui-icons
https://github.com/Keyamoon/IcoMoon-Free
https://github.com/tabler/tabler-icons
https://github.com/icons8/flat-color-icons
https://graphicburger.com/icons-set/
https://www.fgdesigners.com/search/label/icons
https://www.icojam.com/blog/
https://www.pixeden.com/free-icons-set
https://glyphicons.com/
https://github.com/framework7io/framework7-icons
https://github.com/neilorangepeel/Free-Social-Icons
https://github.com/linea-io/Linea-Iconset
https://github.com/synthagency/icons-flat-osx
https://github.com/TrackDuck/free-icon-pack
https://github.com/jenstornell/free-icon-packs
https://github.com/webkul/mojoicons"
3422,"ahmadfiroz,sketch-webfont","A nodejs based script to create web icon fonts from sketch . A npm based script to create web icon fonts from sketch 
you'll need to add sketchtool to your $PATH /Applications/Sketch.app/Contents/Resources/sketchtool/bin
npm install - dependency resolving. Must do for first time.   
npm run build - export icons from icons.sketch and create an iconfont with demo html.
npm run export - export icons to assets/icons/ only
npm run create - takes the svgs from assets/icons/*.svg and create iconfont with demo in dist directory (Will create if not available)
MIT"
3507,"zhihu,mirror","Yet another Sketch Mirror App for Android. . Yet another Sketch Mirror App for Android.
Support Android Lollipop+.
Download.

Sometimes the WIFI connection is unstable, better to use it at good network. USB supports comming soon.
Highly recommended to use resolution 1280x720's phone to preview Material Design; or resolution : artboard's size = 1:1.
Good Pull Request is always welcome :)
Android Support Library, Apache License Version 2.0
ReactiveX/RxJava, Apache License Version 2.0
trello/RxLifecycle, Apache License Version 2.0
facebook/fresco, BSD License
google/gson, Apache License Version 2.0
square/okhttp, Apache License Version 2.0
davemorrissey/subsampling-scale-image-view, Apache License Version 2.0
To contribute with a small fix, simply create a pull request.
Better to open an issue to discuss with the team and the community if you're intended to work on something BIG.
Please follow Code Style for Contributors of AOSP."
3508,"tldraw,tldraw","A tiny little drawing app.. 
  



Welcome to the tldraw monorepo.
üôå Questions? Join the Discord channel or start a discussion.
üíï Love this project? Consider becoming a sponsor.
Thanks to our corporate sponsors:

</img>

</img>

</img>

</img>

</img>

</img>



...and to our individual sponsors!
This repository is a monorepo containing two packages:
packages/tldraw contains the source for the @tldraw/tldraw package. This is an editor as a React component named &lt;Tldraw&gt;. You can use this package to embed the tldraw editor in any React application.
packages/core contains the source for the @tldraw/core package. This is a renderer for React components in a canvas-style UI. It is used by @tldraw/tldraw as well as several other projects.
...and two apps:
apps/www contains the source for the tldraw.com website.
apps/vscode contains the source for the tldraw VS Code extension.
...and three examples:
examples/core-example is a simple example for @tldraw/core.
examples/core-example-advanced is a second example for @tldraw/core.
examples/tldraw-example is an example for @tldraw/tldraw.
Want to connect? Visit the Discord channel.
Interested in contributing? See the contributing guide.
Need help? Please open an issue for support.
This project is licensed under MIT.
If you're using the library in a commercial product, please consider becoming a sponsor.
@steveruizok"
3509,"Mukosame,Anime2Sketch","A sketch extractor for anime/illustration.. Anime2Sketch: A sketch extractor for illustration, anime art, manga
By Xiaoyu Xiang

2022.1.14: Add Docker environment by kitoria
2021.12.25: Update README. Merry Christmas!
2021.5.24: Fix an interpolation error and a GPU inference error.
2021.5.12: Web Demo by AK391

2021.5.2: Upload more example results of anime video.
2021.4.30: Upload the test scripts. Now our repo is ready to run!
2021.4.11: Upload the pretrained weights, and more test results.
2021.4.8: Create the repo.
The repository contains the testing codes and pretrained weights for Anime2Sketch.
Anime2Sketch is a sketch extractor that works well on illustration, anime art, and manga. It is an application based on the paper ""Adversarial Open Domain Adaption for Sketch-to-Photo Synthesis"".
Linux, macOS, Docker
Python 3 (Recommend to use Anaconda)
CPU or NVIDIA GPU + CUDA CuDNN
Pillow, PyTorch
Install the required packages: pip install -r requirements.txt
Please download the weights from GoogleDrive, and put it into the weights/ folder.
The above command includes three arguments:
dataroot: your test file or directory
load_size: due to the memory limit, we need to resize the input image before processing. By default, we resize it to 512x512.
output_dir: path of the output directory
Run our example:
If you want to run on Docker, you can easily do so by customizing the input/output images directory.
Build docker image  
Setting input/output directory
You can customize mount volumes for input/output images by Makefile. Please setting your target directory.  
example:  
Run  
if you want to run cpu only, you will need to fix two things (remove gpu options).
Dockerfile CMD line to CMD [ ""python"", ""test.py"", ""--dataroot"", ""/input"", ""--load_size"", ""512"", ""--output_dir"", ""/output"" ] 
Makefile docker-run line to docker run -it --rm -v `pwd`:/workspace -v `pwd`/images/input:/input -v `pwd`/images/output:/output anime2sketch
This project is a sub-branch of AODA. Please check it for the training instructions.
Our model works well on illustration arts:


Turn handrawn photos to clean linearts:

Simplify freehand sketches:

And more anime results:


Xiaoyu Xiang.
You can also leave your questions as issues in the repository. I will be glad to answer them!
This project is released under the MIT License."
3510,"dataliterate,data-populator","A plugin for Sketch and Adobe XD to populate your design mockups with meaningful data. Goodbye Lorem Ipsum. Hello JSON.. 
The documentation of the plugin has moved to datapopulator.com.
Join the conversation on the Data Populator Slack. Follow @datapopulator on Twitter for updates.
Please report bugs, observations, ideas & feature requests as issues or get in touch.
If you have an idea or the need for a new feature for Data Populator, or run into a limitation you'd like to overcome ‚Äì feel free to implement it and send us a Pull Request. We think the code architecture is understandable and modular enough to extend easily.
If you're a Designer and don't know how to code, kindly ask a Developer colleague or friend of yours ‚Äì they'll kindly help you, as this is an investment in improving Designer's Data Literacy and Designer-Developer-Collaboration.
If you like, you can also contribute to the future development of Data Populator by buying us a coffee. Any kind of contribution is highly appreciated!
cd sketch
yarn
yarn symlink
yarn start (dev) or yarn build (production)
cd xd
yarn
yarn start (dev) or yarn build (production)"
3511,"RayPS,my-sketch-colors",Project no longer maintained.. Install sketch-palettes plugin then load color.sketchpalette
3512,"lpgdasilva,Google-Material-Icons-for-Sketch","Google Material Icons Library for Sketch App. Because Google Design team did a really good job with its new Material Theme Editor plugin, I decided to stop supporting future updates. The plugin has lots of features and resources, including new set of icons (Filled, Sharp, Rounded, Two-Toned, and Outined icons).
For more information, please check the Material Theme Editor website.
A special thanks to everyone who supported this project. ü§ó
Google Material Icons for Sketch is a Google icon set for Sketch App. These are originally from Google library, which I'll try to keep updated.
 

The 2.2 update adds 41 new icons.
A HUGE Thanks imaaronjames and jpwain for improving the structure & organization of the file!
Removed nested folders
Removed all masks and clipping groups
Consolidated all paths into one compound path per icon
Consistently renamed all folders, icons, bounds, and paths to match Material Icons
Reordered canvas from A-Z
Reordered layers from A-Z
Moved the artboards to start at 0,0 coordinate.
Added an _About artboard
Added a version string for the file (because it varies from the Google release number) to the About artboard.
Set file version to 1.2, tentatively, calling @imaaronjames update 1.1.
Added github project URL to the About artboard.
Fixed icons size where sometimes, could be slightly off the pixel grid
Locked aspect ratio in order to keep scalable icons consistent
Some of the the icons found at the official Google Material Icons website, don't match the .svg/.png files, when downloaded. (i.e. ic_person_pin, and almost every ic_sentiment); I've manually fixed them. You can still find the ""outdated"" versions of those same icons in the file.
ic_photo_filter updated
Converted icons to symbols
Added How to Sketch Library artboard
Split symbol icons into their respective categories, i.e. Action, Alert, AV, etc."
3513,"alexgraddev,SketchRunner","The macOS application that can launch the Sketch when its trial expired.. Important note! The SketchRunner currently only works with the Sketch version 52.6 or below.
The Sketch Runner is a macOS application that can launch the Sketch when its trial expired.
Download the latest release of the Sketch Runner application from here and move it to the Applications folder.

You also can compile the AppleScript into an application from the source code using the compile script:"
3514,"duraki,SketchCrapp","SketchCrapp - Crack your Sketch.app in seconds :) Supports MacOS Big Sur.. Sketch.App Patch Tool, brought to you by @duraki & @elijahtsai. This script provides you a quick and dirty way to patch Sketch.app for Unlimited Trial. You can always patch manually using Ghidra by following this tutorial. Offsets available here.
Download Sketch.App version of your choice here: https://www.sketch.com/updates/
Open your MacOS Terminal (Cmd+Space, type Terminal)
Type the commands below
Download or clone this repository
Make script executable
Run the script to patch Sketch.app
For the people who would like to try the new version, we got you covered. You can pass -m argument for the ultimate life-saving trick, which will automagically download latest Sketch app from the official website and patch the bundle, ready to be launched from the Applications folder.
One-liner script to install latest Sketch version and automatically patch it:

Successful screenshot of using magic trick

-h Show the help message and supported version
-a &lt;applicationPath&gt; Application path meaning where is your app try to drag it into terminal.app window to let it autocomplete for you.
-m See the Magic Trick and tell no one because it's magic trick.
-g &lt;version&gt; Tell us what version you would like to patch. to see what version we supported try to use -h and copy the tag from it.
The application should automatically detect your Sketch.App version. If not, you can pass -a argument for your Sketch.app Application Bundle or use -m argument to automatically install and crack the latest version.
If you have troubles using the script, please contact the team via GitHub Issues.
If the version you are trying to patch is higher than supported, please notify the team via GitHub Issues.
If you really need specific version you can contact the team via GitHub Issues, but we can only do our best to help you.
Build with ‚ù§Ô∏è by @duraki & @elijahtsai
Special Fans: @JosephShenton & @Aurther-Nadeem
Since Sketch supported M1 architecture and we change our patch processor to compatible with it, we are not updating the offset table anymore after version 69.2, but you can still study our script to learn from it."
3515,"MarkMoHR,Awesome-Sketch-Based-Applications",":books: A collection of sketch based application papers.. A collection of sketch based applications.
Feel free to create a PR or an issue.
Outline
Natural Image or Object
Human Face / Portrait
3D image
Image Editing
Video Editing
Object-level
Scene-level
Video Retrieval
Free-hand sketch
NeRF
CAD sketch
Sketch completion
Sketch gap / connectivity detection
Semantic / Instance Segmentation
<table>
  <tr>
    <td><strong>Type</strong></td>
    <td><strong>Paper</strong></td>
    <td><strong>Source</strong></td>
    <td><strong>Code/Project Link</strong></td>
  </tr>
  <tr>
    <td rowspan=3""><strong>Pixelwise</strong></td>
    <td> SPFusionNet: Sketch Segmentation Using Multi-modal Data Fusion </td> 
    <td> ICME 2019 </td> 
    <td>  </td>
  </tr>
  <tr>
    <td> SketchyScene: Richly-Annotated Scene Sketches (scene-level) </td> 
    <td> ECCV 2018 </td> 
    <td> [code] </td>
  </tr>
  <tr>
    <td> Exploring Local Detail Perception for Scene Sketch Semantic Segmentation (scene-level) </td> 
    <td> TIP 2022 </td> 
    <td>  </td>
  </tr>

  <tr>
    <td rowspan=""8""><strong>Stroke-level</strong></td>
    <td> Free Hand-Drawn Sketch Segmentation </td> 
    <td> ECCV 2012 </td> 
    <td>  </td>
  </tr>
  <tr>
    <td> Data-driven Segmentation and Labeling of Freehand Sketches </td> 
    <td> SIGGRAPH Asia 2014 </td> 
    <td> [code] [project] [dataset]  </td>
  </tr>
  <tr>
    <td> Example-Based Sketch Segmentation and Labeling Using CRFs </td> 
    <td> TOG 2016 </td> 
    <td> </td>
  </tr>
  <tr>
    <td> SketchSegNet+: An End-to-End Learning of RNN for Multi-Class Sketch Semantic Segmentation </td> 
    <td> IEEE Access 2019 </td> 
    <td> </td>
  </tr>
  <tr>
    <td> Fast Sketch Segmentation and Labeling With Deep Learning </td> 
    <td> CGA 2019 </td> 
    <td> </td>
  </tr>
  <tr>
    <td> Stroke-based sketched symbol reconstruction and segmentation </td> 
    <td> CGA 2020 </td> 
    <td> </td>
  </tr>
  <tr>
    <td> SketchGNN: Semantic Sketch Segmentation with Graph Neural Networks </td> 
    <td> TOG 2021 </td> 
    <td> [code] </td>
  </tr>
  <tr>
    <td> One Sketch for All: One-Shot Personalized Sketch Segmentation </td> 
    <td> TIP 2022 </td> 
    <td>  </td>
  </tr>
</table>

Panoptic Segmentation
<table>
<tr>
  <td><strong>Type</strong></td>
  <td><strong>Paper</strong></td>
  <td><strong>Source</strong></td>
  <td><strong>Code/Project Link</strong></td>
</tr>

<tr>
  <td rowspan=""3""><strong>Vector</strong></td>
  <td> FloorPlanCAD: A Large-Scale CAD Drawing Dataset for Panoptic Symbol Spotting </td> 
  <td> ICCV 2021 </td> 
  <td> [project] </td>
</tr>
<tr>
  <td> GAT-CADNet: Graph Attention Network for Panoptic Symbol Spotting in CAD Drawings </td> 
  <td> CVPR 2022 </td> 
  <td> </td>
</tr>
<tr>
  <td> CADTransformer: Panoptic Symbol Spotting Transformer for CAD Drawings </td> 
  <td> CVPR 2022 </td> 
  <td> [code] </td>
</tr>

</table>

Perceptual Grouping
<table>
  <tr>
    <td><strong>Type</strong></td>
    <td><strong>Paper</strong></td>
    <td><strong>Source</strong></td>
    <td><strong>Code/Project Link</strong></td>
  </tr>

  <tr>
    <td rowspan=""3""><strong>Stroke-level</strong></td>
    <td> Sketching by perceptual grouping </td> 
    <td> ICIP 2013 </td> 
    <td> </td>
  </tr>
  <tr>
    <td> Making Better Use of Edges via Perceptual Grouping </td> 
    <td> CVPR 2015 </td> 
    <td> </td>
  </tr>
  <tr>
    <td> Universal Sketch Perceptual Grouping / Toward Deep Universal Sketch Perceptual Grouper </td> 
    <td> ECCV 2018 / TIP 2019 </td> 
    <td> [code] </td>
  </tr>

</table>

Stroke order importance/saliency, sketch abstraction
Conventional Representation Learning
Self-supervised or few/zero-shot learning
Scene-level
Datasets
Methods
Inbetweening
Animation"
3602,"YarikSOffice,LanguageTest","Changing the language on Android. The repository contains 2 approaches for changing a locale in android apps.
ignore_deprecation branch is more easier and flexible approach despite using some deprecated API.
Article on Medium:
https://proandroiddev.com/change-language-programmatically-at-runtime-on-android-5e6bc15c758"
3603,"zackdreaver,ROenglishRE","An unofficial english translation project for Korea Ragnarok Online (kRO).. ROenglishRE is an unofficial english translation (Fan translation) project for Korea Ragnarok Online Renewal that focused on translating items, skills and textures.
Note: this project should be considered as educational purposes only, any commercial or illegal use by people or group aren't author's responsibilities.
Project created by zackdreaver @2015
Frequently asked questions"
3604,"ZhouYanzhao,SPN","Soft Proposal Networks for Weakly Supervised Object Localization, in ICCV 2017. Soft Proposal Networksfor Weakly Supervised Object Localization

  
[Project] Paper [Supp] [More Resources]

The torch branch contains:
the official torch implementation of SPN.
the PASCAL-VOC point-based localization demo.
Please follow the instruction below to install it and run the experiment demo.
Linux (tested on ubuntu 14.04LTS)
NVIDIA GPU + CUDA CuDNN
You can setup everything via a single command wget -O - https://git.io/v5wTS | bash or do it manually in case something goes wrong:
install the dependencies (required by the demo code):
loadcaffe    
torchnet: luarocks install torchnet
optnet: luarocks install optnet
clone the torch branch: 
install SPN: 
download the PASCAL-VOC2007 dataset:
download pre-trained VGGNet model for fine-tuning:
run the demo experiment:
visualize locating samples via demo/notebooks/vis.ipynb

If you run into error: identifier ""THCudaBlas_Sgemv"" is undefined during installation, update Torch7 to the latest version via cd &lt;TORCH_DIR&gt; &amp;&amp; bash ./update.sh
Check here.
coming
If you use the code in your research, please cite:"
3605,"formatjs,formatjs","The monorepo home to all of the FormatJS related libraries, most notably react-intl.. This repository is the home of FormatJS and related libraries.
Slack: Join us on Slack at formatjs.slack.com for help, general conversation and more üí¨üéäüéâ
You can sign-up using this invitation link.
See CONTRIBUTING.md for instructions.
Cross-browser Testing Platform and Open Source <3 Provided by Sauce Labs"
3606,"hybridsjs,hybrids","Extraordinary JavaScript UI framework with unique declarative and functional architecture. 
  





An extraordinary JavaScript framework for creating client-side web applications, UI components libraries, or single web components with unique mixed declarative and functional architecture
Hybrids provides a complete set of tools for the web - everything without external dependencies:
Component Model based on plain objects and pure functions
Global State Management with external storages, offline caching, relations, and more
App-like Routing based on the graph structure of views
Localization with automatic translation of the templates content
Layout Engine making UI layouts development much faster
Hot Module Replacement support and other DX features
The project documentation is available at the hybrids.js.org site.
It's based on plain objects and pure functions[^1], still using the Web Components API under the hood:
function increaseCount(host) {
  host.count += 1;
}
export default define({
  tag: ""simple-counter"",
  count: 0,
  render: ({ count }) => html&lt;button onclick=""${increaseCount}""&gt;
      Count: ${count}
    &lt;/button&gt;,
});

You can read more in the Component Model section.
A global state management uses declarative model definitions with support for async external storages, relations, offline caching, and many more:
You can read more in the Store section.
Rather than just matching URLs with the corresponding components, the router depends on a tree-like structure of views, which have their own routing configuration. It makes the URLs optional, have out-the-box support for dialogs, protected views, and many more.
You can read more in the Router section.
It supports automatic translation of the component's content, which makes translation seamless and easy to integrate. Additionally, it provides a way to add dynamic messages with plural forms, HTML content, or use messages outside of the template context. Also, it comes with handy CLI tool to extract messages from the source code!
You can read more in the Localization section of the documentation.
Create CSS layouts in-place in templates, even without using Shadow DOM, but still keeping the encapsulation of the component's styles:
});"
3607,"github,relative-time-element","Web component extensions to the standard <time> element.. Formats a timestamp as a localized string or as relative text that auto-updates in the user's browser.
This allows the server to cache HTML fragments containing dates and lets the browser choose how to localize the displayed time according to the user's preferences. For example, the server may have cached the following generated markup:
Every visitor is served the same markup from the server's cache. When it reaches the browser, the custom relative-time JavaScript localizes the element's text into the local timezone and formatting.
Dates are displayed before months, and a 24-hour clock is used, according to the user's browser settings.
If the browser's JavaScript is disabled, the default text served in the cached markup is still displayed.
Available on npm as @github/relative-time-element.
This element uses the Intl.DateTimeFormat & Intl.RelativeTimeFormat APIs, which are supported by all modern JS engines. If you need to support an older browser, you may need to introduce a polyfill for Intl.DateTimeFormat & Intl.RelativeTimeFormat.
Add a &lt;relative-time&gt; element to your markup. Provide a default formatted date as the element's text content (e.g. April 1, 2014). It also MUST have a datetime attribute set to an ISO 8601 formatted timestamp.
Depending on how far in the future this is being viewed, the element's text will be replaced with one of the following formats:
6 years from now
20 days from now
4 hours from now
7 minutes from now
just now
30 seconds ago
a minute ago
30 minutes ago
an hour ago
20 hours ago
a day ago
20 days ago
on Apr 1, 2014
So, a relative date phrase is used for up to a month and then the actual date is shown.
<sup>*</sup>: If unspecified, formatStyle will return 'narrow' if format is 'elapsed' or 'micro', 'short' if the format is 'relative' or 'datetime', otherwise it will be 'long'.
<sup>**</sup>: If unspecified, month will return the same value as formatStyle whenever format is 'datetime', otherwise it wil be 'short'.
<sup>***</sup>: If unspecified, weekday will return the same value as formatStyle whenever format is 'datetime', otherwise it will be undefined.
<sup>****</sup>: If unspecified, year will return 'numeric' if datetime represents the same year as the current year. It will return undefined if unspecified and if datetime represents a different year to the current year.
This is the datetime that the element is meant to represent. This must be a valid ISO8601 DateTime. It is also possible to use the date property on the element to set the date. el.date expects a Date object, while el.datetime expects a string. Setting one will override the other.
Format can be either 'datetime', 'relative', or 'duration'. It can also be one of several deprecated formats of 'auto', 'micro', or 'elapsed'.
The default format is auto, which is an alias for relative. In the next major version this will be relative.
The datetime format will display a localised datetime, based on the other properties of the element. It uses Intl.DateTimeFormat to display the datetime in a localised format.
Unless specified, it will consider weekday to be 'long', month to be 'long', and 'year' to be numeric if the datetime is the same as the given year. Overriding formatStyle will change both weekday and month default values. Examples of this format with the default options and an en locale:
Wed, 26 Aug 2021 
Sat, 31 Dec (assuming the datetime is same year as the current year)
The default relative format will display dates relative to the current time (unless they are past the threshold value - see below). The values are rounded to display a single unit, for example if the time between the given datetime and the current wall clock time exceeds a day, then the format will only ouput in days, and will not display hours, minutes or seconds. Some examples of this format with the default options and an en locale:
in 20 days
20 days ago
in 1 minute
on 31 Aug (assuming the current date is the same year as the current year, and is more than 30 days away from 31 Aug)
on 26 Aug 2021 (assuming the current date is more than 30 days away from 26 Aug 2021)
The duration format will display the time remaining (or elapsed time) from the given datetime, counting down the number of years, months, weeks, days, hours, minutes, and seconds. Any value that is 0 will be omitted from the display by default. Examples of this format with the default options and an en locale:
4 hours, 2 minutes, 30 seconds
4 hours
8 days, 30 minutes, 1 second
This is similar to the format=duration, except the formatStyle defaults to narrow. Code that  uses format=elapsed should migrate to format=duration formatStyle=narrow, as it will be removed in a later version.
This is identical to format=relative. Code that uses format=auto should migrae to format=relative as this will be the new default in a later version.
The micro format which will display relative dates (within the threshold) in a more compact format. Similar to relative, the micro format rounds values to the nearest largest value. Additionally, micro format will not round lower than 1 minute, as such a datetime which is less than a minute from the current wall clock time will display '1m'.
Code that uses format=micro should consider migrating to format=relative (perhaps with formatStyle=narrow), as format=micro can be difficult for users to understand, and can cause issues with assistive technologies. For example some screen readers (such as VoiceOver for mac) will read out 1m as 1 meter.
If format is 'datetime' then this value will be ignored.
Tense can be used to prevent duration or relative formatted dates displaying dates in a tense other than the one specified. Setting tense=past will always display future relative dates as now and duration dates as 0 seconds, while setting it to future will always display past dates relative as now and past duration dates as 0 seconds.
For example when the given datetime is 40 seconds behind of the current date:
If format is datetime then this value will be ignored.
Precision can be used to limit the display of an relative or duration formatted time. By default times will display down to the second level of precision. Changing this value will truncate the display by zeroing out any unit lower than the given unit, as such units smaller than the given unit won't be displayed during duration, and relative will display now if the time away from the current time is less than the given precision unit.
If tense is anything other than 'auto', or format is 'relative' (or the deprecated 'auto' or 'micro' values), then this value will be ignored.
Threshold can be used to specify when a relative display (e.g. ""5 days ago"") should turn into an absolute display (i.e. the full date). This should be a valid ISO8601 Time Duration. If the difference between the current time and the specified datetime is more than the duration, then the date will be displayed as an absolute value (i.e. the full date), otherwise it will be formatted to a relative display (e.g. ""5 days ago"").
The default value for this is P30D, meaning if the current time is more than 30 days away from the specified date time, then an absolute date will be displayed.
If tense is anything other than 'auto', or format is anything other than 'relative' (or the deprecated 'auto' or 'micro' values), then this value will be ignored.
When formatting an absolute date (see above threshold for more details) it can be useful to prefix the date with some text. The default value for this is on but it can be any string value, an will be prepended to the date.
This will used to determine the length of the unit names. This value is passed to the Intl objects as the style option. Some examples of how this can be used:
For dates outside of the specified threshold, the formatting of the date can be configured using these attributes. The values for these attributes are passed to Intl.DateTimeFormat:
Lang is a built-in global attribute. Relative Time will use this to provide an applicable language to the Intl APIs. If the individual element does not have a lang attribute then it will traverse upwards in the tree to find the closest element that does, or default the lang to en.
Browsers without native custom element support require a polyfill.
Browsers without native support for Intl.RelativeTimeFormat or Intl.DateTimeFormat (such as Safari 13 or Edge 18) will also need polyfills.
Chrome
Firefox
Safari (version 14 and above)
Microsoft Edge (version 79 and above)
Most of this implementation is based on Basecamp's local_time component. Thanks to @javan for open sourcing that work and allowing for others to build on top of it.
@rmm5t's jquery-timeago is one of the old time-ago-in-words JS plugins."
3608,"symfony,intl","A PHP replacement layer for the C intl extension that also provides access to the localization data of the ICU library.. The Intl component provides a PHP replacement layer for the C intl extension
that also provides access to the localization data of the ICU library.
The replacement layer is limited to the locale ""en"". If you want to use other
locales, you should install the intl PHP extension instead.
Documentation
Report issues and
send Pull Requests
in the main Symfony repository
Docker images with intl support
(for the Intl component development)"
3609,"aralroca,next-translate","Next.js plugin + i18n API for Next.js üåç  -  Load page translations and use them in an easy way!. 
    



    Easy <b>i18n</b> for Next.js +10


    <b>Next plugin</b> + <b>i18n API</b>




[![npm version](https://badge.fury.io/js/next-translate.svg)](https://badge.fury.io/js/next-translate)
![npm](https://img.shields.io/npm/dw/next-translate)
[![size](https://img.shields.io/bundlephobia/minzip/next-translate)](https://bundlephobia.com/package/next-translate)
[![PRs Welcome][badge-prwelcome]][prwelcome]








    


The main goal of this library is to keep the translations as simple as possible in a Next.js environment.
Next-translate has two parts: Next.js plugin + i18n API.
Features ‚ú®
üöÄ  „Éª Automatic page optimization (pages dir).
üèùÔ∏è  „Éª React 18 server/client pages/components (app dir).
ü¶Ñ  „Éª Easy to use and configure.
üåç  „Éª Basic i18n support: interpolation, plurals, useTranslation hook, Trans component...
üàÇÔ∏è  „Éª It loads only the necessary translations (for page and for locale).
üì¶  „Éª Tiny (~1kb) and tree shakable. No dependencies.

    


In the configuration file, you specify each page that namespaces needs:
i18n.json
Read here about how to add the namespaces JSON files.
Next-translate ensures that each page only has its namespaces with the current language. So if we have 100 locales, only 1 will be loaded.
In order to do this we use a webpack loader that loads the necessary translation files inside the Next.js methods (getStaticProps, getServerSideProps or getInitialProps). If you have one of these methods already on your page, the webpack loader will use your own method, but the defaults it will use are:
getStaticProps. This is the default method used on most pages, unless it is a page specified in the next two points. This is for performance, so the calculations are done in build time instead of request time.
getServerSideProps. This is the default method for dynamic pages like [slug].js or [...catchall].js. This is because for these pages it is necessary to define the getStaticPaths and there is no knowledge of how the slugs should be for each locale. Likewise, how is it by default, only that you write the getStaticPaths then it will already use the getStaticProps to load the translations.
getInitialProps. This is the default method for these pages that use a HoC. This is in order to avoid conflicts because HoC could overwrite a getInitialProps.
This whole process is transparent, so in your pages you can directly consume the useTranslate hook to use the namespaces, and you don't need to do anything else.
If for some reason you use a getInitialProps in your _app.js file, then the translations will only be loaded into your getInitialProps from _app.js. We recommend that for optimization reasons you don't use this approach unless it is absolutely necessary.
yarn add next-translate
The next-translate-plugin is a tool that allows developers to efficiently handle translations on a page-by-page basis during the build process. It is distinct from the next-translate package, which allows developers to access the translations in the code where it is needed. The plugin works by parsing all pages, searching for the translations and rewriting the page file adding the translations to it. This makes the plugin a more efficient and flexible solution for handling translations within a Next.js application. It is recommended to install the plugin as a devDependency.
yarn add next-translate-plugin -D
In your next.config.js file:
Or if you already have next.config.js file and want to keep the changes in it, pass the config object to the nextTranslate(). For example for webpack you could do it like this:
Add a configuration file i18n.json (or i18n.js with module.exports) in the root of the project. Each page should have its namespaces. Take a look at it in the config section for more details.
In the configuration file you can use both the configuration that we specified here and the own features about internationalization of Next.js 10.
By default the namespaces are specified on the /locales root directory in this way:
/locales
Each filename matches the namespace specified on the pages config property, while each file content should be similar to this:
However, you can use another destination to save your namespaces files using loadLocaleFrom configuration property:
i18n.js
Then, use the translations in the page and its components:
pages/example.js
You can consume the translations directly on your pages, you don't have to worry about loading the namespaces files manually on each page. The next-translate plugin loads only the namespaces that the page needs and only with the current language.
In the configuration file you can use both the configuration that we specified here and the own features about internationalization of Next.js 10.
Size: ~150b üì¶
This hook is the recommended way to use translations in your pages / components.
Input: string - defaultNamespace (optional)
Output: Object { t: Function, lang: string }
Example:
The t function:
Input:
i18nKey: string (namespace:key)
query: Object (optional) (example: { name: 'Leonard' })
options: Object (optional)
fallback: string |¬†string[] - fallback if i18nKey doesn't exist. See more.
returnObjects: boolean - Get part of the JSON with all the translations. See more.
default: string - Default translation for the key. If fallback keys are used, it will be used only after exhausting all the fallbacks.
ns: string - Namespace to use when none is embded in the i18nKey.
Output: string
Size: ~560b üì¶
It's an alternative to useTranslation hook, but in a HOC for these components that are no-functional. (Not recommended, it's better to use the useTranslation hook.).
The withTranslation HOC returns a Component with an extra prop named i18n (Object { t: Function, lang: string }).
Example:
Similar to useTranslation(""common"") you can call withTranslation with the second parameter defining a default namespace to use:
Size: ~1.4kb üì¶
Sometimes we need to do some translations with HTML inside the text (bolds, links, etc), the Trans component is exactly what you need for this. We recommend to use this component only in this case, for other cases we highly recommend the usage of useTranslation hook instead.
Example:
Or using components prop as a object:
Props:
i18nKey - string - key of i18n entry (namespace:key)
components - Array<Node> | Object<Node> - In case of Array each index corresponds to the defined tag &lt;0&gt;/&lt;1&gt;. In case of object each key corresponds to the defined tag &lt;example&gt;.
values - Object - query params
fallback - string | string[] - Optional. Fallback i18nKey if the i18nKey doesn't match.
defaultTrans - string - Default translation for the key. If fallback keys are used, it will be used only after exhausting all the fallbacks.
ns - Namespace to use when none is embedded in i18nKey
In cases where we require the functionality of the Trans component, but need a string to be interpolated, rather than the output of the t(props.i18nKey) function, there is also a TransText component, which takes a text prop instead of i18nKey.
Props:
text - string - The string which (optionally) contains tags requiring interpolation
components - Array | Object - This behaves exactly the same as Trans (see above).
This is especially useful when mapping over the output of a t() with returnObjects: true:
Size: ~1.5kb üì¶
The DynamicNamespaces component is useful to load dynamic namespaces, for example, in modals.
Example:
Remember that ['dynamic'] namespace should not be listed on pages configuration:
Props:
namespaces - string[] - list of dynamic namespaces to download - Required.
fallback- ReactNode - Fallback to display meanwhile the namespaces are loading. - Optional.
dynamic - function - By default it uses the loadLocaleFrom in the configuration to load the namespaces, but you can specify another destination. - Optional.
Size: ~1.3kb üì¶
Asynchronous function to load the t function outside components / pages. It works on both server-side and client-side.
Unlike the useTranslation hook, we can use here any namespace, it doesn't have to be a namespace defined in the ""pages"" configuration. It downloads the namespace indicated as a parameter on runtime.
You can load multiple namespaces by giving an array as a parameter, in this case the default namespace will be the fist one.   
Example inside getStaticProps:
Example inside API Route:
Example of loading multiple namespaces:
Size: ~3kb üì¶
The I18nProvider is a context provider internally used by next-translate to provide the current lang and the page namespaces. SO MAYBE YOU'LL NEVER NEED THIS.
However, it's exposed to the API because it can be useful in some cases. For example, to use multi-language translations in a page.
The I18nProvider is accumulating the namespaces, so you can rename the new ones in order to keep the old ones.
Size: ~3.7kb üì¶
The appWithI18n is internally used by next-translate. SO MAYBE YOU'LL NEVER NEED THIS. However, we expose it in the API in case you disable the webpack loader option and decide to load the namespaces manually.
If you wish not to use the webpack loader, then you should put this in your _app.js file (and create the _app.js file if you don't have it).
Example:
_app.js
If skipInitialProps=true, then you should also use the loadNamespaces helper to manually load the namespaces on each page.
Size: ~1.9kb üì¶
The loadNamespaces is internally used by next-translate. SO MAYBE YOU'LL NEVER NEED THIS. However, we expose it in the API in case you disable the webpack loader option and decide to load the namespaces manually.
To load the namespaces, you must return in your pages the props that the helper provides.
üö® To work well, it is necessary that your _app.js will be wrapped with the appWithI18n. Also, the loadLocaleFrom configuration property is mandatory to define it.
We support 6 plural forms (taken from CLDR Plurals page) by adding to the key this suffix (or nesting it under the key with no _ prefix):
_zero
_one (singular)
_two (dual)
_few (paucal)
_many (also used for fractions if they have a separate class)
_other (required‚Äîgeneral plural form‚Äîalso used if the language only has a single form)
See more info about plurals here.
Only the last one, _other, is required because it‚Äôs the only common plural form used in all locales.
All other plural forms depends on locale. For example English has only two: _one and _other (1 cat vs. 2 cats). Some languages have more, like Russian and Arabic.
In addition, we also support an exact match by specifying the number (_0, _999) and this works for all locales. Here is an example:
<small>Code:</small>
<small>Namespace:</small>
or
Intl.PluralRules API is only available for modern browsers, if you want to use it in legacy browsers you should add a polyfill.
You can define HTML inside the translation this way:
Example:
Rendered result:
Each index of components array corresponds with &lt;index&gt;&lt;/index&gt; of the definition.
In the components array, it's not necessary to pass the children of each element. Children will be calculated.
In the namespace, it's possible to define nested keys like this:
In order to use it, you should use ""."" as id separator:
Also is possible to use as array:
And get all the array translations with the option returnObjects:
Also it is possible to get all the translations by using the keySeparator as the key, default is '.' :  
If no translation exists you can define fallbacks (string|string[]) to search for other translations:
List of fallbacks:
In Trans Component:
You can format params using the interpolation.formatter config function.
in i18n.js:
In English namespace:
In Spanish namespace:
Using:
Returns:
In English: The number is 33.5
In Spanish: El n√∫mero es 33,5
In order to change the current language you can use the Next.js navigation (Link and Router) passing the locale prop.
An example of a possible ChangeLanguage component using the useRouter hook from Next.js:
You could also use setLanguage to change the language while keeping the same page.
Another way of accessing the locales list to change the language is using the Next.js router. The locales list can be accessed using the Next.js useRouter hook.
You can set a cookie named NEXT_LOCALE with the user-defined language as value, this way a locale can be forced.
Example of hook:
In some cases, when the page is in the current language, you may want to do some exceptions displaying some text in another language.
In this case, you can achieve this by using the I18nProvider.
Learn how to do it here.
Next-translate uses by default the current working directory of the Node.js process (process.cwd()).
If you want to change it you can use :
the NEXT_TRANSLATE_PATH environment variable. It supports both relative and absolute path
the native NodeJS function process.chdir(PATH_TO_NEXT_TRANSLATE) to move the process.cwd()
When it comes to server components and client components, it can be challenging to load the same thing on different pages. To simplify this process, we have extracted all the complexity using the next-translate-plugin.
If you're interested in learning more about how Next-translate works with the new Next.js 13 app dir paradigm, check out this article for a detailed explanation. 
If you use the ""app"" folder instead of the ""pages"" folder, the next-translate-plugin will automatically detect the change, and you won't need to touch any of the Next-translate configuration. The only difference is that the ""pages"" configuration property will reference the pages located within the ""app"" folder.
i18n.js
By simply changing the ""pages"" folder to ""app,"" you can consume translations within your pages using the useTranslation hook or the Trans component. You will still see the log (if enabled) to know which namespaces are loaded on each page, and everything else should be the same.
üåä Server page/component (+0kb): app/page.js:
üèùÔ∏è Client page/component (+498B): app/checkout/page.js
Next.js 10 introduced i18n routing support, allowing pages to be rendered by navigating to /es/page-name, where the page pages/page-name.js was accessed using the useRouter hook to obtain the locale. 
However, since the pages have been moved from the pages dir to the app dir, this i18n routing no longer works correctly.
At Next-translate, we have chosen not to re-implement this functionality, as we aim to be a library for translating pages, rather than routing them. We hope that in the future, this feature will be implemented in the app directory, as it is still in beta and many features still need to be supported.
However, all the support currently available is with the lang parameter. That is, /es/page-name?lang=es renders the page app/page-name/page.js, where we have internal access to the lang parameter, and you do not need to do anything extra other than using the useTranslation hook to consume your translations.
All the same, if you wish to use the language as a subpath /es/page-name without the param, you can utilize middleware to append the lang parameter and perform a rewrite:
Here in the middleware, we are not adding the locale as a subpath, but rather eliminating the need to manually add the lang parameter. By default, the subpath still exists, but you cannot use useRouter from next/router to access the locale within the components of the app directory. Therefore, we still need the parameter, even if we hide it from view.
And to navigate:
If you need more i18n routing features like automatic locale detection you can follow these steps from the Next.js documentation:
https://beta.nextjs.org/docs/guides/internationalization.
There is a demo of next-translate on the Next.js repo:
https://github.com/vercel/next.js/tree/master/examples/with-next-translate
To use it:
This demo is in this repository:
git clone git@github.com:aralroca/next-translate.git
cd next-translate
yarn &amp;&amp; yarn example:basic
Similar than the basic demo but with some extras: TypeScript, Webpack 5, MDX, with _app.js on top, pages located on src/pages folder, loading locales from src/translations with a different structure.
This demo is in this repository:
git clone git@github.com:aralroca/next-translate.git
cd next-translate
yarn &amp;&amp; yarn example:complex
Similar than the complex demo but with some extra: Instead of pages folder, we are using the Next.js +13 app folder with the new layouts system.
This demo is in this repository:
git clone git@github.com:aralroca/next-translate.git
cd next-translate
yarn &amp;&amp; yarn example:with-app-directory
Similar than the basic example but loading the page namespaces manually deactivating the webpack loader in the i18n.json config file.
We do not recommend that it be used in this way. However we give the opportunity for anyone to do so if they are not comfortable with our webpack loader.
This demo is in this repository:
git clone git@github.com:aralroca/next-translate.git
cd next-translate
yarn &amp;&amp; yarn example:without-loader
Thanks goes to these wonderful people (emoji key):
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Aral Roca Gomez</b></sub>üöß üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Vincent Ducorps</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Bj√∂rn Rave</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Justin</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Pol</b></sub>üöá</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Adem√≠lson F. Tonato</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Faul</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>bickmaev5</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Pierre Grimaud</b></sub>üìñ</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Roman Minchyn</b></sub>üìñ üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Egor</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Darren</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Giovanni Giordano</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Eugene</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Andrew Chung</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Thanh Minh</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>crouton</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Patrick</b></sub>üìñ</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Vantroy</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Joey</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>gurkerl83</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Teemu Per√§m√§ki</b></sub>üìñ</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Luis Serrano</b></sub>üìñ</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>j-schumann</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Andre Hsu</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>slevy85</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Bernd Artm√ºller</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Rihards ≈†ƒçeredins</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>n4n5</b></sub>üìñ</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Rub√©n Moya</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Tom Esterez</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Dan Needham</b></sub>üíª ‚ö†Ô∏è üìñ</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Bruno Antunes</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Kaan Atakan</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Romain</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Arnau Jim√©nez</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Edwin Veldhuizen</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Duc Ngo Viet</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Billel Helali</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Wuif</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Micha≈Ç Bar</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Wuif</b></sub>üíª</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Marces Engel</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Micha≈Ç Bar</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Dragate</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Marces Engel</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Vasco Silva</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Vsevolod Volkov</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Felix Yan</b></sub>üìñ</td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Muhammad Al Ziqri</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Marcelo Oliveira</b></sub>üíª</td>
      <td align=""center"" valign=""top"" width=""14.28%""><sub><b>Zack Sunderland</b></sub>üíª</td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the all-contributors specification. Contributions of any kind welcome!"
3610,"ever-co,ever-traduora","Ever¬Æ Traduora - Open-Source Translation Management Platform. Ever¬Æ Traduora - Open Translation Management Platform for teams. 
Once you setup your project you can import and export your translations to various formats, work together with your team, instantly deliver translation updates over the air, and soon automatically translate your project via third-party integrations.

We want Traduora to become the home for managing your translation workflow, that's why we have made all of the core product open-source with the intention to grow a community and enable developers to build on top of it as a platform. 
We are going to also use Traduora from our other open-source platforms (currently https://github.com/ever-co/ever-gauzy and https://github.com/ever-co/ever-demand). You are welcome to check more information about the platforms at our official website - https://ever.co.
For quick features review, please see our official docs screenshots page.
Short list of platform features:
5-minute setup with Docker, Kubernetes or from source
Find what you are looking for with instant search
Invite your team, everyone can work together on the same project
Automate your translation workflow via our REST API
Import and export to your favorite formats: JSON flat and nested, CSV, YAML flat and nested, Java Properties, XLIFF 1.2, Gettext (po), Strings, Android Resources (xml).
community contributed CLI available at https://github.com/iilei/traduora-cli (not official CLI)
For more information check out our official website traduora.co, or our docs at docs.traduora.co.
Any missing feature you'd like to see? File an issue with the feature request to let us know.
Please refer to our official Platform Documentation.
Traduora can be run just about anywhere, check out our Quickstart for more info.
Also check out Traduora's Docker Hub page for pre-built images.
Please check out the configuration and deployment documents for more information on deploying Traduora.
Some questions come up over and over again. Be sure to check out our FAQ first!
For business inquiries: &#116;&#114;&#97;&#100;&#117;&#111;&#114;&#97;&#64;&#101;&#118;&#101;&#114;&#46;&#99;&#111;
Please report security vulnerabilities to &#115;&#101;&#99;&#117;&#114;&#105;&#116;&#121;&#64;&#101;&#118;&#101;&#114;&#46;&#99;&#111;
Security is very important to us. 
Ever¬Æ Traduora Platform follows good security practices, but 100% security cannot be guaranteed in any software!
Ever¬Æ Traduora Platform is provided AS IS without any warranty. Use at your own risk!
See more details in the LICENSE.
In a production setup, all client-side to server-side (backend, APIs) communications should be encrypted using HTTPS/SSL (REST APIs).
If you discover any issue regarding security, please disclose the information responsibly by sending an email to &#115;&#101;&#99;&#117;&#114;&#105;&#116;&#121;&#64;&#101;&#118;&#101;&#114;&#46;&#99;&#111; or on   and not by creating a GitHub issue.
Of course we'd like Traduora to be available in as many languages as possible. We're setting up a Traduora server for translating Traduora itself, check back soon for more details on how to contribute.
You can check our changelog for information about releases.
See LICENSE.

Traduora was created by https://github.com/anthonynsimon (https://anthonynsimon.com) and contributors. In April 2021 it was moved to Ever company for future development.
Ever¬Æ is a registered trademark of Ever Co. LTD.
Ever¬Æ Demand‚Ñ¢, Ever¬Æ Gauzy‚Ñ¢ and Ever¬Æ OpenSaaS‚Ñ¢  are all trademarks of Ever Co. LTD.
The trademarks may only be used with the written permission of Ever Co. LTD. and may not be used to promote or otherwise market competitive products or services.
All other brand and product names are trademarks, registered trademarks or service marks of their respective holders.
We think it's great that you'd like to contribute to Traduora.
Please give us :star: on Github, it helps!
You are more than welcome to submit feature requests in the separate repo.
Pull requests are always welcome! Please base pull requests against the develop branch and follow the contribution guidelines. 
See our contributors list in CONTRIBUTORS.md.
You can also view full list of our contributors tracked by Github.
"
3611,"ivanhofer,typesafe-i18n","A fully type-safe and lightweight internationalization library for all your TypeScript and JavaScript projects.. A fully type-safe and lightweight internationalization library for all your TypeScript and JavaScript projects.








:baby_chick: lightweight (~1kb)\
:ok_hand: easy to use syntax\
:running: fast and efficient\
:safety_vest: prevents you from making mistakes (also in plain JavaScript projects)\
:construction_worker: creates boilerplate code for you\
:speech_balloon: supports plural rules\
:date: allows formatting of values e.g. locale-dependent date or number formats\
:left_right_arrow: supports switch-case statements e.g. for gender-specific output\
:arrow_down: option for asynchronous loading of locales\
:books: supports multiple namespaces\
:stopwatch: supports SSR (Server-Side Rendering)\
:handshake: can be used for frontend, backend and API projects\
:mag: locale-detection for browser and server environments\
:arrows_counterclockwise: import and export translations from/to files or services\
:no_entry: no external dependencies
<!-- list of supported emojis on GitHub: https://github.com/ikatyang/emoji-cheat-sheet -->

Click here to see an interactive demo of typesafe-i18n showing some key aspects of the type-checking capabilities of this internationalization library.

   <a title=""TypeScript"" href=""#usage"">
      
   
   <a title=""Svelte"" href=""https://github.com/ivanhofer/typesafe-i18n/tree/main/packages/adapter-svelte"">
      
   
   <a title=""React"" href=""https://github.com/ivanhofer/typesafe-i18n/tree/main/packages/adapter-react"">
      
   
   <a title=""Vue.js"" href=""https://github.com/ivanhofer/typesafe-i18n/tree/main/packages/adapter-vue"">
      
   
   <a title=""Angular"" href=""https://github.com/ivanhofer/typesafe-i18n/tree/main/packages/adapter-angular"">
      
   
   <a title=""SolidJS"" href=""https://github.com/ivanhofer/typesafe-i18n/tree/main/packages/adapter-solid"">
      
   
   <a title=""Node.js"" href=""https://github.com/ivanhofer/typesafe-i18n/tree/main/packages/adapter-node"">
      
   
   <a title=""JavaScript"" href=""#usage"">
      
   


<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->

Get started - how to add typesafe-i18n to your project
Usage - how to implement different use-cases
Typesafety - how to get the best typesafety features
Syntax - how to use the translation functions
Dictionary - how to structure your translations
Namespaces - how to optimize loading of your translations
Formatters - how to format dates and numbers
Switch-Case - how to output different words depending on an argument
Locale-detection - how to detect an user's locale
Utility functions - useful utility functions
Integrations - how to integrate other i18n services
Sizes - how much does typesafe-i18n add to your bundle size
Performance - how efficient is typesafe-i18n implemented
Sponsors - how to help this project grow
FAQs - how to get your questions answered
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->

:keyboard: Run the setup process and automatically detect the config needed
or manually configure typesafe-i18n by answering a few questions
It didn't work? See here for possible troubleshooting.
:eyes: Take a look at the generated files and it's folder-structure after running npm run typesafe-i18n (or npx typesafe-i18n)
:open_book: Explore the assets
typesafe-i18n offers a lot. Just press cmd + F to search on this page or see the table of contents that will link you to more specific subpages with more details.
:star: Star this project on GitHub
Thanks! This helps the project to grow.
\
Having trouble setting up typesafe-i18n? Reach out to us via Github Discussions or on Discord.
The changelog of this project can be found here
to version 5.x.x: see the release post
to version 4.x.x: see the release post
to version 3.x.x: see the release post
Curious about what comes next? See this discussion to learn more about the plans for the future of this project.
If you would like to get involved within this project, take a look at this discussion.
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->

The package can be used inside JavaScript and TypeScript applications. You will get a lot of benefits by running the generator since it will create a few wrappers to provide you with full typesafety.
You can use typesafe-i18n in a variety of project-setups:
Angular applications
Node.js apis, backends, scripts, ...
React / Next.js applications
Solid.js applications
Svelte / SvelteKit / Sapper applications
Vue.js / Nuxt.js applications
Browser (via CDN) projects
All you need is inside the generated file i18n-util.ts. You can use the functions in there to create a small wrapper for your application.
Feel free to open a new discussion if you need a guide for a specific framework.
See here if you want to learn how you can use typesafe-i18n to implement your own specific use-case.
The library should work in all modern browsers. It uses some functionality from the Intl namespace. You can see the list of supported browsers here. If you want to support older browsers that don't include these functions, you would need to include a polyfill like intl-pluralrules.
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->

If you want to get the best typesafety features, you will need to use the generator in order to create types and boilerplate code for you
Here you can see some examples where typesafe-i18n can help you:







The typesafe-i18n package allows us to be 100% typesafe for our translation functions and even the translations for other locales itself. The generator outputs TypeScript definitions based on your base locale.
You will also benefit from full typesafe JavaScript code via JSDoc-annotations.
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->

typesafe-i18n comes with an API that allows other services to read and update translations. You can connect other services by using the importer and exporter functionality.
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->

The footprint of the typesafe-i18n package is smaller compared to other existing i18n packages. Most of the magic happens in development mode, where the generator creates TypeScript definitions for your translations. This means, you don't have to ship the whole package to your users. The only two parts, that are needed in production are:
string-parser: detects variables, formatters and plural-rules in your localized strings
translation function: injects arguments, formats them and finds the correct plural form for the given arguments
These parts are bundled into the core functions. The sizes of the core functionalities are:
i18nString: 987 bytes gzipped
i18nObject: 1128 bytes gzipped
i18n: 1159 bytes gzipped
Apart from that there can be a small overhead depending on which utilities and wrappers you use.
There also exists a useful wrapper for some frameworks:
typesafe-i18n angular-service: 1440 bytes gzipped
typesafe-i18n react-context: 1618 bytes gzipped
typesafe-i18n solid-context: 1449 bytes gzipped
typesafe-i18n svelte-store: 1381 bytes gzipped
typesafe-i18n vue-plugin: 1299 bytes gzipped
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->

The package was optimized for performance:
the amount of network traffic is kept small\
The translation functions are small. Only the locales that are used are loaded
no unnecessary workload\
Parsing your translation file for variables and formatters will only be performed when you access a translation for the first time. The result of that parsing process will be stored in an optimized object and kept in memory.
fast translations\
 Passing variables to the translation function will be fast, because its treated like a simple string concatenation. For formatting values, a single function is called per formatter.
If you use typesafe-i18n you will get a smaller bundle compared to other i18n solutions. But that doesn't mean, we should stop there. There are some possible optimizations planned to decrease the bundle size even further.
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->

Become a sponsor :heart: if you want to support my open source contributions.

   
      
   



   Thanks for sponsoring my open source work!


<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->
<!-- ------------------------------------------------------------------------------------------ -->

Dou you still have some questions? Reach out to us via Github Discussions or on Discord.
Running the npx command with a npm version &lt;7.0.0 will probably fail because it will not include peerDependencies.
You could try installing it locally via:
and then run  the setup-command from within the node_modules folder via:
here is the original issue with some additional information: #142
Make sure to run the generator after you make changes to your base translation file. The generator will generate and update the types for you.
Yes, you can. See the usage section for instructions. Even if you don't use TypeScript you can still improve from some typesafety features via JSDoc-annotations.
The generator will only look for changes in your base locale file. Make sure to always update your base locale file first, in order to get the correct auto-generated types. If you want to change your base locale file, make sure to give it the type of BaseTranslation. All other locales should have the type of Translation. E.g. if you set your base locale to italian, you would need to do it like this:
set your base locale to italian (it) in ¬¥.typesafe-i18n.json`:
define the type of your base locale as BaseTranslation
const it: BaseTranslation = {
   WELCOME: ""Benvenuto!""
}
export default it
define the type of your other locales as Translation
const en: Translation = {
   WELCOME: ""Welcome!""
}
export default en
The generator creates some helpful wrappers for you. If you want to write your own wrappers, you can disable the generation of these files by setting the generateOnlyTypes option to true.
Yes, you can configure i18n-ally like this. There is currently also an open PR that will add official support for typesafe-i18n.
When you want to dynamically access a translation, you can use the usual JavaScript syntax to access a property via a variable (myObject[myVariable]).
define your translations
use it in your components
By default typesafe-i18n at this time does not provide such a functionality. Basically you will need to write a function that splits the translated message and renders a component between the parts. You can define your split characters yourself but you would always need to make sure you add them in any translation since typesafe-i18n doesn't provide any typesafety for these characters (yet).
With the strong typesafety features, you'll know if a locale is missing a translation. But in rare cases you might want to use your base translation as a fallback for other locales.
See the next FAQ entry. The same concept can be applied to prefill your translations with the base translation and then just override the parts that are translated.
You'll loose the some sort of typesafety with that approach since you can't know which parts are translated and which are not. Using the base translation as a fallback is not recommended because your UI will contain two different locales which might confuse your users.
Your locale translation files can be any kind of JavaScript object. So you can make object-transformations inside your translation file. The only restriction is: in the end it has to contain a default export with type Translation. You could do something like this:
create your BaseTranslation
const en: BaseTranslation = {
   WELCOME: ""Welcome to XYZ"",
   // ... some other translations
COLOR: ""colour""
}
export default en
create your other translation that overrides specific translations
const en_US: Translation = {
   ...en as Translation, // use destructuring to copy all translations from your 'en' locale
COLOR: ""color"" // override specific translations
}
export default en_US
If you are using nested translations, you should use the provided extendDictionary function that uses lodash/merge under the hood.
The generated types are really strict. It helps you from making unintentional mistakes. If you want to opt-out for certain translations, you can use the any keyword.
create your BaseTranslation with a translation containing a parameter
const en: BaseTranslation = {
   HELLO: ""Hi {name}!"",
}
export default en
create another locale without that parameter by disabling the strict type checking with  as any
const de: Translation = {
   HELLO: ""Hallo!"" as any // we don't want to output the 'name' variable
}
export default de
WARNING! the usage of 'any' can introduce unintentional mistakes in future. It should only be used when really necessary and you know what you are doing.
A better approach would be to create a custom formatter e.g.
create your translation and add a formatter to your variable
const en: BaseTranslation = {
   HELLO: ""Hi {name|nameFormatter}!"",
}
export default en
const de: Translation = {
   HELLO: ""Hallo {name|nameFormatter}!""
}
export default de
create the formatter based on the locale
export const initFormatters: FormattersInitializer<Locales, Formatters> = (locale: Locales)    => {
const nameFormatter =
      locale === 'de'
         // return an empty string for locale 'de'
         ? ignore // same as: () => ''
         // return the unmodified parameter
         : identity // same as: (value) => value
const formatters: Formatters = {
      nameFormatter: nameFormatter
   }
return formatters
}
With the help of LocalizedString you could enforce texts in your application to be translated. Lets take an Error message as example:
In this example we can pass in any string, so it can also happen that some parts of your application are not translated. To improve your i18n experience a bit we can take advantage of the LocalizedString type:
With the type LocalizedString you can restrict your functions to only translated strings.
Unfortunately there are some open issues in the Jest repository regarding modern package export formats so jest doesn't know where to load files from.
You need to manually tell jest where these files should be loaded from, by defining moduleNameMapper inside your jest.config.js:
here is the original issue with some additional information: #140
Node.JS, by default, does not come with the full intl support. To reduce the size of the node installment it will only include 'en' as locale. You would need to add it yourself. The easiest way is to install the intl package
and then add following lines on top of your src/i18n/formatters.ts file:
Then you should be able to use formatters from the Intl namespace with all locales.
Note: this is an older approach to the problem. You should not need this when using Node.js version > 16.
<!-- TODO: check if this is now fixed in node version 16 -->

Yarn uses a strange way to install dependencies in a monorepo setup. The issue lays in the ""hoisting"" of packages (see this issue). Therefore it might be that the typesafe-i18n dependencies cannot be found.
Changing the workspace config in package.json will fix the issue:"
4802,"superfluid-finance,protocol-monorepo","Superfluid Protocol Monorepo: the specification, implementations, peripherals and development kits.. Welcome to superfluid protocol-monorepo üëã


  
    
  
  
     
  
  
    
  
  
    
  
  
    
  
  
     
  
  
  
    
  
  
      
  


Contracts and resources for the Superfluid Protocol
The Superfluid Protocol is a framework that realizes the real-time finance vision
where user accounts are connected together, and transactions can happen between
user accounts instantaneously as a result.
This repository implements the superfluid protocol as Ethereum contracts. It also
contains a Javascript SDK for developing Web3 applications using the superfluid
protocol.
For technical document, references and tutorials, etc, refer to the
docs site.

  
    
  
  
    
  
  
    
  


EVM contracts implementation for the Superfluid Protocol.
If you're interest in peeking under the hood, then check out the contracts package.

  
    
  
  
    
  
  
    
  


SDK-Core is an application framework for interacting with the Superfluid Protocol without Solidity knowledge.

  
    
  
  
    
  


SDK-Redux is an application framework for building front-end applications that interact with the Superfluid Protocol.

  
    
  


Hot-fuzz is a wrapper of Echidna with additional helper for fuzzing
your Superfluid smart contracts applications, including Super Apps.

  
    
  


Official subgraph for the Superfluid Protocol.

  
    
  
  
    
  


:warning: This repo is fully deprecated, use sdk-core instead :warning:
You can get the last release of js-sdk at the branch here.
Javascript SDK for building with Superfluid Protocol.
Click here for more information regarding our Bug Bounty.
See our examples repo for some Superfluid app examples.
Contributions, issues, and feature suggestions are welcome! See CONTRIBUTING.md to get started.
Thanks goes to these wonderful people (üê∏):
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><sub><b>Joshua Trujillo</b></sub>üíª</td>
    <td align=""center""><sub><b>Manav Darji</b></sub>üíª</td>
    <td align=""center""><sub><b>Drew Fisher</b></sub>üíª</td>
    <td align=""center""><sub><b>Didi</b></sub>üíª</td>
    <td align=""center""><sub><b>Omidiora Samuel</b></sub>üíª</td>
    <td align=""center""><sub><b>Prafful</b></sub>üíª</td>
    <td align=""center""><sub><b>mjaago</b></sub>üíª</td>
  </tr>
  <tr>
    <td align=""center""><sub><b>markcarey</b></sub>üíª</td>
    <td align=""center""><sub><b>Bertrand Juglas</b></sub>‚ú®</td>
  </tr>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the all-contributors specification. Contributions of any kind welcome!"
4166,"cretueusebiu,laravel-vue-spa","A Laravel-Vue SPA starter kit.. 


A Laravel-Vue SPA starter project template.




Laravel 6.0
Vue + VueRouter + Vuex + VueI18n + ESlint
Pages with dynamic import and custom layouts
Login, register, email verification and password reset
Authentication with JWT
Socialite integration
Bootstrap 4 + Font Awesome 5
composer create-project --prefer-dist cretueusebiu/laravel-vue-spa
Edit .env and set your database connection details
(When installed via git clone or download, run php artisan key:generate and php artisan jwt:secret)
php artisan migrate
npm install
This project comes with GitHub as an example for Laravel Socialite.
To enable the provider create a new GitHub application and use https://example.com/api/oauth/github/callback as the Authorization callback URL.
Edit .env and set GITHUB_CLIENT_ID and GITHUB_CLIENT_SECRET with the keys form your GitHub application.
For other providers you may need to set the appropriate keys in config/services.php and redirect url in OAuthController.php.
To enable email verification make sure that your App\User model implements the Illuminate\Contracts\Auth\MustVerifyEmail contract.
Please see CHANGELOG for more information what has changed recently."
4931,"pachno,pachno","Pachno is an open source platform for collaboration: issue tracking, project management, documentation, code and more. 
With Pachno you get:
A powerful documentation editor for all your teams documentation needs
Workflow support with custom workflow configuration
Planning boards with kanban and scrum features
Issue tracking including custom fields and data
Time tracking for individual tasks and user
Team support for multiple teams and clients
Built-in features for supporting a wide range of projects and configurations
An extensible module-based platform, built to expand and improve
... and a lot more!
Follow the instructions in the installation guide for detailed installation instructions.
If you find any issues, please report them in the issue tracker on our website:
https://projects.pach.no
If you want to write code for Pachno, either to test out extensions or contribute bug-fixes or features, 
you can get up and running quickly using the provided development set-up.
Our community of helpful and friendly volunteers is always growing. If you are looking for an opensource project to get involved with,
we'd love to get you onboard! Here, you get to influence in a meaningful way. In no particular order:
writing documentation, guides and articles
triaging (verifying) and investigating issues
suggest and influence new features
writing code
improve design and suggest new ones
contribute in our online community by either participating or moderating
testing and QA
If you want to pop by and chat, join us on https://pachno.zulipchat.com 
Prefer to get your hands dirty? Have a look at our issues on https://projects.pach.no/pachno
Visit our online community at https://forum.pach.no"
4319,"emesik,monero-testnet-sandbox","Monero (XMR) testnet sandbox with 3 daemons and 3 wallets. This project provides a minimal testnet sandbox which allows you to explore and play with Monero (XMR) on your own network with no cost.
You will get 3 wallets:
walletA with address 9u9j6xG1GNu4ghrdUL35m5PQcJV69YF8731DSTDoh7pDgkBWz2LWNzncq7M5s1ARjPRhvGPX4dBUeC3xNj4wzfrjV6SY3e9
walletB with address 9yhHFUUZeARW6ecyHJe2ZARrWEHnifGLQK8tvKZVccVYNoeRKQp8rfDXGzWaJuGT4m3diT8gHGww9B5vwW92m2k91iMJTPM
walletC with random address
There's a setup for 3 daemons that start mining immediately after at least two of them connect forming a network:
node1 will mine to walletA
node2 will mine to walletB
node3 will mine to walletC
Each wallet and node is started by run.sh script in their directory.
You should receive first unlocked coins once 61st block has been mined.
Too many blocks? Want to try again? You may remove all wallets, blockchain copies and logs by running clean.sh. Make sure all wallets and nodes have been shut down before. This will restart your testnet from scratch."
4013,"alectro,SCSScale","Typographic modular scale starter based on body's font-size built on SCSS.. Typographic modular scale starter based on body's font-size built on SCSS.
Font-size calculated in rem with a fallback integer number in pixels and line-height in number (unitless).
Open scss/setup.scss.
Edit the values for $body, $ratio, $lineHeight for both Desktop and Mobile.
Save and compile.
Credit:
oocss by @stubbornella
Source:
A modern scale for web typography"
4757,"japgolly,scalacss","Super type-safe CSS for Scala and Scala.JS.. ScalaCSS aims to bring type-safety and clarity to
creating CSS
using CSS
maintaining CSS
correctness of CSS
The goals and vision of the project are documented in
its requirements.
Most requirements are satisfied; some will be addressed a little later.
Documentation is here.
If you like what I do
‚Äîmy OSS libraries, my contributions to other OSS libs, my programming blog‚Äî
and you'd like to support me, more content, more lib maintenance, please become a patron!
I do all my OSS work unpaid so showing your support will make a big difference."
4651,"MFatihMAR,Awesome-Game-Networking","A Curated List of Game Network Programming Resources. 

Game networking is a subset of computer networking that commonly covers data replication, state synchronization, snapshot interpolation, client-side prediction, lag compensation, anti cheating, load balancing, bandwidth optimization\
&mdash; and many more techniques involved in multiplayer online game programming.
Please feel free to contribute your awesome resource after reading contribution guidelines, thank you!
Ethernet vs. WiFi - Internet connection over WiFi vs Ethernet metrics comparison by Viscarious from Riot Games.
Explaining Delay-based and Rollback Netcode - In-depth article on rollback netcode for fighting games by Ricky Pusch.
Fast-Paced Multiplayer - Gabriel Gambetta's client-side prediction, entity interpolation, lag compensation articles.
Gaffer on Games - Glenn Fiedler's reliable-UDP protocol and game network development articles.
Game Server Architecture - Matthew Walker's multiplayer game server architecture blog.
High Performance Browser Networking - A fantastic free online book about modern web protocols by Ilya Grigorik.
How a Shooter Shoots - Armin Ronacher's analysis on Battlefield 3's shooting mechanism in multiplayer.
Impact Of Latency In Wireless Networks For Real-time Multiplayer Games On Mobile Devices - An academic paper.
IT Hare on Network Programming - Detailed network programming articles from IT Hare team.
NAT Punch-through for Multiplayer Games - Brief summary of NAT and P2P connectivity by Keith Johnston.
Netcode Explained - Basic game networking concepts with examples by Chris ""Battle(non)sense"" on PC Gamer.
Networked Physics in Virtual Reality - Networking a stack of cubes with Unity and PhysX by Glenn Fiedler at Oculus.
Network Protocols - A brief yet detailed overview of low-level network protocols stack from Destroy All Software.
Photon Unity Networking - Official PUN multiplayer online game networking framework documentation wiki.
Quake 3 Network Model - Fabien Sanglard's source code review about Quake 3's networking model.
Real Time Multiplayer in HTML5 - Sven Bergstr√∂m's multiplayer game development guide using web technologies.
Replication in Networked Games - Mikola Lysenko's replication articles for JavaScript-based multiplayer games.
Source Multiplayer Networking - Valve's Source engine wiki that includes advanced game networking topics.
Tech-Stack of the Ultima Online Servers - A brief summary about UO tech-stack by Raph Koster and Brian Crowder.
The Case of the Quake Cheats - Security lessons learned about client-server model from Quake 1 by id Software.
The DOOM III Network Architecture - Improvements upon previous network architectures used in Quake III Arena.
The Poor Man's Netcode - Project code and detailed blog post about networking challenges by Evan Todd.
The TRIBES Engine Networking Model - Tribes I & II's networking model paper by Mark Frohnmayer and Tim Gift.
Tick Based Lag Compensation in Unity - Case scenario on shooting with better accuracy by Albin Cor√©n.
Unity Physics and Client-Side Prediction - Demo project and detailed how-to blog post by Joe Best-Rotheray.
Unity UNET HLAPI and Steam P2P Networking - Example project and detailed blog post by Justin Rempel.
Unreal Engine 1 Netcode - Historical paper on netcode in UE1 (Unreal, Unreal Tournament), by Tim Sweeney.
Unreal Engine 3 Networking & Replication - Historical but still valuable UE3 game networking documentation wiki.
Unreal Engine 4 Framework & Network - Brief look into Unreal's gameplay networking framework by Nuno Afonso.
Unreal Engine 4 Network Compendium - Detailed summary of UE4 networking with examples by Cedric Neukirchen.
Unreal Engine 4 Networking and Multiplayer - Official UE4 gameplay networking framework documentation wiki.
RU –ö–∞–∫ –º—ã –ø–∏—Å–∞–ª–∏ —Å–µ—Ç–µ–≤–æ–π –∫–æ–¥ –º–æ–±–∏–ª—å–Ω–æ–≥–æ PvP —à—É—Ç–µ—Ä–∞ - Pixonic –æ –∫–ª–∏–µ–Ω—Ç–µ –≤ –±—ã—Å—Ç—Ä–æ–º —à—É—Ç–µ—Ä–µ.
Game Developers Conference
2000 / Half-Life and Team Fortress Networking - Game networking in details by Yahn Bernier from Valve.
2010 / Building the Server Software for ELIMINATE - Talk by Stephen Detwiler and James Marr from ngmoco:).
2011 / Crysis 2 Multiplayer - A Programmer's Postmortem by Peter Hall from Crytek.
2011 / I Shot You First - Gameplay networking in Halo: Reach by David Aldridge from Bungie.
2012 / Writing Server and Network Code for Your Online Game - Talk by Patrick Wyatt from En Masse Ent.
2013 / Network Serialization and Routing in World of Warcraft - Talk by Joe Rumsey from Blizzard.
2015 / Game Networking for Physics Programmers - Talk by Glenn Fiedler from Respawn Entertainment.
2015 / Networking Gameplay and AI in Assassin's Creed Unity - Talk by Charles Lefebvre from Ubisoft.
2015 / Stop, Copy/Paste Networking & Innovate - High level design approaches by Claire Blackshaw from Sony.
2016 / Fighting Latency on Call of Duty Black Ops III - Detailed techniques by Benjamin Goyette from Activision.
2017 / Overwatch Gameplay Architecture and Netcode - Simulation, determinism, responsiveness and precision.
2017 / Replicating Chaos: Vehicle Replication in Watch Dogs 2 - Replicating vehicle movement in P2P simulations.
2018 / 8 Frames in 16ms - Rollback Networking in Mortal Kombat and Injustice 2 by Michael Stallone.
2018 / It IS Rocket Science! - The physics and networking of Rocket League in details by Jared Cone.
2019 / Quantum Deep Dive - Photon Quantum Deterministic Network Engine for Unity by Eric from Exit Games.
Unreal Engine Livestream
Replication Graph - Epic's dev-team demonstrates UE 4.20's new Replication Graph feature.
Server Optimizations - Ryan Gerleve and Dave Ratti to discuss server optimization techniques in UE4.
Unreal Fest
EU 2019 / Replication Graph For Optimizing RTS Games - Talk by Nick Pr√ºhs from Deadalic Entertainment.
Unity Unite
EU 2016 / Building a PvP focused MMO - Albion MMO architecture by David Salz from Sandbox Interactive.
EU 2017 / Photon vs UNet - Multiplayer architecture comparison by Christof Wegmann from Exit Games.
LA 2018 / Deep-Dive Into Networking for Unity's FPS Sample - Netcode talk by Peter Andreasen from Unity.
EU 2019 / Intro to DOTS and Netcode - Dive deep into the networked future of Unity using DOTS by Tim Johansson.
Other
HandmadeCon 2015 / Pat Wyatt - Chat about networking of Guild Wars, Diablo, StarCraft by Pat Wyatt.
Overwatch / Let's Talk Netcode - Tim Ford and Philip Orwig from Blizzard on Overwatch's netcode.
Unreal Engine
Authoritative Networked Character Movement - Introduction to implementing networked movement features.
Blueprint Multiplayer - Blueprint multiplayer game development tutorial series by Wes Bunn from Epic Games.
Create Multiplayer Games - (Paid) C++ multiplayer game development tutorial series by Tom Looman.
Custom Struct Serialization For Networking - C++ tutorial article by Giuseppe Portelli.
Online Game Development - (Paid) C++ online game development tutorial series by Sam Pattuzzi.
Steam Multiplayer - Steam-backed blueprint multiplayer tutorial by Maik Hilfer.
Unity
Bouncy Ball Networking - Making of a simple networked bouncy ball using DarkRift2 from MateriaGame.
Making a Multiplayer FPS - UNET-based multiplayer FPS game development tutorials by Asbj√∏rn Thirslund.
Multiplayer and Networking - Official UNET-based multiplayer game networking tutorials by Unity.
C / C++
ENet - Simple and robust reliable UDP networking library.
GameNetworkingSockets - Valve's internal (Steam) network transport layer for games.
RakNet - Full-featured and mature reliable UDP networking engine.
TNL2 - (Inactive) Torque Networking Library 2 which is quite familiar to TRIBES Engine Networking Model.
yojimbo - Reliable UDP networking library for client/server games with dedicated servers.
C#
Barebones Master Server - Backend framework with auth, profile, lobby, chat features for Unity.
DarkRift Networking - Unity focused multi-threaded multiplayer networking solution.
Forge Networking - Unity focused real-time multiplayer networking solution.
Lidgren.Network - Reliable UDP networking library (.NET).
LiteNetLib - Lite reliable UDP networking library (.NET/Mono).
MLAPI - Mix and match networking library with lots of built-in features for Unity.
Photon Engine - Hybrid multiplayer game networking platform (SaaS, Cloud).
SocketWeaver - Multiplayer cloud services designed for the Unity engine (SaaS).
Java
SmartFoxServer - Massive multiplayer game server with advanced built-in features.
JavaScript
Colyseus - Authoritative multiplayer game server backend framework.
SocketCluster - Scalable multi-process HTTP & real-time server framework.
Unreal Engine
CharacterMovementReplication - Project that adds sprint ability to the CharacterMovementComponent.
CoopHordeShooter - 3rd-person co-op multiplayer horde shooter game tutorial project.
EpicSurvivalGame - 3rd-person multiplayer zombie survival game tutorial project.
GASDocumentation - 3rd-person multiplayer shooter with detailed Gameplay Ability System documentation.
Unity
AuthoritativeMovementExample - Server authoritative movement project using Forge Networking for Unity.
Angry Bots Multiplayer - Photon PUN-based multiplayer top-down shooter project.
ArenaGame - Forge Networking-based multiplayer FPS game as an example project.
Entitas Sync Framework - Network framework for Entitas ECS targeting turn-based or slow-paced games.
FPSSample - An official Multiplayer FPS project sample from Unity using new networking package and ECS.
Gambetta Networked Demo - Gabriel Gambetta's network architecture implementation in Unity using Lidgren.
MultiplayerFPS - UNET-based simple multiplayer 1st-person shooter tutorial project.
SmartFoxServer2X Multiplayer - SFS2X-based multiplayer project examples.
TANKS! Networking - UNET-based multiplayer tank shooter project.
UNet-Controller - UNET-based networked 1st-person and 3rd-person player controller with advanced features.
CapAnalysis - Web visual tool to analyze captured network traffic. (Ubuntu, Debian)
clumsy - Network condition simulation utility. (Windows)
Fiddler - Web debugging proxy server. (Windows, macOS, Linux)
netem - Network emulation for testing protocols. (Linux)
Network Link Conditioner - Network environment simulation utility. (macOS, iOS)
Network Protocol Analyzer - Tool for analysing, debugging, maintaining and monitoring connections. (Windows)
Network Simulator (ns) - Network simulator targeting research and educational use. (macOS, Linux)
Postman - Web API debugging client. (Windows, macOS, Linux)
Wireshark - Network traffic analyzer tool. (Windows, macOS, Linux)

To the extent possible under law, M. Fatih MAR has waived all copyright and related or neighboring rights to this work."
3712,"s4w3d0ff,python-poloniex","Poloniex API wrapper for Python 2.7 & 3. Inspired by this wrapper written by 'oipminer'  
I (s4w3d0ff) am not affiliated with, nor paid by Poloniex. If you wish to contribute to the repository please read CONTRIBUTING.md. All and any help is appreciated.
[x] Python 2.7 and 3.5+
[x] Pypi
[x] Travis
[x] Websocket api support
[x] Minimal amount of dependencies
[x] Internal checks to reduce external api errors
[x] Rate limiter to keep from going over call limits
[x] Retries failed api calls during connection issues
See the wiki or help(poloniex) for more.
All api calls are done through an instance of poloniex.Poloniex. You can use the instance as follows:
Using the instances __call__ method (shown above) you can pass the command string as the first argument to make an api call. The poloniex.Poloniex class also has 'helper' methods for each command that will help 'sanitize' the commands arguments. For example, Poloniex.returnChartData('USDT_BTC', period=777) will raise PoloniexError(""777 invalid candle period"").
Almost every api command can be called this way. This wrapper also checks that the command you pass to the command arg is a valid command to send to poloniex, this helps reduce api errors due to typos.
To use the private api commands you first need an api key and secret (supplied by poloniex). When creating the instance of poloniex.Poloniex you can pass your api key and secret to the object like so:
Poloniex has two api commands with the same name returnTradeHistory. To work around this without splitting up the commands or having to specify 'public' or 'private' we use the helper method Poloniex.marketTradeHist for public trade history and Poloniex.returnTradeHistory for private trades. If you try to bypass the helper method using Poloniex.__call__, it will call the private command.
Public trade history:
Private trade history:
You can also not use the 'helper' methods at all and use poloniex.PoloniexBase which only has returnMarketHist and __call__ to make rest api calls.
To connect to the websocket api use the PoloniexSocketed class like so:
You can also subscribe and start the websocket thread when creating an instance of PoloniexSocketed by using the subscribe and start args:
More examples of how to use websocket push API can be found here."
4311,"jonataslaw,getx","Open screens/snackbars/dialogs/bottomSheets without context, manage states and inject dependencies easily with Get.. 


 



**Languages:**

[![English](https://img.shields.io/badge/Language-English-blueviolet?style=for-the-badge)](README.md)
[![Vietnamese](https://img.shields.io/badge/Language-Vietnamese-blueviolet?style=for-the-badge)](README-vi.md)
[![Indonesian](https://img.shields.io/badge/Language-Indonesian-blueviolet?style=for-the-badge)](README.id-ID.md)
[![Urdu](https://img.shields.io/badge/Language-Urdu-blueviolet?style=for-the-badge)](README.ur-PK.md)
[![Chinese](https://img.shields.io/badge/Language-Chinese-blueviolet?style=for-the-badge)](README.zh-cn.md)
[![Portuguese](https://img.shields.io/badge/Language-Portuguese-blueviolet?style=for-the-badge)](README.pt-br.md)
[![Spanish](https://img.shields.io/badge/Language-Spanish-blueviolet?style=for-the-badge)](README-es.md)
[![Russian](https://img.shields.io/badge/Language-Russian-blueviolet?style=for-the-badge)](README.ru.md)
[![Polish](https://img.shields.io/badge/Language-Polish-blueviolet?style=for-the-badge)](README.pl.md)
[![Korean](https://img.shields.io/badge/Language-Korean-blueviolet?style=for-the-badge)](README.ko-kr.md)
[![French](https://img.shields.io/badge/Language-French-blueviolet?style=for-the-badge)](README-fr.md)
[![Japanese](https://img.shields.io/badge/Language-Japanese-blueviolet?style=for-the-badge)](README.ja-JP.md)
[![Hindi](https://img.shields.io/badge/Language-Hindi-blueviolet?style=for-the-badge)](README-hi.md)



GetX is an extra-light and powerful solution for Flutter. It combines high-performance state management, intelligent dependency injection, and route management quickly and practically.
GetX has 3 basic principles. This means that these are the priority for all resources in the library: PRODUCTIVITY, PERFORMANCE AND ORGANIZATION.
PERFORMANCE: GetX is focused on performance and minimum consumption of resources. GetX does not use Streams or ChangeNotifier.
PRODUCTIVITY: GetX uses an easy and pleasant syntax. No matter what you want to do, there is always an easier way with GetX. It will save hours of development and will provide the maximum performance your application can deliver.
Generally, the developer should be concerned with removing controllers from memory. With GetX this is not necessary because resources are removed from memory when they are not used by default. If you want to keep it in memory, you must explicitly declare ""permanent: true"" in your dependency. That way, in addition to saving time, you are less at risk of having unnecessary dependencies on memory. Dependency loading is also lazy by default.
ORGANIZATION: GetX allows the total decoupling of the View, presentation logic, business logic, dependency injection, and navigation. You do not need context to navigate between routes, so you are not dependent on the widget tree (visualization) for this. You don't need context to access your controllers/blocs through an inheritedWidget, so you completely decouple your presentation logic and business logic from your visualization layer. You do not need to inject your Controllers/Models/Blocs classes into your widget tree through MultiProviders. For this, GetX uses its own dependency injection feature, decoupling the DI from its view completely.
With GetX you know where to find each feature of your application, having clean code by default. In addition to making maintenance easy, this makes the sharing of modules something that until then in Flutter was unthinkable, something totally possible.
BLoC was a starting point for organizing code in Flutter, it separates business logic from visualization. GetX is a natural evolution of this, not only separating the business logic but the presentation logic. Bonus injection of dependencies and routes are also decoupled, and the data layer is out of it all. You know where everything is, and all of this in an easier way than building a hello world.
GetX is the easiest, practical, and scalable way to build high-performance applications with the Flutter SDK. It has a large ecosystem around it that works perfectly together, it's easy for beginners, and it's accurate for experts. It is secure, stable, up-to-date, and offers a huge range of APIs built-in that are not present in the default Flutter SDK.
GetX is not bloated. It has a multitude of features that allow you to start programming without worrying about anything, but each of these features are in separate containers and are only started after use. If you only use State Management, only State Management will be compiled. If you only use routes, nothing from the state management will be compiled.
GetX has a huge ecosystem, a large community, a large number of collaborators, and will be maintained as long as the Flutter exists. GetX too is capable of running with the same code on Android, iOS, Web, Mac, Linux, Windows, and on your server.
It is possible to fully reuse your code made on the frontend on your backend with Get Server.
In addition, the entire development process can be completely automated, both on the server and on the front end with Get CLI.
In addition, to further increase your productivity, we have the
extension to VSCode and the extension to Android Studio/Intellij
Add Get to your pubspec.yaml file:
Import get in files that it will be used:
The ""counter"" project created by default on new project on Flutter has over 100 lines (with comments). To show the power of Get, I will demonstrate how to make a ""counter"" changing the state with each click, switching between pages and sharing the state between screens, all in an organized way, separating the business logic from the view, in ONLY 26 LINES CODE INCLUDING COMMENTS.
Step 1:
Add ""Get"" before your MaterialApp, turning it into GetMaterialApp
Note: this does not modify the MaterialApp of the Flutter, GetMaterialApp is not a modified MaterialApp, it is just a pre-configured Widget, which has the default MaterialApp as a child. You can configure this manually, but it is definitely not necessary. GetMaterialApp will create routes, inject them, inject translations, inject everything you need for route navigation. If you use Get only for state management or dependency management, it is not necessary to use GetMaterialApp. GetMaterialApp is necessary for routes, snackbars, internationalization, bottomSheets, dialogs, and high-level apis related to routes and absence of context.
Note¬≤: This step is only necessary if you gonna use route management (Get.to(), Get.back() and so on). If you not gonna use it then it is not necessary to do step 1
Step 2:
Create your business logic class and place all variables, methods and controllers inside it.
You can make any variable observable using a simple "".obs"".
Step 3:
Create your View, use StatelessWidget and save some RAM, with Get you may no longer need to use StatefulWidget.
Result:

This is a simple project but it already makes clear how powerful Get is. As your project grows, this difference will become more significant.
Get was designed to work with teams, but it makes the job of an individual developer simple.
Improve your deadlines, deliver everything on time without losing performance. Get is not for everyone, but if you identified with that phrase, Get is for you!
Get has two different state managers: the simple state manager (we'll call it GetBuilder) and the reactive state manager (GetX/Obx)
Reactive programming can alienate many people because it is said to be complicated. GetX turns reactive programming into something quite simple:
You won't need to create StreamControllers.
You won't need to create a StreamBuilder for each variable
You will not need to create a class for each state.
You will not need to create a get for an initial value.
You will not need to use code generators
Reactive programming with Get is as easy as using setState.
Let's imagine that you have a name variable and want that every time you change it, all widgets that use it are automatically changed.
This is your count variable:
To make it observable, you just need to add "".obs"" to the end of it:
And in the UI, when you want to show that value and update the screen whenever the values changes, simply do this:
That's all. It's that simple.
See an more in-depth explanation of state management here. There you will see more examples and also the difference between the simple state manager and the reactive state manager
You will get a good idea of GetX power.
If you are going to use routes/snackbars/dialogs/bottomsheets without context, GetX is excellent for you too, just see it:
Add ""Get"" before your MaterialApp, turning it into GetMaterialApp
Navigate to a new screen:
Navigate to new screen with name. See more details on named routes here
To close snackbars, dialogs, bottomsheets, or anything you would normally close with Navigator.pop(context);
To go to the next screen and no option to go back to the previous screen (for use in SplashScreens, login screens, etc.)
To go to the next screen and cancel all previous routes (useful in shopping carts, polls, and tests)
Noticed that you didn't have to use context to do any of these things? That's one of the biggest advantages of using Get route management. With this, you can execute all these methods from within your controller class, without worries.
Get works with named routes and also offers lower-level control over your routes! There is in-depth documentation here
Get has a simple and powerful dependency manager that allows you to retrieve the same class as your Bloc or Controller with just 1 lines of code, no Provider context, no inheritedWidget:
Note: If you are using Get's State Manager, pay more attention to the bindings API, which will make it easier to connect your view to your controller.
Instead of instantiating your class within the class you are using, you are instantiating it within the Get instance, which will make it available throughout your App.
So you can use your controller (or class Bloc) normally
Tip: Get dependency management is decoupled from other parts of the package, so if for example, your app is already using a state manager (any one, it doesn't matter), you don't need to rewrite it all, you can use this dependency injection with no problems at all
Imagine that you have navigated through numerous routes, and you need data that was left behind in your controller, you would need a state manager combined with the Provider or Get_it, correct? Not with Get. You just need to ask Get to ""find"" for your controller, you don't need any additional dependencies:
And then you will be able to recover your controller data that was obtained back there:
See a more in-depth explanation of dependency management here
Translations are kept as a simple key-value dictionary map.
To add custom translations, create a class and extend Translations.
Just append .tr to the specified key and it will be translated, using the current value of Get.locale and Get.fallbackLocale.
Pass parameters to GetMaterialApp to define the locale and translations.
Call Get.updateLocale(locale) to update the locale. Translations then automatically use the new locale.
To read the system locale, you could use Get.deviceLocale.
Please do not use any higher level widget than GetMaterialApp in order to update it. This can trigger duplicate keys. A lot of people are used to the prehistoric approach of creating a ""ThemeProvider"" widget just to change the theme of your app, and this is definitely NOT necessary with GetX‚Ñ¢.
You can create your custom theme and simply add it within Get.changeTheme without any boilerplate for that:
If you want to create something like a button that changes the Theme in onTap, you can combine two GetX‚Ñ¢ APIs for that:
The api that checks if the dark Theme is being used.
And the Theme Change API, you can just put this within an onPressed:
When .darkmode is activated, it will switch to the light theme, and when the light theme becomes active, it will change to dark theme.
GetConnect is an easy way to communicate from your back to your front with http or websockets
You can simply extend GetConnect and use the GET/POST/PUT/DELETE/SOCKET methods to communicate with your Rest API or websockets.
GetConnect is highly customizable You can define base Url, as answer modifiers, as Requests modifiers, define an authenticator, and even the number of attempts in which it will try to authenticate itself, in addition to giving the possibility to define a standard decoder that will transform all your requests into your Models without any additional configuration.
The GetPage has now new property that takes a list of GetMiddleWare and run them in the specific order.
Note: When GetPage has a Middlewares, all the children of this page will have the same middlewares automatically.
The Order of the Middlewares to run can be set by the priority in the GetMiddleware.
those middlewares will be run in this order -8 => 2 => 4 => 5
This function will be called when the page of the called route is being searched for. It takes RouteSettings as a result to redirect to. Or give it null and there will be no redirecting.
This function will be called when this Page is called before anything created
you can use it to change something about the page or give it new page
This function will be called right before the Bindings are initialize.
Here you can change Bindings for this page.
This function will be called right after the Bindings are initialize.
Here you can do something after that you created the bindings and before creating the page widget.
This function will be called right after the GetPage.page function is called and will give you the result of the function. and take the widget that will be showed.
This function will be called right after disposing all the related objects (Controllers, views, ...) of the page.
GetMaterialApp configures everything for you, but if you want to configure Get manually.
You will also be able to use your own Middleware within GetObserver, this will not influence anything.
You can create Global Settings for Get. Just add Get.config to your code before pushing any route.
Or do it directly in your GetMaterialApp
You can optionally redirect all the logging messages from Get.
If you want to use your own, favourite logging package,
and want to capture the logs there:
These Widgets allows you to manage a single value, and keep the state ephemeral and locally.
We have flavours for Reactive and Simple.
For instance, you might use them to toggle obscureText in a TextField, maybe create a custom
Expandable Panel, or maybe modify the current index in BottomNavigationBar while changing the content
of the body in a Scaffold.
A simplification of StatefulWidget that works with a .setState callback that takes the updated value.
Similar to ValueBuilder, but this is the Reactive version, you pass a Rx instance (remember the magical .obs?) and
updates automatically... isn't it awesome?
.observables (also known as Rx Types) have a wide variety of internal methods and operators.
Is very common to believe that a property with .obs IS the actual value... but make no mistake!
We avoid the Type declaration of the variable, because Dart's compiler is smart enough, and the code
looks cleaner, but:
Even if message prints the actual String value, the Type is RxString!
So, you can't do message.substring( 0, 4 ).
You have to access the real value inside the observable:
The most ""used way"" is .value, but, did you know that you can also use...
Another way to handle your UI state is use the StateMixin&lt;T&gt; .
To implement it, use the with to add the StateMixin&lt;T&gt;
to your controller which allows a T model.
The change() method change the State whenever we want.
Just pass the data and the status in this way:
RxStatus allow these status:
To represent it in the UI, use:
I love this Widget, is so simple, yet, so useful!
Is a const Stateless Widget that has a getter controller for a registered Controller, that's all.
Extend this widget to build responsive view.
this widget contains the screen property that have all
information about the screen size and type.
You have two options to build it.
with builder method you return the widget to build.
with methods desktop, tablet,phone, watch. the specific
method will be built when the screen type matches the method
when the screen is [ScreenType.Tablet] the tablet method
will be exuded and so on.
Note: If you use this method please set the property alwaysUseBuilder to false
With settings property you can set the width limit for the screen types.

Code to this screen
code
Most people have no idea about this Widget, or totally confuse the usage of it.
The use case is very rare, but very specific: It caches a Controller.
Because of the cache, can't be a const Stateless.
So, when do you need to ""cache"" a Controller?
If you use, another ""not so common"" feature of GetX: Get.create().
Get.create(()=&gt;Controller()) will generate a new Controller each time you call
Get.find&lt;Controller&gt;(),
That's where GetWidget shines... as you can use it, for example,
to keep a list of Todo items. So, if the widget gets ""rebuilt"", it will keep the same controller instance.
This class is like a GetxController, it shares the same lifecycle ( onInit(), onReady(), onClose()).
But has no ""logic"" inside of it. It just notifies GetX Dependency Injection system, that this subclass
can not be removed from memory.
So is super useful to keep your ""Services"" always reachable and active with Get.find(). Like:
ApiService, StorageService, CacheService.
The only way to actually delete a GetxService, is with Get.reset() which is like a
""Hot Reboot"" of your app. So remember, if you need absolute persistence of a class instance during the
lifetime of your app, use GetxService.
You can test your controllers like any other class, including their lifecycles:
If you need to mock your GetxController/GetxService, you should extend GetxController, and mixin it with Mock, that way
If you are testing widgets, or test groups, use Get.reset at the end of your test or in tearDown to reset all settings from your previous test.
if you are using your navigation in your controllers, use Get.testMode = true at the beginning of your main.
1- Rx types:
RxController and GetBuilder now have merged, you no longer need to memorize which controller you want to use, just use GetxController, it will work for simple state management and for reactive as well.
2- NamedRoutes
Before:
Now:
Why this change?
Often, it may be necessary to decide which page will be displayed from a parameter, or a login token, the previous approach was inflexible, as it did not allow this.
Inserting the page into a function has significantly reduced the RAM consumption, since the routes will not be allocated in memory since the app was started, and it also allowed to do this type of approach:
1- Many times after a Flutter update, many of your packages will break. Sometimes compilation errors happen, errors often appear that there are still no answers about, and the developer needs to know where the error came from, track the error, only then try to open an issue in the corresponding repository, and see its problem solved. Get centralizes the main resources for development (State, dependency and route management), allowing you to add a single package to your pubspec, and start working. After a Flutter update, the only thing you need to do is update the Get dependency, and get to work. Get also resolves compatibility issues. How many times a version of a package is not compatible with the version of another, because one uses a dependency in one version, and the other in another version? This is also not a concern using Get, as everything is in the same package and is fully compatible.
2- Flutter is easy, Flutter is incredible, but Flutter still has some boilerplate that may be unwanted for most developers, such as Navigator.of(context).push (context, builder [...]. Get simplifies development. Instead of writing 8 lines of code to just call a route, you can just do it: Get.to(Home()) and you're done, you'll go to the next page. Dynamic web urls are a really painful thing to do with Flutter currently, and that with GetX is stupidly simple. Managing states in Flutter, and managing dependencies is also something that generates a lot of discussion, as there are hundreds of patterns in the pub. But there is nothing as easy as adding a "".obs"" at the end of your variable, and place your widget inside an Obx, and that's it, all updates to that variable will be automatically updated on the screen.
3- Ease without worrying about performance. Flutter's performance is already amazing, but imagine that you use a state manager, and a locator to distribute your blocs/stores/controllers/ etc. classes. You will have to manually call the exclusion of that dependency when you don't need it. But have you ever thought of simply using your controller, and when it was no longer being used by anyone, it would simply be deleted from memory? That's what GetX does. With SmartManagement, everything that is not being used is deleted from memory, and you shouldn't have to worry about anything but programming. You will be assured that you are consuming the minimum necessary resources, without even having created a logic for this.
4- Actual decoupling. You may have heard the concept ""separate the view from the business logic"". This is not a peculiarity of BLoC, MVC, MVVM, and any other standard on the market has this concept. However, this concept can often be mitigated in Flutter due to the use of context.
If you need context to find an InheritedWidget, you need it in the view, or pass the context by parameter. I particularly find this solution very ugly, and to work in teams we will always have a dependence on View's business logic. Getx is unorthodox with the standard approach, and while it does not completely ban the use of StatefulWidgets, InitState, etc., it always has a similar approach that can be cleaner. Controllers have life cycles, and when you need to make an APIREST request for example, you don't depend on anything in the view. You can use onInit to initiate the http call, and when the data arrives, the variables will be populated. As GetX is fully reactive (really, and works under streams), once the items are filled, all widgets that use that variable will be automatically updated in the view. This allows people with UI expertise to work only with widgets, and not have to send anything to business logic other than user events (like clicking a button), while people working with business logic will be free to create and test the business logic separately.
This library will always be updated and implementing new features. Feel free to offer PRs and contribute to them.
GetX has a highly active and helpful community. If you have questions, or would like any assistance regarding the use of this framework, please join our community channels, your question will be answered more quickly, and it will be the most suitable place. This repository is exclusive for opening issues, and requesting resources, but feel free to be part of GetX Community.
Want to contribute to the project? We will be proud to highlight you as one of our collaborators. Here are some points where you can contribute and make Get (and Flutter) even better.
Helping to translate the readme into other languages.
Adding documentation to the readme (a lot of Get's functions haven't been documented yet).
Write articles or make videos teaching how to use Get (they will be inserted in the Readme and in the future in our Wiki).
Offering PRs for code/tests.
Including new functions.
Any contribution is welcome!
Flutter Getx EcoSystem package for arabic people - Tutorial by Pesa Coder.
Dynamic Themes in 3 lines using GetX‚Ñ¢ - Tutorial by Rod Brown.
Complete GetX‚Ñ¢ Navigation - Route management video by Amateur Coder.
Complete GetX State Management - State management video by Amateur Coder.
GetX‚Ñ¢ Other Features - Utils, storage, bindings and other features video by Amateur Coder.
Firestore User with GetX | Todo App - Video by Amateur Coder.
Firebase Auth with GetX | Todo App - Video by Amateur Coder.
The Flutter GetX‚Ñ¢ Ecosystem ~ State Management - State management by Aachman Garg.
The Flutter GetX‚Ñ¢ Ecosystem ~ Dependency Injection - Dependency Injection by Aachman Garg.
GetX, the all-in-one Flutter package - A brief tutorial covering State Management and Navigation by Thad Carnevalli.
Build a To-do List App from scratch using Flutter and GetX - UI + State Management + Storage video by Thad Carnevalli.
GetX Flutter Firebase Auth Example - Article by Jeff McMorris.
Flutter State Management with GetX ‚Äì Complete App - by App With Flutter.
Flutter Routing with Animation using Get Package - by App With Flutter.
A minimal example on dartpad - by Roi Peker
GetConnect: The best way to perform API operations in Flutter with Get. - by MD Sarfaraj
How To Create an App with GetX Architect in Flutter with Get CLI - by MD Sarfaraj"
4833,"CesarValiente,KUnidirectional","The goal of this sample app is to show how we can implement unidirectional data flow architecture based on Flux and Redux on Android... using Kotlin :wink:. A sample app that shows how we can apply unidirectional data flow architecture on Android using Kotlin.
This app comes up as a support material for my talk Unidirectional data flow architecture on Android using Kotlin.
Talking about architecture is always tough, so as for support for the talk and slides that I created, I decided to create an app where I show what I explain in the talk/slides, so is easier to understand everything; and getting your hands dirty is always fun!
The slides of the talk can be found here.
I've written a blog post series explaining the details of this architecture:
Our approach is based on Redux and Flux from Facebook (that are pretty popular unidirectional data flow approaches on Web), but slightly different, taking things from each one to work on the way we want.
Why the K ? because we use Kotlin as the programming language, apart from being such a nice and enjoyable language, we take advantage of the really great features this language provide us for building our app.
I wanted to keep this app simple enough so we can understand what we want to learn and is important here, that is just unidirectional data flow. Adding libraries that can help us but have their own principles and learning curve could distract us from our real problem here and make, probably, much more difficult to understand it, so for that reason I decided to go without other libraries and implement everything just using Kotlin code; of course we have kotlin libraries that helps us to work with Kotlin on Android, and test libraries to help us when testing, but apart of that, no libraries, just pure Kotlin code :blush:
For a much deeper and better understanding of what we are going to explain here with this document and the code, I deeply encourage you to read the official documentation of Flux and Redux before.
This app is a simple Items list app, where we can create, edit and delete Items.
Items are shown in a list where they can be reordered, deleted and set as favorites.
In the edit screen, we can create and edit Items, we can change text and color.
Ok, this is a simple app what is the magic here? Every action in the app follows an unidirectional data flow.
When we click on the button to add a new Item and we navigate to the edit item, when we change the Item's color, when we update the item, when we reorder items, etc. everything follows an unidirectional data flow.
Sure! here you have some screenshots that show basically what we can do with the app:









(You can also reorder items but I was not able to take a screenshot during the process :innocent:)
Yes we do, I work in a small team inside One Note at Microsoft and we are following this architecture on the project that I'm working right now on all platforms :smile:
If you are reading this probably you make software, independently of the platform, you make software.
When has been the last time that you have been working on a multi-platform product, with different teams that work on each platform dealing each one of you with the same features, same problems,.. and then.. going to a meeting, talking to a colleague from other team about how they do x and realise that:
Both of you use completely different languages, and I'm not talking about programming languages, but vocabulary, terms, etc. you sometimes think: ""mate, no idea of what you are talking about""
Both of you are approaching to exactly the same problem in completely different ways.
Do you want to have a look at my code? yes sure! but here the problem is not that maybe you don't know the programming language, or the framework used, or libraries, is that the architecture of the app, the components, the modules, are completely different than the ones you are used to.
Bugs, of course, we always have bugs, but hey, we have the same product, just on different platforms and you have completely different bugs on the same features, and when you try to help or ask for help .... we go then to the point 1... and again and again :confounded:
We know it, we know that pain, how it feels, and we wanted to avoid that if possible; we wanted:
To have a common language, and again, not talking about programming languages, but vocabulary, terms, etc.
To have a similar way to approach the same problem.
To have the same structure in all our apps, the same components, the same way to work, at the end, the same architecture.
To help and be helped!
To work/help on another platform without the feeling that you really don't know where to start working nor what to do.
Having the same architecture on all our platforms, make our talks between clients amazing, we all are in the same boat, we know how to drive that boat and how to improve it, all of us.
And of course, we take advantage of all of the benefits of an unidirectional data flow architecture, but here the team from Redux explain it much better :wink:
Nope, this code is inspired by what we do and how we do, but is much simpler, so that's better for educational purposes like we have here :wink:
I think an image is more valid than 1000 words:

This app has three modules and three main components:
App is the module where our views live, it has the components that the user interacts with.
 Also contains ControllerView that acts between views and everything else.
 If you are used to MVP pattern, they are very similar to presenters, so they help us to decouple the logic of our business from the view/framework.
 We are going to see later the other different components, but basically what the ControllerView does is being subscribed to State changes, creates an Action after the user interacts with the View (the View has a ControllerView), dispatches the action, and later, when it receives a new state, communicate back to its view so the view can react to the new state and render itself.
Store is the main module of our app, our business logic resides there.
If you are coming from Clean Architecture, Store is our Domain. The store has several and important components:
Actions they are simple elements which indicate what we want to do, what we want to achieve.
  For instance CreateItem is an action, DeleteItem is another action, and so on.
   They can have parameters, for instance when we create an item we have to indicate its text and color, when we delete an item we have to indicate its localId so we can delete it, etc.
   We have actions grouped as sealed classes so later when we handle them is much easier to do it.
State this entity has everything that we need to use, is a simple and immutable data structure.
   For instance in the list items, we have the items we have to show to the user, in the edit item screen, we have what the current item has, etc.
Dispatcher is used to dispatch Actions or a new State.
   Dispatcher can be implemented in many ways, as a simple function, as a class with a list of subscribers, using external libraries that follow an event/subscriber pattern or others that follow observer pattern, etc.
  In our approach we wanted to keep the app simple without 3rd party dependencies that make understanding this architecture more complicated, and we have opted for a simple function that lives in the store, so then we can dispatch actions or new states directly from the store just invoking the function.
Reducers are pure functions that given an action and the current state of the app, apply this action to that state, and generate a completely new state (remember, a state is an immutable object). The logic of what we have to do resides here, for instance, when we want to create an item we do:
Create CreateItemAction(id, text, color)
Dispatch the action
Reducers take that action and apply it to the current State.
We have then a new state, that contains this new item in its list.
Persistence is a side effect. Ok, first, what a side effect is?
   Side effects are optional and are used to enrich and extend the functionality of our app. For instance, in our case, the store and the state live in the memory, the data is never persisted physically, nor in a DB nor in a file, etc.
 How can add persistence to our architecture? the response is side effects. Side effects add extra functionality, like in our case persistence in a DB.
A side effect runs after the main operation has been done, in our case, a side effect is a process that is going to run after our store has reduced an action together with the current state. Once that the store has reduced the action, is going to dispatch that action (the same) to its side effects (that are subscribed to it) if any.
 Side effects will run completely separated and isolated from each other and from the rest of the world.
 Side effects once that have finished handling the Action, can dispatch a new and a different action to the store, then the store will reduce that new action together with the current state.
  For instance when we fetch data from the DB, is the perfect scenario where we send a new action with the new items that we have fetched.
A pretty cool thing of side effects is that we can ""enable or disable"" them, as you can see in this video that I've uploaded where we enable and disable the persistence side effect and the app works without any problem (of course when is disabled we don't have DB persistence). This is because, at the end, a side effect is subscribed to handle an action after the store has reduced it, if is not subscribed to the store then it won't handle actions, but that's all, our app should be able to work without it (of course, in many cases, side effects are essential, think in a DB, a sync layer, etc.).
  Btw in this sample app we use Realm as DB, mainly because I wanted to experiment with it and because is really easy to build a small DB with a simple scheme and operations, but we could replace this DB for another really easily (the good thing about having everything decoupled).
Threading is really important in Android, we never want to block the UI thread when we do other stuff that is not UI related, we always want to give the best possible user experience to our users so what we do is:
View it runs in the main (UI) thread.
Store it runs in its own store thread
Side effects (in our case just persistence) they run in their own side effect thread, if we have many each side effect will run in its own thread in an isolated way.
Of course when testing, dealing with threads is a nightmare, so we have mechanisms in the app to execute everything in the main thread in that case (DI FTW).
We want to have a good architecture that its components are decoupled from each other, so we can have our business logic completely independent from frameworks, we can test each component in an isolated way, we can unit test without the need of work on instrumentation tests that are slow, etc.
 This is key in Clean architecture, and this approach (and Redux and Flux) follow that too. Of course, you can mess everything, but if you want (and you should), you can have your components decoupled and isolated so they are easier to maintain, to test, to extend, etc.
A diagram of the dependencies of the different components of our architecture is:

As we can see:
View has Android related framework dependencies.
ControllerView and Store (remember, actions, dispatcher and reducers belong to the Store), don't have framework dependencies, just pure Kotlin stuff.
Side effect we can have a side effect that doesn't have framework dependencies like a network layer, or with dependencies, for instance, a DB where usually in Android we need the Context.
Now that we know the dependencies of our different components we can say how we can test them:
View here we should have instrumentation/UI tests that test that our interactions have gone well, and what the user sees and expects is correct. I haven't implemented UI tests in this sample app since I wanted to focus more on the rest of the tests and components.
ControllerView since it doesn't have Android framework related dependencies we can completely unit test it.  One cool thing of our ControllerViews is that is the perfect place to have our integration tests since they create an action and receive a new state, we can test that the expected state after dispatch that action is what it should have.
Store we can completely unit test the different components of the store, remember we don't have framework dependencies in our core (dispatchers, reducers, state, etc).
Side effect it depends on if it has framework dependencies or not, but in our sample app that we have a persistence side effect that needs the Android context, we can use instrumentation test for the classes that use framework dependencies (DB functions) or unit test for the classes that don't have dependencies (mappers).
Of course, we have, this is not the Philosopher's Stone of the architectures, and as any other architecture, we have issues, difficult things to do and to improve, problems to solve, etc.
 For instance, a list of things that we have not covered here (nor in the slides) but are really important:

Several actions that run always one after the other in some cases but not always.
How can we cancel actions from being reduced (or applied) when we already know that are not needed anymore (so we don't waste resources)?
How can we deal with too much information (memory allocation) in our State so we don't keep a reference to everything in our app?
How can we improve the navigation stack of our app/state?
etc.
 Of course, all these things can be fixed, and there are different and valid ways to do it, but how you want to do it is your decision :wink:
We already have referenced to useful links and documentation through the whole document, but here is a list of really awesome and useful references that you can have a look to understand even better, what I've tried to explain here, with the talk, the slides, and the code:
I've also uploaded and created some videos that are used in the slides of the presentation to help to understand what is happening under the hood when we interact with the app:
This is an open source sample app released under Apache License v2, so it means that you can take the code an use it in your open source projects that use compatible licenses with Apache, but also in your privative ones.
This license requires attribution, so if you are going to use the code, respect the attribution, respect the class headers that mention the license terms and author names, and if you are going to release your app (that uses this code) to the world (the binary, the apk) then create a section in your app where you mention all the libraries your app uses including author names, code licenses, and code source links.
Even when this code is not a Microsoft product, we have adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact us with any additional questions or comments."
5089,"ysoftwareab,yplatform","Self-service bootstrap/build/CI/CD. Software and configuration that supports various cycles of software development.. yplatform supports various cycles of software development, through a canonical set of commands.
yplatform aims to diminish cognitive load :massage:,
time to first build :stopwatch:
and time to first deployment :rocket: .
Why?
yplatform was conceived within Tobii Pro's Cloud Services team :wave:, previously known as support-firecloud .









git clone https://github.com/ysoftwareab/yplatform.git and you will gain access to:
a bootstrap process for local-development based on GNU and Homebrew
cross-platform.
No more worries about this is how it works on a developer machine (e.g. MacOS/Windows) and this is how it works in the CI (e.g. Linux).
brings common GNU utilities (bash, make, grep, sed, find, etc), version locked.
No more worries about different flags, different behaviour or missing features!
brings Homebrew.
No more worries about different versions available in distros' repositositories, or libraries/utilities not being available at all.
sane per-user configuration e.g. git
various utility scripts, 99% GNU Bourne Again Shell (Bash)
documentation and best common practices
bash -c ""$(curl -qfsSL https://raw.githubusercontent.com/ysoftwareab/yplatform/master/bin/yp-install)""
to install the latest yplatform (as a git submodule) to your project and you will gain access to:
a bootstrap process for CI machines based on GNU and Homebrew
cross-provider.
No more worries about running pipelines with multiple CI providers, or switching to a new CI provider.
a build system based on GNU Make, both robust and flexible
sane per-repo configurations e.g. vscode
various utility scripts, 99% Bourne Again Shell (Bash)
a cloud infrastructure-as-code system based on GNU Make, both robust and flexible
yplatform aims to diminish cognitive load :massage:,
time to first build :stopwatch:
and time to first deployment :rocket: .
This means removing out-of-band information about system dependencies.
How many times a repository's README mentions ""something version x required""?
How many times it doesn't mention anything, and you end up looking for a CI/Docker configuration?
This means removing differences in installing system dependencies.
How many times did you look up ""how to install X on Y?""
How many times did you discover that you get different system dependencies, depending on the version of your Linux distribution?
This means removing differences in core utilities.
How many times do you get something working on your MacOS development machine (BSD), only to see it fail on a CI machine, say running Ubuntu (GNU)?
This means removing differences in installing local dependencies.
How many times a repository's README mentions npm install or yarn install or pip install or ./configure --prefix=/usr; make? Why should you care if this is a node/python/erlang/etc codebase, or what package manager it uses?
This means removing differences in triggering a build, checks, tests, a deployment, etc between codebases and their main programming language.
How many times did you check how to build a codebase, what language it is using, what package manager or test framework it is using, what services need to be up, etc?
How many times did you realize that checks are impossible to run locally, and that they run only in the CI, or worse - as a service reviewing/commenting your PR making it impossible to get early local feedback instead of feedback/noise in a Github pull request?
How many times did you return years after to an old codebase, of your own above all!, only to realize you have no clue what's needed to build it again?
This means removing differences between what runs locally and what runs in the CI.
How many times did you realize that you're instrumenting the CI ever-so-slightly-different than your local runs?
Because maybe you duplicated code in the scripts section of your package.json and your GitHub workflow YAML?
This means removing differences between CI providers.
How many times did you postpone trying out another CI provider?
How many times did you choose a provider based on previous experience, popularity, how easy it is to integrate,
rather than based on whether it is the most performant or the most appropriate for the job at hand?
This means consolidating best current practices.
How many times did you look up how to set up encryption in a git repository?
How many times did you reconfigure git with sane defaults or bump into CRLF/LF issues between system/developers?
How many times did you configure or postpone altogether configuring a gitops flow? Env branches, tags, changelog creation, etc?
This means trying to make everything work the same everywhere.
Emphasis on trying. In reality, 100% the same is not possible.
But it is possible to achieve say 80%.
And 80% is much better than 0% i.e. not trying at all.
Starting fresh with a new project or switching between projects doesn't mean you need to switch development context,
and instead you can focus on the business-logic context.
This mindset is useful for junior and senior developers alike. It makes onboarding new people as frictionless as possible.
Others have also been writing about this
as early as 2016
and as late as 2021
and 2022.
Why use make you might ask. A few reasons actually:
make it's old (1976) but still under development, which makes it omnipresent, reliable and durable. In 5, 10, 20 years from now, expect it to still work!
lower cognitive load since chances are much higher that someone has already encountered make in other projects
The entrypoint to all projects that use yplatform is
Just type make !
make will fetch local dependencies, build the project and check that everything looks alright.
That's all you need to have a fully functional development environment.
Sometimes if your project has specific system dependencies, you may need to run make bootstrap.
""Then what?"" you might ask.
Just type make help !
And you get a nice list of self-documented targets.
Want to see all targets? Type make help-all.
Want to fetch dependencies alone? Type make deps.
Want to build and skip dependencies and checks? Type make build.
What to run checks alone (i.e. linters)? Type make check.
Want to run tests? Type make test.
Want to release a new version as a git tag with automatic release notes based on git commits? Type make release.
Want to see commits since last release? Type make unreleased.
Want to promote a version to an environment branch?
A branch that is coupled to a CI that deploys your software to a staging environment for example?
Type make promote-env/staging/v1.2.3 for example.
Do you have secrets checked in and want to decrypt them transparently via git clean/smudge filters? Type make decrypt.
Do you want to reset your local git repository as if it was freshly cloned? Type make nuke.
And the list goes on and on and on. Fully extensible. Preloaded with minimal best current practices.
Similarly yplatform itself runs across these platforms with very little effort and no duplication. Bootstrapped Docker images are also available.
NOTE RHEL needs entitlement certificates in the CI.
NOTE common install is paused for Microsoft Windows (WSL) because the process takes more than 1 hour on Github Actions CI
(a combination of machine specs and being restricted to WSL v1), but we expect no problems.
NOTE it should even possible to create WSL images, and even OCI/podman images. Tracked in #213.
yplatform itself currently runs across these providers with very little effort and no duplication.
NOTE Bitrise builds for the master branch run only once a day due to freemium limits.
We have also integrated in the past with more CI providers
NOTE Travis CI builds for the master branch are paused because one has to constantly ask for more open-source credits.
Integration with Travis CI is unstable since it now requires a subscription.
Had to input my password (e.g. to install Homebrew) and
decide post-installation if I optionally want to switch my shell from zsh to bash,
something that is useful for those that are not techies.
All done in 10 minutes. Set for life.
Watch it at 10x, then it's only 1 minute. :sunglasses:
Second video is a bootstrapping of a fresh Ubuntu 20.04 developer machine.
Had to input my password (e.g. to install some aptitude packages and Homebrew) and
input my timezone.
All done in 10 minutes. Set for life.
Watch it at 10x, then it's only 1 minute. :sunglasses:


This is a cloning of a project on a macOS developer machine,
and installing project-specific system dependencies.
Second video shows opening the same project,
and playing around without actually having to know anything about it.


/bin has executable scripts, 99% GNU Bourne Again Shell (Bash)
/build.mk has build-system makefiles
/bootstrap has scripts that help bootstrap a machine
/ci has scripts that help steer the CI pipelines
/dev has scripts that help bootstrap a developer machine
/dockerfiles has scripts for the bootstrapped Docker images
/gitconfig has git configuration
/sshconfig has ssh configuration
/repo has configuration that is repo-specific, for those repositories bootstrapped with yplatform
/mk has common include makefiles e.g. sourced from /build.mk makefiles
/sh has common include shell scripts e.g. sourced from /bin shell scripts
newcomer
daily work
style
Use common sense and BE CONSISTENT. (Google)
set up a new git repository
Amazon Web Services
https://developers.google.com/tech-writing/overview
https://github.com/google/styleguide/blob/gh-pages/docguide/philosophy.md
https://www.julian.com/guide/write/intro"
4916,"philippK-de,Collabtive","Collabtive is web based project management software. Collabtive
Collabtive is web-based project management software. 
It's an open source alternative to proprietary tools like Basecamp.
It features a modern, responsive UI as well as powerful features for structuring and tracking projects.
With a responsive UI and powerful plugin system - it's easy to use and customize.
Requirements
PHP 5.5, PHP 7 
MySQL/MariaDB or SQLite Database
Browser support
Internet Explorer 10/11
MS Edge
Google Chrome
Mozilla Firefox
Features
Task lists
  Each tasklist can have an arbitrary number of tasks.
Tasks
  Each task has a due date, a completion state and can be assigned to one or more users
Milestones
  Milestones encapsulate major project phases
Messaging / Instant messaging
  Per-project messaging built in. Audio/Video and Text messaging available as plugins.
File management
  Per-project file manager featuring full folder support, and encrypted storage.
Role-based user permissions
  Create fine grained access control
Time tracking
Reporting (Excel, PDF)"
4185,"vincentdoerig,latex-css","LaTeX.css is a CSS library that makes your website look like a LaTeX document. LaTeX.css is a minimal, almost class-less CSS library which makes any website look like a LaTeX document. It is based on @davidrzs' latexCSS.
Add the following code in the head of your project.
or use a CDN like Unpkg:
NPM:
Yarn:
Add any optional classnames to elements with special styles (author subtitle, abstract, lemmas, theorems, etc.). A list of supported class-based elements can be found here.
The labels of theorems, definitions, lemmas and proofs can be changed to other supported languages by including the following snippet in addition to the main CSS file.
and changing the html lang attribute:
Have a look at the language support page for more info and a demo of the different languages.
Contributions, feedback and issues are welcome. Feel free to fork, comment, critique, or submit a pull request.
This project is based on David Zollikofer's project latexCSS.
Most of the CSS reset is based on Andy Bell's Modern CSS Reset.
The sample HTML5 markup test page is based on html5-test-page by @cbracco.
The idea of sidenotes was taken and adpated from Tufte CSS.
This project is open source and available under the MIT License."
4741,"revoltchat,backend","Monorepo for Revolt backend services.. This is a monorepo for the Revolt backend.
Note: january, autumn, and vortex are yet to be moved into this monorepo.
Revolt Project Board (Submit feature requests here)
The contribution guide is located at developers.revolt.chat/contributing.
Please note that a pull request should only take care of one issue so that we can review it quickly.
The Revolt backend is generally licensed under the GNU Affero General Public License v3.0. Please check individual crates for further license information."
4472,"gajus,slonik","A Node.js PostgreSQL client with runtime and build time type safety, and composable SQL.. <a name=""slonik"">






A battle-tested PostgreSQL client with strict types, detailed logging and assertions.

(The above GIF shows Slonik producing query logs. Slonik produces logs using Roarr. Logs include stack trace of the actual query invocation location and values used to execute the query.)
<a name=""slonik-sponsors"">
If you value my work and want to see Slonik and many other of my Open-Source projects to be continuously improved, then please consider becoming a patron:


<a name=""slonik-principles"">
Promotes writing raw SQL.
Discourages ad-hoc dynamic generation of SQL.
Read: Stop using Knex.js
Note: Using this project does not require TypeScript or Flow. It is a regular ES6 module. Ignore the type definitions used in the documentation if you do not use a type system.
<a name=""slonik-features"">
Safe connection handling.
Safe transaction handling.
Safe value interpolation.
Transaction nesting.
Detailed logging.
Asynchronous stack trace resolution.
Middlewares.
Mapped errors.
ESLint plugin.
<a name=""slonik-contents"">
<a name=""slonik-about-slonik"">
<a name=""slonik-about-slonik-battle-tested"">
Slonik began as a collection of utilities designed for working with node-postgres. We continue to use node-postgres as it provides a robust foundation for interacting with PostgreSQL. However, what once was a collection of utilities has since grown into a framework that abstracts repeating code patterns, protects against unsafe connection handling and value interpolation, and provides rich debugging experience.
Slonik has been battle-tested with large data volumes and queries ranging from simple CRUD operations to data-warehousing needs.
<a name=""slonik-about-slonik-origin-of-the-name"">

The name of the elephant depicted in the official PostgreSQL logo is Slonik. The name itself is derived from the Russian word for ""little elephant"".
Read: The History of Slonik, the PostgreSQL Elephant Logo
<a name=""slonik-about-slonik-repeating-code-patterns-and-type-safety"">
Among the primary reasons for developing Slonik, was the motivation to reduce the repeating code patterns and add a level of type safety. This is primarily achieved through the methods such as one, many, etc. But what is the issue? It is best illustrated with an example.
Suppose the requirement is to write a method that retrieves a resource ID given values defining (what we assume to be) a unique constraint. If we did not have the aforementioned convenience methods available, then it would need to be written as:
oneFirst method abstracts all of the above logic into:
oneFirst throws:
NotFoundError if query returns no rows
DataIntegrityError if query returns multiple rows
DataIntegrityError if query returns multiple columns
This becomes particularly important when writing routines where multiple queries depend on the previous result. Using methods with inbuilt assertions ensures that in case of an error, the error points to the original source of the problem. In contrast, unless assertions for all possible outcomes are typed out as in the previous example, the unexpected result of the query will be fed to the next operation. If you are lucky, the next operation will simply break; if you are unlucky, you are risking data corruption and hard to locate bugs.
Furthermore, using methods that guarantee the shape of the results, allows us to leverage static type checking and catch some of the errors even before they executing the code, e.g.
Static type check of the above example will produce a warning as the fooId is guaranteed to be an array and binding of the last query is expecting a primitive value.
<a name=""slonik-about-slonik-protecting-against-unsafe-connection-handling"">
Slonik only allows to check out a connection for the duration of the promise routine supplied to the pool#connect() method.
The primary reason for implementing only this connection pooling method is because the alternative is inherently unsafe, e.g.
In this example, if SELECT foo() produces an error, then connection is never released, i.e. the connection remains to hang.
A fix to the above is to ensure that connection#release() is always called, i.e.
Slonik abstracts the latter pattern into pool#connect() method.
Connection is always released back to the pool after the promise produced by the function supplied to connect() method is either resolved or rejected.
<a name=""slonik-about-slonik-protecting-against-unsafe-transaction-handling"">
Just like in the unsafe connection handling described above, Slonik only allows to create a transaction for the duration of the promise routine supplied to the connection#transaction() method.
This pattern ensures that the transaction is either committed or aborted the moment the promise is either resolved or rejected.
<a name=""slonik-about-slonik-protecting-against-unsafe-value-interpolation"">
SQL injections are one of the most well known attack vectors. Some of the biggest data leaks were the consequence of improper user-input handling. In general, SQL injections are easily preventable by using parameterization and by restricting database permissions, e.g.
In this example, the query text (SELECT $1) and parameters (value of the userInput) are passed to the PostgreSQL server where the parameters are safely substituted into the query. This is a safe way to execute a query using user-input.
The vulnerabilities appear when developers cut corners or when they do not know about parameterization, i.e. there is a risk that someone will instead write:
As evident by the history of the data leaks, this happens more often than anyone would like to admit. This is especially a big risk in Node.js community, where predominant number of developers are coming from frontend and have not had training working with RDBMSes. Therefore, one of the key selling points of Slonik is that it adds multiple layers of protection to prevent unsafe handling of user-input.
To begin with, Slonik does not allow to run plain-text queries.
The above invocation would produce an error:
TypeError: Query must be constructed using sql tagged template literal.
This means that the only way to run a query is by constructing it using sql tagged template literal, e.g.
To add a parameter to the query, user must use template literal placeholders, e.g.
Slonik takes over from here and constructs a query with value bindings, and sends the resulting query text and parameters to the PostgreSQL. As sql tagged template literal is the only way to execute the query, it adds a strong layer of protection against accidental unsafe user-input handling due to limited knowledge of the SQL client API.
As Slonik restricts user's ability to generate and execute dynamic SQL, it provides helper functions used to generate fragments of the query and the corresponding value bindings, e.g. sql.identifier, sql.join and sql.unnest. These methods generate tokens that the query executor interprets to construct a safe query, e.g.
This (contrived) example generates a query equivalent to:
That is executed with the parameters provided by the user.
To sum up, Slonik is designed to prevent accidental creation of queries vulnerable to SQL injections.
<a name=""slonik-documentation"">
<a name=""slonik-usage"">
<a name=""slonik-usage-create-connection"">
Use createPool to create a connection pool, e.g.
Instance of Slonik connection pool can be then used to create a new connection, e.g.
The connection will be kept alive until the promise resolves (the result of the method supplied to connect()).
Refer to query method documentation to learn about the connection methods.
If you do not require having a persistent connection to the same backend, then you can directly use pool to run queries, e.g.
Beware that in the latter example, the connection picked to execute the query is a random connection from the connection pool, i.e. using the latter method (without explicit connect()) does not guarantee that multiple queries will refer to the same backend.
<a name=""slonik-usage-end-connection-pool"">
Use pool.end() to end idle connections and prevent creation of new connections.
The result of pool.end() is a promise that is resolved when all connections are ended.
Note: pool.end() does not terminate active connections/ transactions.
<a name=""slonik-usage-describing-the-current-state-of-the-connection-pool"">
Use pool.getPoolState() to find out if pool is alive and how many connections are active and idle, and how many clients are waiting for a connection.
Note: pool.end() does not terminate active connections/ transactions.
<a name=""slonik-usage-api"">
Example:
<a name=""slonik-usage-default-configuration"">
<a name=""slonik-usage-default-configuration-default-interceptors"">
None.
Check out slonik-interceptor-preset for an opinionated collection of interceptors.
<a name=""slonik-usage-default-configuration-default-type-parsers"">
These type parsers are enabled by default:
To disable the default type parsers, pass an empty array, e.g.
You can create default type parser collection using createTypeParserPreset, e.g.
<a name=""slonik-usage-using-native-libpq-bindings"">
In order to use native libpq PostgreSQL bindings install pg-native.
By default, Slonik uses native bindings when pg-native is installed. To use JavaScript bindings when pg-native is installed, configure preferNativeBindings: false.
<a name=""slonik-usage-checking-out-a-client-from-the-connection-pool"">
Slonik only allows to check out a connection for the duration of the promise routine supplied to the pool#connect() method.
Connection is released back to the pool after the promise produced by the function supplied to connect() method is either resolved or rejected.
Read: Protecting against unsafe connection handling
<a name=""slonik-how-are-they-different"">
<a name=""slonik-how-are-they-different-pg-vs-slonik"">
pg is built intentionally to provide unopinionated, minimal abstraction and encourages use of other modules to implement convenience methods.
Slonik is built on top of pg and it provides convenience methods for building queries and querying data.
Work on pg began on Tue Sep 28 22:09:21 2010. It is authored by Brian Carlson.
<a name=""slonik-how-are-they-different-pg-promise-vs-slonik"">
As the name suggests, pg-promise was originally built to enable use of pg module with promises (at the time, pg only supported Continuation Passing Style (CPS), i.e. callbacks). Since then pg-promise added features for connection/ transaction handling, a powerful query-formatting engine and a declarative approach to handling query results.
The primary difference between Slonik and pg-promise:
Slonik does not allow to execute raw text queries. Slonik queries can only be constructed using sql tagged template literals. This design protects against unsafe value interpolation.
Slonik implements interceptor API (middleware). Middlewares allow to modify connection handling, override queries and modify the query results. Example Slonik interceptors include field name transformation, query normalization and query benchmarking.
Note: Author of pg-promise has objected to the above claims. I have removed a difference that was clearly wrong. I maintain that the above two differences remain valid differences: even though pg-promise might have substitute functionality for variable interpolation and interceptors, it implements them in a way that does not provide the same benefits that Slonik provides, namely: guaranteed security and support for extending library functionality using multiple plugins.
Other differences are primarily in how the equivalent features are implemented, e.g.
When weighting which abstraction to use, it would be unfair not to consider that pg-promise is a mature project with dozens of contributors. Meanwhile, Slonik is a young project (started in March 2017) that until recently was developed without active community input. However, if you do support the unique features that Slonik adds, the opinionated API design, and are not afraid of adopting a technology in its young days, then I warmly invite you to adopt Slonik and become a contributor to what I intend to make the standard PostgreSQL client in the Node.js community.
Work on pg-promise began Wed Mar 4 02:00:34 2015. It is authored by Vitaly Tomilov.
<a name=""slonik-type-parsers"">
Type parsers describe how to parse PostgreSQL types.
Example:
Note: Unlike pg-types that uses OIDs to identify types, Slonik identifies types using their names.
Use this query to find type names:
Type parsers are configured using typeParsers client configuration.
Read: Default type parsers.
<a name=""slonik-type-parsers-built-in-type-parsers"">
Built-in type parsers can be created using the exported factory functions, e.g.
<a name=""slonik-interceptors"">
Functionality can be added to Slonik client by adding interceptors (middleware).
Interceptors are configured using client configuration, e.g.
Interceptors are executed in the order they are added.
Read: Default interceptors.
<a name=""slonik-interceptors-interceptor-methods"">
Interceptor is an object that implements methods that can change the behaviour of the database client at different stages of the connection life-cycle
<a name=""slonik-interceptors-interceptor-methods-afterpoolconnection"">
Executed after a connection is acquired from the connection pool (or a new connection is created), e.g.
<a name=""slonik-interceptors-interceptor-methods-afterqueryexecution"">
Executed after query has been executed and before rows were transformed using transformRow.
Note: When query is executed using stream, then afterQuery is called with empty result set.
<a name=""slonik-interceptors-interceptor-methods-beforequeryexecution"">
This function can optionally return a direct result of the query which will cause the actual query never to be executed.
<a name=""slonik-interceptors-interceptor-methods-beforequeryresult"">
Executed just before the result is returned to the client.
Use this method to capture the result that will be returned to the client.
<a name=""slonik-interceptors-interceptor-methods-beforetransformquery"">
Executed before transformQuery. Use this interceptor to capture the original query (e.g. for logging purposes).
<a name=""slonik-interceptors-interceptor-methods-beforepoolconnectionrelease"">
Executed before connection is released back to the connection pool, e.g.
<a name=""slonik-interceptors-interceptor-methods-queryexecutionerror"">
Executed if query execution produces an error.
Use queryExecutionError to log and/ or re-throw another error.
<a name=""slonik-interceptors-interceptor-methods-transformquery"">
Executed before beforeQueryExecution.
Transforms query.
<a name=""slonik-interceptors-interceptor-methods-transformrow"">
Executed for each row.
Transforms row.
Use transformRow to modify the query result.
<a name=""slonik-community-interceptors"">
Check out slonik-interceptor-preset for an opinionated collection of interceptors.
<a name=""slonik-recipes"">
<a name=""slonik-recipes-inserting-large-number-of-rows"">
Use sql.unnest to create a set of rows using unnest. Using the unnest approach requires only 1 variable per every column; values for each column are passed as an array, e.g.
Produces:
Inserting data this way ensures that the query is stable and reduces the amount of time it takes to parse the query.
<a name=""slonik-recipes-routing-queries-to-different-connections"">
If connection is initiated by a query (as opposed to a obtained explicitly using pool#connect()), then beforePoolConnection interceptor can be used to change the pool that will be used to execute the query, e.g.
<a name=""slonik-sql-tag"">
sql tag serves two purposes:
It is used to construct queries with bound parameter values (see Value placeholders).
It used to generate dynamic query fragments (see Query building).
sql tag can be imported from Slonik package:
Sometiems it may be desirable to construct a custom instance of sql tag. In those cases, you can use the createSqlTag factory, e.g.
<a name=""slonik-value-placeholders"">
<a name=""slonik-value-placeholders-tagged-template-literals"">
Slonik query methods can only be executed using sql tagged template literal, e.g.
The above is equivalent to evaluating:
query with 'baz' value binding.
<a name=""slonik-value-placeholders-manually-constructing-the-query"">
Manually constructing queries is not allowed.
There is an internal mechanism that checks to see if query was created using sql tagged template literal, i.e.
Will result in an error:
Query must be constructed using sql tagged template literal.
This is a security measure designed to prevent unsafe query execution.
Furthermore, a query object constructed using sql tagged template literal is frozen to prevent further manipulation.
<a name=""slonik-value-placeholders-nesting-sql"">
sql tagged template literals can be nested, e.g.
Produces:
<a name=""slonik-query-building"">
Queries are built using methods of the sql tagged template literal.
If this is your first time using Slonik, read Dynamically generating SQL queries using Node.js.
<a name=""slonik-query-building-sql-array"">
Creates an array value binding, e.g.
Produces:
<a name=""slonik-query-building-sql-array-sql-array-membertype"">
If memberType is a string (TypeNameIdentifierType), then it is treated as a type name identifier and will be quoted using double quotes, i.e. sql.array([1, 2, 3], 'int4') is equivalent to $1::""int4""[]. The implication is that keywrods that are often used interchangeably with type names are not going to work, e.g. int4 is a type name identifier and will work. However, int is a keyword and will not work. You can either use type name identifiers or you can construct custom member using sql tag, e.g.
Produces:
<a name=""slonik-query-building-sql-array-sql-array-vs-sql-join"">
Unlike sql.join, sql.array generates a stable query of a predictable length, i.e. regardless of the number of values in the array, the generated query remains the same:
Having a stable query enables pg_stat_statements to aggregate all query execution statistics.
Keeping the query length short reduces query parsing time.
Example:
Is equivalent to:
Furthermore, unlike sql.join, sql.array can be used with an empty array of values. In short, sql.array should be preferred over sql.join when possible.
<a name=""slonik-query-building-sql-binary"">
Binds binary (bytea) data, e.g.
Produces:
<a name=""slonik-query-building-sql-identifier"">
Delimited identifiers are created by enclosing an arbitrary sequence of characters in double-quotes (""). To create create a delimited identifier, create an sql tag function placeholder value using sql.identifier, e.g.
Produces:
<a name=""slonik-query-building-sql-json"">
Serializes value and binds it as a JSON string literal, e.g.
Produces:
<a name=""slonik-query-building-sql-json-difference-from-json-stringify"">
<a name=""slonik-query-building-sql-join"">
Concatenates SQL expressions using glue separator, e.g.
Produces:
sql.join is the primary building block for most of the SQL, e.g.
Boolean expressions:
// SELECT $1 AND $2
// SELECT ($1, $2)
// SELECT ($1, $2), ($3, $4)
Creates an unnest expressions, e.g.
Produces:
<a name=""slonik-query-methods"">
<a name=""slonik-query-methods-any"">
Returns result rows.
Example:
#any is similar to #query except that it returns rows without fields information.
<a name=""slonik-query-methods-anyfirst"">
Returns value of the first column of every row in the result set.
Throws DataIntegrityError if query returns multiple rows.
Example:
<a name=""slonik-query-methods-copyfrombinary"">
Copies from a binary stream.
The binary stream is constructed using user supplied tupleList and columnTypes values.
Example:
<a name=""slonik-query-methods-copyfrombinary-limitations"">
Tuples cannot contain NULL values.
<a name=""slonik-query-methods-copyfrombinary-implementation-notes"">
copyFromBinary implementation is designed to minimize the query execution time at the cost of increased script memory usage and execution time. This is achieved by separating data encoding from feeding data to PostgreSQL, i.e. all data passed to copyFromBinary is first encoded and then fed to PostgreSQL (contrast this to using a stream with encoding transformation to feed data to PostgreSQL).
<a name=""slonik-query-methods-copyfrombinary-related-documentation"">
<a name=""slonik-query-methods-many"">
Returns result rows.
Throws NotFoundError if query returns no rows.
Example:
<a name=""slonik-query-methods-manyfirst"">
Returns value of the first column of every row in the result set.
Throws NotFoundError if query returns no rows.
Throws DataIntegrityError if query returns multiple columns.
Example:
<a name=""slonik-query-methods-maybeone"">
Selects the first row from the result.
Returns null if row is not found.
Throws DataIntegrityError if query returns multiple rows.
Example:
<a name=""slonik-query-methods-maybeonefirst"">
Returns value of the first column from the first row.
Returns null if row is not found.
Throws DataIntegrityError if query returns multiple rows.
Throws DataIntegrityError if query returns multiple columns.
Example:
<a name=""slonik-query-methods-one"">
Selects the first row from the result.
Throws NotFoundError if query returns no rows.
Throws DataIntegrityError if query returns multiple rows.
Example:
Note:
I've been asked ""What makes this different from knex.js knex('foo').limit(1)?"".
knex('foo').limit(1) simply generates ""SELECT * FROM foo LIMIT 1"" query.
knex is a query builder; it does not assert the value of the result.
Slonik #one adds assertions about the result of the query.
<a name=""slonik-query-methods-onefirst"">
Returns value of the first column from the first row.
Throws NotFoundError if query returns no rows.
Throws DataIntegrityError if query returns multiple rows.
Throws DataIntegrityError if query returns multiple columns.
Example:
<a name=""slonik-query-methods-query"">
API and the result shape are equivalent to pg#query.
Example:
<a name=""slonik-query-methods-stream"">
Streams query results.
Example:
Note: Implemneted using pg-query-stream.
<a name=""slonik-query-methods-transaction"">
transaction method is used wrap execution of queries in START TRANSACTION and COMMIT or ROLLBACK. COMMIT is called if the transaction handler returns a promise that resolves; ROLLBACK is called otherwise.
transaction method can be used together with createPool method. When used to create a transaction from an instance of a pool, a new connection is allocated for the duration of the transaction.
<a name=""slonik-query-methods-transaction-transaction-nesting"">
Slonik uses SAVEPOINT to automatically nest transactions, e.g.
is equivalent to:
Slonik automatically rollsback to the last savepoint if a query belonging to a transaction results in an error, e.g.
is equivalent to:
If error is unhandled, then the entire transaction is rolledback, e.g.
is equivalent to:
<a name=""slonik-error-handling"">
All Slonik errors extend from SlonikError, i.e. You can catch Slonik specific errors using the following logic.
<a name=""slonik-error-handling-original-node-postgres-error"">
When error originates from node-postgres, the original error is available under originalError property.
This propery is exposed for debugging purposes only. Do not use it for conditional checks ‚Äì¬†it can change.
If you require to extract meta-data about a specific type of error (e.g. contraint violation name), raise a GitHub issue describing your use case.
<a name=""slonik-error-handling-handling-backendterminatederror"">
BackendTerminatedError is thrown when the backend is terminated by the user, i.e. pg_terminate_backend.
BackendTerminatedError must be handled at the connection level, i.e.
<a name=""slonik-error-handling-handling-checkintegrityconstraintviolationerror"">
CheckIntegrityConstraintViolationError is thrown when PostgreSQL responds with check_violation (23514) error.
<a name=""slonik-error-handling-handling-connectionerror"">
ConnectionError is thrown when connection cannot be established to the PostgreSQL server.
<a name=""slonik-error-handling-handling-dataintegrityerror"">
To handle the case where the data result does not match the expectations, catch DataIntegrityError error.
<a name=""slonik-error-handling-handling-foreignkeyintegrityconstraintviolationerror"">
ForeignKeyIntegrityConstraintViolationError is thrown when PostgreSQL responds with foreign_key_violation (23503) error.
<a name=""slonik-error-handling-handling-notfounderror"">
To handle the case where query returns less than one row, catch NotFoundError error.
<a name=""slonik-error-handling-handling-notnullintegrityconstraintviolationerror"">
NotNullIntegrityConstraintViolationError is thrown when PostgreSQL responds with not_null_violation (23502) error.
<a name=""slonik-error-handling-handling-statementcancellederror"">
StatementCancelledError is thrown when a query is cancelled by the user (i.e. pg_cancel_backend) or in case of a timeout.
It should be safe to use the same connection if StatementCancelledError is handled, e.g.
<a name=""slonik-error-handling-handling-statementtimeouterror"">
StatementTimeoutError inherits from StatementCancelledError and it is called only in case of a timeout.
<a name=""slonik-error-handling-handling-uniqueintegrityconstraintviolationerror"">
UniqueIntegrityConstraintViolationError is thrown when PostgreSQL responds with unique_violation (23505) error.
<a name=""slonik-types"">
This package is using Flow types.
Refer to ./src/types.js.
The public interface exports the following types:
DatabaseConnectionType
DatabasePoolConnectionType
DatabaseSingleConnectionType
Use these types to annotate connection instance in your code base, e.g.
<a name=""slonik-debugging"">
<a name=""slonik-debugging-logging"">
Slonik uses roarr to log queries.
To enable logging, define ROARR_LOG=true environment variable.
By default, Slonik logs only connection events, e.g. when connection is created, connection is acquired and notices.
Query-level logging can be added using slonik-interceptor-query-logging interceptor.
<a name=""slonik-debugging-capture-stack-trace"">
Note: Requires slonik-interceptor-query-logging.
Enabling captureStackTrace configuration will create a stack trace before invoking the query and include the stack trace in the logs, e.g.
Use @roarr/cli to pretty-print the output.

<a name=""slonik-syntax-highlighting"">
<a name=""slonik-syntax-highlighting-atom-syntax-highlighting-plugin"">
Using Atom IDE you can leverage the language-babel package in combination with the language-sql to enable highlighting of the SQL strings in the codebase.

To enable highlighting, you need to:
Install language-babel and language-sql packages.
Configure language-babel ""JavaScript Tagged Template Literal Grammar Extensions"" setting to use language-sql to highlight template literals with sql tag (configuration value: sql:source.sql).
Use sql helper to construct the queries.
For more information, refer to the JavaScript Tagged Template Literal Grammar Extensions documentation of language-babel package.
<a name=""slonik-syntax-highlighting-vs-code-syntax-highlighting-extension"">
The vscode-sql-template-literal extension provides syntax highlighting for VS Code:"
4396,"shirakaba,react-nativescript","React renderer for NativeScript. 
    



    
    <!-- 
        
     -->
    <!-- 
        
     -->
    
        
    
    <!-- 
        
     -->
    
        
    


React NativeScript is A React renderer for NativeScript, allowing you to write a NativeScript app using the familiar React style. Very under construction; expect swathing refactors!
I'm always hanging out in the #react chat of the NativeScript Slack if you'd like to talk about this project.
Note: the real-world app described below is not the same app as the one in this repository, sample/app, which is merely used for manually testing React NativeScript features.
I've ported Shiva Prasad's TypeScript NativeScript Core port of Alex Ziskind's issue-tracking app to React NativeScript. It's called rpstrackerrns and you can find it here.
The app is based on React NativeScript v0.11.0, so may have some minor differences to the latest version, but the general patterns should be the same.
<table>
    <tbody>
        <tr>
            <td align=""center"" valign=""middle"">
                
            </td>
            <td align=""center"" valign=""middle"">
                
            </td>
            <td align=""center"" valign=""middle"">
                
            </td>
        </tr>
        <tr>
            <td align=""center"" valign=""middle"">
                <b>Login Page</b>
            </td>
            <td align=""center"" valign=""middle"">
                <b>Backlog Page</b>
            </td>
            <td align=""center"" valign=""middle"">
                <b>Detail Page</b>
            </td>
        </tr>
    </tbody>
</table>

The repo also includes some example plugins (React components for native UI components) ‚Äì I'll likely be changing the APIs for making those, however, so don't assume that approach to remain supported.
React NativeScript shares most of the good parts of React Native, but above all gives a first-class development experience for interacting with native code. Never write another native module again ‚Äì you can write your native code inline using JavaScript!
<table>
    <tbody>
        <tr>
            <td align=""center"" valign=""middle"">
            </td>
            <td align=""center"" valign=""middle"">
                React Native
            </td>
            <td align=""center"" valign=""middle"">
                React NativeScript
            </td>
        </tr>
        <tr>
            <td align=""center"" valign=""middle"">
                <strong>UI renderer</strong>
            </td>
            <td align=""center"" valign=""middle"" colspan=""2"">
                React
            </td>
        </tr>
        <tr>
            <td align=""center"" valign=""middle"">
                <strong>Programming language</strong>
            </td>
            <td align=""center"" valign=""middle"" colspan=""2"">
                JavaScript (with TypeScript typings available)
            </td>
        </tr>
        <tr>
            <td align=""center"" valign=""middle"">
                <strong>Platforms</strong>
            </td>
            <td align=""center"" valign=""middle"">
                iOS + Android + many more
            </td>
            <td align=""center"" valign=""middle"">
                iOS + Android
            </td>
        </tr>
        <tr>
            <td align=""center"" valign=""middle"">
                <strong>Bundler</strong>
            </td>
            <td align=""center"" valign=""middle"">
                Metro
            </td>
            <td align=""center"" valign=""middle"">
                Webpack
            </td>
        </tr>
        <tr>
            <td align=""center"" valign=""middle"">
                <strong>Codebase</strong>
            </td>
            <td align=""center"" valign=""middle"">
                Absolutely unfathomable
            </td>
            <td align=""center"" valign=""middle"">
                Very approachable to new contributors
            </td>
        </tr>
        <tr>
            <td align=""center"" valign=""middle"">
                <strong>Javascript VM threading</strong>
            </td>
            <td align=""center"" valign=""middle"">
                Separate 'JS' thread
            </td>
            <td align=""center"" valign=""middle"">
                Main (UI) thread
            </td>
        </tr>
        <tr>
            <td align=""center"" valign=""middle"">
                <strong>Native API access</strong>
            </td>
            <td align=""left"" valign=""middle"">
                <em>""The Bridge""</em>
                <ul>
                    <li>asynchronous</li>
                    <li>JS Interface (JSI) is very limited and lacks typings</li>
                    <li>API calls must take JSON-serialisable arguments</li>
                    <li>developer must set up bindings themself</li>
                </ul>
            </td>
            <td align=""left"" valign=""middle"">
                <em>""The platform runtime""</em>
                <ul>
                    <li>synchronous</li>
                    <li>JS VM has bindings to 100% of the platform APIs with full TypeScript typings</li>
                    <li>API calls can take native variables marshalled into JS</li>
                    <li>developer doesn't have to write any bindings at all</li>
                </ul>
            </td>
        </tr>
    </tbody>
</table>

How far along is it?
It's feature-equivalent with NativeScript Core!
Is it production-ready?
It's based on React and NativeScript Core, which are both individually production-ready. However, it needs to be used a bit more before we'll understand whether there are any weaknesses in my implementation.
What about plugins?
Very few UI plugins have been adapted for use with React NativeScript so far, and I'm still altering the API for making UI plugins, so expect there to be relatively few UI plugins for a while. But any non-UI plugins will work just fine!
Can this consume React Native projects?
No, but it could with a lot of hard work. Allowing React NativeScript to run projects that were written for React Native is a huge project, but it's theoretically very possible ‚Äì it would be a project on exactly the same scale as React Native Web. See react-nativescript-compat-react-native for work towards this, where I've ported part of RNTester as a proof-of-concept... üë©‚Äçüî¨üë®‚Äçüî¨
Can this consume React Native native modules?
Certainly not UI-based native modules. But all flavours of NativeScript can consume native code, so it can probably consume React Native native modules, though may take a small bit of refactoring ü§î
Stanis≈Çaw Chmiela (@sjchmiela) produced a proof-of-concept for importing Expo Unimodules into NativeScript that could be used as a basis for this effort. Original discussion here.
A quick list of my own plans (not necessarily in execution order):
Migrate to hooks
Build a navigation library (possibly by supporting React Navigation)
Finalise the plugins API
Conference talk ü§û
Wishes:
Demo apps
Translated docs
Lots and lots of plugins
API compatibility with React Native (very long-term goal)
Compatibility with major React packages like React Navigation (may depend upon above)
Ideally get in contact via the Slack channel before starting any PRs!"
4357,"SigNoz,signoz","SigNoz is an open-source APM. It helps developers monitor their applications & troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. üî• üñ•.   üëâ  Open source Application Performance Monitoring (APM) & Observability tool. 
  

  Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.



     
     
     
          



  <b>Documentation</b> &bull;
  <b>ReadMe in Chinese</b> &bull;
  <b>ReadMe in German</b> &bull;
  <b>ReadMe in Portuguese</b> &bull;
  <b>Slack Community</b> &bull;
  <b>Twitter</b>


SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. With SigNoz, you can:
üëâ Visualise Metrics, Traces and Logs in a single pane of glass
üëâ You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.
üëâ You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.
üëâ Run aggregates on trace data to get business relevant metrics
üëâ Filter and query logs, build dashboards and alerts based on attributes in logs
üëâ Record exceptions automatically in Python, Java, Ruby, and Javascript
üëâ Easy to set alerts with DIY query builder









Come say Hi to us on Slack üëã


Unified UI for metrics, traces and logs. No need to switch from Prometheus to Jaeger to debug issues, or use a logs tool like Elastic separate from your metrics and traces stack. 
Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate
Slowest endpoints in your application
See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc
Filter traces by service name, operation, latency, error, tags/annotations.
Run aggregates on trace data (events/spans) to get business relevant metrics. e.g. You can get error rate and 99th percentile latency of customer_type: gold or deployment_version: v2 or external_call: paypal
Native support for OpenTelemetry Logs, advanced log query builder, and automatic log collection from k8s cluster
Lightening quick log analytics (Logs Perf. Benchmark)
End-to-End visibility into infrastructure performance, ingest metrics from all kinds of host environments
Easy to set alerts with DIY query builder


Being developers, we found it annoying to rely on closed source SaaS vendors for every small feature we wanted. Closed source vendors often surprise you with huge month end bills without any transparency.
We wanted to make a self-hosted & open source version of tools like DataDog, NewRelic for companies that have privacy and security concerns about having customer data going to third party services.
Being open source also gives you complete control of your configuration, sampling, uptimes. You can also build modules over SigNoz to extend business specific capabilities
We support OpenTelemetry as the library which you can use to instrument your applications. So any framework and language supported by OpenTelemetry is also supported by SigNoz. Some of the main supported languages are:
Java
Python
NodeJS
Go
PHP
.NET
Ruby
Elixir
Rust
You can find the complete list of languages here - https://opentelemetry.io/docs/


Please follow the steps listed here to install using docker
The troubleshooting instructions may be helpful if you face any issues.
&nbsp  

Please follow the steps listed here to install using helm charts


Prometheus is good if you want to do just metrics. But if you want to have a seamless experience between metrics and traces, then current experience of stitching together Prometheus & Jaeger is not great.
Our goal is to provide an integrated UI between metrics & traces - similar to what SaaS vendors like Datadog provides - and give advanced filtering and aggregation over traces, something which Jaeger currently lack.
&nbsp  

Jaeger only does distributed tracing. SigNoz supports metrics, traces and logs - all the 3 pillars of observability.
Moreover, SigNoz has few more advanced features wrt Jaeger:
Jaegar UI doesn‚Äôt show any metrics on traces or on filtered traces
Jaeger can‚Äôt get aggregates on filtered traces. For example, p99 latency of requests which have tag - customer_type='premium'. This can be done easily on SigNoz
&nbsp  

SigNoz Logs management are based on ClickHouse, a columnar OLAP datastore which makes aggregate log analytics queries much more efficient
50% lower resource requirement compared to Elastic during ingestion
We have published benchmarks comparing Elastic with SigNoz. Check it out here
&nbsp  

SigNoz supports aggregations on high-cardinality data over a huge volume while loki doesn‚Äôt.
SigNoz supports indexes over high cardinality data and has no limitations on the number of indexes, while Loki reaches max streams with a few indexes added to it.
Searching over a huge volume of data is difficult and slow in Loki compared to SigNoz
We have published benchmarks comparing Loki with SigNoz. Check it out here


We ‚ù§Ô∏è contributions big or small. Please read CONTRIBUTING.md to get started with making contributions to SigNoz.
Not sure how to get started? Just ping us on #contributing in our slack community


You can find docs at https://signoz.io/docs/. If you need any clarification or find something missing, feel free to raise a GitHub issue with the label documentation or reach out to us at the community slack channel.


Join the slack community to know more about distributed tracing, observability, or SigNoz and to connect with other users and contributors.
If you have any ideas, questions, or any feedback, please share on our Github Discussions
As always, thanks to our amazing contributors!

  
"
4727,"quii,learn-go-with-tests","Learn Go with test-driven development. 
  



I am proud to offer this resource for free, but if you wish to give some appreciation:
<a rel=""me"" href=""https://mastodon.cloud/@quii"">Mastodon
Explore the Go language by writing tests
Get a grounding with TDD. Go is a good language for learning TDD because it is a simple language to learn and testing is built-in
Be confident that you'll be able to start writing robust, well-tested systems in Go
Install Go - Set up environment for productivity.
Hello, world - Declaring variables, constants, if/else statements, switch, write your first go program and write your first test. Sub-test syntax and closures.
Integers - Further Explore function declaration syntax and learn new ways to improve the documentation of your code.
Iteration - Learn about for and benchmarking.
Arrays and slices - Learn about arrays, slices, len, varargs, range and test coverage.
Structs, methods & interfaces - Learn about struct, methods, interface and table driven tests.
Pointers & errors - Learn about pointers and errors.
Maps - Learn about storing values in the map data structure.
Dependency Injection - Learn about dependency injection, how it relates to using interfaces and a primer on io.
Mocking - Take some existing untested code and use DI with mocking to test it.
Concurrency - Learn how to write concurrent code to make your software faster.
Select - Learn how to synchronise asynchronous processes elegantly.
Reflection - Learn about reflection
Sync - Learn some functionality from the sync package including WaitGroup and Mutex
Context - Use the context package to manage and cancel long-running processes
Intro to property based tests - Practice some TDD with the Roman Numerals kata and get a brief intro to property based tests
Maths - Use the math package to draw an SVG clock
Reading files - Read files and process them
Templating - Use Go's html/template package to render html from data, and also learn about approval testing
Generics - Learn how to write functions that take generic arguments and make your own generic data-structure
Revisiting arrays and slices with generics - Generics are very useful when working with collections. Learn how to write your own Reduce function and tidy up some common patterns.
Now that you have hopefully digested the Go Fundamentals section you have a solid grounding of a majority of Go's language features and how to do TDD.
This next section will involve building an application.
Each chapter will iterate on the previous one, expanding the application's functionality as our product owner dictates.
New concepts will be introduced to help facilitate writing great code but most of the new material will be learning what can be accomplished from Go's standard library.
By the end of this, you should have a strong grasp as to how to iteratively write an application in Go, backed by tests.
HTTP server - We will create an application which listens to HTTP requests and responds to them.
JSON, routing and embedding - We will make our endpoints return JSON and explore how to do routing.
IO and sorting - We will persist and read our data from disk and we'll cover sorting data.
Command line & project structure - Support multiple applications from one code base and read input from command line.
Time - using the time package to schedule activities.
WebSockets - learn how to write and test a server that uses WebSockets.
Covering other subjects around testing.
Introduction to acceptance tests - Learn how to write acceptance tests for your code, with a real-world example for gracefully shutting down a HTTP server
Scaling acceptance tests - Learn techniques to manage the complexity of writing acceptance tests for non-trivial systems.
I often run in to questions on the internets like
How do I test my amazing function that does x, y and z
If you have such a question raise it as an issue on github and I'll try and find time to write a short chapter to tackle the issue. I feel like content like this is valuable as it is tackling people's real questions around testing.
OS exec - An example of how we can reach out to the OS to execute commands to fetch data and keep our business logic testable/
Error types - Example of creating your own error types to improve your tests and make your code easier to work with.
Context-aware Reader - Learn how to TDD augmenting io.Reader with cancellation. Based on Context-aware io.Reader for Go
Revisiting HTTP Handlers - Testing HTTP handlers seems to be the bane of many a developer's existence. This chapter explores the issues around designing handlers correctly.
Why - Watch a video, or read about why unit testing and TDD is important
Anti-patterns - A short chapter on TDD and unit testing anti-patterns
This project is work in progress If you would like to contribute, please do get in touch.
Read contributing.md for guidelines
Any ideas? Create an issue
I have some experience introducing Go to development teams and have tried different approaches as to how to grow a team from some people curious about Go into highly effective writers of Go systems.
An approach we tried was to take the blue book and every week discuss the next chapter along with the exercises.
I love this book but it requires a high level of commitment. The book is very detailed in explaining concepts, which is obviously great but it means that the progress is slow and steady - this is not for everyone.
I found that whilst a small number of people would read chapter X and do the exercises, many people didn't.
Katas are fun but they are usually limited in their scope for learning a language; you're unlikely to use goroutines to solve a kata.
Another problem is when you have varying levels of enthusiasm. Some people just learn way more of the language than others and when demonstrating what they have done end up confusing people with features the others are not familiar with.
This ends up making the learning feel quite unstructured and ad hoc.
By far the most effective way was by slowly introducing the fundamentals of the language by reading through go by example, exploring them with examples and discussing them as a group. This was a more interactive approach than ""read chapter x for homework"".
Over time the team gained a solid foundation of the grammar of the language so we could then start to build systems.
This to me seems analogous to practicing scales when trying to learn guitar.
It doesn't matter how artistic you think you are, you are unlikely to write good music without understanding the fundamentals and practicing the mechanics.
When I learn a new programming language I usually start by messing around in a REPL but eventually, I need more structure.
What I like to do is explore concepts and then solidify the ideas with tests. Tests verify the code I write is correct and documents the feature I have learned.
Taking my experience of learning with a group and my own personal way I am going to try and create something that hopefully proves useful to other teams. Learning the fundamentals by writing small tests so that you can then take your existing software design skills and ship some great systems.
People who are interested in picking up Go.
People who already know some Go, but want to explore testing with TDD.
A computer!
A text editor
Some experience with programming. Understanding of concepts like if, variables, functions etc.
Comfortable with using the terminal
Add issues/submit PRs here or tweet me @quii
Logo is by egonelbre What a star!"
5076,"blakmatrix,node-zendesk","a zendesk API client library for use with node.js. A Zendesk API client library for use with node.js 
Read the full documentation at blakmatrix.github.io/node-zendesk/
Promise support was introduced in @v2.0.0, the Legacy version of node-zendesk without Promises @v1.5.0
To use the API, just do the standard
or you can use Promises, you just need to skip the callback:
Take a look in the examples folder for more examples.
If you're looking to contribute, please refer to the API Coverage Document, open an issue, or make a PR!
Tests and examples are also welcome.
Zendesk's documentation can be found here.
MIT."
4827,"thymeleaf,thymeleaf-spring","Thymeleaf integration module for Spring. This repository contains:
thymeleaf-spring3: Thymeleaf integration package for Spring 3.x
thymeleaf-spring4: Thymeleaf integration package for Spring 4.x
thymeleaf-spring5: Thymeleaf integration package for Spring 5.x
To learn more and download latest version:"
3710,"lionsharecapital,lionshare-desktop","ü¶Å Simple cryptocurrency price and portfolio monitor for macOS. Lionshare is a simple macOS application that helps you track cryptocurrencies and
your portfolio. Build using Electron, React and Mobx.
For the API and other parts of the Lionshare herd, checkout our Github page
or get in touch with us on Twitter.
Special thanks to Coinbase for sponsoring the release of Lionshare as open source software. If you‚Äôre interested in building products to reinvent the future of finance, get in touch.
Electron specific code, including application configuration and Webpack build files,
can be found under desktop/. All React application code is stored inside src/.
To install for development, clone the repository and install the dependencies with yarn.
To run development application and Webpack server:
Lionshare is an open source project created by Ben Jennings, Jori Lallo and Maksim Stepanenko.
Lionshare is an open source side project. To support development and keep our server running, you can donate using Bitcoin and Ethereum:
Bitcoin: 14cYsomReqcsznbKTuW6Mh91uZm2j2AF5B
Ethereum: 0xbBC664b891D6Fc7EBF516594D690e370C5C32A9f
When will Lionshare support < your favorite coin >?
Right now we're supporting coins with the most market cap listed on GDAX and Poloniex. If we're not yet supporting your favorite coin, please create an issue to lionshare-api repository or upvote an existing one :+1:
Does my portfolio leave my computer?
No, Lionshare is completely client-side and doesn't hold any keys. We take security very seriously and all our communication happens over HTTPS. All code is open source.
How will you make money?
We won't, this is a side project.
When can I have a Linux, Windows, iOS, etc version?
Right now we're focused on supporting macOS but open to adding support for other platforms in the future.
MIT"
4421,"DISTORTEC,distortos","object-oriented C++ RTOS for microcontrollers. object-oriented C++ RTOS for microcontrollers
Homepage
Documentation
Source Code @ GitHub
Forum
To configure & build distortos you need:
CMake (version 3.8 or later);
a build tool supported by CMake -
it is highly recommended to use Ninja;
arm-none-eabi bleeding-edge-toolchain (GCC version 5 or
later);
distortos tries to follow typical CMake cross-compiling workflow, which means that you always have to use a
so-called toolchain file. Toolchain files in distortos also serve another purpose - they select the board which is
going to be used by your application.
Download source package of distortos in zip or
tar.gz format and extract it;
Create a build folder, for example output;
From within the build folder, initialize it with CMake, for example with
cmake .. -DCMAKE_TOOLCHAIN_FILE=../source/board/ST_STM32F4DISCOVERY/Toolchain-ST_STM32F4DISCOVERY.cmake -GNinja if you
want a default configuration or
cmake -C../configurations/ST_STM32F4DISCOVERY/test/distortosConfiguration.cmake .. -GNinja if you want to start from a
saved configuration;
Edit distortos configuration with a tool of your choice, for example cmake-gui .. (a GUI application) or
ccmake .. (curses-based application);
Execute selected build tool, for example ninja or ninja -v if you want to see all command lines while building;
You can obviously replace step 1 with git clone https://github.com/DISTORTEC/distortos.
Steps 2-4 can be all done from within cmake-gui. After starting the application use Browse Source... button to
select the folder with distortos and Browse Build... button to select the build folder. Then click on Configure
button. In the CMakeSetup window which appears select the generator of your choice and make sure that
Specify toolchain file for cross-compiling is selected before going any further. Click Next and specify the
toolchain file (which also selects the board), for example
&lt;source-folder&gt;/source/board/ST_STM32F4DISCOVERY/Toolchain-ST_STM32F4DISCOVERY.cmake and click Finish button.
The default target of build - all - is just the static library with distortos libdistortos.a. If you want to build
the test application, specify distortosTest as the target (for example ninja distortosTest if you use Ninja).
or
To generate a board you need:
Python (version 2.7, version 3.6 or later);
Jinja2 template engine for Python (version 2.10 or later);
ruamel.yaml YAML loader/dumper package for Python;
Both Jinja2 and ruamel.yaml can be easily installed with pip install jinja2 &amp;&amp; pip install ruamel.yaml (or
python -m pip install jinja2 followed by python -m pip install ruamel.yaml on Windows), however they may also be
available in the package manager of your system.
Board generator - scripts/generateBoard.py - takes a *.yaml file as an input and produces a folder containing
various board files: source files, headers, CMake files (including CMake toolchain file) and so on. The input
*.yaml file describes the board hardware in a tree-like form. The idea is very close to devicetree and in fact
earlier versions of board generator used devicetree files.
To get an idea about the format of the board YAML files, take a look at some of the existing files, for example
source/board/ST_STM32F4DISCOVERY/ST_STM32F4DISCOVERY.yaml - which describes STM32F4DISCOVERY board from ST - or
source/chip/STM32/STM32F4/chipYaml/ST_STM32F407VG.yaml - which describes STM32F407VG chip used on this board. There
is also some documentation about YAML bindings in documentation/yaml-bindings
Assuming that you already have distortos either as part of your project or as a standalone folder, the basic
invocation of the board generator is just path/to/distortos/scripts/generateBoard.py path/to/board.yaml (or
python path/to/distortos/scripts/generateBoard.py path/to/board.yaml on Windows), for example
./scripts/generateBoard.py source/board/ST_STM32F4DISCOVERY/ST_STM32F4DISCOVERY.yaml. You may also generate so-called
raw-boards, using chip YAML file as the input directly, for example
./scripts/generateBoard.py source/chip/STM32/STM32F4/chipYaml/ST_STM32F407VG.yaml -o output/path/of/raw/board."
4974,"htmlhint,HTMLHint","‚öôÔ∏è The static code analysis tool you need for your HTML. 
  
  
  
  HTMLHint
  


<h4 align=""center"">The static code analysis tool you need for your HTML.</h4>


  
    
  
  
    
  
  
    
  
  
  
    
  



¬† How To Use ‚Ä¢ Contributing ‚Ä¢ Website


Installation and Usage
Local Installation and Usage
Global Installation and Usage
Example output
Configuration
Docs
There are two ways to install HTMLHint: globally and locally.
In case you want to include HTMLHint as part of your project, you can install it locally using npm:
After that, You can run HTMLHint on any file or directory like this:
If you want to make HTMLHint available to tools that run across all of your projects, you can install HTMLHint globally using npm:
After that, you can run HTMLHint on any file like this:
You can even launch HTMLHint to analyze an URL:
Search .htmlhintrc file in current directory and all parent directories:
Custom config file:
Custom rules:
Inline rules in test.html:
This project exists thanks to all these people. Contribute.

Thank you to all our backers! Become a backer.

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. Become a sponsor.
"
4060,"singhbhavneet,GitMessenger","GitMessenger is github chat app built with socket.io , firebase, nodejs and  bootstrap where developers can share code,images and much more üòä. Link - https://gitmessenger.herokuapp.com
A chat app built with Nodejs, Socket.io, Firebase, Prism and Bootstrap
Mobile Screenshot

Desktop Screenshots

GitMessenger is chat app for developers where you can text, share images, code and much more! It is built with nodejs, socket.io, firebase and bootstrap.
To use features of firebase in app you will have to paste your own keys at firebase/firebase.js and also paste your own client id and client secret in .env file
Following is list of  libraries used in app.
Socket.io - For creating socket connections
Node.js - For backend development
Bootstrap - Frontend development
Firebase - For Storing chats,
Prism - Sharing codes.
Passport - Github Authentication.
Express-Session - Creating sessions. 
Bhavneet Singh  - singhbhavneet
This project is licensed under the MIT License - see the LICENSE.md file for details
Its because of my mummy's motivation, God's blessing and family's support that I am able to complete this project. Also thank you Arnav Sir championswimmer for being a good mentor."
4895,"os-autoinst,openQA","openQA web-frontend, scheduler and tools.. :circleci: image:https://circleci.com/gh/os-autoinst/openQA/tree/master.svg?style=svg[""CircleCI"", link=""https://circleci.com/gh/os-autoinst/openQA/tree/master""]
:codecov: image:https://codecov.io/gh/os-autoinst/openQA/branch/master/graph/badge.svg[link=https://codecov.io/gh/os-autoinst/openQA]
= openQA
{codecov} {circleci}
openQA is a testing framework that allows you to test GUI applications on one
hand and bootloader and kernel on the other. In both cases, it is difficult to
script tests and verify the output. Output can be a popup window or it can be
an error in early boot even before init is executed.
Therefore openQA runs virtual machines and closely monitors their state and
runs tests on them.
The testing framework can be divided in two parts. The one that is hosted in
this repository contains the web frontend and management logic (test
scheduling, management, high-level API, ...)
The other part that you need to run openQA is the OS-autoinst test engine that
is hosted in a separate https://github.com/os-autoinst/os-autoinst[repository].
== Getting started
The project's information is organized into four basic documents. As a first
step, read the link:docs/GettingStarted.asciidoc[Starter Guide] and then, if
needed, proceed to the link:docs/Installing.asciidoc[Installation Guide].
For users of the openQA web interface or the REST API consult
link:docs/UsersGuide.asciidoc[Users Guide].
If you are interested in writing tests using openQA read the
link:docs/WritingTests.asciidoc[Tests Developer Guide].
== Contributing
[id=""getting_involved""]
If you are interested in contributing to openQA itself, check the
link:docs/Contributing.asciidocDeveloper Guide, write your code and send a
pull request ;-)
=== Issue trackers and support
:openqav3: https://progress.opensuse.org/projects/openqav3[openQAv3 project]
Our main issue tracker is at {openqav3} in openSUSE's project management
tool. This Redmine instance is used to coordinate the main development
effort organizing the existing issues (bugs and desired features) into
'target versions'.
Find contact details and meet developers over
http://open.qa/contact/[our contact page].
== Releases
openQA is developed on a continuous base where every commit in the git master
branch is considered stable and a valid and installable version. The old tags
on github are therefore misleading."
5000,"trwnh,mastomods","CSS tweaks and custom themes for Mastodon.. 

This repo contains CSS tweaks and modifications for Mastodon, a libre micro-blogging social server whose default web frontend is similar to Tweetdeck. These mods can be used to create custom themes by admins for their Mastodon instances, or imported into userstyle extensions by users.
Table of contents:
Download this repo and copy the files into your Mastodon deployment. If I can figure out the git commands to fetch the files without messing up your existing Mastodon deployment, I'll add them here. For now, I recommend cloning this repo and copying over the files that you want/need, and pulling in updates as necessary.
Let's use the Linernotes Dark theme as an example. Per these olds docs, to enable a new theme, you need to do the following:
Fetch the files. Add your desired custom CSS/SCSS to app/javascript/styles. You can copy/merge the entire app folder from the root of this repo into the root of your Mastodon deployment.
Add your theme to the config. This is what the default themes.yml looks like in Mastodon. To make your custom theme visible in settings, you need to add a new line in the form themeName: path/to/theme.scss. For example, the linernotes_dark theme would require adding linernotes_dark: styles/linernotes_dark.scss as a new line. 
Add a human-friendly name for the theme (optional). You can edit each desired language's locale file in config/locales/[lang].yml to add a localized string name for your theme's themeName as added in the previous step. For example, the default config/locales/en.yml contains localizations for the three default themes that ship with Mastodon, into the english language. You need to do this for every language you expect your users to use, or else they will see the unlocalized themeName directly.
Compile theme assets and restart. Run RAILS_ENV=production bundle exec rails assets:precompile and restart your Mastodon instance for the changes to take effect.
Fetch the base files. You will need, at minimum, the contents of the .../mfc/ folder. It is also recommended to fetch the .../mods/ folder, as it contains many useful additions to any theme. 
Define your chosen palette.scss. See .../linernotes_dark/palette.scss for commented instructions on how to choose and define your palette's colors. I recommend putting this in a subfolder with your themeName for organizational purposes (e.g. .../themeName/palette.scss), but you can also define this in Step 3 if you don't want multiple palette files and theme folders to be littered all over.
Create a themeName.scss file. You can copy `linernotes_dark.scss as a starting point, as it follows the general structure of a theme file. In general, you need to import in the following order:
application: this contains the base styling of the mastodon webapp, before any modifications.
themeName/palette: this contains the Sass variables that need to be defined before the MFC rules can be applied. You can also copy the entirety of palette.scss from Step 2 and insert it at this position if you want less of a mess in file creation, at the expense of a messier themeName.scss.
mfc/mastodonFlat: this contains the MFC recolorings for foreground, background, and highlight elements.
mfc/variables: this uses the Sass variables you defined earlier and converts them to CSS variables so that mastodonFlat can be applied.
themeName/overrides (optional): if you have any custom overrides you'd like to make, such as custom backgrounds or replacing assets, it's a good idea to load them via this file.
mods/* (optional but recommended): import your desired mods. Refer to the .../mods/ folder for a list of available mods.
Go to your instance's Settings/Preferences.
Scroll down to the ""Web"" section.
Click the ""Site theme"" dropdown and select your desired theme.
Save changes, and start using the Mastodon webapp with your newly selected theme!
Copy and paste desired CSS tweaks into your user-style manager. If you don't have one, use Stylus:





The base MFC userstyle can be found at app/javascript/styles/mfc/mastodonFlat.css. You can load a theme into Stylus like so:
Navigate to your Mastodon instance.
Click the Stylus extension's icon in your browser and find the section that says ""Write style for:""
Hover over the website's domain name (e.g. mastodon.social) and click just that part, in order to write a new style that will be applied to the entire website.
Copy and paste the contents of mastodonFlat.css into your new userstyle.
Copy and paste any desired mods into your new userstyle.
Name your userstyle, then click ""Save"" and close the popup window.
 Contact/follow me: mastodon.social/@trwnh
 Email/XMPP: a@trwnh.com

 Tip me: paypal.me/trwnh
 Recurring patronage: liberapay.com/trwnh"
4160,"thombashi,pytablewriter","pytablewriter is a Python library to write a table in various formats: AsciiDoc / CSV / Elasticsearch / HTML / JavaScript / JSON / LaTeX / LDJSON / LTSV / Markdown / MediaWiki / NumPy / Excel / Pandas / Python / reStructuredText / SQLite / TOML / TSV.. .. contents:: pytablewriter
   :backlinks: top
   :depth: 2
pytablewriter &lt;https://github.com/thombashi/pytablewriter&gt;__ is a Python library to write a table in various formats: CSV / Elasticsearch / HTML / JavaScript / JSON / LaTeX / LDJSON / LTSV / Markdown / MediaWiki / NumPy / Excel / Pandas / Python / reStructuredText / SQLite / TOML / TSV.
.. image:: https://badge.fury.io/py/pytablewriter.svg
    :target: https://badge.fury.io/py/pytablewriter
    :alt: PyPI package version
.. image:: https://img.shields.io/pypi/pyversions/pytablewriter.svg
    :target: https://pypi.org/project/pytablewriter/
    :alt: Supported Python versions
.. image:: https://img.shields.io/travis/thombashi/pytablewriter/master.svg?label=Linux/macOS%20CI
    :target: https://travis-ci.org/thombashi/pytablewriter
    :alt: Linux/macOS CI status
.. image:: https://img.shields.io/appveyor/ci/thombashi/pytablewriter/master.svg?label=Windows%20CI
    :target: https://ci.appveyor.com/project/thombashi/pytablewriter
    :alt: Windows CI status
.. image:: https://coveralls.io/repos/github/thombashi/pytablewriter/badge.svg?branch=master
    :target: https://coveralls.io/github/thombashi/pytablewriter?branch=master
    :alt: Test coverage
.. image:: https://img.shields.io/github/stars/thombashi/pytablewriter.svg?style=social&label=Star
    :target: https://github.com/thombashi/pytablewriter
    :alt: GitHub stars
Write a table in various formats:
Text formats:
CSV / Tab-separated values (TSV)
HTML
JSON
Labeled Tab-separated Values (LTSV) &lt;http://ltsv.org/&gt;__
Line-delimited JSON(LDJSON) &lt;https://en.wikipedia.org/wiki/JSON_streaming#Line-delimited_JSON&gt;__/NDJSON/JSON Lines
LaTeX: tabular/array environment
Markdown
MediaWiki
reStructuredText: Grid Tables &lt;http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#grid-tables&gt;/Simple Tables &lt;http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#simple-tables&gt;/CSV Table &lt;http://docutils.sourceforge.net/docs/ref/rst/directives.html#id4&gt;__
Source code
JavaScript code (Definition of a nested list variable)
NumPy &lt;https://www.numpy.org/&gt; (Definition of a numpy.array &lt;https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html&gt; variable)
Pandas &lt;https://pandas.pydata.org/&gt; (Definition of a pandas.DataFrame &lt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html&gt; variable)
Python code (Definition of a nested list variable)
Space aligned values
TOML &lt;https://github.com/toml-lang/toml&gt;__
Unicode
Binary file formats:
Microsoft Excel :superscript:TM (.xlsx/.xls file format)
SQLite database
Application specific formats:
Elasticsearch &lt;https://www.elastic.co/products/elasticsearch&gt;__
Automatic tabular data formatting
Alignment
Padding
Decimal places of numbers
Configure cell styles:
Text alignment
Font size/weight
Thousand separator for numbers: e.g. 1,000/1 000
Configure ouput:
Write table to a stream such as a file/standard-output/string-buffer/Jupyter-Notebook
Get rendered tabular text
Data source
nested list
CSV
pandas.DataFrame &lt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html&gt;__
pandas.Series &lt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html&gt;__
etc.
Multibyte character support
ANSI color support
Write a Markdown table"
4395,"rodrigooler,i18nh","i18nh - (I18n Hook) i18n simplified and made to solve the problem of internationalization using the concept of hook (react). [x] NodeJS
[x] React
[x] NextJS
[x] Create React App 1.0
[x] Create React App 2.0
[x] React Native
[x] PhoneGap / Cordova
[x] Angular
[x] Vue
[x] NativeScript
To use it is simple just look at the steps below"
4966,"auth0-samples,auth0-aspnet-owin-webapi-samples",Auth0 Integration Samples for ASP.NET OWIN Web API Services. Quickstart sample for ASP.NET (OWIN) Web API
4558,"ClusterWS,ClusterWS",":boom: Lightweight, fast and powerful framework for building scalable WebSocket applications in Node.js. ClusterWS
<h6 align=""center"">Build Scalable Node.js WebSockets Applications</h6>


 



    
    
    
    


<strong>This branch is under work for v4.0.0 check master branch for stable v3.3.0</strong>
<strong>Please note that v3.3.0 most likely will not run on Node 11 or 12 as it uses old version of uWebSockets. 
Unfortunately there is no easy way to update v3.3.0, and it would be much simpler to finish up version 4. So if you are using ClusterWS 3.3.0 please stick with Node 10, 9, 8 (or submit PR) while Version 4 is under development. Thank you.</strong>


    For version <strong>4.0.0 alpha</strong> version check ClusterWS Website (still under work)



    <i><strong>Lightweight</strong>, <strong>fast</strong> and <strong>powerful</strong> framework for building <strong>scalable</strong> WebSocket applications in Node.js. ClusterWS uses cWS a fork of uWebSockets.</i>



    Officially Supported Client Libraries



    
    
    



    Consider to support development

<h4 align=""center"">
    Buy a coffee (via PayPal)
</h4>
<h4 align=""center"">
    Become a Backer on Patreon
</h4>



    Find more about ClusterWS in <strong>Wiki Documentation</strong>.
"
4056,"nytimes,Chronicler"," A better way to write your release notes.. Chronicler is an open source node.js app that automates your repo's release notes.  Chronicler will listen for pull request events from GitHub Webhooks.  When a pull request is merged Chronicler will create a new release draft OR edit an existing one with the PR info.  The result is a neatly formatted release note draft listing all PRs merged since your last tagged release.
Read more in the Times Open blog post.
Chronicler receives GitHub Webhook events from the repository you hook it up to.  By listening for pull request events, Chronicler can watch for merged PRs and add them to release note drafts.  When a PR is merged Chronicler will either create a new release draft or edit an existing draft.  If a note draft does not already exist a new, untagged draft will be created titled NEXT RELEASE with the PR info as the body content.  If a draft does exist it will append the PR to it.  The draft body consists of a list of pull requests with the PR title and number:
Pull Request format
Draft Example
Chronicler is a simple express.js app that receives GitHub Webhook events via its /webhooks route.  You'll need to clone and set the app up on a server or cloud service (e.x. Google Cloud Platform, AWS, Digital Ocean) to use it for your own projects.
The following variables must be set up and available to Chronicler via the node.js process.env object.
Chronicler requires a personal access token (PAT) to create or edit a release draft via the GitHub API.  PATs are tied to a user's account.  For GitHub teams or organizations using Chronicler we reccommend creating a dedicated GitHub account that owns the PAT.  By creating the PAT with a dedicated GitHub account instead of with a team member's account, you can avoid interuptions to Chronicler if the team member leaves or is removed from the organization.
To generate a new PAT for Chronicler, go to your account settings.  Add a ""token description"" (e.x ""chronicler-app"") and grant it repo scope.

With Chronicler set up on your environment, you can now set your repo up with Webhooks.
From your repo page, click on the ""Settings"" tab.
On the left hand side, click the ""Webhooks"" menu item.
Click the ""Add Webhook"" button.
Add the url where your instance of Chronicler can be found with the webhooks path (e.x. http://your.domain.com/webhooks).
From the ""Content Type"" dropdown menu, select application/json.
Set the ""Secret"" field equal to the SECRET environment variable value created earlier.
Under ""Which events would you like to trigger this webhook?"" check off the ""Let me select individual events"" option.  This will expand the event options where you should select ""Release"" and ""Pull Request.""
Ensure that ""Active"" is checked off, and click ""Add webhook"" at the bottom of the form.
Celebrate :tada: You're now ready to start using Chronicler to automate your repository's release notes!
Pull requests, issues, and feature requests always welcome! Read the contributing guide for information on how to get started."
3756,"metosin,compojure-api","Sweet web apis with Compojure & Swagger. Stuff on top of Compojure for making sweet web apis.
Schema & clojure.spec (2.0.0) for input & output data coercion
Swagger for api documentation, via ring-swagger & spec-tools
Async with async-ring, manifold and core.async (2.0.0)
Client negotiable formats: JSON, EDN & Transit, optionally YAML and MessagePack
Data-driven resources
Bi-directional routing
Bundled middleware for common api behavior (exception handling, parameters & formats)
Extendable route DSL via metadata handlers
Route functions & macros for putting things together, including the Swagger-UI via ring-swagger-ui
Requires Clojure 1.9.0 & Java 1.8
API Docs & Wiki

Latest non-alpha: [metosin/compojure-api ""1.1.13""].
See CHANGELOG for details.
Clojurians slack (join) has a channel #ring-swagger for talk about any libraries using Ring-swagger. You can also ask questions about Compojure-api and Ring-swagger on other channels at Clojurians Slack or at #clojure on Freenode IRC (mention compojure-api or ring-swagger to highlight us).
<sub>* requires server to be run in async mode</sub>
<sub>* Note that empty body responses can be specified with {} or {:schema s/Any}

official samples: https://github.com/metosin/compojure-api/tree/master/examples
great full app: https://github.com/yogthos/memory-hole
2.0.0 sample: https://github.com/metosin/c2
RESTful CRUD APIs Using Compojure-API and Toucan: https://www.demystifyfp.com/clojure/blog/restful-crud-apis-using-compojure-api-and-toucan-part-1/
clojurice, An opinionated starter app for full-stack web applications in Clojure: https://github.com/jarcane/clojurice
Web Development with Clojure, Second Edition: https://pragprog.com/book/dswdcloj2/web-development-with-clojure-second-edition
To try it yourself, clone this repository and do either:
lein run
lein repl & (go)
Use a Leiningen template, with or without tests:
Copyright ¬© 2014-2018 Metosin Oy
Distributed under the Eclipse Public License, the same as Clojure."
4509,"facebook,metro","üöá The JavaScript bundler for React Native.. üöá The JavaScript bundler for React Native.
üöÖ Fast: We aim for sub-second reload cycles, fast startup and quick bundling speeds.
‚öñÔ∏è Scalable: Works with thousands of modules in a single application.
‚öõÔ∏è Integrated: Supports every React Native project out of the box.
This project was previously part of the react-native repository. In this smaller repository it is easier for the team working on Metro to respond to both issues and pull requests. See react-native#13976 for the initial announcement.
See the Metro website for documentation.
Metro is MIT licensed, as found in the LICENSE file."
4596,"zalando,zally","A minimalistic, simple-to-use API linter. 
Zally is a quality assurance tool. It's a linter for OpenAPI specifications,
it performs the following tasks : 
Increases the quality of APIs
Checks compliance
Delivers early feedback for API designers
Ensures the same look-and-feel of APIs
Supports API-First approach
Provides best practices and advices
Its standard configuration will check your APIs against the rules defined in
Zalando's RESTful Guidelines,
but anyone can use it out-of-the-box.
Zally has an easy-to-use CLI which uses the server in the background so that
you can check your API on the spot. It also features an intuitive
Web UI that shows implemented rules and lints external files
and (with its online editor) API definitions.
Support for OpenAPI 3 and (Swagger) OpenAPI 2 specifications
RESTful API, CLI and Web interface
Rich Check configuration
Ignore functionality (x-zally-ignore extension)
Java/Kotlin API for new Checks + helper functions
Trying out Zally is easy. You can build and run the whole Zally stack (web-ui, server
and database) by executing:
Web UI is accessible on http://localhost:8080; Zally server on http://localhost:8000
Please consult the following documents for further information:
How to operate Zally tools
Zally Maven Plugin (unofficial)
Zally welcomes contributions from the open source community. To get started, take a
look at our contributing guidelines. Then check our
Project Board and
Issues Tracker for ideas.
Feel free to join our Gitter room or contact one
of the maintainers directly.
Zally is not the only linter for OpenAPI v2 and v3. There is an article comparing different OpenAPI linters.
So why should you choose Zally?
It supports Zalando's RESTful Guidelines
It can be used in multiple ways: RESTful API, CLI and Web interface
Highly customizable (with Kotlin)  
MIT license with an exception. See license file.
Signing plugin configured
OSSRH_JIRA_USERNAME and OSSRH_JIRA_PASSWORD environment variables to access Maven Central Repo are 
configured
Create a separate branch with a name release-&lt;release-version&gt;.
Update current version in server/gradle.properties from -SNAPSHOT to a final version.
Update mime types configuration:
Commit the updated file to the repository.
Release Zally server and API using the command
Commit server/gradle.properties with the release version
Create a tag
Bump version in server/gradle.properties to the next -SNAPSHOT
Push release branch and tag
Create a Pull Request with the version update
Create and publish a release with a new version in GitHub"
3697,"WireMock-Net,WireMock.Net","WireMock.Net is a flexible product for stubbing and mocking web HTTP responses using advanced request matching and response templating. Based on the functionality from http://WireMock.org, but extended with more functionality.. A C# .NET version based on mock4net which mimics the functionality from the JAVA based WireMock.org.
HTTP response stubbing, matchable on URL/Path, headers, cookies and body content patterns
Library can be used in unit tests and integration tests
Runs as a standalone process, as windows service, as Azure/IIS or as docker
Configurable via a fluent DotNet API, JSON files and JSON over HTTP
Record/playback of stubs (proxying)
Per-request conditional proxying
Stateful behaviour simulation
Response templating / transformation using Handlebars and extensions
Can be used locally or in CI/CD scenarios.
For the supported frameworks and build information, see this page.
A core feature of WireMock.Net is the ability to return predefined HTTP responses for requests matching criteria.
See Wiki : Stubbing.
WireMock.Net support advanced request-matching logic, see Wiki : Request Matching.
The response which is returned WireMock.Net can be changed using templating. This is described here Wiki : Response Templating.
The WireMock admin API provides functionality to define the mappings via a http interface see Wiki : Admin API Reference.
WireMock.Net can be used in several ways:
You can use your favorite test framework and use WireMock within your tests, see
Wiki : UnitTesting.
This is quite straight forward to launch a mock server within a console application, see Wiki : Standalone Process.
You can also run WireMock.Net as a Windows Service, follow this WireMock-as-a-Windows-Service.
See this link WireMock-as-a-(Azure)-Web-App
There is also a Linux and Windows-Nano container available at hub.docker.com.
For more details see also Docker.
More details on using HTTPS (SSL) can be found here Wiki : HTTPS"
4284,"apache,cordova-cli","Apache Cordova CLI. <!--

-->


The command line tool to build, deploy and manage Cordova-based applications.
Apache Cordova allows for building native mobile applications using HTML, CSS and JavaScript. 
This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.
In your command-line on Windows:    
In your terminal on Mac OS X/Linux:
This simple example demonstrates how Cordova CLI can be used to create a myApp project with the camera plugin and run it for android platform:
Overview of Cordova
Create your first Cordova app guide
Full reference docs for Cordova CLI has details of commands to add platforms, add plugins, build, package, and sign your HTML, JS apps. 
Cordova allows you to build apps for a number of platforms. Learn more about our Supported platforms.
Project directory structure documents the details of the directory structure created by Cordova CLI.
Cordova is an open source Apache project and contributors are needed to keep this project moving forward. Learn more on 
how to contribute on our website. 
If you find issues with the Cordova CLI, please follow our guidelines for reporting issues. Please bear in mind that most of cordova-cli's functionality is implemented in cordova-lib, so that could be the place to report your issue.
Platform-specific issues should be reported in the relevant repositories, such as cordova-android and cordova-ios."
4663,"coderedcorp,coderedcms","Wagtail + CodeRed Extensions enabling rapid development of marketing-focused websites.. 
  

CodeRed CMS

  The professional WordPress alternative for building modern marketing websites. Based on Python, Django, Wagtail, and Bootstrap 4.


  Website
  |
  Documentation
  |
  Blog


This project is still early on in its development lifecycle. It is possible for breaking changes to occur between versions until reaching a stable 1.0, however we will clearly note any breaking changes between releases if applicable. Feedback and pull requests are welcome.
Run pip install coderedcms
Run coderedcms start mysite --sitename ""My Company Inc."" --domain www.example.com
Note: --sitename and --domain are optional to pre-populate settings of your website.
Enter the project cd mysite/
Run python manage.py migrate to create the core models.
Run python manage.py createsuperuser to create the initial admin user.
Run python manage.py runserver to launch the development server, and go to http://localhost:8000 in your browser, or http://localhost:8000/admin/ to log in with your admin account.
See the documentation for next steps and customizing your new site.
In addition to the numerous benefits of Wagtail, CodeRed has features that are specifically designed for marketing websites:
The editing experience is tailored for visual marketing content. Create flashy hero units, callouts, and forms using a beautiful editing interface. Editors and Designers can easily update content, designs, and layout without fear of breakage and without the need to consult developers. Developers can fully customize the site using plain HTML/CSS/JavaScript without relying on plugins or undocumented hacks.
Built-in SEO Optimized metadata for Facebook, Twitter, LinkedIn, Google, Bing, and more are all included out of the box. A sitemap and robots.txt are also present and automatically updated. Articles, blog posts, and events support Google‚Äôs preferred AMP format to boost search ranking and support mobile devices.
Responsive design out of the box! Editors can build content using Bootstrap 4 components including navbars, hero units, carousels, cards, modals, and the powerful grid system.
Fast load times made possible by a built-in page cache. The cache automatically refreshes whenever a page is published, or by the click of a button. Cached pages load as quickly as static HTML files.
Full Google Analytics tracking can be turned on by adding your UA- tag. Detailed event tracking can be turned on globally and fine-tuned for each clickable element such as links, buttons, and images.
Professionally-backed support. Both CodeRed CMS and Wagtail (the technology powering CodeRed CMS) are produced by software companies who offer professional support and services. This is built on proven technology that successfully serves small businesses and large enterprises around the world every day.
In addition to manual testing by real humans between releases, we also employ many quality control tools to automatically catch some errors before they are introduced to the code. The CodeRed team has a strong focus on quality and security to ensure CodeRed CMS remains reliable for use in day-to-day business operations.
Officially, CodeRed CMS is in a beta stage. That being said, it is currently in use on production sites. However there are still many activities that are needed before hitting a 1.0 ‚Äústable‚Äù status.
Work already in progress before 1.0 release:
Higher test coverage.
Full documentation.
Usability feedback and testing regarding the admin/editor experience.
Improved accessibility of the CodeRed-provided HTML templates (excluding the admin interface... this is an issue wagtail is dealing with upstream).
Other future plans:
Continue adding commonly used abstract page types and blocks available out of the box(e.g. calendar/events, product page, store locator, etc.)
Continue updating and enhancing SEO/meta attributes as standards evolve.
Built-in SSO with major identity providers such as Google and Office 365.
ADA compliance enforcement features and workflows in the admin.
Light e-commerce functionality, or at least a smooth integration with an existing e-commerce framework.
We the creators of CodeRed CMS deal with WordPress sites on a daily basis. While WordPress is fantastic for blogs and do-it-yourself websites, we feel it is very frustrating for use in a professional environment where the site needs to be actively enhanced, maintained, and secured on a daily basis. We designed CodeRed CMS as a marketing-focused WordPress replacement, not a WordPress clone. The intended audience is an agency, technology firm, business, or non-profit who has at least one full stack web developer managing the website.
WordPress users will feel comfortable with CodeRed CMS, as many of the editing and design paradigms are similar such as:
Global site and branding settings.
Main menu builder is familiar.
Editors can change the template used by each page.
PLUS many aspects are greatly enhanced:
Visual content blocks eliminate need for cryptic short-codes.
Content blocks can each be customized with CSS classes and selectable templates.
Developers can easily customize the editing interface and page types without 3rd party plugins or themes.
The site can be professionally managed with better control over 3rd party plugins to prevent unplanned breakage (if you've ever managed a large WordPress site - you know exactly how painful this is).
CodeRed CMS is a pip package that essentially wraps Wagtail and provides marketing-specific features that are ready to be used out of the box. Everything that can be done with Wagtail can be done with CodeRed.
One major point of difference between between CodeRed and stock Wagtail is the approach to design and content. Wagtail being more of a CMS framework, is focused on a clear separation between design (UX) and content. We agree with this approach for larger informational sites. But as is usually the case with marketing sites, design and information are more tightly coupled. Developers shouldn‚Äôt need to create a new page type or a new block just to handle a design deviation that is used in one place on the site. Designers and editors shouldn‚Äôt need to engage the developer for every minor design-related change such as changing a CSS class. For this reason, CodeRed blurs the lines of design and content by enabling editors to specify templates on a per-page and per-block basis, CSS classes per-block, and many other logo, layout, and branding settings. We realize this is not the right approach for every site - but we do believe it adds a lot of value for marketing sites.
In addition to the CodeRed team, many thanks to the Wagtail community and our
independent contributors.
If you're interested in building, developing, or contributing to CodeRed CMS,
check out the Contributing Guide.
We would love to hear your questions, comments, and feedback. Open an issue on Github, message us on #coderedcms in the Wagtail slack, or email us at info@coderedcorp.com."
3642,"mrousavy,react-native-blurhash","üñºÔ∏è A library to show colorful blurry placeholders while your content loads.. 
  


  

üñºÔ∏è Give your users the loading experience they want.
Install via npm:




BlurHash is a compact representation of a placeholder for an image. Instead of displaying boring grey little boxes while your image loads, show a blurred preview until the full image has been loaded.
The algorithm was created by woltapp/blurhash, which also includes an algorithm explanation.

  
    
  


‚úÖ You can use this library with Development Builds. No config plugin is required.
‚ùå This library can't be used in the ""Expo Go"" app because it requires custom native code.
<table>
<tr>
<td width=""55%"">
<ol>
  In order to use the Blurhash component, you have to already have a Blurhash string. See the blurha.sh page to create example strings.

  This is how I use it in my project:

  <li>A user creates a post by calling a function on my server which expects a payload of an image and some post data (title, description, ...)</li>
  <li>The function on my server then</li>
  <ol>
    <li>generates a blurhash from the image in the payload using the C encoder</li>
    <li>stores the post data (including the generated blurhash string) in my database</li>
    <li>uploads the image to a content delivery network (e.g. AWS)</li>
  </ol>
  <li>Now everytime a user loads a feed of posts from my database, I can immediately show a <code>&lt;Blurhash&gt;</code> component (with the post's <code>.blurhash</code> property) over my <code>&lt;Image&gt;</code> component, and fade it out once the <code>&lt;Image&gt;</code> component's <code>onLoadEnd</code> function has been called.</li>

  
  <blockquote>
  Note: You can also use the react-native-blurhash encoder to encode straight from your React Native App!
  </blockquote>
</td>
<td width=""25%"">

</td>
</tr>
</table>

The &lt;Blurhash&gt; component has the following properties:
<table>
  <tr>
    <th>Name</th>
    <th>Type</th>
    <th>Explanation</th>
    <th>Required</th>
    <th>Default Value</th>
  </td>
  <tr>
    <td><code>blurhash</code></td>
    <td><code>string</code></td>
    <td>The blurhash string to use. Example: <code>LGFFaXYk^6#M@-5c,1J5@[or[Q6.</code></td>
    <td>‚úÖ</td>
    <td><code>undefined</code></td>
  </tr>
  <tr>
    <td><code>decodeWidth</code></td>
    <td><code>number</code></td>
    <td>The width (resolution) to decode to. Higher values decrease performance, use <code>16</code> for large lists, otherwise you can increase it to <code>32</code>.
    
    <blockquote>See: performance</blockquote></td>
    <td>‚ùå</td>
    <td><code>32</code></td>
  </tr>
  <tr>
    <td><code>decodeHeight</code></td>
    <td><code>number</code></td>
    <td>The height (resolution) to decode to. Higher values decrease performance, use <code>16</code> for large lists, otherwise you can increase it to <code>32</code>.
    
    <blockquote>See: performance</blockquote></td>
    <td>‚ùå</td>
    <td><code>32</code></td>
  </tr>
  <tr>
    <td><code>decodePunch</code></td>
    <td><code>number</code></td>
    <td>Adjusts the contrast of the output image. Tweak it if you want a different look for your placeholders.</td>
    <td>‚ùå</td>
    <td><code>1.0</code></td>
  </tr>
  <tr>
    <td><code>decodeAsync</code></td>
    <td><code>boolean</code></td>
    <td>Asynchronously decode the Blurhash on a background Thread instead of the UI-Thread.
    
    <blockquote>See: Asynchronous Decoding</blockquote></td>
    <td>‚ùå</td>
    <td><code>false</code></td>
  </tr>
  <tr>
    <td><code>resizeMode</code></td>
    <td><code>'cover' | 'contain' | 'stretch' | 'center'</code></td>
    <td>Sets the resize mode of the image. (no, <code>'repeat'</code> is not supported.)
    <blockquote>See: Image::resizeMode</blockquote>
    </td>
    <td>‚ùå</td>
    <td><code>'cover'</code></td>
  </tr>
  <tr>
    <td><code>onLoadStart</code></td>
    <td><code>() => void</code></td>
    <td>A callback to call when the Blurhash started to decode the given <code>blurhash</code> string.</td>
    <td>‚ùå</td>
    <td><code>undefined</code></td>
  </tr>
  <tr>
    <td><code>onLoadEnd</code></td>
    <td><code>() => void</code></td>
    <td>A callback to call when the Blurhash successfully decoded the given <code>blurhash</code> string and rendered the image to the <code>&lt;Blurhash&gt;</code> view.</td>
    <td>‚ùå</td>
    <td><code>undefined</code></td>
  </tr>
  <tr>
    <td><code>onLoadError</code></td>
    <td><code>(message?: string) => void</code></td>
    <td>A callback to call when the Blurhash failed to load. Use the <code>message</code> parameter to get the error message.</td>
    <td>‚ùå</td>
    <td><code>undefined</code></td>
  </tr>
  <tr>
    <td>All <code>View</code> props</td>
    <td><code>ViewProps</code></td>
    <td>All properties from the React Native <code>View</code>. Use <code>style.width</code> and <code>style.height</code> for display-sizes. Also, <code>style.borderRadius</code> is natively supported on iOS.</td>
    <td>‚ùå</td>
    <td><code>{}</code></td>
  </tr>
</table>

Example Usage:
See the example App for a full code example.
<table>
  <tr>
    <th>iOS Screenshot</th>
    <th>Android Screenshot</th>
  </tr>
  <tr>
    <td width=""50%""></td>
    <td width=""50%""></td>
  </tr>
</table>

If your app is really colorful you might want to match some containers' colors to the content's context. To achieve this, use the getAverageColor function to get an RGB value which represents the average color of the given Blurhash:
This library also includes a native Image encoder, so you can encode Images to blurhashes straight out of your React Native App!
Because encoding an Image is a pretty heavy task, this function is non-blocking and runs on a separate background Thread.
If you need to validate a blurhash string, you can use isValidBlurhash.
The performance of the decoders is really fast, which means you should be able to use them in collections quite easily. By increasing the decodeWidth and decodeHeight props, the time to decode also increases. I'd recommend values of 16 for large lists, and 32 otherwise. Play around with the values but keep in mind that you probably won't see a difference when increasing it to anything above 32.
Use decodeAsync={true} to decode the Blurhash on a separate background Thread instead of the main UI-Thread. This is useful when you are experiencing stutters because of the Blurhash's decoder - e.g.: in large Lists.
Threads are re-used (iOS: DispatchQueue, Android: kotlinx Coroutines).
A &lt;Blurhash&gt; component caches the rendered Blurhash (Image) as long as the blurhash, decodeWidth, decodeHeight and decodePunch properties stay the same. Because unmounting the &lt;Blurhash&gt; component clears the cache, re-mounting it will cause it to decode again.
Cosine operations get cached in memory to avoid expensive re-calculation (~24.576 cos(...) calls per 32x32 blurhash). Since this can affect memory usage, you can manually clear the cosine array cache by calling:
Note: At the moment, cosine operations are only cached on Android. Calling clearCosineCache() is a no-op on other platforms.
this medium article. jesus christ amen thanks for that
Native Modules documentation, especially the Swift part
This cheatsheet gist thank you @chourobin.
DylanVann/react-native-fast-image as a reference for native UI modules
woltapp/blurhash of course
"
4765,"vizorvr,patches","Patches is a visual programming editor for building WebVR and WebGL experiences.. ====
Patches is a visual programming environment for WebGL, WebVR and other HTML5 APIs. It features live preview, data flow visualization, network communication, publishing, unlimited undo, and a catalog of ready-made patches that can be used as modular building blocks. Complex logic can be nested in subgraphs and they can be rendered directly to a specific render target, or simply used as a texture. Loops are modeled as nested graphs that are evaluated once per loop iteration.
Try the cloud version of Patches now at patches.vizor.io.
Be sure to watch the tutorials, read the documentation and read tutorials on Patches. Plugin API documentation is available, but unstable.
Installing a local instance of Patches requires MongoDB (MongoDB Server should be 3.2.12), Redis, node.js (Get v6.11) and graphicsmagick. To install the required packages, issue the following commands (on Mac using Homebrew):
NOTE: Currently using Web Sockets or OSC requires running Patches locally.
To build the LESS, plugins, etc [continuously]:
Running the tests:
OS: Ubuntu 16.04.2
MongoDB shell version: 3.2.18
Redis server v=3.0.6
Node v6.11.5
NPM 5.5.1
Also, if you do not want to downgrade your node version then upgrade the mongodb package to 2.2.24 and the gridfs-stream package to the latest version.
One more detail, the exiftool can be installed like this sudo apt-get install libimage-exiftool-perl
Please consult WindowsInstallationReadme.md
Make sure you have the right export for ENGI_BIND_IP configured in your .bash_profile
Make sure MongoDB and Redis are running.
Gulp one more time, then run the server:
Open in the browser: http://localhost:8000/edit
If you have access to an Oculus Rift DK1 or DK2 and want to play with the VR features, you currently need one of Toji's special Chromium builds. You can find them here: http://blog.tojicode.com/2014/07/bringing-vr-to-chrome.html
We welcome your contributions! Please create and work in a fork, submitting a pull request when (and if) you're ready for a review. Contributors may note some inconsistencies in style. We're in the process of migrating; new work should be done in JavaScript ES5 using Airbnb code style (exception: tabs instead of spaces).
Patches features hundreds of plugins, including ways to obtain or create data:
Cameras: Perspective, orthographic and screen space. Obtain aspect radio and viewport size.
Input: Gamepad, VR headset, keyboard, mouse position, button state and scroll wheel.
Loading assets: HTML5 audio, images, JSON, 3d scenes and HTML5 video. Select files directly from UI or provide URLs to load as strings from the graph.
Matrices: Translation, rotation, scale and planar projection.
Meshes: Cube, grid, null (transform visualization), plane, quad, sphere and user defined (Blender exporter is included).
Open Sound Control: Receive float / xy float.
Shaders: Diffuse only, automatically generated from mesh and material, user defined, normal as color and texture with UV-transforms.
System state: Initialized, assets started, failed, and successfully loaded. Graphs can emit these signals
via plugins to integrate with the global asset load logic when procedurally generating data.
Text rendering.
Time: Absolute, frame delta.
Typed array generation.
Web Sockets.
Crypto: Check the current balances of a named CounterWallet.
Virtual Reality: Camera / MHD / Sensor info. Sensor velocity / acceleration. Full Oculus Rift support.
Various plugins to provide UI for direct manipulation or input of values: Knobs, sliders, input
fields for labels and constant values, toggle and action buttons, color pickers, text editors,
PRNGs and many other similar plugins for providing data directly from the graph view.
...Ways to modify data:
Audio: Get duration and current playback position. Analysis (FFT), gain, buffer source.
Color: Add, mix, multiply and set alpha.
Data type conversions. Format or parse strings, compose complex types from primitives, convert
between primitive types and split / merge cameras to / from constituent matrices.
Curves: Looping cubic interpolation of keypoints.
Filters: First order low pass, sample and hold, toggle.
Instanced meshes: Clear transforms, rotate, scale, translate.
Light sources (point, directional): Diffuse color, direction, intensity, position, specular color and type.
Logic: And, equals, if, if...else, less than, more than, nand, not, or, switch and xor.
Materials: Alpha clip, ambient color, blend mode (none, add, sub, mul, normal), diffuse color, double sided,
attach lights, shininess, textures (diffuse, emission, specular and normal maps), z-buffer (use / write).
Math: Add, clamp, divide, module, multiply, negate, subtract, delta, abs, cos, exp, log, max, min, sin,
sqrt, tan, ceil, floor and round.
Matrix: Concatenate, get component, invert, set component and transpose.
Mesh: Primitive type (points, lines, line strip, line loop, triangles, tristrip, trifan). Obtain or set the maximum primitive count to render.
Object: Convert named member to float, bool, string, object or typed array. Access any array item of the
those same types by index and object member name.
Oscillators: Cosine, sawtooth, sine, square, triangle.
Scene: Get bounding box, get mesh, get mesh count.
String: Concatenate, parse JSON.
Tweens: In / out (circular, cubic, exponential, quadratic, quartic, quintic and sinusoidal).
Typed arrays: Array to mesh, array to texture, get element, get element as type, length, set element,
set element as type.
Virtual Reality: Create Oculus Rift compatible left / right camera from an input camera.
Vector: Add, cross, dot product, magnitude, multiply, normalize, scale and transform.
Video: Current time and duration.
...Ways to utilize data:
3D: Render scene, render mesh, create instanced meshes (arrays, cubic volumes, using iterated function
systems or distribution textures) and record the current framebuffer.
Audio: Player / Source player.
Debug visualization: On-canvas visualization of booleans, colors, arbitrary data, floats, matrices, objects,
function plots, text and vectors.
Sequencing: Stop playback.
Video: Player.
...And ways to structure logic or store state:
Create infinitely nested sub-graphs or loops.
Create named in- and output proxies in a graph to have them automatically reflected as a slot on the parent node of the graph the proxy is in.
Create named registers to store values of any supported data type between graph updates as state storage or feedback loops.
Created sequences can be imported and exported as JSON, embeddable into any context with the included standalone player, or simulated in a bare core instance. The latter permits sequences to be leveraged in other JavaScript projects as a domain-specific visual scripting language by providing the embedded graph with appropriate values from its host, updating the graph and acting on the emitted output values. Created sequences can be automatically exported to an optimized file set, ready to deploy to any Web server.
Patches is released under the MIT License
@vizor_vr on Twitter
@VizorPatches on Twitter
E-Mail"
4996,"hyperspacedev,hyperspace","The new beautiful, fluffy client for Mastodon in React + TypeScript. 



The new beautiful, fluffy client for the fediverse written in TypeScript and React






   
Socialize and communicate with your friends in the fediverse (ActivityPub-powered social networks like Mastodon and Pleroma) with Hyperspace Desktop. Browse your timelines, check in with friends, and share your experiences across the fediverse in a beautiful, clean, and customizable way.
What Hyperspace Desktop offers:
A clean, responsive, and streamlined design that fits in with your Mac
Support for switching between accounts to access the accounts you use the most
Customization support, ranging from several beautiful themes to masonry layout and infinite scrolling
Powerful toot composer with media uploads, emojis, and polls
Activity and recommended views that give you insight on the community/instance you reside in
Hyperspace Desktop is available for the major desktop platforms via our downloads page, GitHub, and other store platforms where applicable.
 
via WinGet:
To build Hyperspace Desktop, you'll need the following tools and packages:
Node.js v10 or later
(macOS-only) Xcode 10 or higher
First, clone the repository from GitHub:
Then, in the app directory, run the following command to install all of the package dependencies:
Run any of the following scripts to test:
npm start - Starts a local server hosted at https://localhost:3000.
npm run electron:build - Builds a copy of the source code and then runs the app through Electron. Ensure that the location key in config.json points to ""desktop"" before running this.
npm run electron:prebuilt - Similar to electron:build but doesn't build the project before running.
The location key in config.json can take the following values during testing:
https://localhost:3000: Most suitable for running npm start or running via react-scripts.
desktop: Most suitable for when testing the desktop application.
Note: Hyperspace Desktop v1.1.0-beta3 and older versions require the location field to be changed to ""https://localhost:3000"" before running.
To build a release, run the following command:
The built files will be available under build as static files that can be hosted on a web server. If you plan to release these files alongside the desktop apps, compress these files in a ZIP.
You can run any of the following commands to build a release for the desktop:
npm run build:desktop-all: Builds the desktop apps for all platforms (eg. Windows, macOS, Linux). Will run npm run build before building.
npm run build:win: Builds the desktop app for Windows without running npm run build.
npm run build:mac: Builds the desktop apps for macOS without running npm run build. See the details below for more information on building for macOS.
npm run build:mas: Builds the desktop apps for the Mac App Store without running npm run build. See the details below for more information on building for macOS.
npm run build:linux: Builds the desktop apps for Linux (eg. Debian package, AppImage, and Snap) without running npm run build.
npm run build:linux-select-targets: Builds the desktop app for Linux without running npm run build. Targets are required as parameters.
The built files will be available under dist that can be uploaded to your app distributor or website.
The macOS builds of Hyperspace Desktop require a bit more effort and resources to build and distribute accordingly. The following is a quick guide to building Hyperspace Desktop for macOS and for the Mac App Store.
To create a code-signed and notarized version of Hyperspace Desktop, you'll need to acquire some provisioning profiles and certificates from a valid Apple Developer account.
For certificates, make sure your Mac has the following certificates installed:
3rd Party Mac Developer Application
3rd Party Mac Developer Installer
Developer ID Application
Developer ID Installer
Mac Developer
The easiest way to handle this is by opening Xcode and going to Preferences &rsaquo; Accounts and create the certificates from ""Manage Certificates"".
You'll also need to create a provisioning profile for Mac App Store distribution and save it to the desktop folder as embedded.provisonprofile.
You'll also need to create the entitlements files in the desktop directory that declares the permissions for Hyperspace Desktop. Replace TEAM_ID with the appropriate Apple Developer information and BUNDLE_ID with the bundle ID of your app.
You'll also need to edit notarize.js in the desktop directory. Replace &lt;TEAM_ID&gt;, &lt;BUNDLE_ID&gt;, and &lt;APPLE_DEVELOPER_EMAIL&gt; with the appropriate information from the app and your account from Apple Developer.
Note that the password is pulled from your keychain. You'll need to create an app password and store it in your keychain as AC_PASSWORD.
Run any of the following commands to build Hyperspace Desktop for the Mac:
npm run build:mac - Builds the macOS app in a DMG container.
npm run build:mac-unsigned - Similar to build:mac, but skips code signing and notarization. Use only for CI or in situations where code signing and notarization is not available.
npm run build:mas - Builds the Mac App Store package.
Hyperspace Desktop is licensed under the Non-violent Public License v4+, a permissive license under the conditions that you do not use this for any unethical purposes and to file patent claims. Please read what your rights are as a Hyperspace Desktop user/developer in the license for more information.
Hyperspace Desktop has been made possible by the React, TypeScript, Megalodon, and Material-UI projects as well our Patrons and our contributors on GitHub.
Contribution guidelines are available in the contributing file and when you make an issue/pull request. Additionally, you can access our Code of Conduct.
If you want to aid the project in other ways, consider supporting the project on Patreon."
4362,"garrylachman,ElectroCRUD","Database CRUD Application Built on Electron | MySQL, Postgres, SQLite. 
Create, Read, Update, and Delete (CRUD) are the four basic functions of persistent storage (Database).
After a failed search for a basic admin panel that does not involve writing code or installs web-based solutions, I came up with ElectroCRUD idea.
The ElectroCRUD v1 was born in 2016. An Electron application that made it possible to create a friendly dashboard with data tables, search, widgets, filter & relations with few clicks without any experience in programming.
After a few years of the project being inactive, I decided to bring it to life again. The codebase was built from scratch using Electron+Angular8. The new version contains most of the features of the first version, and new features are added on a weekly basis.
 
[x] MySQL Support
[x] PostgreSQL Support
[x] SSH Tunnels (Keys & Password)
[x] Accounts (represent a database)
[x] Add / Edit
[x] Test connection (ssh, db)
[ ] Export / Import
[x] Views (represent a table)
[x] Add new view & Edit view configurations
[x] Data table with pagination
[x] Search
[x] Permissions (C,R,U,D)
[x] Terminology
[x] Selection of columns to display or search by
[x] Add new record / Edit record
[x] Edit record
[x] Connect existing view as sub views
[ ] Export data in various formats like: csv, dump
[x] Subviews (represent a sub table)
[x] Views relations
[x] Drill from view to view (subview)
[x] Column based tables relation (left join) 
[x] View widgets (display aggragated data in the view)
[x] Add / Edit / Remove widgets
[x] Aggregation functions (AVG, SUM, MIN, MAX, COUNT)
[ ] Apply filters on widget data
[x] View filters (build where clauses to filter the data)
[x] Add / Edit / Remove filter in each view
[x] One click apply / unapply on view data
[x] Simple & friendly interface to build where clauses
[ ] Process manager (view running queries)
[ ] Export / Import of all user accounts.
[x] MySQL/MariaDB
[x] PostgreSQL
[ ] MSSQL
[ ] Oracle

 
 
 
"
4760,"jtransc,jtransc","Bytecode to source converting Java & Kotlin code into JavaScript, C++, D, C#, PHP, AS3, Dart and Haxe and run it everywhere. Also use JVM code in your favourite language as a library.. You can find documentation at the wiki.
JTransc (Java Trans Compiler) is an AOT (ahead of time compiler) that compiles .class and .jar files
into a target programming language / executable bundling all the required dependencies in a single file or folder,
without requiring a jitter or an external runtime.
There are a lot of technologies in order to convert languages into other ones. For example, converting Java into JavaScript.
Or KotlinJS Kotlin backend that already targets JavaScript. So why using JTransc?
One reason is that JTransc allows mixed projects. You can use Java libraries with Kotlin code for example.
Instead of using several technologies, JTransc allows you to target to several languages and platforms.
Using just one technology guarantees consistency between targets. For example, Kotlin JS doesn't support full Java reflection.
Instead of generating C++ and then using emscripten or other technologies, JTransc allows you to generate code that is
native to your platform. For example: when targeting JS you will use native JS best-in-class GC instead of a GC
emulated in C++ & emscripten. And no need to know a proper heap size beforehand targeting JS.
Some classes like String, StringBuilder or ArrayList are implemented in a way that it uses native JavaScript/AS3/Dart... facilities.
Like JavaScript String, Array and so on.
Instead of generating huge projects including everything, or having complex proguard configuration files.
JTransc includes treeshaking in a simple way. You can use annotations to keep methods, classes and fields or another annotations.
It works for all targets and it is fully integrated in the workflow.
JTransc supports plain Java applications using Threads and sync I/O in JS converting that into an asynchronous version in JS
using await/async detecting branches not using Threads/sync I/O for fastest performance.
Along JTransc, I'm writting a set of libraries to be able to use JTransc.
Kotlin Game Engine that uses JTransc for multiplatform: https://github.com/soywiz/korge
Also there is a GDX backend using JTransc+Haxe: https://github.com/jtransc/gdx-backend-jtransc
JTransc
JTransc (Java Trans Compiler) is an AOT (ahead of time compiler) that compiles .class and .jar files
into a target programming language / executable bundling all the required dependencies in a single file or folder, without requiring
a jitter or an external runtime.
At the beginning it generated as3 and javascript, but right now there are several targets: Javascript, Haxe, C++, and D.
Haxe itself allow to target several other languages: JS, AS3, C++, C#, Java, PHP and Python.
This in turn allows running the program on different platforms such as desktop, browsers and mobile.
The aim of this project is to bring the high productivity of Kotlin (and other JVM languages)
to the highly portable Haxe platform.
It already supports most of the core Java APIs and plain Java reflection API out of the box.
The initial focus is on JVM6, Kotlin and Games, but it will get better in the future supporting newer jvm versions,
and other use cases like frontend and backend applications.
Right now JTransc support Java8 lambdas and default methods.
There is a module called jtransc-rt-core that could be included in any project (whether using JTransc or not).
It provides the com.jtransc package, specific annotations, fast memory access and asynchronous APIs,
that will use JTransc features when compiling using JTransc.
These is also a couple of projects for multimedia applications using jtransc:
jtransc-media - Which provides a very simple and portable high-level API for multimedia
gdx-backend-jtransc - Which provides a gdx-compatible backend so any gdx project will be able to work (still some rough edges)
You can find examples here jtransc/jtransc-examples.
This is the preferred way of using JTransc. You can include it from maven central or directly from gradle plugins repository:
This will add several tasks for building your application.
There is a gradle block called jtransc, that allows you to specify stuff for the build.
For example gradle runJs would generate a JS file at build/jtransc-js/program.js and run it using node.js.
You can see how to use it in the documentation.
You can also use Maven, though due to the nature of JTransc gradle fits better.
You can see how to use it in the documentation.
There is a plugin in the works that will allow to run and debug within intelliJ. Though it is not ready yet.
You can find it in jtransc-intellij-plugin folder.
It locates all the required dependencies (specifying dependencies using gradle, maven, intelliJ or CLI)
It includes jtransc-rt-core and jtransc-rt which is a java-6-like (with some Java8 support) RT with some of its methods marked as native
Other dependencies than the RT are included without modifications
It uses ASM library to load class files, and has code to generate a class-method-statement-expression AST
That AST is easily serializable
That AST allows feature stripping
Your target language don't support gotos? It will generate an AST without gotos. Just plain if/while/switch...
It generates your target source code, replacing some classes like String, ArrayList and so on, to make them fast in your target language.
It joins or compiles that code into your final runnable program (using available compilers when required)
It allows to run directly executing the executable or using an appropiate interpreter (php, node, electron...) depending on the build
Eventually that intermediate AST will be able to be generated or consumed.
So others could generate that without JVM and others could generate other targets from that AST directly without all the complexities of stack-based IRs.
Oracle JDK8 (Verified 8u131)
Android SDK Tools  (Verified 25.2.3)
Haxe 3.4.2
NekoVM 2.1.0
Lime 5.5.0
hxcpp 3.4.64
NodeJS 7.10.0 with npm 4.2.0
DMD2 or GDC or LDC (Verified dmd-2.074.0)
Clang++ or g++ (At least gcc 4.8)
Tested with Dart VM version: 1.23.0
Install JDK8
Setup $JAVA_HOME
This sample, but maybe not working for you, be careful
Install Android SDK Tools
Setup Android SDK with install NDK.
Install Haxe from here via installer
Set path to haxelib running ""haxelib setup"" command
Install Lime haxelib install lime 5.5.0
Install hxcpp haxelib install hxcpp 3.4.64
Run haxelib run lime setup
https://github.com/openfl/lime/issues/831
Run lime setup android
If try install you gain Out of Memory, choose manual mode.
Run lime rebuild hxcpp tvos
Remove stable lime haxelib remove lime
Install lime from GitHub git clone --recursive https://github.com/openfl/lime
Install NodeJS + npm
Download DMD
Install DMD with all extras
WINDOWS
Install mingw
Add ""path/to/mingw/bin"" to PATH environment variable strongly on first line
Install cmake https://cmake.org/download/
Workaround for big projects: haxe 3.4.2 can failed with out of memory. You can try replace haxe files
 from develop,
 but this dangerous way, and get only stable, see history on github.
 My current choose: 2017-03-23 05:39:01 >> 4876859 >> haxe_2017-03-23_development_ada466c.tar.gz
WINDOWS 64
go to hxcpp/3.4.64 folder in console neko run.n Build.xml -Dwindows -DHXCPP_M64 -Dstatic_link ./project/
Remove stable lime haxelib remove lime
Install lime from GitHub git clone --recursive https://github.com/openfl/lime -b master
if use MSVC 2013 with not fully supported c99 standard, then replace in lib\openal all inline to __inline, and snprintf to _snprintf
MAC
Install Xcode 8.3.3
This XCode have problem with logs for iPhone with iOS 10.3.2. Please see solution
Related to pure C++ target on mac: brew install automake libtool pkg-config
Install Mono 5.0.1.1  ??? https://github.com/jtransc/jtransc/issues/167
For upload on iPhone/iPad from command line sudo npm install -g ios-deploy --unsafe-perm --allow-root
https://www.dartlang.org/install"
4857,"AbdallahHemdan,Conventional-Buttons","Chrome extension that adds a conventional comment button to Github file explorer comments, allowing you to quickly leave a structured semantic comment during your PR reviews!. 


  ![Conventional Comments Logo](https://user-images.githubusercontent.com/40190772/114231461-c845a780-997a-11eb-9297-811735124ec3.png)



Conventional Buttons



  [![GitHub contributors](https://img.shields.io/github/contributors/AbdallahHemdan/Conventional-Buttons)](https://github.com/AbdallahHemdan/Conventional-Buttons/contributors)
  [![GitHub issues](https://img.shields.io/github/issues/AbdallahHemdan/Conventional-Buttons)](https://github.com/AbdallahHemdan/Conventional-Buttons/issues)
  [![GitHub forks](https://img.shields.io/github/forks/AbdallahHemdan/Conventional-Buttons)](https://github.com/AbdallahHemdan/Conventional-Buttons/network)
  [![GitHub stars](https://img.shields.io/github/stars/AbdallahHemdan/Conventional-Buttons)](https://github.com/AbdallahHemdan/Conventional-Buttons/stargazers)
  [![GitHub license](https://img.shields.io/github/license/AbdallahHemdan/Conventional-Buttons)](https://github.com/AbdallahHemdan/Conventional-Buttons/blob/master/LICENSE)
  
  
  
  



Conventional-Buttons is a chrome extension that adds a conventional comment button to Github file explorer comments, allowing to quickly leave a structured semantic comment during your PR reviews!, I wrote an article about conventional comments, you can check it from here
Clone the repository
Navigate to repository directory
Open Google chrome
Open More Tools (3-dots)
Click on Extensions
In the Extension page: Load unpacked and select the cloned repository


![Component 44](https://user-images.githubusercontent.com/40190772/114234525-2a081080-997f-11eb-9107-37c2a8d1affe.png)





![Conventional Comments](https://user-images.githubusercontent.com/40190772/114235205-22953700-9980-11eb-8591-e6f17a7329bd.gif)





![image](https://user-images.githubusercontent.com/40190772/114235066-ebbf2100-997f-11eb-958f-560143dff932.png)
![image](https://user-images.githubusercontent.com/40190772/114235088-f4175c00-997f-11eb-9461-edb8c0ef43f8.png)
![image](https://user-images.githubusercontent.com/40190772/114235096-f7124c80-997f-11eb-9333-f593a5e906a7.png)
![image](https://user-images.githubusercontent.com/40190772/114235108-fbd70080-997f-11eb-93e2-bd8124791593.png)
![image](https://user-images.githubusercontent.com/40190772/114235113-fe395a80-997f-11eb-9898-5a474ec6dbbc.png)



Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are greatly appreciated.
Check out our contributing guidelines for ways to contribute.
MIT Licence"
3993,"urish,firebase-server","Firebase Realtime Database Server Implementation. Firebase Web Socket Protocol Server. Useful for emulating the Firebase server in tests.
Copyright (C) 2013, 2014, 2015, 2016, 2017, 2018, 2019, Uri Shaked and contributors



You can install firebase-server through npm:
npm install --save-dev firebase-server
or yarn:
yarn add -D firebase-server
After running this server, you can create a Firebase client instance that connects to it:
In the case of Mocha, you'd do something like the example below.
This package installs a CLI script called firebase-server.
It can be installed locally or globally. If installed locally, use the
following path to start the server: ./node_modules/.bin/firebase-server
The following command will start a firebase server on port 5555:
... and with a specified bind IP address:
To bootstrap the server with some data you can use the -d,--data or the -f,--file option.
Note: The file option will override the data option.
To load Firebase Security rules upon startup you can use the -r,--rules option.
You can also specify a shared client auth token secret with the -s argument:
To enable REST API, run:
Note: currently REST API does not implement authentication or
authorization.
To daemonize the server process, use:
To write the PID to a file, use:
_Note: PID file can be written with or without daemonization, and is NOT
written by default when daemonizing.
For more information, run:
The constructor signature is FirebaseServer(portOrOptions, name, data) where
portOrOptions is either a port number or a
WebSocket.Server
options object with either port or server set. name is optional and is
just used to report the server name to clients. data is the initial contents
of the database.
If you want the server to pick a free port for you, simply use the value 0 for the port. You can then get the
assigned port number by calling the getPort() method on the returned server object.
FirebaseServer instances have the following API:
close(): Promise - Stops the server (closes the server socket)
getValue() - Returns a promise that will be resolved with the current data on the server
exportData() - Returns a promise that will be resolved with the current data on the server, including priority values.
  This is similar to DataSnapshot.exportVal().
address() - Returns the address the server is listening on
port(): number - Returns the port number the server is listening on
setRules(rules) - Sets the security rules for the server. Uses the targaryen
  library for rule validation.
setAuthSecret(secret) - Sets the shared secret used for validating Custom Authentication Tokens.
setTime(timestamp) - Sets the server time. The server time is returned by ServerValue.TIMESTAMP
  and is also used for checking the validity of Custom Authentication Tokens.
This project uses the excellent debug module for logging.
It is configured by setting an environment variable:
Advanced options are available from the debug docs
Released under the terms of MIT License:
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
4918,"dephell,dephell",":package: :fire: Python project management. Manage packages: convert between formats, lock, install, resolve, isolate, test, build graph, show outdated, audit. Manage venvs, build package, bump version.. Forks: https://github.com/orsinium/forks




DepHell -- project management for Python.
Why it is better than all other tools:
Format agnostic. You can use DepHell with your favorite format: setup.py, requirements.txt, Pipfile, poetry. DepHell supports them all and much more.
Use your favorite tool on any project. Want to install a poetry based project, but don't like poetry? Just tell DepHell to convert the project's meta information into a setup.py and install it with pip. Or directly work with the project from DepHell, because DepHell can do everything that you usually want to do with packages.
DepHell doesn't try to replace your favorite tools. If you use poetry, you have to use poetry's file formats and commands. However, DepHell can be combined with any other tool or can even combine all these tools together by converting formats. You can use DepHell, poetry, and pip all at the same time.
Easily extendable. DepHell has strong modularity and can be easily extended with new formats and commands.
Developer friendly. We aren't going to place all of our modules into _internal. Also, DepHell has a large ecosystem with separated libraries so you can use only the parts of DepHell that you need.
All-in-one-solution. DepHell can manage dependencies, virtual environments, tests, CLI tools, packages, generate configs, show licenses for dependencies, assist with security audits, get download statistics from PyPI, search packages and much more.
Smart dependency resolution. Sometimes pip and pipenv fail to lock your dependencies. Try to execute pipenv install oslo.utils==1.4.0. Pipenv can't handle it, but DepHell can: dephell deps add --from=Pipfile oslo.utils==1.4.0 to add new dependency and dephell deps convert --from=Pipfile --to=Pipfile.lock to lock it.
Asyncio based. DepHell doesn't support Python 2.7, and that allows us to use modern features to make network and filesystem requests as fast as possible.
Multiple environments. You can have as many environments for project as you want. Separate sphinx dependencies from your main and dev environment. Other tools like pipenv and poetry don't support this.
Features:
Manage dependencies: convert between formats, inst–∞ll, lock, add new, resolve conflicts.
Manage virtual environments: create, remove, inspect, run shell, run commands inside.
Install CLI tools into isolated environments.
Manage packages: install, list, search on PyPI.
Build packages (to upload on PyPI), test, bump project version.
Discover licenses of all project dependencies, show outdated packages, find security issues.
Generate .editorconfig, LICENSE, AUTHORS, .travis.yml.
See documentation for more details.
Follow @PythonDepHell on Twitter to get updates about new features and releases.
See installation documentation for alternatives.
Archives:
*.egg-info (egginfo)
*.tar.gz (sdist)
*.whl (wheel)
pip:
requirements.txt (pip)
requirements.lock (piplock)
pipenv:
Pipfile (pipfile)
Pipfile.lock (pipfilelock)
p–æetry:
pyproject.toml (poetry)
poetry.lock (poetrylock)
Environment:
Imports in the package (imports).
Installed packages (installed).
Other:
setup.py (setuppy)
flit (flit)
conda's environment.yml (conda)
pyproject.toml build-system requires (pyproject)
First of all, install DepHell and activate autocomplete:
Let's get sampleproject and make it better.
This project uses setup.py for dependencies and metainfo. However, this format is over-complicated for most projects. Let's convert it into poetry:
It will make next pyproject.toml:
Now, let's generate some useful files:
Our users probably have not installed poetry, but they are likely to have pip and can install files from setup.py. Let's make it easier to generate setup.py from our pyproject.toml. Also, it points to DepHell as your default dependencies file. Add the following lines in the pyproject.toml:
You can see a full, real-world example of a config in DepHell's own pyproject.toml.
Now we can call DepHell commands without explicitly specifying from and to:
It will make setup.py and README.rst from pyproject.toml and README.md.
Now let's test our code in a virtual environment:
We can now activate the virtual environment for our project and run any commands inside:
Ugh, we have tests, but don't have pytest in our dependencies file. Let's add it:
Afer that our dev-dependencies looks like this:
Eventually we will have many more dependencies. Let's look at how many of them we have now:
Hm...Is it as many as it seems? Let's look at their size.
Ugh...Ok, it's Python. Are they actual?
Pytest requires old version of more-itertools. That happens.
If our tests and dependencies are OK, it's time to deploy. First of all, increment the project version:
And then build packages:
Now, we can upload these packages to PyPI:
These are some of the most useful commands. See documentation for more details.
DepHell is tested on Linux and Mac OS X with Python 3.5, 3.6, 3.7. And one of the coolest things is that DepHell is run by DepHell on Travis CI.
DepHell works on Windows but has no CI to keep in working yet.
Star project on Github. Developers believe in the stars.
Tell your fellows that Gram has a made cool thing for you.
Open an issue if you have thoughts on how to make DepHell better.
Things that you can contribute in any project in DepHell ecosystem:
Fix grammar and typos.
Document new things.
Tests, we always need more tests.
Make READMEs more nice and friendly.
View issues with the help wanted label to find things that you can fix.
Anything what you want. If it is a new feature, please, open an issue before writing the code.
Thank you :heart:"
4221,"chrisdiana,cms.js","Client-Side JavaScript Site Generator. CMS.js is a fully Client-side, JavaScript Markdown Site generator in the spirit of Jekyll that uses plain ol' HTML, CSS and JavaScript to generate your website. CMS.js is like a file-based CMS.
It takes your content, renders Markdown and delivers a complete website in Single-Page App fashion...without the aid of server-side scripting (no Node.js, PHP, Ruby, etc.).





Zero dependencies
Abstract types
Custom Templates
Search, Filtering, Tagging and Sorting
Github & Server Mode
Extendable Markdown Renderer and Plugins
Super small footprint - 10kb minified
Check out a working demo here
CMS.js supports two website modes, Github and Server. Host your website on Github using Github Pages (similar to Jekyll) or use Server mode if you choose to self host your content. Learn more about server mode and setup here.
Clone the starter repo: git clone https://github.com/chrisdiana/cms.js-starter.git or download the latest release here
Configure js/config.js to your liking
Make sure to set your Github settings in js/config.js if using Github mode
If using Github mode, create a new branch from your master or working branch called gh-pages (Github's default branch for hosting)
Visit your site! (which should be located at https://yourusername.github.io/cms.js-starter)
Try out CMS.js with a variety of popular CSS frameworks such as Bootstrap, Foundation, and Bulma. Check out all the themes available here.

Github Mode
In Github mode, CMS.js uses the Github API to get the content of your repo and serve them as a full website.
Server Mode
In Server mode, CMS.js takes advantage of the Server's Directory Indexing feature. By allowing indexes, CMS.js sends an AJAX call to your specified folders and looks for Markdown or HTML files.
After they are found, it takes care of everything else and delivers a full website.
Importing Posts
Once CMS.js is installed and running, simply copy all of your posts from your Jekyll project's _post folder to your designated CMS.js posts folder.
Importing Pages
Copy all of your Markdown pages from your Jekyll projects root folder into your designated CMS.js pages folder.
Pagination
Template caching
Loader
CLI Utilities
Poole (Default Theme)
All forms of contribution are welcome: bug reports, bug fixes, pull requests and simple suggestions. If you do wish to contribute, please check out the Contributing Guide before making a pull request. Thanks!
You can find the list of contributors here."
4925,"brtstk,projector","üìΩ A simple HTML mockup presentation engine. A Bootstrap styled, Markdown powered, Server-side language agnostic, database-less project / mockup presentation engine.
Ever needed a quick & easy way to share your projects / mockups and progress with your clients? Tired of using heavy and overblown PM tools or even generic directory listing for just that? Search no more. Thanks to Projector now you can simply upload your mockups, set priority for each page and you're done. It also doesn't discriminate whether you're using PHP, ROR or anything else server-side, it just works. It's that easy.
Demo: http://bartsitek.com/projector
Source: https://github.com/bartsitek/projector
Homepage: http://bartsitek.com
Twitter: @BartSitek
Follow the list below:         
Unpack it somewhere.
Edit config section inside /index.html and set up your project path (if you want different relative path for project than the default one) and mode (if you want to use external URLs).
Edit /project.md to change the project title, compatibility notice, and add pages to your project.
Create appropriate directories inside the /project directory (same names as the pages) and make sure each of them has index.html file. Case insensitive, underscores will be converted to spaces.
You're done. Share your Projector location with anyone you'd like!
Want one of the tabs/groups removed? Simply keep ""- "" (dash space) as the only list item of that list
Want to use external links instead of local directories? Edit /index.html file and change 'relative_mode' to false.
Supersimple/quick to set up, configure and maintain thanks to Markdown syntax
Easily customizable visually as it's based on Twitter Bootstrap
Can be used with any server-side language as everything's on the client side
Doesn't require any DB to run - simply copy it over and start using
Anyone and everyone is welcome to download and contribute! Hack away <3"
4514,"i18next,react-i18next","Internationalization for react done right. Using the i18next i18n ecosystem.. Master Branch is the new v10 using hooks.
react-native: not yet supports hooks (hooks are part of react-native v0.59.0)!!!
For the legacy version please use the v9.x.x Branch
The documentation is published on react.i18next.com
Before: Your react code would have looked something like:
After: With the trans component just change it to:
Head over to the interactive playground at codesandbox.
I18n with React and i18next via Alligator.io by Danny Hurlburt
Ultimate Localization of React (Mobx) App with i18next via itnext.io by Viktor Shevchenko
Internationalization for react done right Using the i18next i18n ecosystem via reactjsexample.com
Using i18next to translate React.js application via codetain.co by Kasia Dadek
Building i18n with Gatsby via gatsbyjs.org by Samuel Goudie
Get your react.js application translated with style by Jan M√ºhlemann
Translate your expo.io / react-native mobile application by Jan M√ºhlemann
you're welcome to share your story...
Simplicity: no need to change your webpack configuration or adding additional babel transpilers, just use create-react-app and go
Production ready we know there are more needs for production than just doing i18n on the clientside. So we offer wider support on serverside too (nodejs, php, ruby, .net, ...). Learn once - translate everywhere.
Beyond i18n comes with locize bridging the gap between developement and translations - covering the whole translation process.

Want to learn more about how seamless your internationalization and translation process can be?

Source can be loaded via npm or downloaded from this repo.
If you don't use a module loader it will be added to window.reactI18next
react >= 16.8.0
react-dom >= 16.8.0
react-native >= 0.59.0
i18next >= 10.0.0 (typescript users: >=17.0.9)
react >= 0.14.0 (in case of < v16 or preact you will need to define parent in Trans component or globally in i18next.react options)
i18next >= 2.0.0
Thanks goes to these wonderful people (emoji key):
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><sub><b>Jan M√ºhlemann</b></sub>üíª üí° üìñ üí¨</td>
    <td align=""center""><sub><b>Adriano Raiano</b></sub>üíª üí° üìñ üí¨</td>
    <td align=""center""><sub><b>Isaac Hinman</b></sub>üíª üí° üí¨</td>
    <td align=""center""><sub><b>Kevin Ross</b></sub>üí¨ üíª</td>
  </tr>
</table>

<!-- markdownlint-enable -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the all-contributors specification. Contributions of any kind welcome!
Gold Sponsors


  
    
  


localization as a service - locize.com
Needing a translation management? Want to edit your translations with an InContext Editor? Use the orginal provided to you by the maintainers of i18next!

With using locize you directly support the future of i18next and react-i18next."
4720,"graphql-dotnet,graphql-client","A GraphQL Client for .NET Standard. A GraphQL Client for .NET Standard over HTTP.
Provides the following packages:
The Library will try to follow the following standards and documents:
Be careful when using byte[] in your variables object, as most JSON serializers will treat that as binary data! If you really need to send a list of bytes with a byte[] as a source, then convert it to a List&lt;byte&gt; first, which will tell the serializer to output a list of numbers instead of a base64-encoded string.
Using the extension method for anonymously typed responses (namespace GraphQL.Client.Abstractions) you could achieve the same result with the following code:
Blazor WebAssembly differs from other platforms as it does not support all features of other .NET runtime implementations. For instance, the following WebSocket options properties are not supported and will not be set:
UseDefaultCredentials"
4368,"beekeeper-studio,beekeeper-studio","Modern and easy to use SQL client for MySQL, Postgres, SQLite, SQL Server, and more. Linux, MacOS, and Windows.. Beekeeper Studio is a cross-platform SQL editor and database manager available for Linux, Mac, and Windows. Beekeeper Studio Community Edition is GPL licensed so it is free (libre) and free (gratis).
üëâ Join the community Slack
üëâ Love Beekeeper Studio? Leave us a testimonial!

Beekeeper Studio - The full version of Beekeeper Studio with all features. Buying Beekeeper Studio is also the best way to support the community edition. Download from our website 
Beekeeper Studio Community Edition - This repository. This is the open source version of Beekeeper Studio. It is a full featured database management client that is totally free and open source. Download from the releases page
üëâ Compare Beekeeper Studio Editions
Top feature: It's smooth üç´, fast üèé, and you'll actually enjoy using it ü•∞
Truly cross-platform: Windows, MacOS, and Linux
Autocomplete SQL query editor with syntax highlighting
Tabbed interface, so you can multitask
Sort and filter table data to find just what you need
Sensible keyboard-shortcuts
Save queries for later
Query run-history, so you can find that one query you got working 3 days ago
Default dark theme
One of our frustrations with other open-source SQL editors and database managers is that they take a 'kitchen sink' approach to features, adding so many features that the UI becomes cluttered and hard to navigate. We wanted a good looking, open source SQL workbench that's powerful, but also easy to use. We couldn't find one, so we created Beekeeper Studio!
Beekeeper Studio supports connecting to the following databases:
SQLite
MySQL
MariaDB
Postgres
CockroachDB
SQL Server
Amazon Redshift
I love working on Beekeeper Studio, and I'd love to keep growing and improving it forever. To do that I need your help.
The best way to support Beekeeper Studio is to purchase the Ultimate Edition. Every purchase directly supports my work on Beekeeper Studio.
If you can't afford a license, please consider becoming a project sponsor.
Thank you for your continued support!
Check out docs.beekeeperstudio.io for user guides, FAQs, troubleshooting tips, and more.
Beekeeper Studio Community Edition (the code in this repository) is licensed under the GPLv3 license.
Beekeeper Studio Ultimate Edition contains extra features and is licensed under a commercial end user agreement (EULA).
Beekeeper Studio's trademarks (words marks and logos) are not open source. See our trademark guidelines for more information.
Trademarks can be complicated with open source projects, so we have adapted a set of standard guidelines for using our trademarks that are common to many open source projects.
If you are just using the Beekeeper Studio app, and you are not forking or distributing Beekeeper Studio code in any way, these probably don't apply to you.
üëâ Beekeeper Studio Trademark Guidelines
We love any community engagement. Even if you're complaining because you don't like something about the app!
Building an inclusive and welcoming community is important to us, so please follow our code of conduct as you engage with the project.
By contributing to the project you agree to the terms of our contributor guidelines.
We have you covered, read our guide to contributing in 10 minutes without coding.
Want to write some code and improve Beekeeper Studio? Getting set-up is easy on Mac, Linux, or Windows.
This repo is now a monorepo, we have several places with code, but only really a couple of important entry points.
All app code lives in apps/studio, some shared code lives in shared/src. This is shared with other apps.
Beekeeper Studio has two entry points:
background.js - this is the electron-side code that controls native things like showing windows.
main.js - this is the entry point for the Vue.js app. You can follow the Vue component breadcrumbs from App.vue to find the screen you need.
Generally we have two 'screens':
ConnectionInterface - connecting to a DB
CoreInterface - interacting with a database
Push your changes to your repository and open a Pull Request from our github page (this page)
Make sure to write some notes about what your change does! A gif is always welcome for visual changes.
Up the version number in package.json
Replace build/release-notes.md with the latest release notes. Follow the format that is there.
run git log &lt;last-tag&gt;..HEAD --oneline | grep 'Merge pull' to find PRs merged
Commit
Push to master
Create a tag git tag v&lt;version&gt;. It must start with a 'v'
git push origin &lt;tagname&gt;
Now wait for the build/publish action to complete on Github
Push the new release live
Go to the new 'draft' release on the releases tab of github, edit the notes, publish
Log into snapcraft.io, drag the uploaded release into the 'stable' channel for each architecture.
This should also publish the latest docs
Post Release:
Copy release notes to a blog post, post on website
Tweet link
Share on LinkedIn
Send to mailing list on SendInBlue
Beekeeper Studio wouldn't exist without Sqlectron-core, the core database libraries from the Sqlectron project. Beekeeper Studio started as an experimental fork of that repository. A big thanks to @maxcnunes and the rest of the Sqlectron community.
The original license from sqlectron-core is included here:"
4789,"mrousavy,react-native-mmkv","‚ö°Ô∏è The fastest key/value storage for React Native. ~30x faster than AsyncStorage!. 
  


  MMKV
  The fastest key/value storage for React Native.



  <a align=""center"" href=""https://github.com/mrousavy?tab=followers"">
    
  
  
  <a align=""center"" href=""https://twitter.com/mrousavy"">
    
  
  
  
    
  


MMKV is an efficient, small mobile key-value storage framework developed by WeChat. See Tencent/MMKV for more information
react-native-mmkv is a library that allows you to easily use MMKV inside your React Native applications. It provides fast and direct bindings to the native C++ library which are accessible through a simple JS API.
Get and set strings, booleans and numbers
Fully synchronous calls, no async/await, no Promises, no Bridge.
Encryption support (secure storage)
Multiple instances support (separate user-data with global data)
Customize storage location
High performance because everything is written in C++
~30x faster than AsyncStorage
Uses JSI instead of the ""old"" Bridge
iOS, Android and Web support
Easy to use React Hooks API

  
    
  


react-native-mmkv is sponsored by getstream.io. 
Try the React Native Chat tutorial üí¨
StorageBenchmark compares popular storage libraries against each other by reading a value from storage for 1000 times:

  
    
  
  
    <b>MMKV vs other storage libraries</b>: Reading a value from Storage 1000 times. 
    Measured in milliseconds on an iPhone 11 Pro, lower is better. 
  


To create a new instance of the MMKV storage, use the MMKV constructor. It is recommended that you re-use this instance throughout your entire app instead of creating a new instance each time, so export the storage object.
This creates a new storage instance using the default MMKV storage ID (mmkv.default).
This creates a new storage instance using a custom MMKV storage ID. By using a custom storage ID, your storage is separated from the default MMKV storage of your app.
The following values can be configured:
id: The MMKV instance's ID. If you want to use multiple instances, use different IDs. For example, you can separate the global app's storage and a logged-in user's storage. (required if path or encryptionKey fields are specified, otherwise defaults to: 'mmkv.default')
path: The MMKV instance's root path. By default, MMKV stores file inside $(Documents)/mmkv/. You can customize MMKV's root directory on MMKV initialization (documentation: iOS / Android)
encryptionKey: The MMKV instance's encryption/decryption key. By default, MMKV stores all key-values in plain text on file, relying on iOS's/Android's sandbox to make sure the file is encrypted. Should you worry about information leaking, you can choose to encrypt MMKV. (documentation: iOS / Android)
A mocked MMKV instance is automatically used when testing with Jest, so you will be able to use new MMKV() as per normal in your tests. Refer to example/test/MMKV.test.ts for an example.
As the library uses JSI for synchronous native methods access, remote debugging (e.g. with Chrome) is no longer possible. Instead, you should use Flipper.
Use flipper-plugin-react-native-mmkv to debug your MMKV storage using Flipper. You can also simply console.log an MMKV instance.
react-native-mmkv is provided as is, I work on it in my free time.
If you're integrating react-native-mmkv in a production app, consider funding this project and contact me to receive premium enterprise support, help with issues, prioritize bugfixes, request features, help at integrating react-native-mmkv, and more.
See the contributing guide to learn how to contribute to the repository and the development workflow.
MIT"
4191,"bitjson,typescript-starter","Quickly create and configure a new library or Node.js project. 







  


Run one simple command to install and use the interactive project generator. You'll need Node v10 or later.
The interactive CLI will help you create and configure your project automatically.
Since this repo includes the CLI and it's tests, you'll only need to fork or clone this project if you want to contribute. If you find this project useful, please consider leaving a star so others can find it. Thanks!
Write standard, future javascript ‚Äì with stable ESNext features ‚Äì today (stage 3 or finished features)
Optionally use typescript to improve tooling, linting, and documentation generation
Export as a javascript module, making your work fully tree-shakable for consumers capable of using es6 imports (like Rollup, Webpack, or Parcel)
Export type declarations to improve your downstream development experience
Backwards compatibility for Node.js-style (CommonJS) imports
Both strict and flexible typescript configurations available
So we can have nice things:
Generate API documentation (HTML or JSON) without a mess of JSDoc tags to maintain
Collocated, atomic, concurrent unit tests with AVA
Source-mapped code coverage reports with nyc
Configurable code coverage testing (for continuous integration)
Automatic linting and formatting using TSLint and Prettier
Before you start, consider using an editor with good typescript support.
VS Code (below) is a popular option. Editors with typescript support can provide helpful autocomplete, inline documentation, and code refactoring features.
Also consider installing editor extensions for TSLint and Prettier. These extensions automatically format your code each time you save, and may quickly become invaluable.

  


To start working, run the watch task using npm or yarn.
This starter includes a watch task which makes development faster and more interactive. It's particularly helpful for TDD/BDD workflows.
The watch task will build and watch the entire project for changes (to both the library source files and test source files). As you develop, you can add tests for new functionality ‚Äì which will initially fail ‚Äì before developing the new functionality. Each time you save, any changes will be rebuilt and retested.

  <!-- PR request: capture the magic of using a test-running watch task for development -->
  


Since only changed files are rebuilt and retested, this workflow remains fast even for large projects.
To make getting started easier, the default tsconfig.json is using a very flexible configuration. This will allow you to get started without many warnings from Typescript.
To enable additional Typescript type checking features (a good idea for mission-critical or large projects), review the commented-out lines in your typescript compiler options.
To generate and view test coverage, run:
This will create an HTML report of test coverage ‚Äì source-mapped back to Typescript ‚Äì and open it in your default browser.

  


The src folder is analyzed and documentation is automatically generated using TypeDoc.
This command generates API documentation for your library in HTML format and opens it in a browser.
Since types are tracked by Typescript, there's no need to indicate types in JSDoc format. For more information, see the TypeDoc documentation.
To generate and publish your documentation to GitHub Pages use the following command:
Once published, your documentation should be available at the proper GitHub Pages URL for your repo. See typescript-starter's GitHub Pages for an example.

  


For more advanced documentation generation, you can provide your own TypeDoc theme, or build your own documentation using the JSON TypeDoc export:
It's recommended that you install commitizen to make commits to your project.
This project is tooled for conventional changelog to make managing releases easier. See the standard-version documentation for more information on the workflow, or CHANGELOG.md for an example.
You may find a tool like wip helpful for managing work in progress before you're ready to create a meaningful commit.
Bringing together many of the steps above, this repo includes a one-step release preparation command.
This command runs the following tasks:
reset: cleans the repo by removing all untracked files and resetting --hard to the latest commit. (Note: this could be destructive.)
test: build and fully test the project
docs:html: generate the latest version of the documentation
docs:publish: publish the documentation to GitHub Pages
version: bump package.json version, update CHANGELOG.md, and git tag the release
When the script finishes, it will log the final command needed to push the release commit to the repo and publish the package on the npm registry:
Look over the release if you'd like, then execute the command to publish everything.
You can also prepare a non-standard release:
You can run the describe script for a description of the available package scripts.
The src of typescript-starter is compiled into two separate builds: main and module. The main build is configured to use the CommonJS module system. The module build uses the new es6 module system.
Because Node.js LTS releases do not yet support the es6 module system, some projects which depend on your project will follow the main field in package.json. Tools which support the new system (like Rollup, Webpack, or Parcel) will follow the module field, giving them the ability to statically analyze your project. These tools can tree-shake your module build to import only the code they need.
By convention, sample tests in this project are adjacent to the files they test.
Such tests are easy to find.
You see at a glance if a part of your project lacks tests.
Nearby tests can reveal how a part works in context.
When you move the source (inevitable), you remember to move the test.
When you rename the source file (inevitable), you remember to rename the test file.
(Bullet points taken from Angular's Testing Guide.)
Yes. For some projects, separating tests from the code they test may be desirable. This project is already configured to test any *.spec.ts files located in the src directory, so reorganize your tests however you'd like. You can put them all in a single folder, add tests that test more than one file, or mix and match strategies (e.g. for other types of tests, like integration or e2e tests).
Tests are compiled and performed on the final builds in the standard Node.js runtime (rather than an alternative like ts-node) to ensure that they pass in that environment. If you are build a Node.js application, and you are using ts-node in production, you can modify this project to use ts-node rather than a build step.
However, if you're building any kind of library, you should always compile to javascript.
Library authors sometimes make the mistake of distributing their libraries in typescript. Intuitively, this seems like a reasonable course of action, especially if all of your intended consumers will be using typescript as well.
TypeScript has versions, and different versions of TypeScript may not be compatible. Upgrading to a new major version of TypeScript sometimes requires code changes, and must be done project-by-project. Additionally, if you're using the latest version of TypeScript to build your library, and one of your consumers is using an older version in their application, their compiler will be unable to compile your library.
The short answer is: don't pre-bundle your library.
Previous versions of typescript-starter included browser bundling using Rollup. This feature has since been removed, since very few libraries should ever be pre-bundled.
If the consumer of your library is using Node.js, bundling is especially unnecessary, since Node.js can reliably resolve dependencies, and bundling may even make debugging more difficult.
If the consumer of your library is a browser application, the application likely has its own build tooling. Very few serious applications are manually bundling their javascript, especially with easy to use, no configuration tools like Parcel available.
Your library is most useful to downstream consumers as a clean, modular codebase, properly exporting features using es6 exports. Consumers can import the exact es6 exports they need from your library, and tree-shake the rest.
In the past, complex javascript libraries have used solutions like Browserify to bundle a version of their application for the browser. Most of these solutions work by allowing library developers to extensively configure and manually override various dependencies with respective browser versions.
For example, where a Node.js application might use Node.js' built-in crypto module, a browser version would need to fall back to a polyfill-like alternative dependency like crypto-browserify.
With es6, this customization and configuration is no longer necessary. Your library can now export different functionality for different consumers. While browser consumers may import a native JavaScript crypto implementation which your library exports, Node.js users can choose to import a different, faster implementation which your library exports.
See hash.ts for a complete example. Two different functions are exported, sha256, and sha256Native. Browser consumers will not be able to import sha256Native, since their bundler will be unable to resolve the built-in Node.js dependency (their bundler will throw an error). Node.js users, however, will be able to import it normally. Each consumer can import the exact functionality they need.
One perceived downside of this solution is that it complicates the library's API. Browser consumers will sometimes import one feature while Node.js users import another. While this argument has merit, we should weigh it against the benefits.
Providing a public API where consumer code is the same between browsers and Node.js is desirable, but it comes at the cost of significant configuration and complexity. In many cases, it requires that code be aware of its environment at runtime, requiring additional complexity and testing.
A better way to provide this developer experience is to provide similar APIs for each environment, and then encourage the use of es6 import aliasing to standardize between them.
For example, in the documentation for typescript-starter, we encourage Node.js users to import sha256Native as sha256. With this convention, we get a standard API without loaders or dependency substitution hacks.
This project uses standard-version to automatically update the changelog based on commit messages since the last release. To do this, each relevant commit must be properly formatted.
To ensure all commits follow the proper conventions, you can use a package like commitlint with Husky. However, keep in mind that commit hooks can be confusing, especially for new contributors. They also interfere with some development tools and workflows.
If your project is private, or will primarily receive contributions from long-running contributors, this may be a good fit. Otherwise, this setup may raise the barrier to one-off contributions slightly.
Note, as a maintainer, if you manage your project on GitHub or a similar website, you can now use the Squash and Merge option to add a properly formatted, descriptive commit messages when merging each pull request. This is likely to be more valuable than trying to force one-time contributors to adhere to commit conventions, since you can also maintain a more consistent language style. Because this is the best choice for the vast majority of projects, typescript-starter does not bundle any commit message validation.
To work on the CLI, clone and build the repo, then use npm link to install it globally.
To manually test the CLI, you can use the TYPESCRIPT_STARTER_REPO_URL environment variable to test a clone from your local repo. Run npm run watch as you're developing, then in a different testing directory:
You can also set TYPESCRIPT_STARTER_REPO_URL to any valid Git URL, such as your fork of this repo:
If TYPESCRIPT_STARTER_REPO_BRANCH is not provided, it will default to master.
If you're using VS Code, the Debug CLI launch configuration also allows you to immediately build and step through execution of the CLI.
You can find more advanced configurations, usage examples, and inspiration from other projects using typescript-starter:
BitAuth ‚Äì A universal identity and authentication protocol, based on bitcoin
s6: Super Simple Secrets * Simple Secure Storage ‚Äì An NPM library and tool to sprawl secrets with S3, ease, and encryption
Using typescript-starter for your project? Please send a pull request to add it to the list!"
4812,"NaturalIntelligence,fast-xml-parser","Validate XML, Parse XML and Build XML rapidly without C/C++ based libraries and no callback.. 

Validate XML, Parse XML to JS Object, or Build XML from JS Object without C/C++ based libraries and no callback.
Looking for maintainers
Support this project by becoming a Sponsor. 
Click on Sponsor button above or

  

 











Check ThankYouBackers for our supporters

 
 
 
 
 
 
 
 
 
 
 
 
Check the list of all known users here;
<small>The list of users is collected either from the list published by Github, cummunicated directly through mails/chat , or from other resources. If you feel that your name in the above list is incorrectly published or you're not the user of this library anymore then you can inform us to remove it. We'll do the necessary changes ASAP.</small>

Validate XML data syntactically
Parse XML to JS Object
Build XML from JS Object
Works with node packages, in browser, and in CLI (press try me button above for demo)
Faster than any other pure JS implementation.
It can handle big files (tested up to 100mb).
Controlled parsing using various options
XML Entities, HTML entities, and DOCTYPE entites are supported.
unpaired tags (Eg &lt;br&gt; in HTML), stop nodes (Eg &lt;script&gt; in HTML) are supported.
You can restore almost same XML from JSON
Supports comments
It can preserve Order of tags in JS object
You can control if a single tag should be parsed into array.
Supports parsing of PI (Processing Instruction) tags with XML declaration tags
And many more other features.
To use as package dependency
$ npm install fast-xml-parser 
or 
$ yarn add fast-xml-parser
To use as system command
$ npm install fast-xml-parser -g 
To use it on a webpage include it from a CDN
Example
As CLI command
In a node js project
In a HTML page
Check lib folder for different browser bundles
v3
v4

Y-axis: requests per second
X-axis: File size
Large files

Y-axis: requests per second
X-axis: File size 

Y-axis: requests per second
<small>negative means error</small>

BigBit standard : 
Single text encoding to replace UTF-8, UTF-16, UTF-32 and more with less memory.
Single Numeric datatype alternative of integer, float, double, long, decimal and more without precision loss.
Cytorus:  Be specific and flexible while running E2E tests.
Run tests only for a particular User Story
Run tests for a route or from a route
Customizable reporting
Central dashboard for better monitoring
Options to integrate E2E tests with Jira, Github etc using Central dashboard Tian.
Stubmatic : Create fake webservices, DynamoDB or S3 servers, Manage fake/mock stub data, Or fake any HTTP(s) call.
This project exists thanks to all the people who contribute. [Contribute].
<!--  -->
<!--



Thank you to all our backers! üôè [Become a backer]

MIT License"
4838,"sekwiatkowski,komputation","Komputation is a neural network framework for the Java Virtual Machine written in Kotlin and CUDA C.. 
Komputation is a neural network framework for the Java Virtual Machine written in Kotlin and CUDA C.
Komputation is available through Maven Central:
Entry points:
Standard feed-forward networks:
Convolutional neural networks (CNNs):
Recurrent neural networks:
Activation functions:
Other layers:
Boolean functions:
Total:
Running total:
Left-to-right:
Right-to-left:
Bidirectional:
Increment:
Word embedding toy problem:
MNIST:
TREC:
Boolean functions:
Word embedding toy problem:
Total:
Increment:
MNIST:
TREC:
The following code instantiates a GPU-accelerated convolutional neural network for sentence classification:
See the TREC demo for more details.
Historical:
Adaptive:
Adam"
4936,"alvis,presetter","üõπ Reuse and manage build scripts, devDependencies and config files from your favourite presets, instead of copy and paste!. 

_Setup build settings from a template, quick and right!_

‚Ä¢‚ÄÉ ‚ÄÉ[Quick Start](#quick-start)‚ÄÉ ‚ÄÉ‚Ä¢‚ÄÉ ‚ÄÉ[Concept](#concept)‚ÄÉ ‚ÄÉ‚Ä¢‚ÄÉ ‚ÄÉ[Known Limitations](#known-limitations)‚ÄÉ ‚ÄÉ‚Ä¢‚ÄÉ ‚ÄÉ[FAQ](#faq)‚ÄÉ ‚ÄÉ‚Ä¢‚ÄÉ ‚ÄÉ[About](#about)‚ÄÉ ‚ÄÉ‚Ä¢



Sharing configurations for building tools across projects is painful. How many time you've copied configs for babel, eslint, jest, typescript or the life cycle scripts in package.json?
How many dev dependencies you have to install before you can kick start a project?
What's more, what if you want to update configs for all projects? :man_facepalming:
Presetter is a utility for setting up building tools for your project from a template. This means with just only two dev packages, namely this package and your favorite template preset, all essential development packages, such as typescript, eslint and jest, together with their configuration files provided by the preset, are automatically setup for you upon the project's initialization.

Bootstrap your project with a preset (e.g. presetter-preset-essentials)
That's. One command and you're set.
Develop and run life cycle scripts provided by the preset
At this point, all development packages specified in the preset are installed,
and now you can try to run some example life cycle scripts provided by the preset (e.g. try npx run test).

The concept comprises two part: presetter (this package) and a preset, which you can easily create one for your own requirement.
Presetter is a utility for two tasks:
setting up a development environment for a project by
installing development dependencies specified in the preset without polluting package.json
symlinking configuration files (e.g. .babelrc) from the preset module to the project root
merging life-cycle scripts from the template and the local version in package.json
When you run presetter run &lt;task&gt; (or its alias run &lt;task&gt;), presetter will perform the following:
Combine the local scripts and those provided by the preset
Backup package.json as ~package.json 
Place the combined script into a temporary package.json 
Run the task via npm run &lt;task&gt; as usual
Restore the original package.json after running the task
PROTIPS:
Local scripts always have a higher priority than the template scripts.
So you can always customize the life cycle script by putting your own version into package.json.
Upon running a life-cycle script involving the run &lt;task&gt; command in package.json, presetter will automatically resolve the task according to the template, so that you can always use the conventional npm run &lt;task&gt; as usual.
For example, with the following template and local package.json,
presetter will generate a package.json with the content below before running the script.
Template
Local package.json
Output
A preset is a collection of configuration to be shared.
An example can be found in presetter-preset-essentials which is also used for developing presetter and other demo presets below.
A preset contains three parts:
A set of development packages declared as peerDependencies in the package.json:
For a project adopting a preset, during its installation these packages will be installed by presetter automatically without making changes to the project's package.json.
A set of configuration files:
These configuration files are to be symlinked to the adopting project's root.
A set of life cycle script template:
These scripts provide the base where the presetter run command will use for merging.
For 1, the set of development packages to be installed is exported via package.json.
For 2 & 3, the configuration is exported via the default function in the preset package (example).
To overwrite part of the preset configuration (e.g. add a rule to the eslint config file template),
you can specify the new configuration under the config parameter in the configuration file (.presetterrc or .presetterrc.json).
During installation and life cycle script execution,
the content of this parameter will be passed to the configurator function provided by the preset package.
With this parameter, the preset can dynamically export customized config files and life cycle scripts.
You can checkout the example preset to see how it work.
In npm v5 & v6, any subsequent npm install &lt;package&gt; command will cause the installed development packages to be removed after installation.
This is due to a side effect of the introduction of package-lock.json in npm v5,
where the npm dedupe process begins to remove any packages not recorded in package-lock.json after package installation.
Since the development packages are only declared as peer dependencies in the preset package, it's not recorded in package-lock.json and therefore the problem.
Currently, there are two solutions
Run presetter bootstrap manually after each additional package installation.
This will make sure any missing dependencies will be installed again.
Use yarn to install additional packages as it won't remove any packages during the process.
This problem, fortunately, ~~should soon~~ has now become a history when npm v7 was released.
The auto peer dependencies installation feature will now resolve this issue for good.
It may be the case when a life cycle script crashed, resulting in package.json not be restored to its original version.
To fix the issue, you can simply replace the temporary package.json by its original at ~package.json.
It's actually rather simple. You just need to prepare an ordinary npm package with a default export with signature (args: PresetContext) =&gt; PresetAsset | Promise&lt;PresetAsset&gt;, where
This function is a manifest generator which will be used to inform presetter what and how use the template files. For bundling other dev tools, you only need to declare them in peerDependencies in the package.json of the preset package. Presetter will pick them up and automatically install them on your target project.
There are many ways to create a preset. Checkout our example presets to learn more:
This project originated from my personal pain on maintaining a number of projects with fairly similar structure, having exactly the same build and test procedures, same .babelrc, tsconfig.json etc.
Every time when I setup a new project, I have to copy many identical config files such as .babelrc, .eslintrc, .jestrc, .lintstagedrc, .npmignore, tsconfig.json to name a few,
together with the following 40 üò± development dependencies!!!
@babel/cli
@babel/core
@babel/node
@babel/plugin-proposal-class-properties
@babel/plugin-proposal-decorators
@babel/plugin-proposal-nullish-coalescing-operator
@babel/plugin-proposal-object-rest-spread
@babel/plugin-proposal-optional-chaining
@babel/preset-env
@babel/preset-typescript
@types/jest
@types/node
@typescript-eslint/eslint-plugin
@typescript-eslint/parser
babel-plugin-transform-typescript-metadata
conventional-changelog-metahub
cross-env
eslint
eslint-config-prettier
eslint-plugin-eslint-comments
eslint-plugin-header
eslint-plugin-import
eslint-plugin-jsdoc
eslint-plugin-no-secrets
eslint-plugin-sonarjs
husky
jest
leasot
lint-staged
npm-run-all
presetter
prettier
shx
standard-version
ts-jest
ts-node
ts-node-dev
tsc-alias
tsconfig-paths
typescript
So, I imagine, if it is possible to reduce all these 40 packages into 1?
I tried to look for a solution but no luck.
Therefore, I make this tool and make it available to everyone who has a similar problem as me.
Every design has a design philosophy and here are those for presetter:
Presetter should do one and only one job, which is providing building tools for the adopting project.
A preset should be made flexible enough to adapt to different project need while maintaining the reusability.
For the adopting project, updating only the preset version should be the only thing you need to do for updating the build dev dependencies and configuration files.
Any changes to the local config should be preserved, even during a preset update.
Let me know if you find any similar projects.
It would be nice to be included here.
Any new ideas? or got a bug? We definitely would love to have your contribution!
If you have any suggestion or issue, feel free to let the community know via issues.
Further, read the contribution guide for the detail of the code structure and useful commands etc.
Copyright ¬© 2020, Alvis Tang. Released under the MIT License."
4500,"volumio,Volumio2","Volumio 2 - Audiophile Music Player. Volumio is an headless audiophile music player, designed to play music with the highest possible fidelity. Volumio runs on most embedded devices (Raspberry Pi, UDOO, Odroid, Cubieboard, Beaglebone, Pine64, Allo Sparky...) and on any ordinary PC (x86).
LATEST
Link : https://volumio.org/get-started/
Logins
user : volumio
password : volumio
Root login via ssh has been disabled by default, however user volumio can become root.
Developers are welcome! Check out the resources:
Wiki (there might be some overlap between the documentation and the wiki; in general, consider documentation as the primary information source)
Some VM images are available, although they're not always kept up-to-date. It can be an alternative to developing directly on target (Raspberry Pi, or whatever).
VMWARE Image is suggested, as Network configuration is tricky with Virtual Box 
System Images built with Volumio Builder"
3742,"sindresorhus,fkill-cli","Fabulously kill processes. Cross-platform.. 
    
    
    
    
    


Fabulously kill processes. Cross-platform.

Works on macOS, Linux, and Windows.
Run fkill without arguments to launch the interactive UI.

fkill - API for this module
alfred-fkill - Alfred workflow for this module
Daniel Baker"
4927,"NicolasPetton,Projectify","Project management for TiddlyWiki. Projectify
Projectify is a project management app for <a class=""tc-tiddlylink-external"" href=""https://tiddlywiki.com"" rel=""noopener noreferrer"" target=""_blank"">TiddlyWiki, inspired by products like <a class=""tc-tiddlylink-external"" href=""https://todoist.com"" rel=""noopener noreferrer"" target=""_blank"">Todoist and <a class=""tc-tiddlylink-external"" href=""https://basecamp.com"" rel=""noopener noreferrer"" target=""_blank"">Basecamp. 
<a class=""tc-tiddlylink-external"" href=""https://tiddlywiki.com"" rel=""noopener noreferrer"" target=""_blank"">TiddlyWiki is an excellent note-taking &amp; knowledge-base app with <a class=""tc-tiddlylink-external"" href=""https://tiddlywiki.com/#TiddlyWiki"" rel=""noopener noreferrer"" target=""_blank"">unique features. Projectify brings project management to TiddlyWiki, extending it to let you <a class=""tc-tiddlylink tc-tiddlylink-shadow"" href=""https://projectify.wiki/demo.html#%24%3A%2Fplugins%2Fnico%2Fprojectify%2Fdoc%2FInbox"">capture thoughts, <a class=""tc-tiddlylink tc-tiddlylink-shadow"" href=""https://projectify.wiki/demo.html#%24%3A%2Fplugins%2Fnico%2Fprojectify%2Fdoc%2FProjects"">plan projects and <a class=""tc-tiddlylink tc-tiddlylink-shadow"" href=""https://projectify.wiki/demo.html#%24%3A%2Fplugins%2Fnico%2Fprojectify%2Fdoc%2FSchedule"">schedule tasks.
Projectify is carefully crafted, with an intuitive interface that integrates seamlessy with the core of TiddlyWiki. <a class=""tc-tiddlylink-external"" href=""https://tiddlywiki.com/#Drag%20and%20Drop"" rel=""noopener noreferrer"" target=""_blank"">Drag and drop  any tiddler into a project to add it as a todo, <a class=""tc-tiddlylink-external"" href=""https://tiddlywiki.com/#Transclusion"" rel=""noopener noreferrer"" target=""_blank"">transclude and <a class=""tc-tiddlylink-external"" href=""https://tiddlywiki.com/#Linking%20in%20WikiText"" rel=""noopener noreferrer"" target=""_blank"">link other tiddlers into projects or tasks.
For all changes in the latest 0.14.0 release, see <a class=""tc-tiddlylink tc-tiddlylink-shadow"" href=""https://projectify.wiki/demo.html#%24%3A%2Fplugins%2Fnico%2Fprojectify%2Fchangelog"">ChangeLog.
Demo
A demo is available at <a class=""tc-tiddlylink-external"" href=""https://projectify.wiki"" rel=""noopener noreferrer"" target=""_blank"">projectify.wiki.
Download
Download a pre-configured empty wiki:
<a class=""py-btn btn-primary download-link"" download=""empty.html"" href=""https://projectify.wiki/empty.html"">
  Get Projectify <svg class=""tc-image-save-button tc-image-button"" height=""22pt"" viewBox=""0 0 128 128"" width=""22pt""></path></svg>

Alternatively, see <a class=""tc-tiddlylink tc-tiddlylink-shadow"" href=""https://projectify.wiki/demo.html#%24%3A%2Fplugins%2Fnico%2Fprojectify%2Fdoc%2FInstallation"">Installation for installation instructions in an existing wiki.
Documentation
<ul><li>If you are new to <strong>TiddlyWiki</strong>, we strongly encourage you to read the <a class=""tc-tiddlylink-external"" href=""https://tiddlywiki.com/#GettingStarted"" rel=""noopener noreferrer"" target=""_blank"">Getting started documentation.</li><li>The <strong>Projectify documentation</strong> is available <a class=""tc-tiddlylink tc-tiddlylink-shadow"" href=""https://projectify.wiki/demo.html#%24%3A%2Fplugins%2Fnico%2Fprojectify%2Fdoc%2FHelp"">online as well as locally when the plugin is installed.</li></ul>
Language packs
Projectify is currently available in English, Dutch, German, French, Spanish &amp; Simplified Chinese.
<ul><li>For the French language pack, install <a class=""tc-tiddlylink tc-tiddlylink-resolves"" href=""https://projectify.wiki/demo.html#%24%3A%2Fplugins%2Fnico%2Fprojectify-fr-FR"">$:/plugins/nico/projectify-fr-FR.</li><li>For the Dutch language pack, install <a class=""tc-tiddlylink tc-tiddlylink-resolves"" href=""https://projectify.wiki/demo.html#%24%3A%2Fplugins%2Fnico%2Fprojectify-nl-NL"">$:/plugins/nico/projectify-nl-NL.</li><li>For the German language pack, install <a class=""tc-tiddlylink tc-tiddlylink-resolves"" href=""https://projectify.wiki/demo.html#%24%3A%2Fplugins%2Fnico%2Fprojectify-de-DE"">$:/plugins/nico/projectify-de-DE.</li><li>For the Spanish language pack, install <a class=""tc-tiddlylink tc-tiddlylink-resolves"" href=""https://projectify.wiki/demo.html#%24%3A%2Fplugins%2Fnico%2Fprojectify-es-ES"">$:/plugins/nico/projectify-es-ES.</li><li>For the Simplified Chinese language pack, install <a class=""tc-tiddlylink tc-tiddlylink-resolves"" href=""https://projectify.wiki/demo.html#%24%3A%2Fplugins%2Fnico%2Fprojectify-zh-Hans"">$:/plugins/nico/projectify-zh-Hans.</li></ul>
Development setup
<ul><li>Install <a class=""tc-tiddlylink-external"" href=""https://nodejs.org/en/"" rel=""noopener noreferrer"" target=""_blank"">Node.js</li><li>In the root folder of the project run <code>npm install</code></li><li>To start the <a class=""tc-tiddlylink tc-tiddlylink-missing"" href=""https://projectify.wiki/demo.html#TiddlyWiki"">TiddlyWiki server, run <code>npm run serve</code>. The wiki is available at <a class=""tc-tiddlylink-external"" href=""http://localhost:8080"" rel=""noopener noreferrer"" target=""_blank"">http://localhost:8080.</li><li>To serve or build a specific language edition, refer to <code>package.json</code></li><li>To build HTML files for all editions, run <code>npm run build</code></li></ul>
Contributors
Many thanks to the following people who have contributed to Projectify:
<ul><li><a class=""tc-tiddlylink-external"" href=""https://github.com/OdinJorna"" rel=""noopener noreferrer"" target=""_blank"">@OdinJorna</li><li><a class=""tc-tiddlylink-external"" href=""https://github.com/kookma"" rel=""noopener noreferrer"" target=""_blank"">@Kookma</li><li><a class=""tc-tiddlylink-external"" href=""https://github.com/joebordes"" rel=""noopener noreferrer"" target=""_blank"">@Joebordes</li><li><a class=""tc-tiddlylink-external"" href=""https://github.com/silvyn"" rel=""noopener noreferrer"" target=""_blank"">@Silvyn</li><li><a class=""tc-tiddlylink-external"" href=""https://github.com/HueLiu"" rel=""noopener noreferrer"" target=""_blank"">@HueLiu</li><li><a class=""tc-tiddlylink-external"" href=""https://github.com/gregorfischer"" rel=""noopener noreferrer"" target=""_blank"">@gregorfischer</li></ul>"
4546,"buttercup,buttercup-desktop",":key: Cross-Platform Passwords & Secrets Vault. 
  
  
  
  
  


Cross-platform, free and open-source password manager based on NodeJS.
   
     

Buttercup is a password manager - an assistant for helping you store all of your login credentials. Buttercup helps you keep your accounts safe and assists you when you want to log in - all you need to do is remember just one password: your master password.
This is the Desktop application in the Buttercup suite, and there's also a mobile app and browser extension so that you can access your credentials anywhere. You store your credentials (login information) in a secure archive, which can then be stored on your own computer or any of our supported cloud services (like Dropbox, for example).
Archives are encrypted using the AES specification, and cannot be read by anyone besides those with the master password. Brute-force decryption is not technically possible. You should not share your archive with anyone, but rest assured: your contents are safe.
Many of us have 10s or 100s of accounts, and it would be crazy to secure these with 1 or 2 passwords. Why? If an attacker gains access to one of the systems you have an account with, your password there may be easily stolen - if an attacker gets this it's highly likely they will try to log in to other accounts you have with the same password. If you're using the same password on more than one site, you risk having several accounts stolen if any one of them is breached.
Buttercup helps you by remembering all of your passwords, and because you no longer have to remember them yourself, you can use different passwords for every single site.
Buttercup provides a secure way of storing your details, but it is only as secure as how you treat your master password and archive files.
Ensure that you never share your master password or use it anywhere other than with your archive. Never share or store your archive in a non-private environment. Always remember to make regular backups of your archive.
Head over to our website, or checkout the releases page to download different builds and versions.
If you're using macOS, you can also use Homebrew Cask to download and install Buttercup:
If you're using Windows, you can use Chocolatey to download and install Buttercup:
Buttercup is available for macOS (dmg), Windows (exe) and Linux (deb, rpm, tarball) (64bit only).
We actively support Buttercup on the following platforms:
MacOS (latest)
Windows 10
Ubuntu 18.04
Operating systems outside of these are not directly supported by staff - Issues will be followed on GitHub, however, and assistance provided where possible.
Buttercup is also available for Arch Linux (32/64bit) (AUR). This release channel is maintained by our community.
Some users have reported segmentation faults on Arch - if you notice a similar issue, perhaps check out this solution.
Buttercup supports portable builds on the following platforms:
Linux: AppImage
Portable versions for Windows and Mac will arrive in the not-so-distant future.
Buttercup uses a delta-system to manage archive changes and save conflicts. The archive, upon saving, is encrypted with AES 256bit CBC mode with a SHA256 HMAC. Encryption is performed once the password has been salted and prepared with PBKDF2 at between 200-250k iterations.
Because security with password storage is of the utmost importance, Buttercup will remain in alpha/beta release mode until some level of professional scrutiny has occurred. It is completely possible that security-related changes will occur, but this is inevitable and we handle every question and criticism with great care when it comes to the safety of using our software.
Buttercup supports loading and saving credentials archives both locally and remotely. Remote archives can be stored in a variety of service providers like Dropbox, Google Drive and WebDAV-enabled services, such as Yandex.
Archives store groups and entries in a simple hierarchy. Both groups and entries can be moved into other groups. Deleted items are trashed before being removed permanently.
Buttercup has basic merge conflict resolution when 2 changes are made at once on the file (locally or remote).
Buttercup can connect to WebDAV-based services for the purpose of remotely-accessing vault files. Most WebDAV services and services supporting WebDAV are compatible.
Please note that Buttercup does not support self-signed certificates.
You can import from other password managers (such as 1Password, Lastpass and KeePass) by opening your archive and choosing Import from the menu.
You can also export Buttercup vaults to CSV format.
Buttercup for Desktop supports the following languages:
English (Default)
Spanish
German
French
Russian
Farsi
Bahasa Indonesia
Italian
Brazilian Portuguese
Ukrainian
Hungarian
Czech
Dutch
Turkish
Polish
Finnish
Catalan
Simplified Chinese
Romanian
Korean
We welcome the addition of new languages to the Buttercup platform. Please follow the style of the current translations.
If adding languages that are more specific than usual (eg. ""pt_br"" - Brazilian Portuguese), ensure that you separate the parts by an underscore _ and not a dash.
If you're interested in developing Buttercup:
You will need some extra dependencies to build for different platforms on a single platform. Please refer to this guide and install required software for your platform.
To package the app and make installers for all supported platforms:
This may take a while depending on how fast your computer is. All apps and installers will be in app directory.
To package only for the current platform:
Or for a specific platform:
NB:
The above is a naive release process, without signing. To sign and release, as is the standard approach, run the following:
Where GH_TOKEN is your GitHub token, WIN_CSC_LINK is the location of the p12 code signing certificate and WIN_CSC_KEY_PASSWORD is the certificate password.
In case you need to access Buttercup logs, they are located in:
On Linux: ~/.config/Buttercup/log.log
On macOS: ~/Library/Logs/Buttercup/log.log
On Windows: %USERPROFILE%\AppData\Roaming\Buttercup\log.log
Sallar (@sallar)
Perry (@perry_mitchell)
This project exists thanks to all the people who contribute. Contribute.

We'd also like to thank:
Mohammad Amiri (Brand & Identity) (@pixelvisualize)
Arash Asghari (Brand & Identity) (@_arashasghari)
We welcome contributions. Please read Contribution Guide before sending a PR.
Thank you to all our backers! üôè [Become a backer]

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor]










Released under GNU/GPL Version 3"
4773,"EtherealEngine,etherealengine","Ethereal Engine - Bringing us together on the open social spatial web. ü§ñ üöÄ üëì üïπÔ∏è üßëüèø‚ÄçüöÄ. Manifest your dreams on the open social spatial web.
Table of Contents
Background
Demos
Project API
Library of EE Projects
Create your own projects
Launch Ethereal Engine with Control Center Install - RECOMMENDED
Use Metaverse Control Plane Managment GUI
Advanced Development Install
Pre-Requisites
Getting Started
Usage
Documentation
Contributing
Let's build it together
Join our Discord  
Sponsorship 
License
https://user-images.githubusercontent.com/507127/142818955-51d7757f-a432-45da-8f8f-56037358ad58.mp4
We (Ethereal Engine) believe that the Metaverse, 
Web AR, VR, and XR should be easy.
We want a Star Trek future where participating in immersive communication 
technology and shared simulations should be as easy and natural as making a website.
Includes a self-deployable platform, UI, worlds, avatars, and games
Fully customizable for any kind of game, social experience, event or spatial web app
User management, avatars and inventory with optional blockchain integration (see our Blockchain-in-a-Box repo)
Social features like chat, groups, friends, blocking and moderation
Complete world editing and administration
2D, 3D and XR Avatars with full inverse kinematics and facial expressions
Fully networked physics using Rapier Physics
Voice and video over WebRTC
Instant login and location sharing with phone number or email
Modular- Use the engine, server, client, editor and scalable devops infrastructure as needed
OAuth login with Facebook, Google, Steam, Github or instant login with email or phone
WebGL client deployable to iOS, Android and desktop
Free, open source, MIT and Apache 2.0-licensed
Guest Demos
Apartment - CCO from Sketchfab
Star Station - our dev coommunity hangout
Globe Concert Hall - collab with WildCapture.io
Host Demos 
Admin Console - Demo Cluster - Request Demo Access on our Discord
Ethereal Studio - Demo Cluster - Request Demo Access on our Discord
Create composable plug-ins for Ethereal Engine experiences with the Projects API
Best for simple self hosting, advanced editor content creation, and XRProject Pack Project development.
To install Ethereal Engine locally, the following pre-reqs are required.
Linux (many of us develop on Ubuntu), Mac OS X, or Windows (we recommend WSL2)
Node.js v16 or later (we recommend installing via nvm
or asdf.)
C++ (for node-gyp), Python >=3.6 + PIP, make
and other build tools, for compiling Mediasoup.
Although most of Ethereal Engine is written in TypeScript, it uses a Mediasoup
engine for WebRTC conferencing. See the Mediasoup install instructions
for more details.
Docker. (Although Docker is technically optional, running Ethereal Engine requires starting up
half a dozen different services, and using Docker Compose will make your life dramatically
easier.)
MariaDB and Redis. (If you're using Docker, containers for MariaDB and Redis 
will automatically be started up.)
See the Installation instructions
for more details.
General Ethereal Engine documentation
Auto-generated (tsdoc) API reference
Avatar, Scene & Asset Pipeline
Why are we building Ethereal Engine?
We expect contributors and community members to follow our
Code of Conduct.
See the Contributing Guide and corresponding
wiki entry
for more details.
Version numbering of the Ethereal Engine monorepo follows the
Semantic versioning approach.
We use the Prettier.io formatter for our code style.
Standard Readme for
the README structure.
We believe that projects like this are extremely complex and difficult, and can 
only be built when large groups of people work together, out in the open. If you 
believe that your calling is to build a free, open network that everyone, 
everywhere can get value from, then you are welcome in our community, and we'll 
do our best to get you set up.
We are always hiring talented people who want to be leaders in what is to come. 
Inquire with anyone who seems like they know what's going on and they'll help 
you find who you need to talk to.

MIT - Copyright (c) 2020-2022 Ethereal Engine team, formerly known as XREngine by XR Foundation
Release History and Author Archive"
4817,"uchuhimo,konf","A type-safe cascading configuration library for Kotlin/Java/Android, supporting most configuration formats. A type-safe cascading configuration library for Kotlin/Java/Android, supporting most configuration formats.
Type-safe. Get/set value in config with type-safe APIs.
Thread-safe. All APIs for config is thread-safe.
Batteries included. Support sources from JSON, XML, YAML, HOCON, TOML, properties, map, command line and system environment out of box.
Cascading. Config can fork from another config by adding a new layer on it. Each layer of config can be updated independently. This feature is powerful enough to support complicated situation such as configs with different values share common fallback config, which is automatically updated when configuration file changes.
Self-documenting. Document config item with type, default value and description when declaring.
Extensible. Easy to customize new sources for config or expose items in config.
JDK 8 or higher
tested on Android SDK 23 or higher
This library has been published to Maven Central and JitPack.
Konf is modular, you can use different modules for different sources:
konf-core: for built-in sources (JSON, properties, map, command line and system environment)
konf-hocon: for built-in + HOCON sources
konf-toml: for built-in + TOML sources
konf-xml: for built-in + XML sources
konf-yaml: for built-in + YAML sources
konf-git: for built-in + Git sources
konf: for all sources mentioned above
konf-js: for built-in + JavaScript (use GraalVM JavaScript) sources
Add JitPack repository to &lt;repositories&gt; section:
Add dependencies:
Add JitPack repository:
Add dependencies:
Add JitPack repository:
Add dependencies:
Define items in config spec:
Construct config with items in config spec and values from multiple sources:
or:
This config contains all items defined in ServerSpec, and load values from 4 different sources. Values in resource file server.json will override those in file server.yml, values from system environment will override those in server.json, and values from system properties will override those from system environment.
If you want to watch file server.yml and reload values when file content is changed, you can use watchFile instead of file:
Define values in source. You can define in any of these sources:
in server.yml:
in server.json:
in system environment:
in command line for system properties:
Retrieve values from config with type-safe APIs:
val server = Server(config[ServerSpec.host], config[ServerSpec.tcpPort])
 server.start()
Retrieve values from multiple sources without using config spec:
Config items is declared in config spec, added to config by Config#addSpec. All items in same config spec have same prefix. Define a config spec with prefix local.server:
If the config spec is binding with single class, you can declare config spec as companion object of the class:
The config spec prefix can be automatically inferred from the class name, leading to further simplification like:
or
Here are some examples showing the inference convention: Uppercase to uppercase, lowercase to lowercase, SuffixSpec to suffix, TCPService to tcpService.
The config spec can also be nested. For example, the path of Service.Backend.Login.user in the following example will be inferred as ""service.backend.login.user"":
There are three kinds of item:
Required item. Required item doesn't have default value, thus must be set with value before retrieved in config. Define a required item with description:
Or omit the description:
Optional item. Optional item has default value, thus can be safely retrieved before setting. Define an optional item:
Description can be omitted.
Lazy item. Lazy item also has default value, however, the default value is not a constant, it is evaluated from thunk every time when retrieved. Define a lazy item:
You can also define config spec in Java, with a more verbose API (compared to Kotlin version in ""quick start""):
Notice that the {} part in item declaration is necessary to avoid type erasure of item's type information.
Create an empty new config:
Or an new config with some initial actions:
Add multiple config specs into config:
Retrieve associated value with item (type-safe API):
Retrieve associated value with item name (unsafe API):
or:
Cast config to a value with the target type:
Check whether an item exists in config or not:
Check whether an item name exists in config or not:
Check whether all values of required items exist in config or not:
Throw exception if some required items in config don't have values:
Associate item with value (type-safe API):
Find item with specified name, and associate it with value (unsafe API):
Discard associated value of item:
Discard associated value of item with specified name:
Associate item with lazy thunk (type-safe API):
Find item with specified name, and associate it with lazy thunk (unsafe API):
Subscribe the update event of an item:
Subscribe the update event before every set operation:
or
Subscribe the update event after every set operation:
or
Cancel the subscription:
Export a read-write property from value in config:
Export a read-only property from value in config:
Use from to load values from source doesn't affect values in config, it will return a new child config by loading all values into new layer in child config:
All out-of-box supported sources are declared in DefaultLoaders, shown below (the corresponding config spec for these samples is ConfigForLoad):
These sources can also be manually created using their provider, and then loaded into config by config.withSource(source).
All from APIs also have their standalone version that return sources without loading them into the config, shown below:
Format of system properties source is same with that of properties source. System environment source follows the same mapping convention with properties source, but with the following name convention:
All letters in name are in uppercase
. in name is replaced with _
HOCON/JSON/properties/TOML/XML/YAML/JavaScript source can be loaded from a variety of input format. Use properties source as example:
From file: config.from.properties.file(""/path/to/file"")
From watched file: config.from.properties.watchFile(""/path/to/file"", 100, TimeUnit.MILLISECONDS)
You can re-trigger the setup process every time the updated file is loaded by watchFile(""/path/to/file"") { config, source -&gt; setup(config) }
From string: config.from.properties.string(""server.port = 8080"")
From URL: config.from.properties.url(""http://localhost:8080/source.properties"")
From watched URL: config.from.properties.watchUrl(""http://localhost:8080/source.properties"", 1, TimeUnit.MINUTES)
You can re-trigger the setup process every time the URL is loaded by watchUrl(""http://localhost:8080/source.properties"") { config, source -&gt; setup(config) }
From Git repository: config.from.properties.git(""https://github.com/uchuhimo/konf.git"", ""/path/to/source.properties"", branch = ""dev"")
From watched Git repository: config.from.properties.watchGit(""https://github.com/uchuhimo/konf.git"", ""/path/to/source.properties"", period = 1, unit = TimeUnit.MINUTES)
You can re-trigger the setup process every time the Git file is loaded by watchGit(""https://github.com/uchuhimo/konf.git"", ""/path/to/source.properties"") { config, source -&gt; setup(config) }
From resource: config.from.properties.resource(""source.properties"")
From reader: config.from.properties.reader(reader)
From input stream: config.from.properties.inputStream(inputStream)
From byte array: config.from.properties.bytes(bytes)
From portion of byte array: config.from.properties.bytes(bytes, 1, 12)
If source is from file, file extension can be auto detected. Thus, you can use config.from.file(""/path/to/source.json"") instead of config.from.json.file(""/path/to/source.json""), or use config.from.watchFile(""/path/to/source.json"") instead of config.from.json.watchFile(""/path/to/source.json""). Source from URL also support auto-detected extension (use config.from.url or config.from.watchUrl). The following file extensions can be supported:
You can also implement Source to customize your new source, which can be loaded into config by config.withSource(source).
Subscribe the update event before every load operation:
You can re-trigger the setup process by subscribing the update event after every load operation:
Cancel the subscription:
By default, Konf extracts desired paths from sources and ignores other unknown paths in sources. If you want Konf to throws exception when unknown paths are found, you can enable FAIL_ON_UNKNOWN_PATH feature:
Then config will validate paths from both the properties file and the JSON resource. Furthermore, If you want to validate the properties file only, you can use:
Path substitution is a feature that path references in source will be substituted by their values.
Path substitution rules are shown below:
Only quoted string value will be substituted. It means that Konf's path substitutions will not conflict with HOCON's substitutions.
The definition of a path variable is ${path}, e.g., ${java.version}.
The path variable is resolved in the context of the current source.
If the string value only contains the path variable, it will be replaced by the whole sub-tree in the path; otherwise, it will be replaced by the string value in the path.
Use ${path:-default} to provide a default value when the path is unresolved, e.g., ${java.version:-8}.
Use $${path} to escape the path variable, e.g., $${java.version} will be resolved to ${java.version} instead of the value in java.version.
Path substitution works in a recursive way, so nested path variables like ${jre-${java.specification.version}} are allowed.
Konf also supports all key prefix of StringSubstitutor's default interpolator. 
By default, Konf will perform path substitution for every source (except system environment source) when loading them into the config.
You can disable this behaviour by using config.disable(Feature.SUBSTITUTE_SOURCE_BEFORE_LOADED) for the config 
or source.disabled(Feature.SUBSTITUTE_SOURCE_BEFORE_LOADED) for a single source.
By default, Konf will throw exception when some path variables are unresolved. You can use source.substituted(false) manually to ignore these unresolved variables.
To resolve path variables refer to other sources, you can merge these sources before loading them into the config.
For example, if we have two sources source1.json and source2.properties,
source1.json is:
source2.properties is:
use:
We can resolve mysql://${base.user}:${base.password}@server:port as mysql://konf:passwd@server:port.
All of source/config/config spec support add prefix operation, remove prefix operation and merge operation as shown below:
Export all values in config as a tree:
Export all values in config to map in key-value format:
Export all values in config to hierarchical map:
Export all values in config to map in flat format:
Export all values in config to JSON:
Reload values from JSON:
Config can be saved to a variety of output format in HOCON/JSON/properties/TOML/XML/YAML/JavaScript. Use JSON as example:
To file: config.toJson.toFile(""/path/to/file"")
To string: config.toJson.toText()
To writer: config.toJson.toWriter(writer)
To output stream: config.toJson.toOutputStream(outputStream)
To byte array: config.toJson.toBytes()
You can also implement Writer to customize your new writer (see JsonWriter for how to integrate your writer with config).
Supported item types include:
All primitive types
All primitive array types
BigInteger
BigDecimal
String
Date and Time
java.util.Date
OffsetTime
OffsetDateTime
ZonedDateTime
LocalDate
LocalTime
LocalDateTime
Year
YearMonth
Instant
Duration
SizeInBytes
Enum
Array
Collection
List
Set
SortedSet
Map
SortedMap
Kotlin Built-in classes
Pair
Triple
IntRange
CharRange
LongRange
Data classes
POJOs supported by Jackson core modules
Konf supports size in bytes format described in HOCON document with class SizeInBytes.
Konf supports both ISO-8601 duration format and HOCON duration format for Duration.
Konf uses Jackson to support Kotlin Built-in classes, Data classes and POJOs. You can use config.mapper to access ObjectMapper instance used by config, and configure it to support more types from third-party Jackson modules. Default modules registered by Konf include:
Jackson core modules
JavaTimeModule in jackson-modules-java8
There are some optional features that you can enable/disable in the config scope or the source scope by Config#enable(Feature)/Config#disable(Feature) or Source#enabled(Feature)/Source#disable(Feature). You can use Config#isEnabled() or Source#isEnabled() to check whether a feature is enabled.
These features include:
FAIL_ON_UNKNOWN_PATH: feature that determines what happens when unknown paths appear in the source. If enabled, an exception is thrown when loading from the source to indicate it contains unknown paths. This feature is disabled by default.
LOAD_KEYS_CASE_INSENSITIVELY: feature that determines whether loading keys from sources case-insensitively. This feature is disabled by default except for system environment.
LOAD_KEYS_AS_LITTLE_CAMEL_CASE: feature that determines whether loading keys from sources as little camel case. This feature is enabled by default.
OPTIONAL_SOURCE_BY_DEFAULT: feature that determines whether sources are optional by default. This feature is disabled by default.
SUBSTITUTE_SOURCE_BEFORE_LOADED: feature that determines whether sources should be substituted before loaded into config. This feature is enabled by default.
Build library with Gradle using the following command:
Test library with Gradle using the following command:
Since Gradle has excellent incremental build support, you can usually omit executing the clean task.
Install library in a local Maven repository for consumption in other projects via the following command:
Since all sources are substituted before loaded into config by default, all path variables will be substituted now. You can use config.disable(Feature.SUBSTITUTE_SOURCE_BEFORE_LOADED) to disable this change.
After migrated to tree-based source APIs, many deprecated APIs are removed, including:
Source: all isXXX and toXXX APIs
Config: layer, addSource and withSourceFrom
After modularized Konf, hocon/toml/xml/yaml/git/watchGit in DefaultLoaders become extension properties/functions and should be imported explicitly.
For example, you should import com.uchuhimo.konf.source.hocon before using config.from.hocon; in Java, config.from().hocon is unavailable, please use config.from().source(HoconProvider.INSTANCE) instead.
If you use JitPack, you should use com.github.uchuhimo.konf:konf:&lt;version&gt; instead of com.github.uchuhimo:konf:&lt;version&gt; now.
APIs in ConfigSpec have been updated to support item name's auto-detection, please migrate to new APIs. Here are some examples:
val host = optional(""host"", ""0.0.0.0"") to val host by optional(""0.0.0.0"")
val port = required&lt;Int&gt;(""port"") to val port by required&lt;Int&gt;()
val nextPort = lazy(""nextPort"") { config -&gt; config[port] + 1 } to val nextPort by lazy { config -&gt; config[port] + 1 }
¬© uchuhimo, 2017-2019. Licensed under an Apache 2.0 license."
4664,"Frojd,Wagtail-Pipit","Pipit is a Wagtail CMS boilerplate which aims to provide an easy and modern developer workflow with a React-rendered frontend.. Pipit is a Wagtail CMS boilerplate which aims to provide an easy and modern developer workflow with a React-rendered frontend.
The benefit of using Pipit is that we can cherry-pick the best JavaScript tools and have a 
modern frontend stack while still not making the trade-off normally would by running our application completely headless.
Hot reloading
Server-Side Rendering
Page scaffolding
12-Factor App compliant
Docker development environment
Deploy scripts via Ansistrano
Orchestration using Ansible
Local SSL for development
Error reporting with Sentry
CI integration via Circle CI
Data-sync between environments
Make sure you have cookiecutter installed. If not run pip install cookiecutter (or via brew)
Run cookiecutter:
Fill in the questions and you are done!
We recommend you to start by checking out the Getting Started Guide. Otherwise, you can read up any of the following topics:
The current state of Django in combination with JavaScript frontend technologies is 
to either go for a headless solution where Django is only used as an admin and data-provider
via API, or a hybrid approach where the most parts of the site are classic Django in Django Template Language and complex frontend
components are built in React (or another frontend framework).
The cost of going for the headless approach is that you lose basically everything
that Django provides for HTTP-requests. Including session management, CSRF, 
security middlewares, routing, previews, etc.
The problem we have encountered with the hybrid approach is that as your project grows,
it gets really hard to keep track of where your views are declared. 
Is it in the JavaScript or in Django Template Language? Also, the way React is designed makes it really 
hard to share state between different React-instances and you have to rely on technologies such as Redux.
If you have ideas for improvement, please share your thoughts through an issue. We also welcome PR's
Issue Tracker: https://github.com/Frojd/Wagtail-Pipit/issues
Source Code: https://github.com/Frojd/Wagtail-Pipit
If you have any issues, please submit an issue and we will do our best to help you out."
4116,"htty,htty","htty is the HTTP TTY, a console application for interacting with web servers.. htty is a console application for interacting with web servers. It‚Äôs a fun way to explore web APIs and to learn the ins and outs of HTTP.
      
 

      
        
            
See what‚Äôs changed lately by reading the project history.
It couldn‚Äôt be much easier.
You‚Äôll need Ruby and RubyGems. It‚Äôs known to work well under OS X against Ruby v1.8.7, v1.9.2, v1.9.3, v2.0, v2.1, and v2.2.
Intuitive, Tab-completed commands and command aliases
Support for familiar HTTP methods GET, POST, PUT, and DELETE, as well as PATCH, HEAD, OPTIONS and TRACE
Support for HTTP Secure connections and HTTP Basic Authentication
Automatic URL-encoding of userinfo, paths, query-string parameters, and page fragments
Transcripts, both verbose and summary
Scripting via stdin
Dead-simple cookie handling and redirect following
Built-in help
The things you can do with htty are:
Build a request ‚Äî you can tweak the address, headers, cookies, and body at will
Send the request to the server ‚Äî after the request is sent, it remains unchanged in your session history
Inspect the server‚Äôs response ‚Äî you can look at the status, headers, cookies, and body in various ways
Review history ‚Äî a normal and a verbose transcript of your session are available at all times (destroyed when you quit htty)
Reuse previous requests ‚Äî you can refer to prior requests and copy them
Here are a few annotated htty session transcripts to get you started (terminal screenshots shown here are also available in textual form).
This simple example shows how to explore a read-only web service with htty.

You can point htty at a complete or partial web URL. If you don‚Äôt supply a URL, http://0.0.0.0/ (port 80) will be used. You can vary the protocol scheme, userinfo, host, port, path, query string, and fragment as you wish.
The htty shell prompt shows the address of the current request.
The get command is one of seven HTTP request methods supported. A concise summary of the response is shown when you issue a request.
You can follow redirects using the follow command. No request is made until you type a request command such as get or post.

You can tweak segments of the address at will. Here we are navigating the site‚Äôs path hierarchy, which you can do with relative as well as absolute pathspecs.

Here we add query-string parameters. Notice that characters that require URL encoding are automatically URL-encoded (unless they are part of a URL-encoded expression).
The headers-response and body-response commands reveal the details of a response.

There was some cruft in the web service‚Äôs response (a horizontal line, a passage reference, verse numbers, a copyright stamp, and line breaks). We eliminate it by using API options provided by the web service we‚Äôre talking to.
We do a Julia Child maneuver and use the address command to change the entire URL, rather than add individual query-string parameters one by one.
Exit your session at any time by typing quit or hitting Ctrl-D.
The next example demonstrates <i>htty</i>‚Äôs HTTP Secure support and cookies features, as well as how to review and revisit past requests.

The https:// scheme and port 443 imply each other, just as the http:// scheme and port 80 imply each other. If you omit the scheme or the port, it will default to the appropriate value.
Notice that when cookies are offered in a response, a bold asterisk (it looks like a cookie) appears in the response summary. The same cookie symbol appears next to the Set-Cookie header when you display response headers.

The cookies-use command copies cookies out of the response into the next request. The cookie symbol appears next to the Cookie header when you display request headers.

An abbreviated history is available through the history command. Information about requests in the history includes request method, URL, number of headers (and a cookie symbol, if cookies were sent), and the size of the body. Information about responses in the history includes response code, number of headers (and a cookie symbol, if cookies were received), and the size of the body.
Note that history contains only numbered HTTP request and response pairs, not a record of all the commands you enter.
The reuse command makes a copy of the headers and body of an earlier request for you to build on.
Now we‚Äôll look at <i>htty</i>‚Äôs HTTP Basic Authentication support and learn how to display unabbreviated transcripts of htty sessions.
Assume that we have the following Sinatra application listening on Sinatra‚Äôs default port, 4567.
This application expects GET and POST requests and responds in various contrived ways.

When you change the userinfo portion of the address, or the entire address, the appropriate HTTP Basic Authentication header is created for you automatically. Notice that characters that require URL encoding are automatically URL-encoded (unless they are part of a URL-encoded expression).
When userinfo is supplied in a request, a bold mercantile symbol ( @ ) appears next to the resulting Authorization header when you display request headers (see below).
Type body-set to enter body data, and terminate it by entering two consecutive blank lines, or by hitting Ctrl-D. The body will only be sent for POST and PUT requests. The appropriate Content-Length header is created for you automatically (see below).
Different response codes are rendered with colors that suggest their meaning:
Response codes between 200 and 299 appear <span style=""background-color: green; color: black; font-weight: bold; padding: 0 0.25em 0 0.25em;"">black on green</span> to indicate success
Response codes between 300 and 399 appear <span style=""background-color: darkblue; color: white; font-weight: bold; padding: 0 0.25em 0 0.25em;"">white on blue</span> to indicate redirection
Response codes between 400 and 499 appear <span style=""background-color: darkred; color: white; font-weight: bold; padding: 0 0.25em 0 0.25em;"">white on red</span> to indicate failure
Response codes between 500 and 599 appear <span style=""background-color: yellow; color: black; font-weight: bold; padding: 0 0.25em 0 0.25em; text-decoration: blink;"">flashing black on yellow</span> to indicate a server error

As with the abbreviated history demonstrated earlier, verbose history shows a numbered list of requests and the responses they elicited. All information exchanged between client and server is shown.
You can learn how to use htty commands from within htty.

The help command takes an optional argument of the abbreviated or full name of a command.
Report defects and feature requests on GitHub Issues.
Your patches are welcome, and you will receive attribution here for good stuff. Fork the official htty repository and send a pull request.
After cloning the repository, bin/setup to install dependencies. Then rake to run the tests. You can also bin/console to get an interactive prompt that will allow you to experiment.
To install this gem onto your local machine, bundle exec rake install. To release a new version, update the version number in lib/htty/version.rb, and then bundle exec rake release, which will create a Git tag for the version, push Git commits and tags, and push the .gem file to RubyGems.org.
Stay in touch with the htty project by following @get_htty on Twitter.
You can also get help in the #htty channel on Freenode.
The author, Nils Jonsson, owes a debt of inspiration to the http-console project.
Thanks to contributors (in alphabetical order):
Dillon Benson (dibenso)
Pascal Borreli (pborreli)
Rob Dawson (ephox-rob/rojotek)
Bo Frederiksen (bofrede)
Johannes Gorset (jgorset)
Alex Gusev (presskey)
Gabriele Lana (gabrielelana)
Carson McDonald (carsonmcdonald)
Sam Nguyen (dtjm)
Robert Pitts (rbxbx)
Matt Sanders (nextmat)
Pepijn Van Eeckhoudt (pepijnve)
Released under the MIT License."
3829,"C-JSN,D3-ID3","iD3: an Integrated Development Environment for D3.js. 

iD3 is an open-source, cross-platform desktop application geared to simplify data visualization with D3 for non-JavaScript and JavaScript data scientists and analysts. With our integrated Python based data management system and custom generated attribute controls, iD3 supports the full process from importing your data to exporting your final presentation.

  


Fork or download
Please make sure you have Python 3.6 installed.
Click here to install Python 3.6
Upload your own D3 code and see it visualized immediately on the Renderer. Modify your data visualization straight in the editor, or through the custom generated attribute controls to your right and see your changes reflected in the Renderer as you go.
Select a template from our library and start creating right away.
Export your finalized code to be used on your other projects!
Note: Refresh the Attribute Panel by clicking Generate Attr when you upload a new file or run a new template

  


Use your custom data processing algorithms on top of D3's built-in functions with our integrated Python based data management system. This system allows you to feed your .csv or .json files through your personal Python script and check your data in the print statement window before sending it back to the main application to render in your visualization.
Find us on www.d3-id3.com
Special thanks to Mike Bostock for creating D3.js  
Christian Pascual | Jeffrey Ma | Steve Meads | Naomi Lai"
4034,"increpare,PuzzleScript","Open Source HTML5 Puzzle Game Engine. Open Source HTML5 Puzzle Game Engine
Try it out at https://www.puzzlescript.net
Dev instructions here - https://groups.google.com/forum/#!searchin/puzzlescript/development/puzzlescript/yptIpY9hlng/cjfrOPy_4jcJ
The MIT License (MIT)
Copyright (c) 2013 Stephen Lavelle
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE."
4893,"sameera-madushan,Print-My-Shell","Python script wrote to automate the process of generating various reverse shells.. ""Print My Shell"" is a python script, wrote to automate the process of generating various reverse shells based on PayloadsAllTheThings and Pentestmonkey reverse shell cheat sheets.
Using this script you can easily generate various types of reverse shells without leaving your command line. This script will come in handy when you are playing CTF like challenges.   

Bash
Perl
Ruby
Golang
Netcat
Ncat
Powershell
Awk
Lua
Java
Socat
Nodejs
Telnet
Python
Please ‚≠êÔ∏è this repository if this project helped you!
Contributions of any kind welcome!

Print My Shell is made with ‚ô• by @__sa_miya__ and it is released under the MIT license.
Pentestmonkey Reverse Shell Cheat Sheet"
4638,"pixeldesu,surfbird","A Microblogging client built on Electron and Vue. 
  



  A microblogging client, built on Electron and Vue.js



  


 
Surfbird is in active development and far away from being usable. You can build it yourself or download one of the pre-releases, a working or stable experience is not guaranteed yet.
If you want to know about the architecture of Surfbird and how you can extend it with your own modules and services, there's an evergrowing set of documentation available for you!
Found a bug or want to contribute a feature to Surfbird? Check out the Contribution Guideline to know where to start and what you need to look for!
This project exists thanks to all the people who contribute. [Contribute].

Thank you to all our backers! üôè [Become a backer]

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor]










Surfbird is licensed under the MIT License
This project was generated from electron-vue using vue-cli. Documentation about this project can be found here."
4999,"mitmedialab,gobo","üí≠ Gobo: Your social media. Your rules.. Gobo is a responsive web-based social media aggregator with filters you can control. You can use Gobo to control what‚Äôs edited out of your feed, or configure it to include news and points of view from outside your usual orbit. Gobo aims to be completely transparent, showing you why each post was included in your feed and inviting you to explore what was filtered out by your current filter settings.
Try it out at https://gobo.social.
Gobo is a project of the MIT Center for Civic Media, at the MIT Media Lab.  It was created by Jasmin Rubinovitz, Alexis Hope, Rahul Bhargava and Ethan Zuckerman, with generous support from the Knight Foundation.
Gobo is a Flask-based server side, which uses React & Redux in the browser to render the UI.
Gobo uses Python 3.7.x.
Create config.py in server/config/ using the provided template to hold the right api keys and database url.
We manage different versions with pyenv. Install this with HomeBrew:
Then install the versions of Python we need:
For managing a virtual enviromnent with a specific version of python for our project, we use 
pyenv-virtualenv. Install this with homebrew as well
As noted in their readme, you'll need to add these two lines to your .bash_profile file (or you .profile file). Then open a new terminal session:
And then create a virtualenv for this project.  The name is important, because the .python-version file
refers to it so it loads automatically when you enter the directory (if eval ""$(pyenv virtualenv-init -)"" 
is in your .profile):
Install all requirements:
To set up the database run:
In another terminal window, cd to /client.
If you haven't already, install Node Version Manager.
Install and use version node version 10.13.0:
Install requirements and build static assets:
In development mode Gobo has multiple pieces you need to run:
The Flask server handles authentication and interactions between the client and the various APIs.
The Redis queue holds jobs for analyzing content with the plug-in algorithms, and requests to fetch posts.
Celery runs the workers to do things in the queue.
We use npm to run the front-end React code that drives the UI.
Run the Flask server locally:
In order to fetch posts from Facebook, Twitter, and Mastodon you need to run the redis-server and celery worker locally.  Open 2 new shell terminals. Then run:
And in the other one:
In another terminal window open cd to /client and then:
After that you should be able to see Gobo at localhost:5000
You need to set up three recurring tasks. The first adds tasks to the queue to fetch FB and Twitter posts for users that
have been using the system recently.  Run this every hour or so:
The second updates the posts from news organizations (used for the ""perspectives"" filter). Run this every 6 hours or so:
The third removes old posts (Gobo only tracks the posts within the last two weeks). Run this once a night:
To delete a specific user:
Documentation and tasks for creating and sharing rules found via the flask CLI:
You can choose to only allow signup to people that have a special password.  Add the following vars in config.py:
To remove the password just set LOCK_WITH_PASSWORD = False.
Edit the GA ID in client/app/index.js
When updating models that result in a table change (e.g. column added/removed), generate migrations with:
This will generate a new migration file in migrations/versions that should be added to version control.
Gobo is set up to deploy to containerized hosts like Heroku or Dokku.  Typically configuration is done with environment variables.  For now we've got a system that involves editing the config file on a local branch.  We'll get around to changing this eventually.
Create a new local branch called ""deploy"": git checkout -b deploy
Create a new app on the Heroku website, or with the command line in Dokku
Add the heroku/dokku remote to the GitHub repo
In ""deploy"" branch, edit .gitignore to not ignore config.py (make sure to also save a copy of config.py somewhere else on your computer)
On your host (Heroku/Dokku), add a database and a redis instance
Update config.py in the deploy branch to match the database and redis url
Push to that deploy remote: git push deploy deploy:master
!!! - Make sure to __not push this branch__ anywhere else!! as this contains sensitive data! - !!!
Edit client/app/constants/index.js and bump up the semantic version number before every release.  This shows up at the bottom of the About page.
A pre-commit hooks will run JavaScript linting (e.g. when you commit, linting will be run). You can try to automatically fix JavaScript linting errors by running:
Not all errors can be fixed this way and for more details about the linting error see eslint."
4439,"npm,rfcs","Public change requests/proposals & ideation. This document describes the RFC process for the npm
CLI, and provides a way for the Community & Open Source Team and the
wider community to have discussions about the features and direction of the
package manager! It is based on the WeAllJS RFC process and the Rust RFC process, and, by extension, the Yarn RFC process
The name itself is a reference to the IETF's Request For Comments process, and
basically involves a document or series of documents which are drafted,
reviewed, and eventually ratified (approved) by the npm team through discussion
among those interested, both within and outside of the npm team.
An RFC can propose any change to the npm CLI itself, and may include npm
registry changes meant to support that CLI change.
This RFC process replaces feature requests in the main npm repository, and
feature requests made there will be redirected to the RFCs repository.
Fork https://github.com/npm/rfcs
Copy accepted/0000-template.md into accepted/0000-your-rfc-name.md
Fill in and edit the template with your proposal
Submit a PR to the npm/rfcs repo
The official place for discussion for a proposed RFC is its pull request.
Anyone, both npm collaborators and non-collaborators, may participate in the
discussion and ask questions and provide (constructive) feedback. Keep in mind
that only npm collaborators are able to ratify the RFC itself, even if other
users can comment.
All discussions surrounding an RFC are covered by the npm Code of
Conduct. Please keep conversations
constructive, civil, and low-temperature. If tensions flare during discussion,
the npm team may, at its own discretion, moderate, remove, or
edit posts, as well as locking the discussion on that PR or the entire RFCs
repository.
An RFC is ratified when there is consensus among npm collaborators that it
should be accepted. Once all collaborators have become aware of the RFC and had
a chance to comment on it, the PR, along with the RFC, will be merged and the
RFC will be considered ratified.
Until an RFC is ratified, it's expected that its original author continue
discussing it and integrating feedback into the document until it's ready.
RFCs have a minimum 24 hour waiting period before being accepted or rejected.
Once an RFC has been reviewed on GitHub, with all interested collaborators
having an opportunity to review it, and at least one npm collaborator has signed
off on the changes, the PR will be accepted and all its connected changes
merged. There are two exceptions to the collaborator rule:
@isaacs is considered an npm collaborator even if not an active code contributor, and thus has the ability to veto any proposal.
The npm registry team has complete control over what registry changes happen and are not subject to the consensus process: they get to decide whether the registry side of a feature gets implemented, where, and how, but they otherwise are not considered collaborators.
If it's specifically requested, or if the npm team determines that the topic of
the RFC demands extra attention and care because of its potential impact, an
RFC's ""ratification period"" may be extended for as long as the participants and
admins feel is a reasonable length of time for consideration.
The RFC may be rejected altogether at the discretion of npm collaborators. They
may also be rejected if consensus has not been reached and discussion and
progress on the RFC itself remain inactive for too long.
Once an RFC is ratified, the npm team agrees to merge a corresponding PR
implementing the described changes, provided it passes a standard code review by
the maintainers. It is not a guarantee of implementation, nor does it
obligate the npm team itself to implement the requested changes. Actual
integration into the CLI may also be deferred to a later date, or a later
semver-major CLI release, at the npm collaborators' discretion. All the RFC does
is communicate the team's consensus to accept a change.
When the changes described in an RFC have been implemented and merged into the
relevant repository (and thus, due to be released), the corresponding RFC will
be moved from accepted/ to implemented/. If you'd like to implement an
accepted RFC, please make a PR in the appropriate repo and mention the RFC in
the PR. Feel free to do this even for work-in-progress code!
RFCs themselves cannot be modified after ratification, but new RFCs can be
proposed and ratified to amend or remove a change previously ratified through
the RFC process. These amendments will involve the exact same process as a
regular RFC."
4382,"mean-expert-official,fireloop.io","Modern Real-Time Platform by MEAN Expert. FireLoop is a NodeJS Real-Time Platform that allows you to build modern and complex applications by seamlessly integrating the amazing technologies from the MEAN Stack; Like the IBM's LoopBack, Google's Angular 2, Telerik's NativeScript 2 and Ionic 2 Frameworks.
FireLoop also provides you with exclusive modules that will allow you to automatically build your FireBase alike Real-Time APIs, Client SDKs, Statistics, Back and Front Ends development in TypeScript!!!.
By the way, it's cool and open source!!!
[Public Cheering in the Background]
Nice and easy setup.
1 command line tool for all (Server, Web Clients, Mobile Clients, SDK Builder).
Back and Front Ends in TypeScript.
LoopBack 2 and 3 Integration.
Angular 2 Integration.
NativeScript 2 Integration.
Ionic 2 Integration.
SDK Builder Integration.
Real-Time Integration.
You can read the complete documentation within the following Documentation Link
Thanks goes to these wonderful people (emoji key):
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->

This project follows the all-contributors specification. Contributions of any kind welcome!"
3694,"microsoft,RockPaperScissorsLizardSpock","Rock, Paper, Scissors, Lizard, Spock - Sample Application. page_type: sample
name: ""Rock, Paper, Scissors, Lizard, Spock""
urlFragment: azure-rock-paper-scissors
description: ""Rock, Paper, Scissors, Lizard, Spock is the geek version of the classic Rock, Paper, Scissors game.""
languages:
csharp
powershell
html
php
python
javascript
java
products:
azure-cosmos-db
azure-kubernetes-service
dotnet-core
azure-cognitive-services
vs
vs-code
azureDeploy: https://github.com/microsoft/RockPaperScissorsLizardSpock/blob/master/Deploy/arm/deployment.json

We are happy to announce the release of Rock, Paper, Scissors, Lizard, Spock sample application running in Azure presented at Microsoft Ignite 2019 by Scott Hanselman and friends. 

Rock, Paper, Scissors, Lizard, Spock is the geek version of the classic Rock, Paper, Scissors game. Rock, Paper, Scissors, Lizard, Spock is created by Sam Kass and Karen Bryla.
The Rock, Paper, Scissors, Lizard, Spock - Sample Application shows a multilanguage application built with Visual Studio and Visual Studio Code, deployed with GitHub Actions and running on Azure Kubernetes Service (AKS). The sample application also uses Machine Learning and Azure Cognitive Services (Custom Vision API). Languages used in this application include .NET, Node.js, Python, Java, and PHP.
Missed the keynote session? Watch it here.

Play the game hosted in our Azure Subscription: https://RockPaperScissorsLizardSpock.dev

Get everything that you need to deploy the code and run in your subscription.
Application Screens
Application Diagram  
Getting Started 
Deployment scenarios
Deploy RPSLS using one script
Deploy RPSLS step by step
Swag
Feedback
Contributing




This a multilanguage application running on AKS with AI embedded. There are 5 bots (.NET, NodeJS, Python, Java and PHP) the user can select a language as the opponent and both, the user and the bot will have to select an object to play. The Game Manager which is a .NET API decides who wins based on the logic of the game. If the user is authenticated using Twitter the bots will call a predictor AI Model (Python Azure Function), this model learns from the selections of the objects that the user have done based on the history (stored in a Cosmos DB) to try to predict their next move. If the user is not authenticated the bots will select a random object. There is also a TensorFlow model created with Custom Vision to allow the user to play with their hands by using the webcam.
You will need Visual Studio 2019 on Windows 10.
You will need Docker Desktop.
If you want to deploy this solution in Azure:
You will need and Azure Subscription in order to deploy this.
Azure CLI.
Download and install helm.
You will need an Azure subscription to work with this demo code. You can:
Open an account for free Azure subscription. You get credits that can be used to try out paid Azure services. Even after the credits are used up, you can keep the account and use free Azure services and features, such as the Web Apps feature in Azure App Service.
Activate Visual Studio subscriber benefits. Your Visual Studio subscription gives you credits every month that you can use for paid Azure services.
Create an Azure Student Account and get free credit when you create your account.
Learn more about it with Microsoft Learn - Introduction to Azure.
You can either go through all steps and customizing its configuration or run one single command.
Execute the script located in Deploy folder with the following parameters:
resourceGroup: The name of your resource group where all infrastructure will be created Required
location: Select where you want to create your resource group, for example: eastus Required
clientId: Id of the service principal used to create the AKS Optional
password: Password of the service principal Optional
subscription: Id of your subscription where you are going to deploy your resource group Required
If service principal credentials are not passed a new one will be created.
To run RPSLS you need to create the Azure infrastructure. There are two ways to do it. Using Azure portal or using a Powershell script.
An ARM template is provided so you can create the whole infrastructure required for RPSLS

servicePrincipalId: Id of the service principal used to create the AKS Required
servicePrincipalSecret: Password of the service principal Required
aksVersion: AKS version to use. Required
The deployment could take more than 10 minutes, and once finished all needed resources will be created.
You can use the CLI to deploy the ARM script. Open a Powershell window from the /Deploy folder and run the Deploy-Arm-Azure.ps1 with following parameters:
-resourceGroup: Name of the resource group Required
-location: Location of the resource group Required if resourceGroup does not exist
-clientId: Id of the service principal used to create the AKS Optional
-password: Password of the service principal Optional
If service principal credentials are not passed a new one will be created.
Once script finishes, everything is installed. If a service principal has been created, the script will output the service principal details - please, take note of the appId and password properties for use them in the AKS deployment
Pre-requisites for this deployment are to have:
The AKS and all related resources deployed in Azure
A terminal with Powershell environment
Azure CLI 2.0 installed.
Kubectl installed with the last version (v1.16.0 at this moment).
Helm 3 installed with 3.0 or superior version (v3.0.0 at this moment).
Docker installed
A Service Principal is needed for creating the AKS. If you use the CLI for create the resources. You need the client id and password of a Service Principal to install RPSLS.
In case you use Azure Portal for the resources' creation, you can also reuse a SP or create manually a new one for passing the credentials to the template.
From the terminal type:
az login and follow instructions to log into your Azure.
If you have more than one subscription type az account list -o table to list all your Azure subscriptions. Then type az account set --subscription &lt;subscription-id&gt; to select your subscription
az aks get-credentials -n &lt;your-aks-name&gt; -g &lt;resource-group-name&gt; to download the configuration files that kubectl needs to connect to your AKS.
At this point if you type kubectl config current-context the name of your AKS cluster should be displayed. That means that kubectl is ready to use your AKS
Before deploying services using Helm, you need to setup the configuration. We refer to the configuration file with the name of gvalues file. This file contains all secrets so beware to not commit in your repo accidentally.
A template of this file is in powershell/gvalues.template. The deployment scripts use this file by default, but do not rely on editing this file. Instead create a copy of it a folder outside the repository and use the -valuesFile parameter of the deployment script.
Note: The folder /Deploy/helm/__values/ is added to .gitignore, so you can keep all your configuration files in it, to avoid accidental pushes.
Please refer to the comments of the file for its usage.
Generating a valid gvalues file can be a bit harder, so there is a Powershell script that can do all work by you. This script assumes that all resources are deployed in the same resource group, and this resource group contains only the RPSLS resources. Also assumes the Azure resources have been created using the tools provided in this repo.
Note The Generate-Config.ps1 uses the application-insights CLI extension to find the application insights id. Install it with az extension add --name application-insights
Note The configuration script requires the function key so internal aks services can call it, so before executing the Generate-Config.ps1 make sure that its already in azure.
To auto-generate your gvalues file just go to /Deploy/powershell folder and from a Powershell window, type the following:
The Generate-Config.ps1 script accepts so many parameters. Here you can find a list of them all.
The script checks that all needed resources exists in the resource group. If some resource is missing or there is an unexpected resource, the script exits.
You can manually use docker-compose to build and push the images to the ACR. If using compose you can set following environment variables:
TAG: Will contain the generated docker images tag
REGISTRY: Registry to use. This variable should be set to the login server of the ACR
Once set, you can use docker-compose build and docker-compose push to build and push the images.
Additionally there is a Powershell script in the Deploy folder, named Build-Push.ps1. You can use this script for building and pushing ALL images to ACR. Parameters of this script are:
resourceGroup: Resource group where ACR is. Required.
acrName: ACR name (not login server). Required.
dockerTag: Tag to use for generated images (defaults to latest)
dockerBuild: If $true (default value) docker images will be built using docker-compose build.
dockerPush: If $true (default value) docker images will be push to ACR using docker-compose push.
This script uses az CLI to get ACR information, and then uses docker-compose to build and push the images to ACR.
To build and push images tagged with v1 to a ACR named my-acr in resource group named my-rg, execute the following command inside /Deploy/powershell
To just push the images (without building them before):
You need to use Powershell and run ./Deploy-Images-Aks.ps1. A typical call is:
Note: Read the documentation of this script for a list of all parameters.
This script will install all services using Helm and your custom configuration from the configuration file set by -valuesFile parameter.
The parameter charts allow for a selective installation of charts. Is a list of comma-separated values that mandates the services to deploy in the AKS. Values are:
cs C# Player.
nj NodeJS Player.
py Python Player.
php PHP Player.
jv Java Player.
web Website
gm Game Manager
We distributed some swag after the keynote session at Ignite (t-shirts, stickers and pins) but we had a limited amount so it made sense to open up the logo for swag.

Help us improve this sample application with your valuable feedback by filling up this survey.

If you prefer you can also send us an email with your feedback.
This project welcomes contributions and suggestions. Most contributions require you to agree to a
Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us
the rights to use your contribution. For details, visit https://cla.microsoft.com.
When you submit a pull request, a CLA-bot will automatically determine whether you need to provide
a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions
provided by the bot. You will only need to do this once across all repos using our CLA.
This project has adopted the Microsoft Open Source Code of Conduct.
For more information see the Code of Conduct FAQ or
contact opencode@microsoft.com with any additional questions or comments."
3901,"elixirs,faker","Faker is a pure Elixir library for generating fake data.. Faker is a pure Elixir library for generating
fake data.
add {:faker, ""~&gt; 0.13""} to your deps in mix.exs:
run:
add Faker.start() to test/test_helper.exs:
jump to usage examples.
OTP 18+
Elixir 1.4+
See documentation and usage examples.
If you get a message like the one below when you call Faker.Address.city/0,
you need to add :faker to your application's mix file, in the applications
function, as above.
Faker was designed as a lightweight library, that's why it can be easily used
with other tools.
You can build templates for testing purposes with the
Blacksmith project. See the Blacksmith
readme for details.
Faker was originally written by Igor Kapkov.
Current list of maintainers:

Released under the MIT License."
3683,"pulumi,pulumi","Pulumi - Universal Infrastructure as Code. Your Cloud, Your Language, Your Way üöÄ. 
    







    

Pulumi's Infrastructure as Code SDK is the easiest way to create and deploy cloud software that use
containers, serverless functions, hosted services, and infrastructure, on any cloud.
Simply write code in your favorite language and Pulumi automatically provisions and manages your
AWS,
Azure,
Google Cloud Platform, and/or
Kubernetes resources, using an
infrastructure-as-code approach.
Skip the YAML, and use standard language features like loops, functions, classes,
and package management that you already know and love.
For example, create three web servers:
Or a simple serverless timer that archives Hacker News every day at 8:30AM:
Many examples are available spanning containers, serverless, and infrastructure in
pulumi/examples.
Pulumi is open source under the Apache 2.0 license, supports many languages and clouds, and is easy to extend.  This
repo contains the pulumi CLI, language SDKs, and core Pulumi engine, and individual libraries are in their own repos.

Getting Started: get up and running quickly.
Tutorials: walk through end-to-end workflows for creating containers, serverless
functions, and other cloud services and infrastructure.
Examples: browse a number of useful examples across many languages,
clouds, and scenarios including containers, serverless, and infrastructure.
Reference Docs: read conceptual documentation, in addition to details on how
to configure Pulumi to deploy into your AWS, Azure, or Google Cloud accounts, and/or Kubernetes cluster.
Community Slack: join us over at our community Slack channel.  Any and all
discussion or questions are welcome.
Roadmap: check out what's on the roadmap for the Pulumi
project over the coming months.
See the Get Started guide to quickly get started with
Pulumi on your platform and cloud of choice.
Otherwise, the following steps demonstrate how to deploy your first Pulumi program, using AWS
Serverless Lambdas, in minutes:
Install:
To install the latest Pulumi release, run the following (see full
 installation instructions for additional installation options):
Create a Project:
After installing, you can get started with the pulumi new command:
The new command offers templates for all languages and clouds.  Run it without an argument and it'll prompt
 you with available projects.  This command created an AWS Serverless Lambda project written in JavaScript.
Deploy to the Cloud:
Run pulumi up to get your code to the cloud:
This makes all cloud resources needed to run your code.  Simply make edits to your project, and subsequent
 pulumi ups will compute the minimal diff to deploy your changes.
Use Your Program:
Now that your code is deployed, you can interact with it.  In the above example, we can curl the endpoint:
Access the Logs:
If you're using containers or functions, Pulumi's unified logging command will show all of your logs:
Destroy your Resources:
After you're done, you can remove all resources created by your program:
To learn more, head over to pulumi.com for much more information, including
tutorials, examples, and
details of the core Pulumi CLI and programming model concepts.
See Supported Clouds for the
full list of supported cloud and infrastructure providers.
Please See CONTRIBUTING.md
for information on building Pulumi from source or contributing improvements."
3612,"akaJes,marlin-config","Marlin firmware instant configurator. This is a help tool, intended for easy configuration of Marlin firmware
supported OS: Linux,Mac,Windows

instant changing of Configuration*.h files
quick help for Marlin options and G-codes
compilation and uploading your customized firmware
console for access to serial ports
collaborative editor for whole project
share your configuration on the site
automatical installer for PlatformIO
automatically clone repository from Marlin github if you don't have it
instant changing of Configuration*.h files
allow to filter only changed options overall and for each section
show help for all options
show help for G-codes
show allowed options/gcodes depend to your configuration
auto search options in Marlin github issues
reset configuration changes
switch between releases/branches and update git repository from github
switch or load provided examples of configuration
upload your old configuration over current from Configuration files
compile and upload the firmware to your device via PlatformIO Core
access to all serial ports using console manager (with auto ports changing detection)
simple 3D tool for positioning printer head in console manager
snippets allow compose the BootScreen, calculate a step values for various stepper motors
quick navigation with a right sided menu
create an issue on Marlin github with your configuration
share your configurator access via LAN or WAN (with changes log)
stepper motors calculators (belt driven, screw driven, extruder)
startup bootscreen preview
custom bootscreen editor
sharing your connection with UPnP helper with QRcodes
using your phone as webcam
in project used documentation from MarlinDocumentation
We provide prebuilt binaries for macOS, Linux 32 / 64 and Windows 32 / 64. This is the latest release.
PlatformIO Core (optional)
After run appears a File dialog and asks to open any empty folder (then will be cloning for last version of marlin from github) or folder with the Marlin git repository

sudo npm -g i marlin-conf
some hints for Windows-Installation
PlatformIO Core (optional)
Warning! Please install 99-platformio-udev.rules and check that your board's PID and VID are listed in the rules.
https://raw.githubusercontent.com/platformio/platformio/develop/scripts/99-platformio-udev.rules
open terminal in an empty folder or in a folder with Marlin repository and type
mct and confirm action

In clean/unchanged configuration you can change current release version
You can drag in browser your Configuration*.h files
command interface:
creating file for issue publication mct git 1.1.0-RC7 txt (compare 1.1.0-RC7 release with your current files in folder and create readable text file)
migrate configuration:
with one command you can create .json files with your personal states/values/comments for each #define
example: mct git 1.1.0-RC7 json (compare 1.1.0-RC7 release with your current files in folder and create .json)
than copy .json files to another folder or change git branch
recover your configuration
example: mct git 1.1.0-RC8 h (use 1.1.0-RC8 release and add your stored in .json configuration)"
4535,"vercel,swr","React Hooks for Data Fetching. 
  <a aria-label=""Vercel logo"" href=""https://vercel.com"">
    
  
  
  <a aria-label=""NPM version"" href=""https://www.npmjs.com/package/swr"">
    
  
  <a aria-label=""Package size"" href=""https://bundlephobia.com/result?p=swr"">
    
  
  <a aria-label=""License"" href=""https://github.com/vercel/swr/blob/main/LICENSE"">
    
  


SWR is a React Hooks library for data fetching.
The name ‚ÄúSWR‚Äù is derived from stale-while-revalidate, a cache invalidation strategy popularized by HTTP RFC 5861.
SWR first returns the data from cache (stale), then sends the request (revalidate), and finally comes with the up-to-date data again.
With just one hook, you can significantly simplify the data fetching logic in your project. And it also covered in all aspects of speed, correctness, and stability to help you build better experiences:
Fast, lightweight and reusable data fetching
Transport and protocol agnostic
Built-in cache and request deduplication
Real-time experience
Revalidation on focus
Revalidation on network recovery
Polling
Pagination and scroll position recovery
SSR and SSG
Local mutation (Optimistic UI)
Built-in smart error retry
TypeScript
React Suspense
React Native
...and a lot more.
With SWR, components will get a stream of data updates constantly and automatically. Thus, the UI will be always fast and reactive.
View full documentation and examples on swr.vercel.app.

In this example, the React Hook useSWR accepts a key and a fetcher function.
The key is a unique identifier of the request, normally the URL of the API. And the fetcher accepts
key as its parameter and returns the data asynchronously.
useSWR also returns 2 values: data and error. When the request (fetcher) is not yet finished,
data will be undefined. And when we get a response, it sets data and error based on the result
of fetcher and rerenders the component.
Note that fetcher can be any asynchronous function, you can use your favourite data-fetching
library to handle that part.
View full documentation and examples on swr.vercel.app.

This library is created by the team behind Next.js, with contributions from our community:
Shu Ding (@shuding_) - Vercel
Guillermo Rauch (@rauchg) - Vercel
Joe Haddad (@timer150) - Vercel
Paco Coursey (@pacocoursey) - Vercel
Thanks to Ryan Chen for providing the awesome swr npm package name!

The MIT License."
4428,"mikeal,roll-call","üìû Free and reliable audio calls for everyone w/ browser p2p.. Roll Call is a completely freeüéâ voice chat service with podcast
quality recording.

  
    
  


Go ahead and use it: rollcall.audio

Features Include:
Multi-party realtime audio calls.
Drag & Drop File Sharing.
Podcast quality recording.
We record each participant locally and send you the audio via the
data channel instead of recording the compressed and often low quality
realtime audio.
For more information on how to use Roll Call check out the
FAQ.
Roll Call is entirely Open Source and can be embedded into your own web pages
and web applications.
Roll Call only works in last few releases of
Chrome & Brave. This is not due to lack of testing or development work but
because of bugs in Safari and Firefox. Roll Call sits at the intersection of
browser audio and WebRTC support, it's a minefield for finding bugs burried
deep in browser implementations. Even supporting Chrome takes some hacks.
Roll Call can easily be embedded on your own website. The easiest way is
with a script include.
Roll Call uses WebComponents. This means that you can use it like
any other HTML element and manipulate its state with JavaScript.
Or, if you want to build it into the JavaScript bundle for your own app
you can do so easily, but you'll need to handle loading a WebComponents
polyfill for most browsers on your own.
Once you require the script the elements are registered so you could also
do something like this.
Download the code and run npm install.
If you want to do development run:
Roll Call is built and deployed automatically:
rollcall.audio runs the stable branch.
rollcall.audio/staging runs the latest code on master."
3966,"firebase,firebase-admin-node","Firebase Admin Node.js SDK. Firebase provides the tools and infrastructure
you need to develop your app, grow your user base, and earn money. The Firebase
Admin Node.js SDK enables access to Firebase services from privileged environments
(such as servers or cloud) in Node.js.
For more information, visit the
Firebase Admin SDK setup guide.
The Firebase Admin Node.js SDK is available on npm as firebase-admin:
To use the module in your application, require it from any JavaScript file:
If you are using ES2015, you can import the module instead:
Please refer to the CONTRIBUTING page for more information
about how you can contribute to this project. We welcome bug reports, feature
requests, code review feedback, and also pull requests.
We support Node.js 8.13.0 and higher.
Please also note that the Admin SDK should only
be used in server-side/back-end environments controlled by the app developer.
This includes most server and serverless platforms (both on-premise and in
the cloud). It is not recommended to use the Admin SDK in client-side
environments.
Thanks to the team at Casetext for transferring
ownership of the firebase-admin npm module over to the Firebase team
and for their longtime use and support of the Firebase platform.
Firebase Admin Node.js SDK is licensed under the
Apache License, version 2.0.
Your use of Firebase is governed by the
Terms of Service for Firebase Services."
4280,"EvanBacon,Expo-Voxel","üéÆüå≥ Voxel Terrain made in React Native. ‚àõ. Watch the video tutorial: Youtube üëç

Voxel Terrain by Mr. Doob
Expo Team"
4557,"choojs,bankai",":station: - friendly web compiler. The easiest way to compile JavaScript, HTML and CSS.
We want people to have fun building things for the web. There should be no
hurdles between a great idea, and your first prototype. And once you're ready,
it should be easy to package it up and share it online. That's Bankai: a tool
that helps you build for the web. No configuration, and no hassle - that's our
promise.
If this is your first time building something for the web, take a look at
choojs/create-choo-app to help get
a project setup from scratch :sparkles:.
When you first open up your application in a browser, you'll probably see a
warning page about HTTPS connections being untrusted. No worries, this is
entirely expected behavior. Follow the instructions below to solve this for
your browser.
<details>
  <summary>
    <b>How does this work?</b>
  </summary>
  For HTTPS to run on <code>localhost</code>, we must sign a TLS certificate
  locally. This is better known as a ""self-signed certificate"". Browsers
  actively check for certificates from uknown providers, and warn you (for good
  reason!) In our case, however, it's safe to ignore.

  HTTPS is needed for an increasing amount of APIs to work in the browser. For
  example if you want to test HTTP/2 connections or use parts of the storage
  API, you have no choice but to use an HTTPS connection on localhost. That's
  why we try and make this work as efficiently, and securely as possible.

  We generate a unique certificate for each Bankai installation. This means
  that you'll only need to trust an HTTPS certificate for Bankai once. This
  should be secure from remote attackers, because unless they have successfully
  acquired access to your machine's filesystem, they won't be able to replicate
  the certificate.
</details>

<details>
  <summary>
    <b>Firefox Instructions</b>
  </summary>
  Step 1

  A wild security screen appears!. Click on ""advanced"".
  

  Step 2
  More details emerge! Click on ""Add Exception"".
  

  Step 3
  In the dropdown click ""Confirm Security Exception"".
  

  Step 4
  Success!
  
</details>

<details>
  <summary>
    <b>Chrome Instructions</b>
  </summary>
  Click the ""more details"" dropdown, then click ""proceed"". Pull Request for
  screenshots welcome!
</details>

<details>
  <summary>
    <b>Safari Instructions</b>
  </summary>
  Step 1
  A wild security screen appears! Click ""Show Certificate"".
  

  Step 2
  More details emerge! Check ""Always trust 'localhost'‚Ä¶"".
  

  Step 3
  The box is checked! Click ""Continue"".
  

  Step 4
  A box is asking you for your crendentials. Fill them in, and hit ""Enter"".

  Step 5
  Success!
  
</details>

Bankai applies lots of optimizations to projects. Generally you won't need to
care how we do this: it's lots of glue code, and not necessarily pretty. But it
can be useful to know which optimizations we apply. This is a list:
nanohtml: Optimize choo HTML code so it runs significantly faster in the
browser.
glslify: Adds a module system to GLSL shaders.
brfs: Statically inline calls to fs.readFile(). Useful to ship assets
in the browser.
envify: Allow environment variables to be used in the bundle. Especially
useful in combination with minification, which removes unused code paths.
split-require: Lazy load parts of your application using the
require('split-require') function.
babelify: Bring the latest browser features to all browsers. See
our babel section for more details.
And bankai uses tinyify, which adds the following optimizations:
browser-pack-flat: Remove function wrappers from the bundle, making
the result faster to run and easier to minify.
bundle-collapser: Remove all pathnames from inside the bundle, and
replace them with IDs. This not only makes bundles smaller, it prevents
details from your local dev setup leaking.
common-shakeify: Remove unused JavaScript code from the bundle. Best
known as dead code elimination or tree shaking.
unassertify: Remove all require('assert') statements from the code.
Only applied for production builds.
uglifyify: Minify the bundle.
sheetify: extract all inline CSS from JavaScript, and include it in
bundle.js.
purifyCSS: removes unused CSS from the project.
cleanCSS: minify the bundle.
inline-critical-css: extract all crititical CSS for a page into the
&lt;head&gt; of the document. This means that every page will be able to render
after the first roundtrip, which makes for super snappy pages.
async load scripts: loads scripts in the background using the
defer attribute.
async load styles: loads styles in the background using the
preload attribute.
async load styles: preloads fonts in the background using the
preload attribute.
server render: server renders Choo applications. We're welcome to
supporting other frameworks too. PRs welcome!
manifest: includes a link to manifest.json so the application can be
installed on mobile.
viewport: defines the right viewport dimensions to make applications
accessible for everyone.
theme color: sets the theme color defined in manifest.json so the
navigator bar on mobile is styled on brand.
title: sets the right title on a page. Either extracts it from the
application (choo only, for now) or uses whatever the title is in
manifest.json.
live reload: during development, we inject a live reload script.
The Bankai CLI doesn't take any flags, other than to manipulate how we log to
the console. Configuring Bankai is done by modifying package.json.
Bankai is built on three technologies: browserify,
sheetify, and documentify. Because these can be
configured inside package.json it means that Bankai itself can be configured
from there too. Also if people ever decide to switch from the command line to
JavaScript, no extra configuration is needed.
By default, Bankai starts with an empty HTML document, injecting the tags
mentioned above. You can also create a custom template as index.html,
and Bankai will inject tags into it instead.
If you export your Choo app instance after doing .mount(), Bankai respects the
mount location during server side rendering:
You might be looking to use some of the fantastic third party libraries or tools out there. Take the font-awesome library for example, but there are plenty of others. To do so, you typically need to include additional css or js libraries in your &lt;head&gt;. And you can do this by setting up your documentify transform.
In this example, you will need to add a ""documentify"" transform which specifies a js file used, but you will also need a couple of extra npm libraries which you can install with:
Now in package.json, add the following transform:
In this example, we are storing the transform in a folder called lib, which you will need to create, and create a document.js file in it. Edit the file called document.js and put the following transform code in it:
This example now enables Bankai to generate an index.html file which has a link to the font-awesome css cdn, a manifest.json file, and a favicon.ico file ready for deployment.
Bankai comes with support for service workers. You can place a service worker
entry point in a file called sw.js or service-worker.js. Bankai will output
a browserify bundle by the same name.
You can easily register service workers using
choo-service-worker:
choo-service-worker defaults to /sw.js for the service worker file name. If
you named your service worker service-worker.js instead, do:
Service workers have access to some environment variables:
process.env.STYLE_LIST: An array of URLs to stylesheet files.
process.env.SCRIPT_LIST: An array of URLs to script files.
process.env.ASSET_LIST: An array of URLs to assets.
process.env.DOCUMENT_LIST: An array of URLs to server-rendered routes.
process.env.MANIFEST_LIST: An array containing the URL to the manifest
file.
process.env.FILE_LIST: An array of URLs to assets and routes. This can
be used to add all your app's files to a service worker cache.
Bankai can be hooked up directly to an HTTP server, which is useful when
working on full stack code.
Not all browsers support all of the Web Platform's features. So in order to use
newer features on older browsers, we have to find a solution. The best solution
out there at the moment is Babel.
Babel is a plugin-based JavaScript compiler. It takes
JavaScript in, and outputs JavaScript based for the platforms you've decided to
target. In Bankai we target the last 2 versions of FireFox, Chrome and Edge,
and every other browser that's used by more than 1% of people on earth. This
includes IE11. And if you have different opinions on which browsers to use,
Bankai respects .babelrc and .browserslistrc files.
Some newer JavaScript features require loading an extra library; async/await
being the clearest example. To enable such features, the babel-polyfill
library needs to be included in your application's root (e.g. index.js).
We don't include this file by default in Bankai, because it has a significant
size overhead. Once Babel includes only the language features you're using,
we'll work to include babel-polyfill by default.
Whenever an internal error occurs.
Whenever a change in the internal graph occurs.
Create a new bankai instance. Takes a path to a JavaScript file as the first
argument. The following options are available:
opts.quiet: Defaults to false. Don't output any data to stdout. Useful
if you have your own logging system.
opts.watch: Defaults to true. Watch for changes in the source files and
rebuild. Set to false to get optimized bundles.
babelifyDeps: Defaults to true. Transform dependencies with babelify.
Output an HTML bundle for a route. Routes are determined based on the project's
router. Pass '/' to get the default route.
opts.state: Will be passed the render function for the route, and inlined
in the &lt;head&gt; of the body as window.initialState.
Pass in a filename and output a JS bundle.
Output any other file besides JS, CSS or HTML.
Output a CSS bundle.
Output a manifest.json.
Output a service worker.
Close all file watchers.
Apache License 2.0"
4455,"nitin42,Making-a-custom-React-renderer","Tutorial on how to make a custom React renderer. Let's make a custom React renderer üòé

  


This is a small tutorial on how to build your custom React renderer and render the components to the host environment you need. The tutorial is divided into three parts -
Part 1 - Creating a React reconciler (using react-reconciler package).
Part 2 - Creating a public interface to the reconciler i.e ""Renderer"".
Part 3 - Creating a render method to flush everything to the host environment we need.
In part one, we will create a React reconciler using the react-reconciler package. We will implement the renderer using Fiber as it has a first-class renderer API for creating custom renderer.
In part two, we will create a public interface to the reconciler i.e a renderer. We will create a custom method for createElement and will also architect the component API for our example.
In part three, we will create a render method which will render our input component.
We will create a custom renderer that will render a React component to a word document. I've already made one. Full source code and the documentation for that is available here.
We will use officegen for this. I'll explain some of it's basic concepts here.
Officegen can generate Open Office XML files for Microsoft Office 2007 and later. It generates a output stream and not a file.
It is independent of any output tool.
Creating a document object
Generating output stream
Events
finalize - It is fired after a stream has been generated successfully.
error - Fired when there are any errors
After you run yarn example, a docx file will be generated in the demo folder.
Suggestions to improve the tutorial are welcome üòÉ.
If you've completed the tutorial successfully, you can either watch/star this repo or follow me on twitter for more updates.
<a target='_blank' rel='nofollow' href='https://app.codesponsor.io/link/FCRW65HPiwhNtebDx2tTc53E/nitin42/Making-a-custom-React-renderer'>
  
"
4003,"joeyespo,grip","Preview GitHub README.md files locally before committing them.. Render local readme files before sending off to GitHub.
Grip is a command-line server application written in Python that uses the
GitHub markdown API to render a local readme file. The styles
and rendering come directly from GitHub, so you'll know exactly how it will appear.
Changes you make to the Readme will be instantly reflected in the browser without
requiring a page refresh.
Sometimes you just want to see the exact readme
result before committing and pushing to GitHub.
Especially when doing Readme-driven development.
To install grip, simply:
On OS X, you can also install with Homebrew:
To render the readme of a repository:
Now open a browser and visit http://localhost:6419.
Or run with -b and Grip will open a new browser tab for you.
You can also specify a port:
Or an explicit file:
Alternatively, you could just run grip and visit localhost:6419/AUTHORS.md
since grip supports relative URLs.
You can combine the previous examples. Or specify a hostname instead of a port. Or provide both.
You can even bypass the server and export to a single HTML file, with all the styles and assets inlined:
Control the output name with the second argument:
If you're exporting a bunch of files, you can prevent styles from being inlining to save space with --no-inline:
Reading and writing from stdin and stdout is also supported, allowing you to use Grip with other programs:
This allows you to quickly test how things look by entering Markdown directly in your terminal:
Note: ^D means Ctrl+D, which works on Linux and OS X. On Windows you'll have to use Ctrl+Z.
Rendering as user-content like comments and issues is also supported, with an optional repository context for linking to issues:
For more details and additional options, see the help:
Grip strives to be as close to GitHub as possible. To accomplish this, grip
uses GitHub's Markdown API so that changes to their rendering
engine are reflected immediately without requiring you to upgrade grip.
However, because of this you may hit the API's hourly rate limit. If this
happens, grip offers a way to access the API using your credentials
to unlock a much higher rate limit.
Or use a personal access token with an empty scope (note that a token is
required if your GitHub account is set up with two-factor authentication):
You can persist these options in your local configuration.
For security purposes, it's highly recommended that you use an access token
over a password. (You could also keep your password safe by configuring
Grip to grab your password from a password manager.)
There's also a work-in-progress branch to provide
offline rendering. Once this resembles GitHub more precisely, it'll
be exposed in the CLI, and will ultimately be used as a seamless fallback
engine for when the API can't be accessed.
Grip always accesses GitHub over HTTPS,
so your README and credentials are protected.
Here's how others from the community are using Grip.
Want to share your own? Say hello @joeyespo or submit a pull request.
By Joshua Gourneau.
Enter the directory:
Include all assets by setting the CACHE_DIRECTORY config variable:
Export all your Markdown files with Grip and replace absolute asset paths with relative paths:
You can optionally compress the set of HTML files to docs.tgz with:
Looking for a cross platform solution? Here's an equivalent Python script.
By Matthew R. Tanudjaja.
To customize Grip, create ~/.grip/settings.py, then add one or more of the following variables:
HOST: The host to use when not provided as a CLI argument, localhost by default
PORT: The port to use when not provided as a CLI argument, 6419 by default
DEBUG: Whether to use Flask's debugger when an error happens, False by default
DEBUG_GRIP: Prints extended information when an error happens, False by default
API_URL: Base URL for the github API, for example that of a Github Enterprise instance. https://api.github.com by default
CACHE_DIRECTORY: The directory, relative to ~/.grip, to place cached assets (this gets run through the following filter: CACHE_DIRECTORY.format(version=__version__)), 'cache-{version}' by default
AUTOREFRESH: Whether to automatically refresh the Readme content when the file changes, True by default
QUIET: Do not print extended information, False by default
STYLE_URLS: Additional URLs that will be added to the rendered page, [] by default
USERNAME: The username to use when not provided as a CLI argument, None by default
PASSWORD: The password or personal access token to use when not provided as a CLI argument (Please don't save your passwords here. Instead, use an access token or drop in this code grab your password from a password manager), None by default
Note that this is a Python file. If you see 'X' is not defined errors, you
may have overlooked some quotes. For example:
GRIPHOME: Specify an alternative settings.py location, ~/.grip by default
GRIPURL: The URL of the Grip server, /__/grip by default
This file is a normal Python script, so you can add more advanced configuration.
For example, to read a setting from the environment and provide a default value
when it's not set:
You can access the API directly with Python, using it in your own projects:
Run main directly:
Or access the underlying Flask application for even more flexibility:
Runs a local server and renders the Readme file located
at path when visited in the browser.
path: The filename to render, or the directory containing your Readme file, defaulting to the current working directory
host: The host to listen on, defaulting to the HOST configuration variable
port: The port to listen on, defaulting to the PORT configuration variable
user_content: Whether to render a document as user-content like user comments or issues
context: The project context to use when user_content is true, which
           takes the form of username/project
username: The user to authenticate with GitHub to extend the API limit
password: The password to authenticate with GitHub to extend the API limit
render_offline: Whether to render locally using Python-Markdown (Note: this is a work in progress)
render_wide: Whether to render a wide page, False by default (this has no effect when used with user_content)
render_inline: Whether to inline the styles within the HTML file
api_url: A different base URL for the github API, for example that of a Github Enterprise instance. The default is the public API https://api.github.com.
title: The page title, derived from path by default
autorefresh: Automatically update the rendered content when the Readme file changes, True by default
browser: Open a tab in the browser after the server starts., False by default
grip_class: Use a custom Grip class
Writes the specified Readme file to an HTML file with styles and assets inlined.
path: The filename to render, or the directory containing your Readme file, defaulting to the current working directory
user_content: Whether to render a document as user-content like user comments or issues
context: The project context to use when user_content is true, which
           takes the form of username/project
username: The user to authenticate with GitHub to extend the API limit
password: The password to authenticate with GitHub to extend the API limit
render_offline: Whether to render locally using Python-Markdown (Note: this is a work in progress)
render_wide: Whether to render a wide page, False by default (this has no effect when used with user_content)
render_inline: Whether to inline the styles within the HTML file (Note: unlike the other API functions, this defaults to True)
out_filename: The filename to write to, &lt;in_filename&gt;.html by default
api_url: A different base URL for the github API, for example that of a Github Enterprise instance. The default is the public API https://api.github.com.
title: The page title, derived from path by default
quiet: Do not print to the terminal
grip_class: Use a custom Grip class
Creates a Flask application you can use to render and serve the Readme files.
This is the same app used by serve and export and initializes the cache,
using the cached styles when available.
path: The filename to render, or the directory containing your Readme file, defaulting to the current working directory
user_content: Whether to render a document as user-content like user comments or issues
context: The project context to use when user_content is true, which
           takes the form of username/project
username: The user to authenticate with GitHub to extend the API limit
password: The password to authenticate with GitHub to extend the API limit
render_offline: Whether to render locally using Python-Markdown (Note: this is a work in progress)
render_wide: Whether to render a wide page, False by default (this has no effect when used with user_content)
render_inline: Whether to inline the styles within the HTML file
api_url: A different base URL for the github API, for example that of a Github Enterprise instance. The default is the public API https://api.github.com.
title: The page title, derived from path by default
text: A string or stream of Markdown text to render instead of being loaded from path (Note: path can be used to set the page title)
grip_class: Use a custom Grip class
Renders the application created by create_app and returns the HTML that would
normally appear when visiting that route.
app: The Flask application to render
route: The route to render, '/' by default
Renders the specified markdown text without caching.
text: The Markdown text to render
user_content: Whether to render a document as user-content like user comments or issues
context: The project context to use when user_content is true, which
           takes the form of username/project
username: The user to authenticate with GitHub to extend the API limit
password: The password to authenticate with GitHub to extend the API limit
render_offline: Whether to render locally using Python-Markdown (Note: this is a work in progress)
api_url: A different base URL for the github API, for example that of a Github Enterprise instance. This is required when not using the offline renderer.
title: The page title, derived from path by default
Renders the markdown from the specified path or text, without caching,
and returns an HTML page that resembles the GitHub Readme view.
path: The path to use for the page title, rendering 'README.md' if None
user_content: Whether to render a document as user-content like user comments or issues
context: The project context to use when user_content is true, which
           takes the form of username/project
username: The user to authenticate with GitHub to extend the API limit
password: The password to authenticate with GitHub to extend the API limit
render_offline: Whether to render offline using Python-Markdown (Note: this is a work in progress)
render_wide: Whether to render a wide page, False by default (this has no effect when used with user_content)
render_inline: Whether to inline the styles within the HTML file
api_url: A different base URL for the github API, for example that of a Github Enterprise instance. The default is the public API https://api.github.com.
title: The page title, derived from path by default
text: A string or stream of Markdown text to render instead of being loaded from path (Note: path can be used to set the page title)
quiet: Do not print to the terminal
grip_class: Use a custom Grip class
Clears the cached styles and assets.
Runs Grip with the specified arguments.
argv: The arguments to run with, sys.argv[1:] by default
force_utf8: Sets the default encoding to utf-8 in the current Python instance. This has no effect on Python 3 since Unicode is handled by default
A Flask application that can serve a file or directory containing a README.
Returns the default renderer using the current config. This is only used if
renderer is set to None in the constructor.
Returns the default asset manager using the current config. This is only used
if asset_manager is set to None in the constructor.
Adds the application/x-font-woff and application/octet-stream content types if
they are missing. Override to add additional content types on initialization.
Clears the downloaded assets.
Renders the application and returns the HTML unicode that would normally appear
when visiting in the browser.
route: The route to render, / by default
Starts a server to render the README. This calls Flask.run internally.
host: The hostname to listen on. Set this to '0.0.0.0' to have the server
        available externally as well, 'localhost' by default
port: The port of the webserver. Defaults to 6419
debug: If given, enable or disable debug mode. See Flask.debug.
use_reloader: Should the server automatically restart the python process
                if modules were changed? False by default unless the
                DEBUG_GRIP setting is specified.
open_browser: Opens the browser to the address when the server starts
Raised when Grip.run is called while the server is already running.
Raised when the specified Readme could not be found.
Manages the style and font assets rendered with Readme pages. This is an
abstract base class.
Manages the style and font assets rendered with Readme pages. Set cache_path to
None to disable caching.
Reads Readme content from a URL subpath. This is an abstract base class.
Reads Readme files from URL subpaths.
Reads Readme content from the provided unicode string.
Reads Readme text from STDIN.
Renders the Readme. This is an abstract base class.
Renders the specified Readme using the GitHub Markdown API.
Renders the specified Readme locally using pure Python. Note: This is currently
an incomplete feature.
The common Markdown file titles on GitHub.
filename: The UTF-8 file to read.
The supported extensions, as defined by GitHub.
This constant contains the names Grip looks for when no file is provided.
This constant contains the default Readme filename, namely:
This constant points to the default value if the GRIPHOME
environment variable is not specified.
The default URL of the Grip server and all its assets:
The default app_url value:
Install the package and test requirements:
Run tests with pytest:
Or to re-run tests as you make changes, use pytest-watch:
If you're experiencing a problem with Grip, it's likely that an assumption made
about the GitHub API has been broken. To verify this, run:
Since the external assumptions rely on an internet connection, you may want to skip
them when developing locally. Tighten the cycle even further by stopping on the
first failure with -x:
Or with pytest-watch:
Check the open issues or open a new issue to start a discussion around
your feature idea or the bug you found
Fork the repository and make your changes
Open a new pull request
If your PR has been waiting a while, feel free to ping me on Twitter.
Use this software often? 
:smiley:"
3914,"arronhunt,react-native-emoji-selector","‚öõÔ∏èüòé Simple, customizable and theme-able Emoji selector for React Native. If you'd like to define a different default category, you can import the Categories class. Setting a default category can also improve performance by loading a single section rather than all sections at once.
The available categories are all, people, nature, food, activities, places, objects, symbols, and flags.
Special thanks to everyone who has contributed to this project!
Victor K Varghese @victorkvarghese - 5eb2df3
Mateo Silguero @mateosilguero - 8e8cef5
Anastasiia Kravchenko @St1ma- 0113c53"
4335,"SoftwareBrothers,admin-bro","AdminJS is an admin panel for apps written in node.js. AdminBro is An automatic admin interface which can be plugged into your application. You, as a developer, provide database models (like posts, comments, stores, products or whatever else your application uses), and AdminBro generates UI which allows you (or other trusted users) to manage content.
Inspired by: django admin, rails admin and active admin.

Check out the example application with mongodb and postgres models here:
login: test@example.com
password: password
https://admin-bro-example-app.herokuapp.com/admin
Check out the documentation
Try the live demo as mentioned above
So you have a working service built in Node.js. It uses (for example) Hapi.js for rendering a couple of REST routes and mongoose as the connector to the database.
Everything works fine, but now you would like to:
see all the data in the app,
perform custom business actions on objects in the database,
bootstrap the tables with the initial data,
build custom report pages,
allow other team members (not necessary programmers) to see what is going on in the application.
And all these cases can be solved by AdminBro. By adding couple of lines of code you have a running admin interface.
CRUD any data in any resource
Custom actions
Form validation based on schema in your resources
Full featured dashboard with widgets
Custom resource decorators
If you would like work on an admin-bro and develop new features - take a look at our dev repository: https://github.com/SoftwareBrothers/admin-bro-dev
You can find there instructions on how to run admin-bro for development.
AdminBro is Copyright ¬© 2018 SoftwareBrothers.co. It is free software, and may be redistributed under the terms specified in the LICENSE file.

We‚Äôre an open, friendly team that helps clients from all over the world to transform their businesses and create astonishing products.
We are available to hire.
If you want to work for us - checkout the career page."
4750,"reyronald,awesome-toolkits","A curated list of open source, high-quality, popular and well maintained ""zero-configuration"" (#0CJS) toolkits. A curated list of open source, high-quality, popular and well maintained ""zero-configuration"" (#0CJS) toolkits
A ""toolkit"" is a set of tools in any form that allows you to create applications with no build configuration. Also known as ""zero-configuration tools"" (#0CJS).
Create React App - Create React apps with no build configuration.
Create React App Typescript - Create React apps using typescript with no build configuration.
vue-cli - A simple CLI for scaffolding Vue.js projects.
preact-cli - High-performance Preact PWA's in seconds.
Angular CLI - CLI tool for Angular.
ember-cli - The Ember.js command line utility.
Aurelia CLI - The official command line tooling for Aurelia. Use the CLI to create projects, scaffold components and bundle your app for release.
Create Elm App - Create Elm apps with zero configuration.
Webpack - A bundler for javascript and friends. Packs many modules into a few bundled assets. Code Splitting allows to load parts for the application on demand. Through ""loaders,"" modules can be CommonJs, AMD, ES6 modules, CSS, Images, JSON, Coffeescript, LESS, ... and your custom stuff.
Parcel - üì¶üöÄ Blazing fast, zero configuration web application bundler.
Next.js - Next.js is a minimalistic framework for server-rendered React applications.
Create Ueno App - The easiest and fastest way to create new web projects with next, gatsby, create-react-app and mobile projects with react-native.
Create Next App - Create Next.js apps in one command.
After.js - Next.js-like framework for server-rendered React apps built with React Router 4.
Sapper - Military-grade progressive web apps, powered by Svelte.
Nuxt.js - Versatile Vue.js Framework.
Razzle - ‚ú® Create server-rendered universal JavaScript applications with no configuration.
nwb - A toolkit for React, Preact, Inferno & vanilla JS apps, React libraries and other npm modules for the web, with no configuration (until you need it).
Gatsby - ‚öõÔ∏èüìÑüöÄ Blazing-fast static site generator for React.
Neutrino - Create and build modern JavaScript applications with zero initial configuration.
Strapi - üöÄ Node.js Content Management Framework (headless-CMS) to build powerful API with no effort.
Backpack - üéí Backpack is a minimalistic build system for Node.js projects.
Create Guten Block - Create WordPress Gutenberg plugins with zero-configuration.
Rekit - Toolkit for building scalable web applications with React, Redux and React-router.
Docusaurus - Easy to maintain open source documentation websites.
Create React Native App - Create a React Native app on any OS with no build config.
Ionic Framework - Create a hybrid app based on Angular & Cordova on any OS with minimal build config.
Quasar Framework - Build responsive websites, PWAs, hybrid mobile Apps (that look native!) and Electron apps, all simultaneously using same codebase, powered with Vue.
react-scripts - This package includes scripts and configuration used by Create React App.
react-app-rewired - Override create-react-app webpack configs without ejecting.
kcd-scripts - CLI toolbox for common scripts for Kent C. Dodds' projects.
react-snap - üëª Zero-configuration framework-agnostic static prerendering for SPAs.
d-scripts - Opinionated toolkit for Node apps based on kcd-scripts.
nodify - Zero-config build tool system for Node.js.
blogfoster-scripts - Single-command, zero-config tooling for Node.js projects
Awesome - üòé Curated list of awesome lists.
Awesome Node.js - ‚ö°Ô∏è Delightful Node.js packages and resources.
""Concerning tookits üõ†üì¶"" blog post, by Kent C. Dodds.
""Tools without config üõ†üì¶"" blog post, by Kent C. Dodds.
Popular alternatives to Create React App in the official Create React App repo.
""Dan Abramov - The Melting Pot of JavaScript"" video by Dan Abramov.
Some words about JavaScript fatigue section on the article ""It‚Äôs OK to not use Yarn"" by David Gilbertson.
Contributions welcome! Read the contribution guidelines first.

To the extent possible under law, Ronald Rey has waived all copyright and
related or neighboring rights to this work."
3895,"lando,lando","A development tool for all your projects that is fast, easy, powerful and liberating. Lando is for developers who want to:
Quickly specify and painlessly spin up the services and tooling needed to develop their projects.
Ship these local development dependencies in a per-project, lives-in-git config file
Automate complex build steps, testing setups, deployments or other repeated-more-than-once workflows
Avoid the built-in-masochism of directly using docker or docker-compose
It's a free, open source, cross-platform, local development environment and DevOps tool built on Docker container technology and developed by Tandem. Designed to work with most major languages, frameworks and services, Lando provides an easy way for developers of all skill levels to specify simple or complex requirements for their projects, and then quickly get to work on them.
Think of it as your local development dependency management and automation tool. Note that while you can run Lando in production it is highly discouraged, not recommended and 100% not supported!
Mimicking your production environment locally
Standardizing your teams dev environments and tooling on OSX, Windows and Linux
Integrating with hosting providers like Pantheon
Customizing or extending tooling, deployment options and basically any other functionality
Running CI tests locally, running local tests in CI
Using a single local development environment for all your projects
Freeing yourself from the tyranny of inferior local development products
Yes! Well, sort of. You can think of Lando as both an abstraction layer and superset of Docker Compose as well as a Docker Compose utility.
As an abstraction layer Lando vastly reduces the complexity of spinning up containers by exposing only the most relevant config for a given ""service"" and setting ""sane defaults"". Lando also provides ""recipes"" which are common combinations of services and their tooling that satisfy a given development use case eg Drupal, Python, Laravel, Dotnet, etc.
As a superset Lando provides ways for developers to run complex commands, build steps and automation on their services without the hassle of custom Dockerfiles or long ""docker exec"" commands. Think lando yarn add express. Think clear my applications cache after I import a database. Think install this php-extension before my appserver starts and then composer install after it does.
As a utility Lando handles some of the more arduous setup required for a good Docker Compose setup eg proxying, nice urls, cross-application networking (think Vue.js frontend talking to separate Laravel backend), host-container file permission handling, file sharing, per-container SSL certificate handling, ssh-key handling, etc.
And! If you don't like the default choices we've made all of the above is highly configurable down to the Docker Compose level itself!
Lando basics
Backdrop
dotnet
apache
CLI
Updating your Landofiles to 3.0.0-rc.2+
DNS Rebinding Protection
Accessing Logs
Overview
Build Steps
If you have discovered a security issue with Lando, please contact the Lando Security Team directly at
security@devwithlando.io. We manage security issues separately in a private repository until the issue has been resolved. Even if you're not sure if it's a security problem, please contact the security team before filing an issue, blogging, or
tweeting about it.
Mountain climbing advice"
4504,"airbnb,native-navigation","Native navigation library for React Native applications. This project is currently in beta. 
Many of the core APIs are subject to change, and we do not consider this project ""Production Ready"" until it hits a 1.0 release. We encourage people to try this library out and provide us feedback as we get it to a stable state we are confident in, but not to rely on it for production use until then.
Read more about our Roadmap to 1.0
See the Installation Guide
To run the example project, first clone this repo:
Both npm and the ruby bundler gem are needed to run the project.
Then, in another CLI window:
To run on iOS: npm run run:ios
To run on Android: npm run run:android
Native Navigation is a navigation library for the React Native platform. There are many navigation libraries in the React Native ecosystem. Native Navigation is unique in that it is built on top of the iOS and Android platform navigational components, and is thus more ""native"" than most other options which implement navigation from scratch in JavaScript on top of base React Native components like View and Animated.
React Native Navigation by Wix engineering is an alternative library that uses ""Native"" navigation components of each platform, and has been around longer than Native Navigation. If you need a stable / production-ready navigation library today that uses native platform based navigation components, we recommend you check this library out.
If you are investigating navigation solutions and you are okay with JavaScript-based solutions, we also encourage you to check out React Navigation.
See the Contributors Guide
See the Frequently Asked Questions page
This project is licensed under the MIT License."
4068,"artzub,GitHubVisualizer","Visualization the history of repository changes based on data from GitHub. This project was bootstrapped with Create React App.
In the project directory, you can run:
Runs the app in the development mode.
Open http://localhost:3000 to view it in the browser.
The page will reload if you make edits.
You will also see any lint errors in the console.
Launches the test runner in the interactive watch mode.
See the section about running tests for more information.
Builds the app for production to the build folder.
It correctly bundles React in production mode and optimizes the build for the best performance.
The build is minified and the filenames include the hashes.
Your app is ready to be deployed!
See the section about deployment for more information.
Note: this is a one-way operation. Once you eject, you can‚Äôt go back!
If you aren‚Äôt satisfied with the build tool and configuration choices, you can eject at any time. This command will remove the single build dependency from your project.
Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except eject will still work, but they will point to the copied scripts so you can tweak them. At this point you‚Äôre on your own.
You don‚Äôt have to ever use eject. The curated feature set is suitable for small and middle deployments, and you shouldn‚Äôt feel obligated to use this feature. However we understand that this tool wouldn‚Äôt be useful if you couldn‚Äôt customize it when you are ready for it.
You can learn more in the Create React App documentation.
To learn React, check out the React documentation.
This section has moved here: https://facebook.github.io/create-react-app/docs/code-splitting
This section has moved here: https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size
This section has moved here: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app
This section has moved here: https://facebook.github.io/create-react-app/docs/advanced-configuration
This section has moved here: https://facebook.github.io/create-react-app/docs/deployment
This section has moved here: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify"
4187,"susam,texme","Self-rendering Markdown + LaTeX documents. TeXMe is a lightweight JavaScript utility to create self-rendering
Markdown + LaTeX documents.






Get Started
Copy and paste the code below into an HTML file with .html as the
extension name:
This file contains one line of HTML code followed by Markdown + LaTeX
content.
Open this HTML file with a web browser. It renders itself to look like this:
get-started.html.
Here is a screenshot of the output:

There are three simple rules to remember while using TeXMe:
TeXMe removes any leading and trailing whitespace in the content
before rendering the content to HTML.
TeXMe uses the first non-empty line of the content to set the page
title if no explicit &lt;title&gt; element is specified. Any leading and
trailing whitespace and hash (#) characters are removed while
setting the page title.
If there is a Markdown element such as code span/block or image with
LaTeX delimiters in it (e.g., $, $$, etc.), TeXMe may interpret
it as LaTeX which may lead to incorrect rendering of the document.
To prevent this issue, put such Markdown element within a special
purpose md environment supported by TeXMe, for example,
\begin{md}`echo $foo`\end{md}. If you do not have such Markdown
elements with LaTeX delimiters, you may ignore this rule. See the
Markdown Priority Environment
section to see more details about this. Note: For most documents,
you don't have to worry about this point.
If you do not like to start your document with HTML tags, you can write
your content first and add the &lt;script&gt; tag in the end but this
approach has some limitations. See the Content in
Body section for more details about it.
Use the following URL in the &lt;script&gt; tag to load version 1.2.2 (the
current version at this time) of TeXMe:
Use the following URL in the &lt;script&gt; tag to always load the latest
version of TeXMe:
If you need something really easy to remember, use this URL to load the
latest version of TeXMe:
The Get Started section earlier shows how we can create
a self-rendering document with a single line of HTML code but this
brevity comes at the cost of standard conformance. For example, the
required &lt;title&gt; element is missing from the code. Further the
&lt;textarea&gt; element is not closed.
For the sake of completeness and correctness, here is a minimal but
complete and valid HTML5 example:
Here is the output:
valid-html5.html.
It has a few more lines of code to ensure that this HTML5 code validates
successfully at validator.w3.org. As a result, this example
does not look as concise as the one in the previous section.
In case you are wondering, a valid HTML5 document does not require
explicit &lt;head&gt;, &lt;body&gt;, or the closing &lt;/html&gt; tags, so they have
been omitted for the sake of brevity while maintaining completeness and
correctness.
In practice though, it is not necessary to write verbose code like this.
All browsers follow the robustness principle, so they
can render the shorter example in the Get Started
section just fine.
TeXMe renders the document on a white pane against a gray background by
default. This is due to a configuration option named style that is set
to 'viewer' by default.
To render the document with a minimal style on a completely plain white
background, set the style configuration option to 'plain'. Here is
an example:
Here is the output:
style-plain.html.
To render the document with absolutely no style, set style to
'none'. The 'none' style option is useful to disable the default
'viewer' style set by TeXMe before defining a custom style with
regular CSS code. Here is an example:
Here is the output:
style-custom.html.
Note that the rendered content is displayed within a &lt;main&gt; element
inside the &lt;body&gt;. That is why these elements are being styled in the
above example.
To render Markdown-only content without any mathematical content at all,
set useMathJax and protectMath options to false:
Here is the output:
markdown-only.html.
When TeXMe loads, it begins rendering the document automatically. This
automatic rendering may be skipped by setting renderOnLoad option to
false. Here is an example that disables automatic rendering and then
invokes rendering later on the click of a button by using the
texme.renderPage() function from the TeXMe API:
Here is the output:
skip-render.html.
When we load TeXMe with the &lt;script&gt; tag, it begins rendering the
document as soon as it loads. Therefore in the above examples, we define
the configuration options prior to loading TeXMe. We do this by defining
an object named window.texme with the configuration options defined as
properties in this project.
However if we set the renderOnLoad option to false, we prevent TeXMe
from rendering the document after it loads. We now have the control to
invoke the rendering at a later time, e.g., on the click of a button. In
this case, it is possible to set configuration options after loading
TeXMe with the texme.setOption() function. This function takes two
parameters: option name as a string and option value.
Here is an example that skips automatic rendering on load and sets the
style to 'plain' using this function:
Here is the output:
set-options.html.
If you do not like to start your document with HTML tags, you can
write your content first and add the &lt;script&gt; tag in the end like
this:
Here is the output:
content-in-body.html.
Although, the code looks neater in this example, there is a limitation
associated with this form of writing content: Since the content is part
of the HTML &lt;body&gt; element (there is no &lt;textarea&gt; element in this
code), the content should be written carefully, so that it does not have
any HTML syntax error.
While using the content-in-body method of using TeXMe, an HTML syntax
error in the content can produced mangled output. For example, the
following input is not rendered as expected because the content is in
the &lt;body&gt; element, so the browser interprets this content as HTML and
encounters the beginning of a start tag that is not closed properly:
print('unusual <string')
Here is the broken output:
unusual-code-body.html.
The &lt;string part of the code is interpreted as the opening of a start
tag by the browser. What looks like a fragment of Python code to a human
ends up being parsed as an HTML tag by the browser that looks like this:
This mangled form of the input is then rendered leading to unexpected
results. To resolve this, put the content within a &lt;textarea&gt; element
(as shown in the very first example in this document). The following
input is fine because the content is put inside a &lt;textarea&gt; element.
print('unusual <string')
Here is the output:
unusual-code-textarea.html.
Since the content occurs within the &lt;textarea&gt; element, the browser
does not parse it as HTML and therefore does not mangle it.
The examples so far use TeXMe as a utility. The previous examples load
TeXMe in a web page and then TeXMe automatically picks the &lt;textarea&gt;
element containing Markdown + LaTeX code and renders it as HTML.
In this section, we see how to use TeXMe as a library and invoke its
functions. These examples would run as is on Node.js.
Enter the following command to install TeXMe:
Markdown + LaTeX content can be rendered to HTML by simply invoking the
texme.render() function. It accepts the Markdown + LaTeX content as
a string and returns the rendered HTML as a string. Here is an example:
The above example produces the following output:
The previous two sections introduced a few TeXMe API functions such as
texme.render(), texme.renderPage(), and texme.setOptions().
TeXMe exposes several more functions that could be useful to invoke
parts of TeXMe's rendering operations in your code. Visit TeXMe module
documentation to see the documentation of TeXMe API.
Here is a quick reference for all the supported configuration options:
useMathJax (true by default): Load MathJax and run it to render
LaTeX when set to true. Do not load or run MathJax when set to
false.
protectMath (true by default): Prevent Markdown renderer from
seeing LaTeX code when set to true. Therefore LaTeX content
that may contain text that could be interpreted as Markdown
(e.g., $$ {a}_{1} {a}_{2} $$) remains intact as LaTeX when set to
true. Let Markdown renderer look for Markdown text within LaTeX
code and render it when set to false. For example,
$$ {a}_{1} {a}_{2} $$ is rendered as
&lt;p&gt;$$ {a}&lt;em&gt;{1} {a}&lt;/em&gt;{2} $$&lt;/p&gt; when this option is set to
false.
style ('viewer' by default): Three values are supported:
'viewer', 'plain', and 'none'. The viewer style displays
the rendered document on a white pane against a gray background. The
plain style displays the content with a very minimal style that does
not change the background style. If set to 'none', no style
whatsoever is applied and the document is displayed with the
browser's default style.
renderOnLoad (true by default): Begins rendering the document
automatically on load when set to true. Skips rendering
automatically when set to false.
onRenderPage (undefined by default): A callback function that is
automatically invoked after TeXMe completes rendering the page. It
is guaranteed that TeXMe has completed rendering the page before
invoking this callback. If useMathJax option is true, it is also
guaranteed that TeXMe has invoked typesetting LaTeX with MathJax
before invoking this callback. However it is not guaranteed that
MathJax has completed typesetting the page before this callback is
invoked. MathJax typesetting occurs asynchronously and may complete
after this callback is invoked. This callback runs only when the
texme.renderPage() function runs in web browser either due to
automatic rendering on load or due to explicit call to this
function.
markdownURL (CDN URL of minified marked.js by default): URL to
load marked.js while running in a web browser.
MathJaxURL (CDN URL of MathJax by default): URL to load MathJax
while running in a web browser.
TeXMe can be saved on a local disk or hosted on one's own web server
such that TeXMe does not load resources from any other web server
while rendering a document. Here are the steps to set up TeXMe on a
local disk or on one's own web server:
Clone copies of TeXMe and its dependencies to your own system or
server at a location from where you want to serve the files:
Then create a self-rendering document, say, euler.html like
this:
In mathematics, Euler's identity is the equality
$$ e^{i \pi} + 1 = 0. $$
Euler's identity is a special case of Euler's formula from complex
analysis, which states that for any real number $ x $,
$$ e^{ix} = \cos x + i \sin x. $$
</textarea>
Now open euler.html with a web browser and it should self-render
fine. All resources will be loaded from the local disk.
Now test euler.html by serving it via a web server. Assuming
Python 3 is installed, here is one really easy way to test it:
Then open https://localhost:8000/euler.html using a web server.
The network tab in the browser's developer tools should show that
all resources are loaded from the same web server and no requests
to any other server are made.
TeXMe provides a special LaTeX-like environment named md. This is the
markdown priority environment. We will see what this term means in the
next section. Let us first see what this environment does by looking at
a few examples of when this special environment can be useful.
TeXMe introduces the special purpose md environment to protect
portions of Markdown content from being interpreted as LaTeX. In most
documents, the use of this environment is not required. This
environment is useful only in a handful of scenarios where a Markdown
element like code span, code block, link, image, etc. may contain
content with LaTeX delimiters that may get interpreted as LaTeX by TeXMe
thereby leading to a broken rendering of the Markdown element. This
environment protects the content of one or more Markdown elements from
being interpreted as LaTeX. Let us see a few examples in the next two
subsections.
The md environment is useful when Markdown code spans or code blocks
contain LaTeX delimiters. This environment prevents the content of
Markdown code spans and code blocks from being interpreted as LaTeX.
Here is an example:
foo=hello
echo $foo
hello
The above code fails to render as expected because the TeXMe tokenizer
parses out everything between $foo and `$ (inclusive)
and interprets it as possible LaTeX code and prevents the Markdown
parser from seeing it. As a result, the Markdown parser does not see the
triple backticks (```) just after echo $foo and the document
gets rendered in an unexpected manner. Here is how the output looks:
shell-script-unprotected.html.
A rendering issue like this can be prevented with the use of the
markdown priority environment like this:
foo=hello
echo $foo
hello
The \begin{md} and \end{md} delimiters create a markdown priority
environment that prevents TeXMe from interpreting anything within it as
LaTeX. Here is how the output looks now:
shell-script-protected.html.
Here is another example that shows how rendering can break when LaTeX
delimiter is found in a Markdown element such as within image
description and how the usage of the md environment can fix it. Here
is an example:
The above input fails to render as expected because the TeXMe tokenizer
parses out everything between the first occurrence of $foo within the
image description and the next occurrence of `$ (inclusive). As a
result, the Markdown parser does not see the closing bracket of the
image description and does not recognize the image element. This leads
to a broken rendering of the document. Here is how the output looks:
img-alt-unprotected.html.
The md environment can be used to fix the rendering like this:
Here is how the output looks now:
img-alt-protected.html.
In this subsection, we dive a little deeper into what the md
environment is. First, we need to understand how TeXMe renders a
document. TeXMe performs the following steps while rendering a document:
At first, the tokenizer looks for anything that looks like LaTeX and
masks them, that is, it substitutes all LaTeX snippets in the
content with mask literal. In case you are curious, the mask literal
is ::MASK:: but this detail should not matter to you while using
TeXMe.
Then it feeds the masked input to Markdown parser. The Markdown
parser cannot see any LaTeX code anymore because they are all
masked, so it cannot accidentally render any portion of the LaTeX
code as Markdown. The Markdown parser returns a rendered HTML.
The rendered HTML is then unmasked, that is, all mask literals in
the rendered HTML are substituted with the original LaTeX
snippets.
At this point, TeXMe rendering is complete. Now TeXMe invokes
MathJax to render all LaTeX content in the HTML obtained from
the previous step.
It is important to note that TeXMe does not implement a Markdown
parser of its own. It relies on an existing popular and stable
Markdown parser that conforms to the GitHub Flavored Markdown (GFM)
specification and has stood the test of time. Note that GFM is a
strict superset of CommonMark. TeXMe only parses out content within
LaTeX delimiters and masks it, so that the Markdown parser cannot see
such content. As a result of this, step 1 can be a problem when there
are LaTeX delimiters like $, $$, etc. within a Markdown code
span/block. The TeXMe tokenizer interprets the delimiter and the
content after it as LaTeX if it finds the corresponding closing
delimiter too later in the document.  This can break the Markdown
rendering of the code span/block. An example of this was discussed in
the previous section. This issue occurs because TeXMe parses out and
masks the LaTeX snippet before invoking the Markdown parser. The md
environment prevents TeXMe from looking for LaTeX content within the
environment.
The md environment ensures that anything within \begin{md} and
\end{md} is not searched for LaTeX delimiters. Anything within this
environment is fed to the Markdown parser intact. This is why this
environment is known as the Markdown priority environment.
In the previous two subsections we saw how the Markdown priority
environment, that is, the md environment is used and what it does but
that is not the entire story. TeXMe provides an unlimited number of
variants of the md environment. In fact, any environment name that
starts with the string md is a Markdown priority environment, that is,
all of \begin{md*}, \begin{md**}, \begin{mdfoo}, \begin{mdbar},
etc. start Markdown priority environments provided the corresponding
\end commands also exist. The \end command for a Markdown priority
environment must use the exact same environment name as the \begin
delimiter.
The availability of unlimited variants of the Markdown priority
environment is useful when we have a Markdown code span/block that
itself contains code with Markdown priority environment in it such as
perhaps a code example that explains how TeXMe works. Consider the
following example:
\begin{md}
\end{md}
Here is the output:
texme-code-protected.html.
If we start the Markdown priority environment with \begin{md}, then we
cannot have \end{md} anywhere within the environment because the first
occurrence of it would end the environment. That is why we use
\begin{md*} and \end{md*} to create a Markdown priority environment.
Now we can safely write \end{md} within it.
In case you are wondering what the quadruple backticks are doing in the
above code example, it is a feature defined in the CommonMark
specification. It creates a code block within which we can safely use
triple backticks. CommonMark allows us to start a code span/block with
an arbitrary number of backticks such the code span/block may safely
contain consecutive backticks. To be precise a code span that starts
with M backticks can safely contain N consecutive backticks as long as M
&ne; N. Similarly, a code block that starts with M backticks (M &ge; 3)
can safely contain N consecutive backticks as long as M > N. All of this
is standard CommonMark and not something introduced by TeXMe. TeXMe only
introduces the special purpose md environment and its unlimited
variants.
This is free and open source software. You can use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of it,
under the terms of the MIT License. See LICENSE.md for details.
This software is provided ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
express or implied. See LICENSE.md for details.
To report bugs, suggest improvements, or ask questions,
create issues.
The author of this project hangs out at the following places online:
Website: susam.net
Twitter: @susam
Mastodon: @susam@mastodon.social
GitHub: @susam
Matrix: #susam:matrix.org
IRC: #susam:libera.chat
You are welcome to subscribe to, follow, or join one or more of the
above channels to receive updates from the author or ask questions
about this project.
See MathB, a mathematics pastebin
built using TeXMe. This is the oldest mathematics pastebin that is
still alive on the web and serving its community of users.
See Muboard, a self-rendering and
distributable chalkboard built using TeXMe."
3723,"line,line-bot-sdk-nodejs","LINE Messaging API SDK for Node.js. The LINE Messaging API SDK for nodejs makes it easy to develop bots using LINE Messaging API, and you can create a sample bot within minutes.
See the official API documentation for more information
English: https://developers.line.biz/en/docs/messaging-api/overview/
Japanese: https://developers.line.biz/ja/docs/messaging-api/overview/
line-bot-sdk-nodejs documentation: https://line.github.io/line-bot-sdk-nodejs/#getting-started
Node.js 8 or higher
Using npm:
FAQ: https://developers.line.biz/en/faq/
Community Q&A: https://www.line-community.me/questions
News: https://developers.line.biz/en/news/
Twitter: @LINE_DEV 
This project respects semantic versioning
See http://semver.org/
Please check CONTRIBUTING before making a contribution.
Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
4431,"science-fair,sciencefair","The futuristic, fabulous and free desktop app for working with scientific literature :microscope: :book:. 


  <strong>The open source p2p desktop science library that puts users in control.</strong>



  <!-- Stability -->
  
    
  
  <!-- Release -->
  
    
  
  <!-- Downloads -->
  
    
  
  <!-- License -->
  
    
  
  <!-- Made with <3 -->
  
    
  


We've released :balloon: v1.0 :balloon:! But we're just getting started. Check out the roadmap to see where we're headed.
How we access, read and reuse scientific literature is largely controlled
by a few vast publishing organisations. Many wonderful innovations are being
explored outside those organisations, but they are rarely
integrated into the platforms where people actually access science.
We have a vision of a different, better, future for science. A future that's more fair, inclusive and open.
A future where people can explore and innovate and where users control and customise their experience.
ScienceFair aims to help pave the road to that future. The main thing that sets it apart? Freedom from centralised control.
We're creating a desktop experience for discovering, tracking, collecting and reading scientific articles that:
is completely free from external control (e.g. by publishers or platforms)
helps decentralise the distribution and storage of the scholarly literature
allows the user to customise their experience
promotes and integrates open data and metadata
helps grow an ecosystem of open source tools around scientific literature
You can download installers or bundled apps for Windows, Mac and Linux from the releases page.
If you find a bug, please report it in the issue tracker.
Some of the things that ScienceFair does differently:
We use the beautiful Lens reader to render JATS XML to a reading experience optimised for scientific papers.

Instant search of your local collection and remote datasources, only downloading the data requested.

A ScienceFair datasource can be a journal, a curated community collection, a personal reading list... anything you like.
v1.0 comes with the eLife journal by default, and more will follow very soon.
Datasources are append-only feeds of JATS XML articles, signed with public-key encryption and distributed peer-to-peer (using dat). This means:
downloads come from the nearest, fastest sources
it doesn't matter if the original source goes offline
only the original creator can add new content
anyone can create a datasource (tools to make this easy coming soon)
your local collection of articles is ready for data mining
And importantly, datasources you create are private unless you decide to share them, and nobody can ever take a datasource offline.
Basic bibliometrics are built-in in v1.0.
Full analysis and data-mining tools, alt-metrics and enriched annotation will be coming soon.

ScienceFair also follows a few simple design principles that we feel are missing from the ecosystem:
we keep the interface minimal and clear
incremental discovery is the way
be beautiful

This project uses node v8, ideally the latest version. It also uses the two-package.json structure (what??).
To get a local copy working, clone this repo, then run
npm install to install dev dependencies
cd app &amp;&amp; npm install to install regular dependencies
cd .. &amp;&amp; npm run dev to start in development mode
[x] v1.0 proof of concept:
incorporate major new technologies (dat/hyperdrive, lens reader, instant search)
core user experience and design
development, packaging and distribution architecture in place
1.0.x releases will be bug fixes and non-breaking improvements
[ ] v1.1 focus on datasources:
more, and bigger, datasources available by default
tools for creating and managing datasources
interface for creating and securely sharing p2p collections within the app
a platform and interface for discovering and managing datasources
[ ] v1.2 focus on enrichment:
altmetrics, updates (e.g. retractions), etc. displayed in context in realtime
advanced bibliometrics and data-mining tools
annotation and commenting, within the app and drawn from existing sources
[ ] v2.0 focus on user customisation:
a package system, allowing customising and extending key aspects of the experience
tools and documentation for making new packages
a platform and interface for discovering and managing packages"
3814,"noahlh,crystal-vue","Beautifully reactive, server-side rendered Svelte apps w/ a Crystal backend.  Crystal +  Vue.js = :zap:
Crystal-vue allows you to use the full power of Vue.js components in your Crystal web apps. It's a drop-in replacement for your view layer -- no more need for intermediate .ecr templates. With crystal-vue, you write your backend server code in Crystal, your frontend client code in JavaScript & HTML, and everything works together seamlessly...and fast.
Pages are delivered to the client fully-rendered and SEO-friendly (like a traditional web app), but with the power and reactivity of Vue taking over once the page has loaded.
This means you get the best of all worlds -- clients see lightning fast page loads (since the initial payload is pure HTML/CSS) yet still get the benefit of rich dynamic JavaScript-enabled components the load without stutters or flickers.
And your job as a developer is easier: Instead of writing an intermediate view layer (typically .ecr or similar templates) which glues your server code & client code together, you write pure Vue components once with all your server-side data seamlessly blended in. Awesome, right?
(.vue) SFC (single-file component) support
Server-side rendering w/ variables interpolated in Crystal and/or JavaScript
Client-side hydration for full-featured reactive pages
Configurable layouts/templates
Built-in support for Amber (other frameworks coming soon)
Traditional web apps were mostly server-powered -- a client (browser) would make a request, the server would do some processing, render the page, and send down HTML, CSS, and maybe a little JavaScript to spice things up. Pages loaded lightning fast and SEO was simple (crawlers saw basically the same thing as users).
With the advent of powerful JavaScript frameworks like Vue, much of the work shifted to the client. The server became a vessel for a client-loaded JavaScript bundle (and an API endpoint to communicate with that client) and your browser rendered most of what you'd see on the page via JavaScript. Web apps certainly became more powerful and dynamic (the notion of a Single Page App was born), but at the cost of higher initial load time, worse SEO (crawlers saw basically nothing since all the logic lived in JavaScript), and increased complexity (you now had to manage two view layers).
Both React and Vue added Server Side Rendering support to mitigate this, but both have that support baked solely into Node (since it's JavaScript all the way down.)
Crystal is awesome and a joy to use for server-side web processing. Vue is awesome and a joy to use for client-side reactivity and UI composability. Crystal-vue now lets you bring those joys together. This is ideal for folks who believe the heavy lifting of page rendering should (mostly) be done by the server and yet still want the reactivity and dynamism of a powerful client-side framework like Vue.
This is not much more than a proof-of-concept at the moment, but it does work! Standard warnings apply - it will likely break/crash in spectacular and ill-timed glory, so don't poke it, feed it past midnight, or use it for anything mission-critical (yet).
Start with a regular 'ol Amber controller & .ecr template
example_crystal_data is simple arithmetic here, but imagine it's a database query in a more complex application). In this simple example, the basic .ecr template works perfectly.
If you want to add some client-side reactivity and, say, a Vue component, things get more complex. You'll have to split up your view logic between this .ecr file (which becomes rendered HTML) and the Vue component (which doesn't get rendered until the client finishes loading), pass in example_crystal_data via props, load it via a backchannel API call, or use some other series of intermediate glue steps.
Why not skip all of that and make the data available directly in the Vue component? Replace the render call with our new vue_render macro and move our server-side calculation into a special @vue_context object:
Now instead of a server-rendered .ecr template + client-rendered Vue component, you skip the .ecr step entirely and put all of your view code (including CSS) into a single Vue component that's both server- and client-rendered:
Et voila:

Ok that's not so exciting. And it's a bit more verbose. But there's more to this, I promise! The key is that number 2 is not just a static ASCII character loaded via HTML -- it's actually a fully reactive element of a live Vue component:

A quick peek at the raw HTML shows our server's doing all the hard work (which is what servers were designed to do) and sending us a fully rendered page that, even if it were more complex, would load quickly and be SEO-friendly:
There's a lot going on in there and we'll get into more detail later, but in short: Crystal-vue is taking the result of the server-side calculation (1 + 1), rendering the HTML, inserting a default layout, injecting the relevant CSS (scoped to this component), and compiling & linking to a client-side JS bundle.
Crystal-vue gives you flexibility in where your data computation is done - on the server (in Crystal), on the server (in Node/JavaScript), or on the client (in Vue/JavaScript). It totally depends on the needs of your application, and you can mix-and-match.
Our first example did the ""work"" (calculating 1 + 1) server-side, in crystal. Let's look at the other options...
Because Crystal-vue uses a live NodeJS process behind the scenes, you can choose to do computations in that context. This gives you access to the whole ecosystem of Node modules to use in your application as-needed.
Changing our Vue component slightly:
Gives us, as expected:

And again, this is all being done server-side, the raw HTML tells the same story:
Thus far we haven't actually done any client-side DOM manipulation even though we're using a client-side reactive framework. Ironic, right?
Of course you can have crystal-vue do pure client rendering if you want. We do this by taking advantage of how Vue component lifecycles work (the mounted() hook is not called when doing SSR, only on the client).
Let's modify our Vue template once more:
And we see:

All looking good. Same with the raw HTML:
Note our most recent addition is not being rendered on the server, as it should(n't).
Let's make this more interesting: We want to actually have some fun, live, dynamic stuff happen on the client (which is why we're using a framework like Vue in the first place, right?)
Crystal-vue's hybrid rendering model that we saw in the first example (which exposes the power of both server- and client-side rendering) is called client-side hydration, and it's awesome.
Our fun, live, dynamic stuff is going to be a....clock. Ok fine I'll come up with a better example later. But for now it's simple and shows off the concept.
Our new Vue component:
Translating this to English, we are:
defining a reactive data element in data() called current_time that gets an initial value of Date.now()
defining a method called setCurrentTime() that sets current_time to be Date.now() when called, and
using the mounted() lifecycle hook to call setCurrentTime() every 100 ms when the component is mounted (client-only)
When a request comes in, the server will render the component and send down the following (static) HTML, which represents a snapshot of the current time as of when the request came in:
In your browser, the javascript bundle (along with Vue) will load and automatically understand that this is server-rendered Vue code. It then ""hydrates"" the static element and makes it dynamic, as such:

Huzzah! Server-rendered initial view, reactive (hydrated) elements after load, and a rich dynamic (sort of) UI for the user, and all in a single piece of view code. Heaven.
Crystal 0.27
Yarn 1.12+
Node 10+
The render server was built using node 10.15.3 (in particular it uses the WHATWG URL Standard, which was added in Node 7+.) It doesn't need to do this, strictly-speaking, and if there's a compelling reason to support earlier versions of node I'm happy to make this change.)
(Note: This is a bit more manual than I'd like. Automation to come.)
Crystal-vue has been developed / tested with the Amber web framework, but designed to work standalone as well. There's also no reason it won't work with Lucky, Kemal, etc. (but no work integrating with those has been done yet.)
1) Add crystal-vue to your application's shard.yml and run shards install:
2) Add crystal_vue_amber_init.cr to /config/initializers. An example is provided. You can name this file whatever you want, just so long as it gets called upon initialization.
3) Add a routes.js file to /config. This should export an array of path/component mappings, for example:
This is almost exactly like the routes object you'd use with vue-router and in fact uses that underneath.
There is one small difference here, in that with vue-router you're specifying the actual component (that you've import'ed). Here, instead, you'll specify a string with the component name (and subdirectory off the main components folder).
This is annoyingly redundant (since you've already specified your routes w/ controllers & actions in Amber), and also somewhat hard to reason about, so it's going on the chopping block soon and I'll figure out a more elegant solution.
4) Add a default layout. This is the shell HTML into which your Vue components will be injected. You must include the magic comment &lt;!--vue-ssr-outlet--&gt; where you'd like your components injected.
TODO, high on the list: Variable interpolation in this layout so you can do dynamic titles, etc.
5) Include the helper CrystalVue::Adapter::Amber in your application_controller.cr. This adds the vue_render macro and sets up the @vue_context object.
6) Add your .vue files to your views folder and get building!
vue_render(vue_context : CrystalVue::Context = nil, path : String? = nil, template : String? = nil)
Performs the render. This is to be called where you'd normally call render in your controllers. It doesn't need any parameters by default (it automatically extracts the path of the method calling it based on your Amber routes), but accepts the following optional parameters:
vue_context : CrystalVue::Context - The Crystal-vue Amber helper creates a special Hash-like object called @vue_context. Any variables you'd like available in your Vue components go in here, using a Symbol key of the desired name.
So if you want to access example_crystal_data in your vue component, assign the relevant value to @vue_context[:example_crystal_data].
Behind the scenes, crystal-vue sets up a Vuex store to be accessed in the Vue component. The crystal-rendered data (example_crystal_data) is automatically injected into that store (under the crystal namespace) and is available under this.$store.state.crystal in all of your Vue components.
path : String? - If you need to manually specify which path you're rending (i.e. you're not in Amber), you can pass in a string parameter. In Amber this will be assigned a default value equal to the current Amber route the controller method is handling.
template : String? - Which layout/template you'd like to render the component in. Uses the default template specified in the init file if none specified on render.
With .ecr templates, you're explicitly rendering a specific template. Vue SSR doesn't quite work that way -- instead, you render a route, which is composed of a path and a component (this is defined in routes.js). Since the mapping between a controller's routes & actions is already established, specifically naming the Vue file would be redundant.
This can be slightly confusing, I might consider making it a bit more explicit as this project develops (eliminate the need for a routes.js and build that mapping implicitly by looking at the rendered components in each controller action.)
Since there are no dynamic updates, of all the lifecycle hooks, only beforeCreate and created will be called during SSR. This means any code inside other lifecycle hooks such as beforeMount or mounted will only be executed on the client.
Outside the lifecycle hooks, anything in your data object will be rendered both server- and client-side (on initial load).
There are some other considerations to keep in mind when writing components that will be used both on the server and client. You can read more about those here.
If you want something rendered only on the client and not in any server context, you can use any lifecycle method other than beforeCreate and created. See the Vue docs for complete details on all lifecycle hooks.
Crystal-vue launches and manages a local node process (render-server.js) that runs a very lightweight HTTP server to perform Vue server-side rendering. The vue_render macro simply makes an HTTP call to that node server with any Crystal-computed variables as parameters.
This server closely follows the model outlined in the Vue SSR Rendering Guide and adds in dynamic component loading and a few bits to handle the interaction with the crystal client.
This is roughly the same architecture that AirBNB's Hypernova uses, and has some of the same tradeoffs. While there's definitely some overhead in making HTTP requests, it's still extremely fast: A simple page render from Amber takes about 3ms on a 2015 MBP, including the back-and-forth over HTTP. This is an order of magnitude slower than a base case Amber render (approx. 300 microseconds). But it's fast enough for now, though most certainly an area to explore for future optimization.
The node process integrates Webpack (using the node API) to compile the Vue templates and setup the client & server bundles. In development, it runs webpack.watch() and will keep an eye out for changes to your .vue components. In a production, it runs webpack.run() and does the compilation once.
I've tried to comment the code extensively, but I'm also writing this up in more detail mostly as a high-level reference ahem and reminder to myself cough about exactly how the various internals work.
A few environment variables are set prior to loading the render server. You shouldn't need to touch any of this as Crystal-vue handles this automatically.
VUE_COMPONENT_DIR - Required - The directory where the vue components for the project can be found.
VUE_ROUTES_FILE - Required - The file (in .json format) that contains the mapping between routes and Vue components.
VUE_TEMPLATE_DIR - this is used to specify the directory from which to load layouts/templates. The terminology is a bit confusing - Vue refers to templates (the standalone files) the way that Amber/rails/etc. refer to layouts - a structured HTML document in which to inject the rendered page content. Layout is probably a better term to use since templates also refer to the HTML portion of an actual Vue component.
NODE_PORT - The port on which the render server runs and communicates with the Crystal-vue render client. This is for internal communications only and defaults to port 4000.
TODO: Auto-detect if the port is in use and find an open one. Right now things crash and burn if something is already on port 4000, including another instance of render-server.js.
NODE_ENV - The environment in which to run the node server (development, test, prod, etc.). Defaults to 'development'
My goal/philosophy is to release early, release often, and get as much user feedback as early in the process as possible, so even though the perfectionist in me would like to spend another 6 years improving this, by then it'll be 2024 and who knows we might all be living underwater. No time like the present.
Short-term goals:
[x] Release this embarrassing 0.1.0 version
[ ] Get usage --> expose bugs
[x] Fix reloading issues (not everything restarts properly)
[x] Figure out Hot Module Reloading (HMR)
[ ] Automate installation
[ ] Get example / demo project live
[ ] Improve error handling
[ ] Write more comprehensive tests
[ ] Figure out CSS splitting
[ ] Add support for preprocessors in .vue files (pug, SCSS, stylus, etc.)
Longer-term goals:
Performance improvements
Port to Ruby/Rails
Remove need for a separate node process / http (evaluate JS in crystal, compile templates without Webpack?)
This has been a solo project of mine and I would love nothing more than to get feedback on the code / improvements / contributions. I've found by far the best way to learn and level-up development skills is to have others review code that you've wrestled with.
That is to say, don't hold back. Report things that are broken, help improve some of the code, or even just fix some typos. Everyone (at all skill levels) is welcome.
Fork it (https://github.com/noahlh/crystal-vue/fork)
Create your feature/bugfix branch (git checkout -b omg-this-fixed-so-many-bugs)
Make magic (and don't forget to write tests!)
Commit your changes (git commit -am 'Made ')
Push to the branch (git push origin omg-this-fixed-so-many-bugs)
Create a new Pull Request
::party::
Noah Lehmann-Haupt (nlh@nlh.me / noahlh) - creator, maintainer"
5078,"espocrm,espocrm","EspoCRM open source CRM application. EspoCRM is an Open Source CRM (Customer Relationship Management)
software that allows you to see, enter and evaluate all your company relationships regardless
of the type. People, companies or opportunities ‚Äì all in an easy and intuitive interface.
It's a web application with a frontend designed as a single page application and REST API
backend written in PHP.
Download the latest release from our website. Release notes
and release packages are available at Releases on GitHub.

You can try the CRM on the online demo.
PHP 8.0 and later;
MySQL 5.7 (and later), or MariaDB 10.2 (and later).
For more information about server configuration see this article.
The documentation for administrators, users and developers is available here.
Create an issue here or post on our forum.
We'd appreciate if you prefer posting issues on weekdays rather than weekends.
See the instructions on installation.
Before we can merge your pull request, you need to accept our CLA here. It's very simple to do.
Contribute translations to POEditor. Changes
are usually merged to the GitHub repository before minor releases.
Branches:
fix ‚Äì upcoming maintenance release; minor fixes should be pushed to this branch;
master ‚Äì develop branch; new features should be pushed to this branch;
stable ‚Äì last stable release.
EspoCRM is published under the GNU GPLv3 license."
4618,"zhukov,webogram","Telegram web application, GPL v3. The project was superseeded by 2 new official Telegram Web Apps:
https://github.com/morethanwords/tweb - Telegram Web K, based on source code of Webogram, rewritten in TypeScript.
https://github.com/Ajaxy/telegram-tt - Telegram Web Z, based on its own Teact framework (which re-implements React paradigm), uses a custom version of GramJS as an MTProto implementation. Written also in Typescript.
Telegram offers great apps for mobile communication. It is based on the MTProto protocol and has an Open API. I personally like Telegram for its speed and cloud-support (that makes a web app possible, unlike in the case of WA and others).
MTProto data can be carried over HTTP (SSL is also supported), so this project is my take at creating one.
That said, I'm using this app myself and I'd like to share its sources, so anyone can contribute to the development. Any help is welcome!
Here are some screenshots of the interface:



Secret chats
Black list
...
Hosted version: the app is downloaded via HTTPS as a usual website. Will be available offline due to application cache.
Packed version: the app is downloaded at once in a package via HTTPS. The package is updated less frequently than the Web-version.
All of the apps above are submitted and maintained by @zhukov, so feel free to use them and report bugs here. Please do not report bugs which are only reproducible in different locations.
The app is based on the AngularJS JavaScript framework, and written in pure JavaScript. jQuery is used for DOM manipulations, and Bootstrap as the CSS-framework.
The project repository is based on angularjs-seed and includes gulp tasks, so it's easy to launch the app locally on your desktop.
Install node.js.
Install dependencies with:
Optionally, run the following commands in the project directory to install gulp globally:
This will install all the needed dependencies.
Just run npm start (gulp watch) to start the web server and the livereload task.
Open http://localhost:8000/app/index.html in your browser.
To run this application in Google Chrome as a packaged app, open this URL (in Chrome): chrome://extensions/, then tick ""Developer mode"" and press ""Load unpacked extension..."". Select the downloaded app folder and Webogram should appear in the list.
Run npm start (gulp watch) to watch for file changes and automatically rebuild the app.
To run this application in Firefox as a packaged app, open ""Menu"" -> ""Developer"" -> ""WebIDE"" (or hit Shift + F8). Choose ""Open packaged app"" from the Project menu and select the app folder.
Run npm start (gulp watch) to watch for file changes and automatically rebuild the app.
Run npm run clean (gulp clean), then npm run build (gulp publish) to build the minimized production version of the app. Copy dist folder contents to your web server. Don't forget to set X-Frame-Options SAMEORIGIN header (docs).
Besides the frameworks mentioned above, other libraries are used for protocol and UI needs. Here is the short list:
Many thanks to all these libraries' authors and contributors. A detailed list with descriptions and licenses is available here.
The source code is licensed under GPL v3. License is available here."
3999,"gamegos,cesi","CeSI is a web interface for managing multiple supervisors from the same place.. CeSI is a web interface for managing multiple supervisors from the same
place.
Supervisor has its own web UI but managing multiple supervisor installations is
hard with seperate UIs (If you are using the UI of course :). CeSI aims to solve
this problem by creating a centralized web UI, based on the RPC interface of
Supervisor.
Chef Cookbook
Package managers
Docker (unavailable)
Install Dependencies For Cesi Api
Install Cesi
Install Cesi as a service
Running Cesi with uWSGI
You may want to run Cesi using uWSGI (or any other WSGI deamon). Configure your system in the similiar way to running as a service and use uwsgi to start app. Check defaults/cesi-uwsgi.ini for details.
While running with uWSGI Cesi config host and port are ignored.
Please change password after first login!
Username: admin
Password: admin
[x] Fix user related api endpoints
[ ] Fix node log view
[x] Refactor the usage of config
[ ] Rewrite dockerfile and publish image on docker hub under gamegos
[ ] Improve Docs
[x] Do not use external adresses for javascript and css libraries
[ ] Use a logging lib
[ ] Better format for activity logs (tabbed date, level, component, message)
[ ] Auto refresh page
[ ] Option to select different templates
[x] Upgrade flask
[ ] Add tests
[ ] CI integration"
3947,"ConsenSys,smart-contract-best-practices","A guide to smart contract security best practices. Visit the documentation site: https://consensys.github.io/smart-contract-best-practices/
Read the docs in Chinese: https://github.com/ConsenSys/smart-contract-best-practices/blob/master/README-zh.md
Read the docs in Vietnamese: https://github.com/ConsenSys/smart-contract-best-practices/blob/master/README-vi.md
Feel free to submit a pull request, with anything from small fixes, to full new sections. If you are writing new content, please reference the contributing page for guidance on style. 
See the issues for topics that need to be covered or updated. If you have an idea you'd like to discuss, please chat with us in Gitter.
If you've written an article or blog post, please add it to the bibliography.  
You can also use the mkdocs serve command to view the site on localhost, and live reload whenever you save changes."
4913,"opf,openproject","OpenProject is the leading open source project management software.. OpenProject is a web-based project management software. Its key features are:
More information and screenshots can be found on our website.
If you want to run an instance of OpenProject in production (or for evaluation), refer to our
in-depth installation guides.
You found a bug? Please report it to our OpenProject community. Thank you!
OpenProject is supported by its community members, both companies and individuals.
We are always looking for new members to our community, so if you are interested in improving OpenProject we would be glad to welcome and support you getting into the code. There are guides as well, e.g. a Quick Start for Developers, but don't hesitate to simply contact us if you have questions.
Working on OpenProject comes with the satisfaction of working on a widely used open source application.
Also, if you do not want to be limited to working on open source in your free time, OpenProject GmbH, the company contributing to the OpenProject development, is hiring.
Here you can find our contact information. If you are interested in development or have general questions, feel free to also join our community discussion forums.
We take security very seriously at OpenProject. We value any kind of feedback that
will keep our community secure. If you happen to come across a security issue we urge
you to disclose it to us privately to allow our users and community enough time to
upgrade. Security issues will always take precedence over anything else in the pipeline.
For more information on how to disclose a security vulnerability, please see this page.
OpenProject is licensed under the terms of the GNU General Public License version 3.
See COPYRIGHT and LICENSE files for details.
Thanks to Vincent Le Moign and his fabulous Minicons icons on webalys.com.
Thanks to ≈Åukasz Dziedzic (aka ""tyPoland"") for his 'Lato' font.
Published and created by the OpenProject Foundation (OPF) under Creative Commons Attribution 3.0 Unported License
with icons from the following sources
Minicons Free Vector Icons Pack and
User Interface Design framework both by webalys
Creative Commons License
OpenProject Icon Font by the OpenProject Foundation (OPF) is licensed under Creative Commons Attribution 3.0 Unported License
and Free for both personal and commercial use. You can copy, adapt, remix, distribute or transmit it.
Under this condition: provide a mention of the ""OpenProject Foundation"" and a link back to OpenProject www.openproject.org."
4489,"travisjeffery,timecop","A gem providing ""time travel"", ""time freezing"", and ""time acceleration"" capabilities, making it simple to test time-dependent code. It provides a unified method to mock Time.now, Date.today, and DateTime.now in a single call.. A gem providing ""time travel"" and ""time freezing"" capabilities, making it dead simple to test time-dependent code.  It provides a unified method to mock Time.now, Date.today, and DateTime.now in a single call.
gem install timecop
Freeze time to a specific point.
Travel back to a specific point in time, but allow time to continue moving forward from there.
Scale time by a given scaling factor that will cause time to move at an accelerated pace.
No dependencies, can be used with any ruby project
Timecop api allows arguments to be passed into #freeze and #travel as one of the following:
Time instance
DateTime instance
Date instance
individual arguments (year, month, day, hour, minute, second)
a single integer argument that is interpreted as an offset in seconds from Time.now
Nested calls to Timecop#travel and Timecop#freeze are supported -- each block will maintain its interpretation of now.
Works with regular Ruby projects, and Ruby on Rails projects
Run a time-sensitive test
You can mock the time for a set of tests easily via setup/teardown methods
Set the time for the test environment of a rails app -- this is particularly
helpful if your whole application is time-sensitive.  It allows you to build
your test data at a single point in time, and to move in/out of that time as
appropriate (within your tests)
in config/environments/test.rb
freeze is used to statically mock the concept of now. As your program executes,
Time.now will not change unless you make subsequent calls into the Timecop API.
travel, on the other hand, computes an offset between what we currently think
Time.now is (recall that we support nested traveling) and the time passed in.
It uses this offset to simulate the passage of time.  To demonstrate, consider
the following code snippets:
Let's say you want to test a ""live"" integration wherein entire days could pass by
in minutes while you're able to simulate ""real"" activity. For example, one such use case
is being able to test reports and invoices that run in 30 day cycles in very little time, while also
being able to simulate activity via subsequent calls to your application.
See #42 for more information, thanks to Ken Mayer, David Holcomb, and Pivotal Labs.
Safe mode forces you to use Timecop with the block syntax since it always puts time back the way it was. If you are running in safe mode and use Timecop without the block syntax Timecop::SafeModeException will be raised to tell the user they are not being safe.
Sometimes Rails Date/Time methods don't play nicely with Ruby Date/Time methods.
Be careful mixing Ruby Date.today with Rails Date.tomorrow / Date.yesterday as things might break.
timecop is maintained by travisjeffery, and
was created by jtrupiano.
Here's the most direct way to get your work merged into the project.
Fork the project
Clone down your fork
Create a feature branch
Hack away and add tests, not necessarily in that order
Make sure everything still passes by running tests
If necessary, rebase your commits into logical chunks without errors
Push the branch up to your fork
Send a pull request for your branch"
3953,"ethjs,ethjs","A highly optimised, light-weight JS utility for Ethereum.. 
  <!-- Dependency Status -->
  
    
  

  <!-- devDependency Status -->
  
    
  

  <!-- Build Status -->
  
    
  

  <!-- NPM Version -->
  
    
  

  <!-- Test Coverage -->
  
    
  

  <!-- Javascript Style -->
  
    
  



A highly optimised, light-weight JS utility for Ethereum based on web3.js, but lighter, async only and using BN.js.
Only 106 kB minified!
Note, exports to window.Eth global.
A simple module for building dApps and applications that use Ethereum.
Please see our complete user-guide for more information.
Please help better the ecosystem by submitting issues and pull requests to ethjs. We need all the help we can get to build the absolute best linting standards and utilities. We follow the AirBNB linting standard and the unix philosophy.
You'll find more detailed information on using ethjs and tailoring it to your needs in our guides:
User guide - Usage, configuration, FAQ and complementary tools.
Developer guide - Contributing to ethjs and writing your own code and coverage.
Examples - Examples of ethjs in use.
There is always a lot of work to do, and will have many rules to maintain. So please help out in any way that you can:
Create, enhance, and debug ethjs rules (see our guide to ""Working on rules"").
Improve documentation.
Chime in on any open issue or pull request.
Open new issues about your ideas for making ethjs better, and pull requests to show us how your idea works.
Add new tests to absolutely anything.
Create or contribute to ecosystem tools.
Spread the word!
Please consult our Code of Conduct docs before helping out.
We communicate via issues and pull requests.
We would like to mention that we are not in any way affiliated with the Ethereum Foundation. However, we love the work they do and work with them often to make Ethereum great! Our aim is to support the Ethereum ecosystem with a policy of diversity, modularity, simplicity, transparency, clarity, optimization and extensibility.
Many of our modules use code from web3.js and the ethereumjs- repositories. We thank the authors where we can in the relevant repositories.
ethjs was built by a strong community of Ethereum developers. A special thanks to:
Fabian Vogelsteller - for his work on Mist and web3.js
Tim Coulter - for his work on TestRPC and Truffle
Aaron Davis - for his guidence and work on MetaMask and ethereumjs
Richard Moore - for his work on ethers-io and ethers-wallet from which so much of ethjs is build from
Karl Floersch - for his guidence and support
Martin B. - for his work on ethereumjs
Alex Beregszaszi - for his work on ethereumjs
Vitalik Buterin - for creating Ethereum
This project is licensed under the MIT license, Copyright (c) 2016 Nick Dodson. For more information see LICENSE.md."
5009,"abhishiv,dylan","Fine grained reactive UI library with first class support for SSR/HMR.. Fine grained reactive UI Library




npm: npm i dylanjs
cdn: https://cdn.jsdelivr.net/npm/dylanjs/+esm
Small. hello world at ~3kB gzip.
Truly reactive and fine grained. automatically derived from the app state.
Rich ecosystem. From router to graphQL integration.
DevEx. no compile step needed, choose your view syntax: h or &lt;JSX/&gt;.
The state part of this library is based on haptic specially the concept of aptly named Signals and Wires. Like haptic it also favours manual subscription model instead of automatic subscriptions model.
It's also influenced by Sinuous, Solid, & S.js
These are reactive read/write variables who notify subscribers when they've been written to. They are the only dispatchers in the reactive system.
The subscribers to signals are wires, which will be introduced next. They subscribe by read-subscribing the signal. This is an important distinction - signals have two types of reads!
This is unlike other reactive libraries, but it'll save us a lot of debugging. Separating the reads it makes subscribed reads an explicit and visually distinct action from passive reads. This makes Haptic an opt-in design, and it doesn't need the sample() function seen in other libraries. This is explained later when introducing wires, which is also where the $ value comes from.
These are task runners who subscribe to signals and react to signal writes. They hold a function (the task) and manage its subscriptions, nested wires, run count, and other metadata. The wire provides a $ token to the function call that, at your discretion as the developer, can use to read-subscribe to signals.
signal
wire
getContext
setContext
dylan-apollo"
4804,"r-lib,httr","httr: a friendly http package for R. <!-- badges: start -->



<!-- badges: end -->

The aim of httr is to provide a wrapper for the curl package, customised to the demands of modern web APIs.
Key features:
Functions for the most important http verbs: GET(), HEAD(), PATCH(), 
PUT(), DELETE() and POST().
Automatic connection sharing across requests to the same website (by
default, curl handles are managed automatically), cookies are maintained
across requests, and a up-to-date root-level SSL certificate store is used.
Requests return a standard reponse object that captures the http status line,
headers and body, along with other useful information.
Response content is available with content() as a raw vector (as =
""raw""), a character vector (as = ""text""), or parsed into an R object
(as = ""parsed""), currently for html, xml, json, png and jpeg.
You can convert http errors into R errors with stop_for_status().
Config functions make it easier to modify the request in common ways:
set_cookies(), add_headers(), authenticate(), use_proxy(), 
verbose(), timeout(), content_type(), accept(), progress().
Support for OAuth 1.0 and 2.0 with oauth1.0_token() and oauth2.0_token().
The demo directory has eight OAuth demos: four for 1.0 (twitter, vimeo,
withings and yahoo) and four for 2.0 (facebook, github, google, linkedin). 
OAuth credentials are automatically cached within a project. 
httr wouldn't be possible without the hard work of the authors of curl and libcurl. Thanks! httr is inspired by http libraries in other languages, such as Resty, Requests and httparty.
To get the current released version from CRAN:
To get the current development version from github:
Please note that the httr project is released with a Contributor Code of Conduct. By contributing to this project, you agree to abide by its terms."
4646,"vinitkumar,node-twitter","Twitter clone with node.js. 
Node twitter is an effort to rewrite some of Twitter's functionality using modern
javascript based toolchain. It was mostly an effort to learn Node.js and trying to reverse
engineer some of twitter's feature.
It has support for tweeting, commenting and following with analytics
You can support the development here by becoming a backer: https://opencollective.com/nodetwitter/


You are required to have Node.js and MongoDB installed if you'd like to run the app locally.
Install sass and grunt too to compile the CSS files
The configuration is in config/config.js. Please create your own
github application Github Developer Settings and replace the token and keys.
The fastest way to get this running is with docker. Docker bootstrap all dependencies and
you can just run these couple of commands to get it up and running.
Now, open the website on http://localhost:3000 and it should just work.
First, thank you for considering contributing to Node Twitter
! It's people like you that make the open source community such a great community! üòä
We welcome any type of contribution, not only code. You can help with
QA: file bug reports, the more details you can give the better (e.g. screenshots with the console open)
Marketing: writing blog posts, howto's, printing stickers, ...
Community: presenting the project at meetups, organizing a dedicated meetup for the local community, ...
Code: take a look at the open issues. Even if you can't write code, commenting on them, showing that you care about a given issue matters. It helps us triage them.
Money: we welcome financial contributions in full transparency on our open collective.
Working on your first Pull Request? You can learn how from this free series, How to Contribute to an Open Source Project on GitHub.
Any code change should be submitted as a pull request. The description should explain what the code does and give steps to execute it. The pull request should also contain tests.
The bigger the pull request, the longer it will take to review and merge. Try to break down large pull requests in smaller chunks that are easier to review and merge.
It is also always helpful to have some context for your pull request. What was the purpose? Why does it matter to you?
We also welcome financial contributions in full transparency on our open collective.
Anyone can file an expense. If the expense makes sense for the development of the community, it will be ""merged"" in the ledger of our open collective by the core contributors and the person who filed the expense will be reimbursed.
If you have any questions, create an issue (protip: do a quick search first to see if someone else didn't ask the same question before!).
You can also reach us at mail@vinitkumar.me
Thank you to all the people who have already contributed to node-twitter!








Thank you to all our backers! [Become a backer]

Thank you to all our sponsors! (please ask your company to also support this open source project by becoming a sponsor)










<!-- This `CONTRIBUTING.md` is based on @nayafia's template https://github.com/nayafia/contributing-template -->


Twitter is a registered trademark of Twitter Inc. This project is just for learning purposes and should be treated as such."
4691,"capaj,react-tweet-embed","react component which takes a tweet id in props and you'll get a tweet embed rendered once the twitter clientside API loads, nothing more. You don't have to put //platform.twitter.com/widgets.js script in your index.html as this lib will put it there if twttr is not found on window.
Embedded-Tweet Options Reference:
https://developer.twitter.com/en/docs/twitter-for-websites/embedded-tweets/guides/embedded-tweet-parameter-reference"
3964,"CSFrequency,react-firebase-hooks","React Hooks for Firebase.. A set of reusable React Hooks for Firebase.


Official support for Hooks was added to React Native in v0.59.0. React Firebase Hooks works with both the Firebase JS SDK and React Native Firebase, although some of the Flow and Typescript typings may be incorrect - we are investigating ways to improve this for React Native Firebase users.
This documentation is for v2 of React Firebase Hooks which involved a number of breaking changes, including switching from Object to Array returns - more details here. For v1 documentation, see here.
React Firebase Hooks requires React 16.8.0 or later and Firebase v5.0.0 or later.
This assumes that you‚Äôre using the npm package manager with a module bundler like Webpack or Browserify to consume CommonJS modules.
There has been a lot of hype around React Hooks, but this hype merely reflects that there are obvious real world benefits of Hooks to React developers everywhere.
This library explores how React Hooks can work to make integration with Firebase even more straightforward than it already is. It takes inspiration for naming from RxFire and is based on an internal library that we had been using in a number of apps prior to the release of React Hooks. The implementation with hooks is 10x simpler than our previous implementation.
After feedback on the initial release of React Firebase Hooks, we opted to change from Object to Array returns to allow for easier composition of hooks in v2.
To upgrade your project from v1 to v2 check out the Release Notes which have full details of everything that needs to be changed.
See LICENSE"
5010,"felipevilar,countries-rest","Integrate with the REST Countries API to pull country data and display it like in the designs. This is a solution to the REST Countries API with color theme switcher challenge on Frontend Mentor. Frontend Mentor challenges help you improve your coding skills by building realistic projects. 
Users should be able to:
See all countries from the API on the homepage
Search for a country using an input field
Filter countries by region
Click on a country to see more detailed information on a separate page
Click through to the border countries on the detail page
Toggle the color scheme between light and dark mode (optional)




Solution URL: GitHub Code
Live Site URL: Preview
VueJS
Quasar Framework
Axios
Typescript
Website - PORTFOLIO
Frontend Mentor - @felipevilar"
4675,"EvanAgee,vuejs-wordpress-theme-starter","A WordPress theme with the guts ripped out and replaced with Vue.. A true WordPress theme with the guts ripped out and replaced with Vue.
Who's this for? When I started diving into using Vue in WordPress I found plenty of great starters for headless WordPress, but I had the added constraint of needing to run the front and backend on the same host, thus this project was created.
VueRouter integrated
Vuex integrated (with sample WordPress-centric modules)
Axios for API requests
Follows the development guidelines/structure set forth by Vuejs
Bare essentials needed for a functional WordPress theme
All requests are redirected back to the index.php so your Vue routing is respected.
PostCSS support

Clone the repo inside of your wp-content/themes/ directory
Navigate to the theme directory and run
npm install
npm run watch for development
npm run production when you're ready to deploy the theme.
Not sure where to begin? The Vuejs documentation is actually amazing, but if you're looking for video training I highly recommend the free Learn Vue 2: Step By Step course over at Laracasts. There's also a great playlist by Academind available on YouTube that covers pretty much everything you'd want to know about building a fully-featured Vue app.
I've created a couple of example components in src/components/widgets to give you an idea of how to work with the Vuex store data.
If you're new to Vue/Vuex I would do the following:
Open up src/app.js this is the main JS file for the app and will give you a glimpse into what's going on behind the scenes.
Next open up src/App.vue this is the primary app component, a page wrapper of sorts. It contains the header/footer and the &lt;router-view&gt; component which is what loads in all of the other screens as you navigate around the app. Note that by default src/components/Home.vue is loaded into the router-view initially.
Next open up src/routes/index.js and notice how the routes are setup by default. Out of the box there is only one route, the / or home view. For more information on setting up routing within your app checkout Vue-Router.
Next is the Vuex store. I won't cover how that works here as it's a tiny bit more advanced. Check out all files in src/store and start to familiarize yourself with what's going on. It's based on the official Vuex example project setup and uses Vuex modules. By default I've included a couple of modules I thought you might need.
The first thing you're probably going to want to do is start editing and components in src/components/.
All of the code you're going to edit is located in /src/. From there it's broken into a few logical directories.
/src
/api for API requests
/assets for images mostly
/components Vue components
/router vue-router directives
/store vuex store and modules
/assets/css CSS styles
/vendor 3rd party scripts and libraries
All scripts and styles in /src are compiled down to the /dist directory, which is what you will deploy. When you're ready to deploy don't deploy the src/ directory.
More documentation
Support for postcss
New css style examples
Cache busters for js and css
Updated outdated npm packages
Recent post and Page widgets to use router-link
Removed Laravel Mix and replaced with standard webpack config
Example Firebase integration
jQuery
Several unused npm dependencies
Bootstrap / Bootstrap Vue
Several variables that were stored on the window object
Support for sass styling (switched to postcss)
Default routing for posts and pages. @EvanAgee
Views for posts and pages. @EvanAgee
getters for pages. @EvanAgee
Examples for fetching pages/posts with either Vuex actions OR in component. @EvanAgee
Activated LocalStorage plugin in store. @EvanAgee
Loader component. @EvanAgee
UglifyJS. @EvanAgee
status_header(200) to keep Wordpress from returning 404 for vue-router paths.
vue-slick dependency
vue2-google-maps dependency
unnecessary header/footer php files
the-tailor dependency
font-awesome dependency
Updated webpack (Larevel Mix) config
Switched from Bootstrap to Bootstrap-Vue
Fixed index.php
More documnentation. @EvanAgee
Post module. @EvanAgee
A few code comments. @EvanAgee
Example widgets for posts and pages. @EvanAgee
Home page to display the posts and pages widgets. @EvanAgee
Initial commit"
3981,"r-park,todo-angular-firebase","Todo app with Angular CLI ‚Ä¢ AngularFire2 ‚Ä¢ Firebase ‚Ä¢ OAuth ‚Ä¢ SW-Precache. A simple Todo app example built with Angular, Angular CLI and AngularFire2. The app features a Firebase backend with OAuth authentication. Try the demo at ng2-todo-app.firebaseapp.com.
Angular 4
Angular CLI
AngularFire2 4.0.0-rc.1
Firebase
RxJS
SASS
Typescript
Create a free Firebase account at https://firebase.google.com
Create a project from your Firebase account console
Configure the authentication providers for your Firebase project from your Firebase account console
Edit .firebaserc in the project root:
Edit the firebase configuration in src/environments/firebase.ts"
3828,"apexcharts,vue-apexcharts","üìä Vue.js component for ApexCharts. 


  
  
  



   


Vue.js wrapper for ApexCharts to build interactive visualizations in vue.



To create a basic bar chart with minimal configuration, write as follows:
This will render the following chart


Simple! Just change the series or any option and it will automatically re-render the chart.  Click on the below example to see this in action


Important: While updating the options, make sure to update the outermost property even when you need to update the nested property.
‚úÖ Do this
‚ùå Not this
You don't actually need to call updateSeries() or updateOptions() manually. Changing the props will automatically update the chart. You only need to call these methods to update the chart forcefully.
How to call the methods mentioned above?
Sometimes, you may want to call methods of the core ApexCharts library from some other place, and you can do so on this.$apexcharts global variable directly. You need to target the chart by <code>chart.id</code> while calling this method
Example
In the above method, vuechart-example is the ID of chart, updateSeries is the name of the method you want to call and the third parameter is the new Series you want to update.
More info on the .exec() method can be found here
All other methods of ApexCharts can be called the same way.
The repository includes the following files and directories.
Basic Examples are included to show how to get started using ApexCharts with Vue easily.
To run the examples,
ApexCharts is an open source project.  You can help by becoming a sponsor on Patreon or doing a one time donation on PayPal 
 
Vue-ApexCharts is released under MIT license. You are free to use, modify and distribute this software, as long as the copyright header is left intact."
4910,"DevDungeon,Cookbook","Code snippets for various programming languages and libraries. A cookbook in the programming context is collection of tiny programs that each demonstrate a particular programming concept. The Cookbook Method is the process of learning a programming language by building up a repository of small programs that implement specific programming concepts. Starting with a Hello World program and building the knowledge piece by piece on top of that.
If you are a beginner, you will probably want to start out with one language like Python and start building up your repetoire of snippets for reference and confidence. If you are a seasoned developer, you may want to start building a cookbook from scratch for a new language you have never used, or keep a cookbook for more advanced topics in a language you are already familiar with.
Here is an example of when my Cookbook comes in handy. Recently I was faced with a situation where I needed to make an HTTP request to an API, parse the JSON response, generate a CSV spreadsheet, and email the spreadsheet. Because I already had my own cookbook snippets for doing each of those three actions, it was really easy to put together a program that did what I needed it to.

You can share it with others
Learn topics that are interesting to you
You build up your knowledge in small increments
You can see your progress over time
You have a library of reference material in your own style.
It is quicker than looking up documentation or looking for a Stack Overflow answer.
Explore new topics
Learn new programming languages.
Tips for Building a Cookbook
Store your cookbook in a version control system like Git.
Keep a to do list of topics or programming languages you want to explore and learn
It does not have to be just code. I have a lot of plain text .txt files with notes on things like how to create a Python pip package, creating Ruby Gems, or how to create a runnable JAR in Java. Sometimes tips on installing prerequisites if something was difficult or just notes on how to compile and run programs.
It can also be template programs. For example I have a base chrome browser extension that doesn't really do anything itself, but it is a fully functional extension with all the boilerplate done and ready for me to start developing.
Programs should be fully runnable and not just chunks of code without context that do not compile and execute
Keep the snippets small, simple and to one topic
Everyone has different goals with programming so identify topics relevant to your interests. Here are some ideas if you do not know where to get started.
Hello, world
Getting user input from stdin
Taking command line arguments
Reading and writing files
Using TCP sockets
Making HTTP requests
Parsing JSON
Creating a CSV file
Making database connections
Playing an audio file
Multithreading
Drawing 2D graphics to screen
Drawing 3D graphics to screen
GUI programming
http://www.devdungeon.com/cookbook
https://github.com/DevDungeon/Cookbook
John ""NanoDano"" Leon &#110;&#97;&#110;&#111;&#100;&#97;&#110;&#111;&#64;&#100;&#101;&#118;&#100;&#117;&#110;&#103;&#101;&#111;&#110;&#46;&#99;&#111;&#109;
https://www.devdungeon.com"
4074,"google,gts","‚òÇÔ∏è TypeScript style guide, formatter, and linter.  . Google TypeScript Style






gts is Google's TypeScript style guide, and the configuration for our formatter, linter, and automatic code fixer. No lint rules to edit, no configuration to update, no more bike shedding over syntax.
To borrow from standardjs:
No configuration. The easiest way to enforce consistent style in your project. Just drop it in.
Automatically format code. Just run gts fix and say goodbye to messy or inconsistent code.
Catch style issues & programmer errors early. Save precious code review time by eliminating back-and-forth between reviewer & contributor.
Opinionated, but not to a fault. We recommend you use the default configuration, but if you need to customize compiler or linter config, you can.
Under the covers, we use tslint to enforce the style guide and provide automated fixes, and prettier to re-format code.
The easiest way to get started is to run:
When you run the npx gts init command, it's going to do a few things for you:
Adds an opinionated tsconfig.json file to your project that uses the Google TypeScript Style.
Adds the necessary devDependencies to your package.json.
Adds scripts to your package.json:
check: Lints and checks for formatting problems.
fix: Automatically fixes formatting and linting problems (if possible).
clean: Removes output files.
compile: Compiles the source code using TypeScript compiler.
pretest, posttest and prepare: convenience integrations.
If a source folder is not already present it will add a default template project.
The commands above will all run in the scope of the current folder.  Some commands can be run on individual files:
Show your love for gts and include a badge!

Made with ‚ù§Ô∏è by the Google Node.js team.
NOTE: This is not an official Google product."
4825,"antchfx,xquery","Extract data or evaluate value from HTML/XML documents using XPath. NOTE: This package is deprecated. Recommends use htmlquery and xmlquery package, get latest version to fixed some issues.
Golang package, lets you extract data from HTML/XML documents using XPath expression.
List of supported XPath functions you can found here XPath Package.
go get github.com/antchfx/xquery
Extract data from HTML document.
Extract data from XML document."
4434,"webtorrent,instant.io","üöÄ Streaming file transfer over WebTorrent (torrents on the web). 

  
  


<h4 align=""center"">Streaming file transfer over WebTorrent (torrents on the web)</h4>


  
  


Download/upload files using the WebTorrent protocol (BitTorrent
over WebRTC). This is a beta.
Powered by WebTorrent, the first torrent client that works in the
browser without plugins. WebTorrent is powered by JavaScript and WebRTC. Supports Chrome,
Firefox, Opera (desktop and Android). Run <code>localStorage.debug = '*'</code> in the
console and refresh to get detailed log output.
If you just want to do file transfer on your site, or fetch/seed files over WebTorrent, then there's no need to run a copy of instant.io on your own server. Just use the WebTorrent script directly. You can learn more at https://webtorrent.io.
The client-side code that instant.io uses is here.
To get a clone of https://instant.io running on your own server, follow these instructions.
Get the code:
Modify the configuration options in config.js to set the IP/port you want the server to listen on.
Copy secret/index-sample.js to secret/index.js and set the Twilio API key if you want a NAT traversal service (to help peers connect when behind a firewall).
To start the server, run npm start. That should be it!
https://torrent.partidopirata.org/
https://instant-io.glitch.me/
Create a shareable link by adding a torrent infohash or magnet link to the end
of the URL. For example: https://instant.io#INFO_HASH or https://instant.io/#MAGNET_LINK.
You can add multiple torrents in the same browser window.
MIT. Copyright (c) WebTorrent, LLC."
4232,"oscarmorrison,md-page","üìù create a webpage with just markdown. 
  
 

Create a webpage with just markdown!
Create a new html page, my-page.html
Add the following script tag at the very top of the page
Write some markdown
(see the docs for more info)
editable demo: https://jsbin.com/katuyos/edit?html,output
live demo: https://oscarmorrison.com/md-page/
"
5026,"exqt,pixel-font-maker","ÌîΩÏÖÄ Ìè∞Ìä∏Î•º ÎîîÏûêÏù∏ÌïòÍ≥† TTF, WOFF2, BDF ÌååÏùºÎ°ú ÎÇ¥Î≥¥ÎÇº Ïàò ÏûàÎäî ÌîÑÎ°úÍ∑∏Îû®ÏûÖÎãàÎã§. ÌîΩÏÖÄ Ìè∞Ìä∏Î•º ÎîîÏûêÏù∏ÌïòÍ≥† TTF, WOFF2, BDF ÌååÏùºÎ°ú ÎΩëÏùÑ Ïàò ÏûàÎäî ÌîÑÎ°úÍ∑∏Îû®ÏûÖÎãàÎã§.

mouse (left, right) (Ïπ†ÌïòÍ∏∞, ÏßÄÏö∞Í∏∞)
keyboard (left, right, up, down) (Î≥¥Îìú Ïù¥Îèô)
ctrl + (z, x, c, v) (ÎêòÎèåÎ¶¨Í∏∞, ÏûêÎ•¥Í∏∞, Î≥µÏÇ¨, Î∂ôÏó¨ÎÑ£Í∏∞)
(1, 2, 3) (Î∏åÎü¨Ïãú ÌÅ¨Í∏∞ Ï°∞Ï†à)
ctrl+s (ÌîÑÎ°úÏ†ùÌä∏ Ï†ÄÏû•)
ComponentsÏóêÏÑú Ïª¥Ìè¨ÎÑåÌä∏Î•º Ï¢åÌÅ¥Î¶≠ÌïòÎ©¥ Ìï¥Îãπ Ïª¥Ìè¨ÎÑåÌä∏Î•º Ìé∏ÏßëÌï©ÎãàÎã§. Ïö∞ÌÅ¥Î¶≠ÌïòÎ©¥ Ìï¥Îãπ Ïª¥Ìè¨ÎÑåÌä∏Î•º ÏßÄÏö∏ Ïàò ÏûàÏäµÎãàÎã§.
Ïª¥Ìè¨ÎÑåÌä∏Î•º ÏÑ†ÌÉùÌïú Îã§Ïùå ctrl+gÎ•º ÎàÑÎ•¥Î©¥ Ìï¥Îãπ Ïª¥Ìè¨ÎÑåÌä∏Î•º Í∞ÄÏßÄÎäî Í∏ÄÎ¶¨ÌîÑÎì§ÏùÑ Î™®ÏïÑ Í∏ÄÎ¶¨ÌîÑÏÖãÏùÑ ÎßåÎì≠ÎãàÎã§.
Descent : baseline Í∏∞Ï§ÄÏúºÎ°ú Í∞ÄÏû• ÏïÑÎûòÏ™ΩÍπåÏßÄÏùò Í∏∏Ïù¥
Ascent : baseline Í∏∞Ï§ÄÏúºÎ°ú Í∞ÄÏû• ÏúÑÏ™ΩÍπåÏßÄÏùò Í∏∏Ïù¥
WidthType
Monospace : Î™®Îì† Í∏ÄÎ¶¨ÌîÑÍ∞Ä ÎÑàÎπÑÍ∞Ä Fixed-WidthÏùò Î∞∞ÏàòÍ∞Ä ÎêòÎèÑÎ°ù ÏÑ§Ï†ïÎê©ÎãàÎã§.
Proportional : Í∏ÄÎ¶¨ÌîÑÏùò ÎÑàÎπÑÍ∞Ä (Í∞ÄÏû• Ïò§Î•∏Ï™ΩÏóê ÏûàÎäî ÌîΩÏÖÄÍπåÏßÄÏùò XÍ±∞Î¶¨) + (Letter Spacing) Í∞Ä ÎêòÎèÑÎ°ù ÏÑ§Ï†ïÎê©ÎãàÎã§.
ÏúÑÏùò Í∑úÏπôÍ≥º Îã§Î•¥Í≤å ÎÑàÎπÑÎ•º ÏÑ§Ï†ïÌïòÍ≥† Ïã∂Îã§Î©¥ ÏóêÎîîÌÑ∞ ÌïòÎã®Ïóê Advance WidthÎ•º ÌÅ¥Î¶≠Ìï¥ÏÑú ÏÑ§Ï†ïÌïòÎ©¥ Îê©ÎãàÎã§.
ÌïúÍ∏Ä ÌÖúÌîåÎ¶øÏùÑ ÏÇ¨Ïö©ÌïòÎ©¥ Î™®Îì† ÌïúÍ∏Ä Í∏ÄÏûê (11172Ïûê) Î•º ÌïòÎÇòÌïòÎÇò Ï∞çÎäî ÎåÄÏã† ÌòïÌÉúÏóê ÎßûÍ≤å Ï¥àÏÑ±, Ï§ëÏÑ±, Ï¢ÖÏÑ±ÏùÑ Îî∞Î°ú Ï∞çÏñ¥ Ï°∞Ìï©ÌïòÎäî ÏãùÏúºÎ°ú ÏûëÏóÖÎüâÏù¥ Ï§ÑÏñ¥Îì≠ÎãàÎã§. (172Í∞ú ÎòêÎäî 344Í∞ú ÏûêÎ™®Îßå Ï∞çÏúºÎ©¥ Îê©ÎãàÎã§.)
ÌîÑÎ°úÏ†ùÌä∏Î•º ÎßåÎì§ Îïå ÌïúÍ∏Ä ÌÖúÌîåÎ¶øÏùÑ ÏÑ†ÌÉù (ÏûêÎ™® Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Private Set Í∏ÄÎ¶¨ÌîÑÏÖãÏóêÏÑú ÏÉùÏÑ±Îê©ÎãàÎã§.)
Korean Syllable (Î™®Îì† 11172Ïûê) ÎòêÎäî KS X 1001 Korean Syllable (ÏûêÏ£º Ïì∞Îäî 2350Ïûê) Í∏ÄÎ¶¨ÌîÑÏÖãÏùÑ ÏÑ†ÌÉù
Components ÏóêÏÑú ÏûêÎ™® Ïª¥Ìè¨ÎÑåÌä∏Î•º ÏÑ†ÌÉùÌï¥ÏÑú Í∑∏Î¶¨Í∏∞
Ï∂úÏ≤ò : ZIKÎãò GMS ÌïúÍ∏Ä Ï°∞Ìï© Î†åÎçîÎßÅ
Ï¥àÏÑ± 4Î≤å, Ï§ëÏÑ± 2Î≤å, Ï¢ÖÏÑ± 2Î≤å (4*19 + 2*21 + 2*27) = 172Ïûê
Ï¥àÏÑ± : Ï¥ù 4Î≤å (4Ï§Ñ)
1Î≤å : Î∞õÏπ® ÏûàÍ≥† Ï§ëÏÑ± [„Öè „Öê „Öë „Öí „Öì „Öî „Öï „Öñ „Ö£] ÏôÄ Í≤∞Ìï© (EX : Î®Ñ, Î®†, ÎØ∏)
2Î≤å : Î∞õÏπ® ÏûàÍ≥† Ï§ëÏÑ± [„Öó „Öò „Öô „Öö „Öõ „Öú „Öù „Öû „Öü „Ö† „Ö° „Ö¢] ÏôÄ Í≤∞Ìï© (EX : Ïòπ, Ïô±, Ïúµ)
3Î≤å : Î∞õÏπ® ÏóÜÍ≥† Ï§ëÏÑ± [„Öè „Öê „Öë „Öí „Öì „Öî „Öï „Öñ „Ö£] ÏôÄ Í≤∞Ìï© (EX : Í∞ú, ÎÑ§, ÏïÑ)
4Î≤å : Î∞õÏπ® ÏóÜÍ≥† Ï§ëÏÑ± [„Öó „Öò „Öô „Öö „Öõ „Öú „Öù „Öû „Öü „Ö† „Ö° „Ö¢] ÏôÄ Í≤∞Ìï© (EX : Ïò§, Îáå, ÏúÑ)
Ï§ëÏÑ± : Ï¥ù 2Î≤å (2Ï§Ñ)
1Î≤å : Î∞õÏπ® ÏûàÎäî Í∏ÄÏûêÏùò Ï§ëÏÑ±Î∂ÄÎ∂Ñ (EX : Í∞ê, Í¥®, Íµº)
2Î≤å : Î∞õÏπ® ÏóÜÎäî Í∏ÄÏûêÏùò Ï§ëÏÑ±Î∂ÄÎ∂Ñ (EX : Ïò§, Ïö∞, Ïïº)
Ï¢ÖÏÑ±(Î∞õÏπ®) : Ï¥ù 2Î≤å (2Ï§Ñ)
1Î≤å : Ï§ëÏÑ± [„Öè „Öê „Öë „Öí „Öì „Öî „Öï „Öñ „Ö£] ÏôÄ Í≤∞Ìï© (EX : Ìé≠, Í∑Ñ, Ïõ±)
2Î≤å : Ï§ëÏÑ± [„Öó „Öò „Öô „Öö „Öõ „Öú „Öù „Öû „Öü „Ö† „Ö° „Ö¢] ÏôÄ Í≤∞Ìï© (EX : Î´î, Î≠Ñ, Î∞à)
Ï∂úÏ≤ò : ZIKÎãò GMS ÌïúÍ∏Ä Ï°∞Ìï© Î†åÎçîÎßÅ
Ï¥àÏÑ± 8Î≤å, Ï§ëÏÑ± 4Î≤å, Ï¢ÖÏÑ± 4Î≤å (8*19 + 4*21 + 4*27) = 344Ïûê
Ï¥àÏÑ± : Ï¥ù 8Î≤å (8Ï§Ñ)
1Î≤å : Î∞õÏπ®ÏóÜÎäî [„Öè „Öê „Öë „Öí „Öì „Öî „Öï „Öñ „Ö£] ÏôÄ Í≤∞Ìï©
2Î≤å : Î∞õÏπ®ÏóÜÎäî [„Öó „Öõ „Ö°]
3Î≤å : Î∞õÏπ®ÏóÜÎäî [„Öú „Ö†]
4Î≤å : Î∞õÏπ®ÏóÜÎäî [„Öò „Öô „Öö „Ö¢]
5Î≤å : Î∞õÏπ®ÏóÜÎäî [„Öù „Öû „Öü]
6Î≤å : Î∞õÏπ® ÏûàÎäî [„Öè „Öê „Öë „Öí „Öì „Öî „Öï „Öñ „Ö£] ÏôÄ Í≤∞Ìï©
7Î≤å : Î∞õÏπ®ÏûàÎäî [„Öó „Öõ „Öú „Ö† „Ö°]
8Î≤å : Î∞õÏπ®ÏûàÎäî [„Öò „Öô „Öö „Ö¢ „Öù „Öû „Öü]
Ï§ëÏÑ± : Ï¥ù 4Î≤å (4Ï§Ñ)
1Î≤å : Î∞õÏπ®ÏóÜÎäî [„Ñ± „Öã] ÏôÄ Í≤∞Ìï© (EX : Í¥¥, Í∞Ä, ÌÅê, Ï∫¨)
2Î≤å : Î∞õÏπ®ÏóÜÎäî [„Ñ± „Öã] Ïù¥Ïô∏Ïùò ÏûêÏùåÍ≥º Í≤∞Ìï© (EX : Ïô∏, ÎÇò, Î•ò, Î®Ä)
2Î≤å : Î∞õÏπ® ÏûàÎäî [„Ñ± „Öã] ÏôÄ Í≤∞Ìï© (EX : Í¥ë, ÏæÖ, Íµâ, Í¥Ω)
3Î≤å : Î∞õÏπ®ÏûàÎäî [„Ñ± „Öã] Ïù¥Ïô∏Ïùò ÏûêÏùåÍ≥º Í≤∞Ìï© (EX : ÏõÖ, ÏñÖ, ÏïΩ, ÏïΩ)
Ï¢ÖÏÑ± : Ï¥ù 4Î≤å (4Ï§Ñ)
1Î≤å : Ï§ëÏÑ± [„Öè „Öë „Öò] ÏôÄ Í≤∞Ìï©
2Î≤å : Ï§ëÏÑ± [„Öì „Öï „Öö „Öù „Öü „Ö¢ „Ö£]
3Î≤å : Ï§ëÏÑ± [„Öê „Öí „Öî „Öñ „Öô „Öû]
4Î≤å : Ï§ëÏÑ± [„Öó „Öõ „Öú „Ö† „Ö°]
Ï∂úÏ≤ò : UnBitFonts
Ï¥àÏÑ± 10Î≤å, Ï§ëÏÑ± 6Î≤å, Ï¢ÖÏÑ± 4Î≤å (10*19 + 6*21 + 4*27) = 424Ïûê
Ï¥àÏÑ± : Ï¥ù 10Î≤å
1Î≤å : Î∞õÏπ® ÏóÜÎäî [„Öè „Öê „Öë „Öí „Öì „Öî „Öï „Öñ „Ö£]
2Î≤å : Î∞õÏπ® ÏóÜÎäî [„Öó „Öõ „Ö°]
3Î≤å : Î∞õÏπ® ÏóÜÎäî [„Öú „Ö†]
4Î≤å : Î∞õÏπ® ÏóÜÎäî [„Öò „Öô „Öö „Ö¢]
5Î≤å : Î∞õÏπ® ÏóÜÎäî [„Öù „Öû „Öü]
6Î≤å : Î∞õÏπ® ÏûàÎäî [„Öè „Öê „Öë „Öí „Öì „Öî „Öï „Öñ „Ö£]
7Î≤å : Î∞õÏπ® ÏûàÎäî [„Öó „Öõ „Ö°]
8Î≤å : Î∞õÏπ® ÏûàÎäî [„Öú „Ö†]
9Î≤å : Î∞õÏπ® ÏûàÎäî [„Öò „Öô „Öö „Ö¢]
10Î≤å : Î∞õÏπ® ÏûàÎäî [„Öù „Öû „Öü]
Ï§ëÏÑ± : Ï¥ù 6Î≤å
1Î≤å : Î∞õÏπ® ÏóÜÎäî Ï¥àÏÑ± [„Ñ± „Öã] Í≥º Í≤∞Ìï©
2Î≤å : Î∞õÏπ® ÏûàÎäî Ï¥àÏÑ± [„Öé] Í≥º Í≤∞Ìï©
3Î≤å : Î∞õÏπ® ÏóÜÎäî Ï¥àÏÑ± [„Ñ± „Öã „Öé] Ïù¥Ïô∏Ïùò Ï¥àÏÑ±Í≥º Í≤∞Ìï©
4Î≤å : Î∞õÏπ® ÏûàÎäî Ï¥àÏÑ± [„Ñ± „Öã] Í≥º Í≤∞Ìï©
5Î≤å : Î∞õÏπ® ÏûàÎäî Ï¥àÏÑ± [„Öé] Í≥º Í≤∞Ìï©
6Î≤å : Î∞õÏπ® ÏûàÎäî Ï¥àÏÑ± [„Ñ± „Öã „Öé] Ïù¥Ïô∏Ïùò Ï¥àÏÑ±Í≥º Í≤∞Ìï©
Ï¢ÖÏÑ± : Ï¥ù 4Î≤å
1Î≤å : Ï§ëÏÑ± [„Öè „Öë „Öò „Ö£]
2Î≤å : Ï§ëÏÑ± [„Öì „Öï „Öö „Öù „Öü „Ö¢]
3Î≤å : Ï§ëÏÑ± [„Öê „Öí „Öî „Öñ „Öô „Öû]
4Î≤å : Ï§ëÏÑ± [„Öó „Öõ „Öú „Ö† „Ö°]
Ï∂úÏ≤ò : UnBitFonts
Ï¥àÏÑ± 10Î≤å, Ï§ëÏÑ± {3,4}Î≤å, Ï¢ÖÏÑ± 4Î≤å (10*19 + (3*14 + 4*7) + 4*27) = 368Ïûê
Ï¥àÏÑ± : Ï¥ù 10Î≤å
1Î≤å : Î∞õÏπ® ÏóÜÎäî [„Öè „Öê „Öë „Öí „Öì „Öî „Öï „Öñ „Ö£]
2Î≤å : Î∞õÏπ® ÏóÜÎäî [„Öó „Öõ „Ö°]
3Î≤å : Î∞õÏπ® ÏóÜÎäî [„Öú „Ö†]
4Î≤å : Î∞õÏπ® ÏóÜÎäî [„Öò „Öô „Öö „Ö¢]
5Î≤å : Î∞õÏπ® ÏóÜÎäî [„Öù „Öû „Öü]
6Î≤å : Î∞õÏπ® ÏûàÎäî [„Öè „Öê „Öë „Öí „Öì „Öî „Öï „Öñ „Ö£]
7Î≤å : Î∞õÏπ® ÏûàÎäî [„Öó „Öõ „Ö°]
8Î≤å : Î∞õÏπ® ÏûàÎäî [„Öú „Ö†]
9Î≤å : Î∞õÏπ® ÏûàÎäî [„Öò „Öô „Öö „Ö¢]
10Î≤å : Î∞õÏπ® ÏûàÎäî [„Öù „Öû „Öü]
Ï§ëÏÑ± : Ï¥ù 3+4Î≤å
[„Öè„Öê„Öë„Öí„Öì„Öî„Öï„Öñ„Öú„Öù„Öû„Öü„Ö†„Ö£]
1Î≤å : Î∞õÏπ® ÏóÜÏùå
2Î≤å : Î∞õÏπ® [„Ñ¥] Í≥º Í≤∞Ìï©
3Î≤å : Î∞õÏπ® [„Ñ¥] Ïù¥Ïô∏Ïùò Î∞õÏπ®Í≥º Í≤∞Ìï©
[„Öó„Öò„Öô„Öö„Öõ„Ö°„Ö¢]
4Î≤å : Î∞õÏπ® ÏóÜÎäî Ï¥àÏÑ± [„Ñ± „Öã] Í≥º Í≤∞Ìï©
5Î≤å : Î∞õÏπ® ÏóÜÎäî Ï¥àÏÑ± [„Ñ± „Öã] Ïù¥Ïô∏Ïùò Ï¥àÏÑ±Í≥º Í≤∞Ìï©
6Î≤å : Î∞õÏπ® ÏûàÎäî Ï¥àÏÑ± [„Ñ± „Öã] Í≥º Í≤∞Ìï©
7Î≤å : Î∞õÏπ® ÏûàÎäî Ï¥àÏÑ± [„Ñ± „Öã] Ïù¥Ïô∏Ïùò Ï¥àÏÑ±Í≥º Í≤∞Ìï©
Ï¢ÖÏÑ± : Ï¥ù 4Î≤å
1Î≤å : Ï§ëÏÑ± [„Öè „Öë „Öò „Ö£]
2Î≤å : Ï§ëÏÑ± [„Öì „Öï „Öö „Öù „Öü „Ö¢]
3Î≤å : Ï§ëÏÑ± [„Öê „Öí „Öî „Öñ „Öô „Öû]
4Î≤å : Ï§ëÏÑ± [„Öó „Öõ „Öú „Ö† „Ö°]"
3945,"AugurProject,augur-ui","Augur UI. Augur is a decentralized prediction market platform built on Ethereum.
It runs locally in your browser and communicates directly with the ethereum network, without going through intermediate servers.
There are several configurations to run it on testnet:
Easiest: visit dev.augur.net
Partial Local: run ethereum client locally
Full Local: run everything locally
Development Environment Setups: various configurations
Production:
There is an electron app that contains augur-node and augur UI. This app allows the user to point to testnets and mainnet. Augur App. It is a faster way to interact with mainnet because augur-node is local. Enjoy!
In the following configurations we use rinkeby testnet, here is how to get an account:
You also can use Metamask to create a rinkeby account (easiest)
After you install Metamask web browser plugin, you can change the Network to Rinkeby and choose the create account menu option
Download geth and create rinkeby account
(download geth)[https://www.ethereum.org/cli]
(geth account commands)[https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts]
After putting in your passphrase you will get your address. You can get your secret/private key and import into metamask and connect to augur UI. Location of keystore file depends on os. ie. ~/Library/Ethereum/rinkeby/keystore/<'UTC--timestamp--account hash'>. This file can be used to extract private key. Instructions are beyond the scope of this readme.
We are hosting the UI for testnets, dev.augur.net points to rinkeby ethereum testnet node
Simply point your web browser to  dev.augur.net
We'll run the UI locally and use the rinkeby augur-node. We will build and host the UI locally and use the same env.json configuration as the 'Easiest' section.
A Note to Windows 10 Users:
Turn on Developer Mode and also enable Windows Subsystem For Linux so that you have access to bash.
Run all subsequent commands within the bash command prompt.
It's also recommend that you use a Debian based workflow for the installation of packages (makes things much easier).
Here are the versions we used for development.
This will create a build folder inside of the augur-ui directory with all the files necessary to run the client.
Simply copy these files to your web server of choice.
After git cloning UI source let docker build UI and create a docker image. Then run the docker container (from just built image) that will host augur UI locally and usings rinkeby augur-node and rinkeby ethereum node
dockerized augur-ui client
We are using prettier to maintain formatting standards.Please install the relevant editor extension for your editor.
These instructions go through running local ethereum node, augur-node and augur UI. This will create a local environment contracts loaded with canned data.
Full instructions are here dev-local-node
JSON RPC API Documentation
Javascript Console
We use Clubhouse.io for our issue tracker. If you would like to contribute, please join us on Discord (https://discordapp.com/invite/JwEtX9P) and provide us with your email address so we can grant you access to our Clubhouse.
Since our code is structured in many small files that are named the same as the state/functionality they represent, rather than try to follow and reverse engineer code paths, just blindly search all filenames for whatever it is you are looking for. More often than not, you will find what you need.
Want to know where the css for pagination is? Don't bother tracing where/how they're included, just search your files for pag >>>and pagination.less will pop up.
Want to see how the login account gets updated? Search the files for login >>> and update-login-account.js will appear.
To verify the ethereum node and augur-node the UI is connected see the Configuration at:  http://localhost:8080/config/env.json

As an open source project, we'd like to thank BrowserStack for providing free access to their environment testing platform!"
4409,"googleapis,nodejs-firestore","Node.js client for Google Cloud Firestore: a NoSQL document database built for automatic scaling, high performance, and ease of application development.. 



This is the Node.js Server SDK for Google Cloud Firestore. Google Cloud Firestore is a NoSQL document database built for automatic scaling, high performance, and ease of application development.
This Cloud Firestore Server SDK uses Google‚Äôs Cloud Identity and Access Management for authentication and should only be used in trusted environments. Your Cloud Identity credentials allow you bypass all access restrictions and provide read and write access to all data in your Cloud Firestore project.
The Cloud Firestore Server SDKs are designed to manage the full set of data in your Cloud Firestore project and work best with reliable network connectivity. Data operations performed via these SDKs directly access the Cloud Firestore backend and all document reads and writes are optimized for high throughput.
Applications that use Google&#x27;s Server SDKs should not be used in end-user environments, such as on phones or on publicly hosted websites. If you are developing a Web or Node.js application that accesses Cloud Firestore on behalf of end users, use the firebase Client SDK.
Note: This Cloud Firestore Server SDK does not support Firestore databases created in Datastore mode. To access these databases, use the Datastore SDK.
Cloud Firestore Node.js Client API Reference
Cloud Firestore Documentation
Read more about the client libraries for Cloud APIs, including the older
Google APIs Client Libraries, in Client Libraries Explained.
Table of contents:
Select or create a Cloud Platform project.
Enable the Cloud Firestore API.
Set up authentication with a service account so you can access the
API from your local workstation.
Samples are in the samples/ directory. The samples' README.md
has instructions for running the samples.
The Cloud Firestore Node.js Client API Reference documentation
also contains samples.
This library follows Semantic Versioning.
This library is considered to be General Availability (GA). This means it
is stable; the code surface will not change in backwards-incompatible ways
unless absolutely necessary (e.g. because of critical security issues) or with
an extensive deprecation period. Issues and requests against GA libraries
are addressed with the highest priority.
More Information: Google Cloud Platform Launch Stages
Contributions welcome! See the Contributing Guide.
Apache Version 2.0
See LICENSE"
3689,"elpheria,rpc-websockets","JSON-RPC 2.0 implementation over WebSockets for Node.js and JavaScript/TypeScript. 
  
    
  
  
  
    WebSockets for Node.js and JavaScript/TypeScript with JSON RPC 2.0 support on top.  
  
                
  
  
        
  
  
        
  
  
    
  
  


The rpc-websockets library enables developers to easily implement their business logic that includes messaging between users, machines or any devices. It provides a possibility to send and receive JSON data through the WebSocket communication protocol in order to support two-way notification push, running RPC methods and firing any types of event signalling. Only clients can call RPC methods and not vice versa at the moment. Both frontend (HTML/JS-based) and backend (Node.js-based) development environments are supported.
rpc-websockets is built on Node.js and supports both LTS and Current versions.
Use the free OSS edition in order to implement and manage your own WebSocket server instances, or subscribe for our Pro plan and have us manage your instances and provide you with management of your methods, events and notifications on an easy-to-use Web Management portal.
Install our OSS library in your project:
Write your source code using rpc-websockets:
Please consult our API documentation for both WebSocket server and client JavaScript and TypeScript classes.
Features of the free open-source edition.

All library's open-source features are documented in our API documentation and can be used free of charge. You are free to implement your solutions based on provided methods in any way you are comfortable with, as long as you use our work along our very permissive license conditions.
In order to support your production-ready environments, we can provide you with additional features built on top of our free OSS edition along with the skill set to turn your business case or a Proof-of-Concept idea into reality.

Describe us your use case by contacting us and we will swiftly get back to you with a proposed solution that meets your needs.
We offer professional support for rpc-websockets and beyond. We have many years of expertise on building robust, scalable Node.js applications and can help you overcome issues and challenges preventing you to ship your great products. We excel in software architecture and implementation, being able to provide you with development, planning, consulting, training and customization services. Feel free to contact us so we can discuss how to help you finish your products!
rpc-websockets is being actively used in production by multiple companies in a variety of different use cases.

&emsp;
&emsp;
&emsp;
&emsp;
&emsp;
&emsp;
&emsp;
&emsp;
&emsp;
&emsp;
Become a sponsor and get your logo on project's README on GitHub with a link to your site. Feel free to contact us for the arrangement!
MIT"
4941,"NickMaev,react-core-boilerplate","Powerful ASP.NET Core 3 templates with React, true server-side rendering and Docker support. ÔªøÔªø
React Core Boilerplate is a starting point for building universal/isomorphic React web applications with ASP.NET Core 3 and server-side rendering. All works fine out of the box. It also is helpful for newbies.
The project contains a fake authorization system. So you can change it to Identity or the other.
TypeScript and JavaScript versions are available.‚ö°Ô∏è  





Added Docker support. üêã
Added XSS attack prevention, thanks to XuHaoJun.
Updated dependencies, removed unused namespaces.
Migrated to .NET Core 3.1. üéâ
Migrated to Bootstrap 4 using react-bootstrap.
Migrated to Formik.
Redux stores migrated to Redux Toolkit for boosting development with Redux. Reduced code.
Logging and Serilog configuration improvements.
Added HTTPS support to server-side rendering.
Added editable status code in routes for SEO.
Updated some dependencies.
Stability fixes.
Removed unnecessary NPM dependencies.
Updated React, Redux, React-Router and other NPM packages connected to them.
Updated critical NPM dependencies.
Removed unnecessary NPM dependencies.
Repository restructuration.
Added JavaScript version of the React Core Boilerplate. üéâ
Stability fixes.
Updated critical dependencies.
Removed image-webpack-loader due to instability.
Installed stable Terser plugin.
Updated React and other packages for it (incl. types).
Updated WebPack.
Updated WebPack config for development mode.
Updated .NET Core dependency to v. 2.2.
Updated critical NPM packages.
Updated WebPack dependencies.
Improved WebPack vendor and bundle configurations.
Improved .csproj file for building and publishing scenarios.
Fixed source map generation in development mode.
Fixed bundle compilation in production mode.
Other stability fixes.
Added some minor features.
Bug fixes: collapsing of the Bootstrap navigation bar, fixed controller and frontend's service in person update case.
Updated dependencies.
Added polyfills for supporting IE9, IE11: @babel/polyfill, custom-event-polyfill.
Updated dependencies.
Added fulltext live search to example.
Added WebPack plugins: case-sensitive-paths-webpack-plugin, react-dev-utils
Added plugins with examples:
awesome-debounce-promise to prevent doing frequent queries in live search, formik to create forms in React without tears.
Fixed some functional and text errors.
Added hosting.json which contains hosting settings and will be used in the production build.
Added bind-decorator package and examples with it.
Speeded up of WebPack bundle building.
Updated domain-wait package. This update allows you to prevent calling for isomorphic fetch requests twice (in server prerender and after it - on client-side).
Updated redux-thunk package. 
Added new React components to prevent a headache when you build web applications: ModalComponent, Input, MultiSelect, Form. These components are used in examples.
Added new feature allows a web application to share browser's cookie with NodeServices. Now SSR generates HTML code for authenticated users and makes authenticated isomorphic requests. 
Added method sendFormData to the ServiceBase.ts which allows you to upload files to the server.
Updated NPM packages: react, redux, react-router. 
Replaced due to deprecation react-router-redux by the new connected-react-router.
Fixed Loader component which had trouble in some cases.
Removed unused NPM packages.
Added package-lock.json. 
Fixed project.
Updated React package. 
Added the AppComponent component which allows you to do the ""force update"" of the ""stucked"" components (for ex. Loader component in LoginPage). 
Added Serilog logger which log into files (logs/ directory) and also into Azure Cloud Provider.
Fixed Loader component which worked incorrect with SSR in some cases.
Updated dependency of ""ASP.NET Core"" package due to vulnerability.
Added feature which allows you to pass JSON objects to URL query for GET and DELETE methods.
Fixed AppRoute component. Solved issue with passing params to components from React Router. If you want to fix it manually, see the commit here.
Install latest .NET Core SDK and Runtime by link.
Install of the latest stable Node.js.
At the first run you must close the project if it runs in Visual Studio or another IDE. 
Open project's folder in console and run command npm install.
Execute the following command for development in your project's directory. It will compile the main and vendor bundle.
If you are using Visual Studio 20xx, instead of IIS Express select the YourProjectName or ReactCoreBoilerplate: 
click on the down arrow near the IIS Express and choose Docker or other option.
Build and run project. It will start in Windows Console.
If you modify the WebPack vendor config, you must manually recompile the vendor bundle.
Execute the following command in your project's directory to do this:
Just select the Docker option in the toolbar.
Execute the following command in your project's directory:
where [my image name] is your Docker image name.
Trust the ASP.NET Core HTTPS development certificate on Windows and macOS:
where [my password] is your password.
2. Execute:
Build your container.  
Execute:  
where [my password] - your certificate password (from the 1st step), [my image name] - your Docker image name.
Third-party libraries:
TypeScript - all frontend based on TypeScript.
fork-ts-checker-webpack-plugin - Webpack plugin that runs typescript type checker on a separate process.
React - main library which worked as isomorphic.
React Router - router for React.
react-bootstrap - Bootstrap 4 for React.
React-Helmet - isomorphic SEO helpers.
Redux - store.
Redux Toolkit - library for boosting development with Redux.
Formik - library for building forms for React.
Connected React Router - Redux binding for React Router.
SASS - CSS preprocessor.
WebPack 4 - bundler.
Axios - isomorphic fetch util.
ts-nameof - allows you to use type-safe names of inputs in the form.
json-to-url - allows you to pass JSON objects to URL query for GET and DELETE methods.
Serilog - allows you to log into files (logs/ directory) and also into Azure Cloud Provider.
Own libraries / fixed forks:
domain-wait - domain-task replacement with async/await support and new features.
NVal - jQuery-validation-like Vanilla JS validator.
NVal-Tippy - Vanilla JS validation with awesome tooltips.
NSerializeJson - flexible form to JSON serializer based on Vanilla JS.
ERROR in ./ClientApp/styles/loaders/xxx.scss (./node_modules/css-loader/dist/cjs.js![...]): Error: ENOENT: no such file or directory, scandir 'xxx\node_modules\node-sass\vendor'
Execute npm i and npm rebuild node-sass in your project's directory.
WebPack Hot Module Replacement [HMR] doesn't work with IIS
Will be fixed. Use Kestrel for development instead.
HTTP Error 500
Probably you don't have the latest version of Node.js.
HTTP Error 502.5
You must install the latest ""ASP.NET Core SDK"" and ""Runtime and Hosting Bundle"" using this link: https://www.microsoft.com/net/download/dotnet-core/2.1
HTTP error 500 when hosted in Azure
Set the ""WEBSITE_NODE_DEFAULT_VERSION"" to 6.11.2 in the ""app settings"" in Azure.
Errors when running in development mode after publishing
Execute npm run build:dev command in the project's dir.
If you will have any issue with the project starting, you can see errors in logs (""/logs"" directory). Please, do this before the open an issue on GitHub. Don't forget to mention the version of the React Core Boilerplate (JavaScript or TypeScript)
MIT"
4786,"ashkan18,graphlient","Ruby GraphQL Client. A friendlier Ruby client for consuming GraphQL-based APIs. Built on top of your usual graphql-client, but with better defaults, more consistent error handling, and using the faraday HTTP client.
Add the following line to your Gemfile.
Create a new instance of Graphlient::Client with a URL and optional headers/http_options.
The schema is available automatically via .schema.
Make queries with query, which takes a String or a block for the query definition.
With a String.
With a block.
This will call the endpoint setup in the configuration with POST, the Authorization header and query as follows.
A successful response object always contains data which can be iterated upon. The following example returns the first line item's price.
You can also execute mutations the same way.
The successful response contains data in response.data. The following example returns the newly created invoice's ID.
To reduce requests to graphql API you can cache schema:
Unlike graphql-client, Graphlient will always raise an exception unless the query has succeeded.
Graphlient::Errors::ClientError: all client-side query validation failures based on current schema
Graphlient::Errors::GraphQLError: all GraphQL API errors, with a humanly readable collection of problems
Graphlient::Errors::ExecutionError: all GraphQL execution errors, with a humanly readable collection of problems
Graphlient::Errors::ServerError: all transport errors raised by HTTP Adapters. You can access inner_exception, status_code and response on these errors to get more details on what went wrong
Graphlient::Errors::FaradayServerError: this inherits from ServerError ‚òùÔ∏è, we recommend using ServerError to rescue these
Graphlient::Errors::HttpServerError: this inherits from ServerError ‚òùÔ∏è, we recommend using ServerError to rescue these
Graphlient::Errors::ConnectionFailedError: this inherits from ServerError ‚òùÔ∏è, we recommend using ServerError to rescue these
Graphlient::Errors::TimeoutError: this inherits from ServerError ‚òùÔ∏è, we recommend using ServerError to rescue these
Graphlient::Errors::HttpOptionsError: all NoMethodError raised by HTTP Adapters when given options in http_options are invalid
All errors inherit from Graphlient::Errors::Error if you need to handle them in bulk.
Graphlient can execute parameterized queries and mutations by providing variables as query parameters.
The following query accepts an array of IDs.
With a String.
With a block.
Graphlient supports following Scalar types for parameterized queries by default:
:id maps to ID
:boolean maps to Boolean
:float maps to Float
:int maps to Int
:string maps to String
You can use any of the above types with ! to make it required or use them in [] for array parameters.
For any other custom types, graphlient will simply use to_s of the symbol provided for the type, so query(ids: [:InvoiceType!]) will result in query($ids: [InvoiceType!]).
The following mutation accepts a custom type that requires fee_in_cents.
You can parse and execute queries separately with optional variables. This is highly recommended as parsing a query and validating a query on every request adds performance overhead. Parsing queries early allows validation errors to be discovered before request time and avoids many potential security issues.
Or pass in a string instead of a block:
Graphlient uses graphql-client, which recommends building queries as static module members along with dynamic variables during execution. This can be accomplished with graphlient the same way.
Create a new instance of Graphlient::Client with a URL and optional headers.
The schema is available automatically via .schema.
Define a query.
Execute the query.
Note that in the example above the client is created with allow_dynamic_queries: false (only allow static queries), while graphlient defaults to allow_dynamic_queries: true (allow dynamic queries). This option is marked deprecated, but we're proposing to remove it and default it to true in graphql-client#128.
You can directly use Graphlient::Query to generate raw GraphQL queries.
Fragments should be referred by constant:
Graphlient offers the syntax below to refer to the original constant:
Triple underscore ___ to refer to the fragment
Double underscore __ for namespace separator
In this example, Fragments::Invoice would be referred as follows:
The wrapped response only allows access to fields that have been explicitly asked for.
In this example, while id has been referenced directly in the main query, feeInCents has been spread via fragment and trying to access it in the original wrapped response will throw GraphQL::Client::ImplicitlyFetchedFieldError (to prevent data leaks between components).
feeInCents cannot be fetched directly from the main query, but from the fragment as shown below:
You can include Graphlient::Extensions::Query in your class. This will add a new method_missing method to your context which will be used to generate GraphQL queries.
You can swap the default Faraday adapter for Net::HTTP.
Use Graphlient inside your RSpec tests in a Rails application or with Rack::Test against your actual application.
Alternately you can stub_request with Webmock.
In order to stub the response to actual queries, dump the schema into a JSON file and specify it via schema_path as follows.
MIT License, see LICENSE"
4653,"voltrue2,in-app-purchase","A Node.js module for in-App-Purchase for iOS, Android, Amazon and Windows.. ¬©Nobuyori Takahashi < &#118;&#111;&#108;&#116;&#114;&#117;&#101;&#50;&#64;&#121;&#97;&#104;&#111;&#111;&#46;&#99;&#111;&#109; >

A node.js module for in-app purchase (in-app billing) and subscription for Apple, Google Play, Amazon Store, Roku, and Windows.
It supports Unity receipt also: Unity Documentation
NOTE Unity receipt supports the following: Apple, Google Play, and Amazon.
As of version 1.10.0, The module lets you validate Google's receipts using Google Service Account also!
Thank you for the input maxs15
0.12.0 &gt;=
Online Demo
The module supports both Promise and callbacks.
An Apple's receipt is a base64 encoded string.
A Google Play's receipt consists of two components.
Signed Data: A JSON data of what the end user purchased.
Signature: A base64 encoded string.
The module requires the above two compoents to be as a JSON object.
data property in the receipt object can be either an object or a stringified JSON string.
If you are using Google service account instead of OAuth for Google, the receipt should look like:
The API used is v3.
If you are using Google service account with unity receipt, you need to add a 'Subscription' field to your unity receipt.
The receipt should look like:
An Amazon's receipt contains the following:
User ID: A string of Amazon Store user ID.
Receipt ID: A string of Amazon receipt.
The module requires the above two components to be as a JSON object or a string
A Roku's receipt is a transaction ID string.
A Windows' receipt is an XML string.
A Facebook's receipt is signed_request string of payment response.
You may feed different Google public key or Apple password etc to validate receipts of different applications with the same code:
Returns an Array of objects that to be used by isExpired and isCanceled.
If true, the returned purchaseData excludes canceled item(s).
If true, the returned purchaseData excludes expired item(s).
Returns a boolean true if the given response of a receipt validation is a valid.
Returns a boolean true if a canceled receipt is validated.
Returns a boolean true if a canceled receipt is validated.
NOTE This is subscription only.
Allows you to set custom validation host name for tests.
Resets to Amazon's validation host name.
You may not want to keep the public key files on your server(s).
The module also supports environment variables for this.
Instead of using googlePublicKeyPath: 'path/to...' in your configurations, you the following:
To set up your server-side Android in-app-billing correctly, you must provide the public key string as a file from your Developer Console account.
Reference: Implementing In-app Billing
Once you copy the public key string from the Developer Console account for your application, you simply need to copy and paste it to a file and name it iap-live as shown in the example above.
NOTE: The public key string you copy from the Developer Console account is actually a base64 string. You do NOT have to convert this to anything yourself. The module converts it to the public key automatically for you.
To check expiration date or auto renewal status of an Android subscription, you should first setup the access to the Google Play Store API. You should follow these steps:
Go to https://play.google.com/apps/publish/
Click on Settings
Click on API Access
There should be a linked project already, if not, create one. If you have it, click it.
You should now be at: https://console.developers.google.com/apis/library?project=xxxx
Under Mobile API's, make sure ""Google Play Developer API is enabled"".
Go back, on the left click on Credentials
Click Create Credentials button
Choose OAuth Client ID
Choose Web Application
Give it a name, skip the Authorized JS origins
Add this to Authorized Redirect URIs: https://developers.google.com/oauthplayground
Hit Save and copy the clientID and clientSecret somewhere safe.
Go to: https://developers.google.com/oauthplayground
On the right, hit the gear/settings.
Check the box: Use your own OAuth credentials
Enter in clientID and clientSecret
Close
On the left, find ""Google Play Developer API v3""
Select ""https://www.googleapis.com/auth/androidpublisher""
Hit Authorize Api's button
Save Authorization Code
This is your: googleAccToken
Hit Exchange Authorization code for token
Grab: Refresh Token
This is your: googleRefToken
Now you are able to query for Android subscription status!
https://developer.amazon.com/docs/in-app-purchasing/iap-rvs-for-android-apps.html
in-app-purchase module supports the following algorithms:
Exclusive Canonicalization http://www.w3.org/2001/10/xml-exc-c14n#
Exclusive Canonicalization with comments http://www.w3.org/2001/10/xml-exc-c14n#WithComments
Enveloped Signature transform http://www.w3.org/2000/09/xmldsig#enveloped-signature
SHA1 digests http://www.w3.org/2000/09/xmldsig#sha1
SHA256 digests http://www.w3.org/2001/04/xmlenc#sha256
SHA512 digests http://www.w3.org/2001/04/xmlenc#sha512
Facebook Payments Order Fulfillment: https://developers.facebook.com/docs/games_payments/fulfillment#orderfulfillment
Facebook Signed Request Parsing: https://developers.facebook.com/docs/games/gamesonfacebook/login#parsingsr
NOTE: Payments Lite does not support subscription.
The module supports the same configurations as [npm request module] (https://www.npmjs.com/package/request#requestoptions-callback)"
4869,"can-lehmann,owlkettle","A declarative user interface framework based on GTK 4. Freshly brewed user interfaces.
Owlkettle is a declarative user interface framework based on GTK.
It is written in Nim.
Here is an example for a simple counter app. When you click on the ""+"" Button, the counter increments.
The code above will result in the following application:

Owlkettle also supports building libadwaita apps.
To enable libadwaita, import owlkettle/adw and change the last line to adw.brew(gui(App())).

Owlkettle requires GTK 4 to be installed on your system.
You can install it by running dnf install gtk4-devel libadwaita-devel on Fedora or apt install libgtk-4-dev libadwaita-1-dev on Ubuntu.
You can find a reference of all widgets in docs/widgets.md.
A tutorial for building a simple Todo application can be found here.
Additional examples can be found in the examples folder.
A reference of all supported libadwaita widgets can be found in docs/widgets_adwaita.md.
<!--
If you want to cross compile checkout [docs/cross_compiling.md](docs/cross_compiling.md).

A guide for migrating from owlkettle 1.x.x to 2.0.0 [is available here](docs/migrating_1_to_2.md).
-->

Owlkettle is licensed under the MIT license.
See LICENSE.txt for more information."
4774,"VRMADA,ultimatexr-unity","UltimateXR is a free, open source framework that facilitates the creation of VR applications.. UltimateXR is a professional-grade, free, open-source framework and toolkit for Unity.
UltimateXR's goal is to simplify the development of virtual reality applications; from simulators to videogames and from simple prototypes to full AAA-scale projects.
Main features:
Free and open-source under the MIT license.
Cross-device compatibility. Support for all major headsets.
State-of-the-art grab and manipulation mechanics.
Integrated hand pose editor.
Customizable full-body avatar representation with Inverse Kinematics.
Library of gender- and race-agnostic hands with special care on inclusion.
Support for multiple locomotion mechanics.
Advanced UI components including interaction and tweening.
Scalable architecture.
Clean code; fully documented using standard XML format.
Lots of tools, methods and extensions to make development easier.
We provide the following ways to install UltimateXR:
If UltimateXR was previously installed in /Assets using a .unitypackage, remove the /Assets/UltimateXR folder first
Open the Package Manager using the Window menu -> Package Manager

Inside the Package Manager, click on the ""+"" button on the top left and select ""Add package from git URL...""

Input the following URL: https://github.com/VRMADA/ultimatexr-unity.git and click Add.
When the installation has completed, make sure to import the examples if it's your first time using UltimateXR.

Delete the previous version from /Assets/UltimateXR first.
Important! Not removing the folder before updating may result in incorrect files remaining after installation.
Download the latest package (.unitypackage file) found in https://github.com/VRMADA/ultimatexr-unity/releases
Double click the file to import the package to your project.
Delete the previous version from /Assets/UltimateXR first.
Important! Not removing the folder before updating may result in incorrect files remaining after installation.
Go to the Asset Store and click Open in Unity to proceed with the installation.
Remember to rate and review our asset if you liked it!
Unlock the full potential using the API.
Join our community and get in touch with other developers.
Twitter"
4859,"CaptainFreak,Web-CTF-Challenges",Collection of quirky behaviours of code and the CTF challenges that I made around them.. Collection of quirky behaviours of code and the CTF challenges that I made around them.
4320,"hackatnow,cromos","Cromos is a tool for downloading legitimate extensions of the Chrome Web Store and inject codes in the background of the application.. Cromos is a tool for downloading legitimate extensions of the Chrome Web Store and inject codes in the background of the application and more cromos create executable files to force installation via <strong>PowerShell</strong> for example, and also upload files to dropbox to host the malicious files.
Download extension
Injections
Upload files on dropbox
Windows infection
This is a demonstration of the tool at work in this examples I'm downloading a famous Google extension called G Suite Training on Google Chrome Web Store and injecting a keylogger module.

You can also inject some predefined modules in the background as <strong>keylogger</strong>, <strong>virtual currency</strong>.
Chrome allows you to add extensions using Windows
Group Policy Object (GPO) if you need to force installation on multiple machines just follow the steps in the  Chrome Deployment Guide  
then modify the original extension with few modifications you can publish your extension in the Chrome Web Store requires to pay $5. 
Code samples are provided for educational purposes. Adequate defenses can only be built by researching attack techniques available to malicious actors. Using this code against target systems without prior permission is illegal in most jurisdictions. The authors are not liable for any damages from misuse of this information or code.
XMR: 49m12JEEC6HPCHkLMX5QL4SrDQdKwh6eb4Muu8Z9CwA9MwemhzFQ3VcgHwyuR73rC22WCymTUyep7DVrfN3GPt5JBCekPrR"
4923,"JordanKnott,taskcafe","An open source project management tool with Kanban boards. 
 


  
    
  
  
    
  
  
    
  
  
    
  
  
    
  



    Report Bug
    ¬∑
    Request Feature
     ¬∑
    Ask a Question
  

Was this project useful? Please consider donating to help me improve it!


 This project is still in <strong>alpha development</strong>


The following features have been implemented:
Manage tasks through a Kanban board interface (set due dates, labels, add checklists)
View all your current assigned tasks through the My Tasks view
Personal projects
Task comments and activity
This project is still in active development, so some options may not be fully implemented yet.
For updates on development, join the Discord server.
For a list of planned features, check out the Roadmap!
You'll need both docker & docker-compose installed.
First clone the repository:
Now do the following:
This will start a postgres instance as well as a taskcafe instance.
The second command runs the database schema migrations.
If you visit http://localhost:3333, you will get redirected to the installation
screen so that you can create the first system user.
You'll need Golang installed on your machine.
Next, clone the repository:
Next we need to build the binary. This project uses Mage for its build tool.
This will:
Install all yarn packages for the frontend
Build the React frontend
Embed the React frontend in the binary
Compile the final exectuable binary
The newly created taskcafe binary can be found in the dist folder.
It contains everything neccessary to run except the config file. An example config file can be found in conf/app.example.toml.
For more information on configuration, please read the wiki.
The config will need to be copied to a conf/app.toml in the same place the binary is.
Make sure to fill out the database section of the config in order to connect it to your database.
Then run the database migrations with taskcafe migrate.
Now you can run the web interface by running taskcafe web.
A more detailed guide for installing on Ubuntu/Debian
One of the primary goals of Taskcafe is to provide a project management tool that I personally enjoy using for my
own projects and fits my workflow.
During alpha development, the current plan is to build the ""basic"" features - features that are pretty much
standard across all kanban boards / project management tools.
Once Taskcafe is out of alpha, there are many features that I plan on adding that will differentiate it from other products (check out the Roadmap for ideas on future plans).
If you have questions regarding how to use Taskcafe, check out the discord server.
If you're interesting in contributing to Taskcafe, please read the contribution guide first!
There is also a Code of Conduct as well.
MIT License"
4790,"Stiffstream,restinio","Cross-platform, efficient, customizable, and robust asynchronous HTTP/WebSocket server C++14 library with the right balance between performance and ease of use. RESTinio is a header-only C++14 library that gives you an embedded
HTTP/Websocket server. It is based on standalone version of ASIO
and targeted primarily for asynchronous processing of HTTP-requests.
Since v.0.4.1 Boost::ASIO (1.66 or higher) is also supported
(see notes on building with Boost::ASIO).
Consider the task of writing a C++ application that must support some REST API,
RESTinio represents our solution for that task. Currently it is in stable beta state.
Lets see how it feels like in the simplest case:
Server runs on the main thread, and respond to all requests with hello-world
message. Of course you've got an access to the structure of a given HTTP request,
so you can apply a complex logic for handling requests.
Async request handling. Cannot get the response data immediately? That's ok,
store request handle somewhere and/or pass it to another execution context
and get back to it when the data is ready.
HTTP pipelining. Works well with async request handling.
It might increase your server throughput dramatically.
Timeout control. RESTinio can take care of bad connection that are like: send
""GET /"" and then just stuck.
Response builders. Need chunked-encoded body - then RESTinio has a special
response builder for you (obviously it is not the only builder).
ExpressJS-like request routing (see an example below).
An experimental typesafe request router that allows avoiding problems of ExpressJS-like router with help of static checks from C++ compiler.
A possibility to chain several request-handlers (somewhat similar to ExpressJS's middleware).
Working with query string parameters.
Several ready-to-use helpers for working with HTTP headers (for example, the support for HTTP headers related to file uploading).
Supports sending files and its parts (with sendfile on linux/unix and TransmitFile on windows).
Supports compression (deflate, gzip).
Supports TLS (HTTPS).
Basic websocket support. Simply restinio::websocket::basic::upgrade() the
request handle and start websocket session on a corresponding connection.
Can run on external asio::io_context. RESTinio is separated from execution
context.
Some tune options. One can set acceptor and socket options. When running
RESTinio on a pool of threads connections can be accepted in parallel.
RESTinio is distributed under BSD-3-CLAUSE license.
The full documentation for RESTinio can be found here.
Issues and bugs:
Issue Tracker on GitHub.
Discussion section on GitHub.
Discussion group: restinio."
4939,"yanpitangui,dotnet-api-boilerplate","A Dotnet 7.0 WebApi boilerplate / template project. MediatR, Swagger, Mapper, Serilog and more implemented. . 
  <span>English</span> |
  Portugu√™s


A .Net 7.0 WebApi boilerplate / template project. MediatR, Swagger, AutoMapper, Serilog and more implemented. 



The goal of this project is to be a kickstart to your .Net WebApi, implementing the most common used patterns
and technologies for a restful API in .net, making your work easier.
Use this template(github) or clone/download to your local workplace.
Download the latest .Net SDK and Visual Studio/Code.
You may need a running instance of MsSQL, with appropriate migrations initialized.
You can run just the DB on docker. For that, you have to change your connection string to ""Server=127.0.0.1;Database=master;User=sa;Password=Yourpassword123‚Äù and run the following command: docker-compose up -d db-server. Doing that, the application will be able to reach the container of the db server.
If you want, you can change the DatabaseExtension to use UseInMemoryDatabase, instead of Mssql.
Go to the src/Boilerplate.Api folder and run dotnet run, or, in visual studio set the api project as startup and run as console or docker (not IIS).
Visit http://localhost:5000/api-docs or https://localhost:5001/api-docs to access the application's swagger.
Run docker-compose up -d in the root directory, or, in visual studio, set the docker-compose project as startup and run. This should start the application and DB.
For docker-compose, you should run this command on the root folder: dotnet dev-certs https -ep https/aspnetapp.pfx -p yourpassword
  Replace ""yourpassword"" with something else in this command and the docker-compose.override.yml file.
This creates the https certificate.
Visit http://localhost:5000/api-docs or https://localhost:5001/api-docs to access the application's swagger.
Important: You need to have docker up and running. The integration tests will launch a SQL server container and use it to test the API.
In the root folder, run dotnet test. This command will try to find all test projects associated with the sln file.
If you are using Visual Studio, you can also access the Test Menu and open the Test Explorer, where you can see all tests and run all of them or one specifically. 
In this project, some routes requires authentication/authorization. For that, you will have to use the api/user/authenticate route to obtain the JWT.
As default, you have two users, Admin and normal user.
Normal user: 
email: user@boilerplate.com
password: userpassword
Admin:
email: admin@boilerplate.com
password: adminpassword
After that, you can pass the jwt on the lock (if using swagger) or via the Authorization header on a http request.
SwaggerUI
EntityFramework
Strongly Typed Ids
AutoMapper
MediatR
Feature slicing
Serilog with request logging and easily configurable sinks
.Net Dependency Injection
Resource filtering
Response compression
Response pagination
CI (Github Actions)
Authentication
Authorization
Unit tests
Integration tests
Container support with docker and docker-compose
OpenTelemetry support (with jaeger as default exporter)
NuGet Central package management (CPM)
Services
This folder stores your apis and any project that sends data to your users.
Boilerplate.Api
This is the main api project. Here are all the controllers and initialization for the api that will be used.
docker-compose
This project exists to allow you to run docker-compose with Visual Studio. It contains a reference to the docker-compose file and will build all the projects dependencies and run it.
Application
This folder stores all data transformations between your api and your domain layer. It also contains your business logic.
Auth
This folder contains the login Session implementation.
Domain
This folder contains your business models, enums and common interfaces.
Boilerplate.Domain
Contains business models and enums.
Auth
This folder contains the login Session Interface.
Infra
This folder contains all data access configuration, database contexts, anything that reaches for outside data.
Boilerplate.Infrastructure
This project contains the dbcontext, entities configuration and migrations.
Remove/Rename all hero related stuff to your needs.
Rename solution, projects, namespaces, and ruleset to your use.
Change the dockerfile and docker-compose.yml to your new csproj/folder names.
Give this repo a star!
To run migrations on this project, run the following command on the root folder: 
dotnet ef migrations add InitialCreate --startup-project .\src\Boilerplate.Api\ --project .\src\Boilerplate.Infrastructure\
This command will set the entrypoint for the migration (the responsible to selecting the dbprovider { sqlserver, mysql, etc } and the connection string) and the selected project will be ""Boilerplate.Infrastructure"", which is where the dbcontext is.
If this template was useful for you, or if you learned something, please give it a Star! :star:
This project has great influence of https://github.com/lkurzyniec/netcore-boilerplate and https://github.com/EduardoPires/EquinoxProject. If you have time, please visit these repos, and give them a star, too!
This boilerplate/template was developed by Yan Pitangui under MIT license."
4539,"zulip,zulip","Zulip server and web application. Open-source team chat that helps teams stay productive and focused.. Zulip is an open-source team collaboration tool with unique
topic-based threading that combines the best of email and chat to
make remote work productive and delightful. Fortune 500 companies, leading open
source projects, and thousands of other organizations use
Zulip every day. Zulip is the only modern team chat app that is
designed for both live and asynchronous conversations.
Zulip is built by a distributed community of developers from all around the
world, with 74+ people who have each contributed 100+ commits. With
over 1000 contributors merging over 500 commits a month, Zulip is the
largest and fastest growing open source team chat project.
Come find us on the development community chat!











Contributing code. Check out our guide for new
contributors
to get started. We have invested in making Zulip‚Äôs code highly
readable, thoughtfully tested, and easy to modify. Beyond that, we
have written an extraordinary 150K words of documentation for Zulip
contributors.
Contributing non-code. Report an
issue,
translate
Zulip into your language, or give us
feedback.
We'd love to hear from you, whether you've been using Zulip for years, or are just
trying it out for the first time.
Checking Zulip out. The best way to see Zulip in action is to drop by the
Zulip community server. We also
recommend reading about Zulip's unique
approach to organizing conversations.
Running a Zulip server. Self-host Zulip directly on Ubuntu or Debian
Linux, in Docker, or with prebuilt
images for Digital Ocean and
Render.
Learn more about self-hosting Zulip.
Using Zulip without setting up a server. Learn about Zulip
Cloud hosting options. Zulip sponsors free Zulip
Cloud Standard for hundreds of worthy
organizations, including fellow open-source
projects.
Participating in outreach
programs
like Google Summer of Code
and Outreachy.
Supporting Zulip. Advocate for your organization to use Zulip, become a
sponsor, write a review in the mobile app
stores, or help others find
Zulip.
You may also be interested in reading our blog, and
following us on Twitter and
LinkedIn.
Zulip is distributed under the
Apache 2.0 license."
5053,"Arcanorum,rogueworld","Everything for the game Rogueworld.. 
Greetings! üßô You have stumbled upon the work area for Rogueworld, the free, open-source, browser based, massively multiplayer online RPG.
This area is intended for potential contributors who are interested in the project, but don't know where to begin. Any info that someone might want to find about joining and working on the project will probably be here somewhere, and if not, let me know and I'll update this documentation.
Rogueworld is open-source, meaning that anyone is free to see all aspects of how the game works on a technical level, and can also contribute to the project, such as adding new creatures, items, balancing, fixing bugs, and whatever else will make the game better.
Here you can find basically everything that goes into the game, what is currently being worked on, and how you can help!
The creation of Rogueworld is a collaborative effort, with content and mechanics able to be added by members of the community.
It is a non-commercial project, so there are no promises of ""rev-share"" or ""backpay when the game makes money"" or whatever. That isn't the goal here.
This project is ideal for beginners, hobbyists, students, portfolio builders, work experience seekers, and of course regular players of the game curious to see how the magic happens.
First, you should have played the game to get a feel for what it is like, what has been done so far, what looks lacking, and to generally get a good context for what you might want to get started with.
The main contribution areas are code, audio, visual, with other smaller ones like balance, translations and testing.
You probably came to this project already specialising in one of these. There are guides tailored for contributors that describe the general requirements for each field, that you can jump to if you just want to skip whatever doesn't apply to you.
With so many moving parts to a video game, especially a one like this, it is important to keep the project managed well. I try to run the project like you would find in an actual software company, where each thing being worked on should be detailed, tracked, completed (or cancelled), tested and finally added to the game.
This is done using the main tasks backlog on the GitHub issues page.
There you can filter by whatever topic interests you using the tag filters.

This is where pretty much everything that is proposed to change about the game should start.
From there, any tasks that are to be grouped together into a larger piece of work, such as a new major feature, will be organised into the project trackers for the major things that are being worked on.
Once you have found something you want to have a go at, you should let me (or other GitHub project admin) know that you want to start something so it can be marked as in progress, so multiple people don't start the same thing. Don't just randomly submit PRs out of nowhere.
This game doesn't use an off the shelf game engine/centralised project manangement GUI, like Unity, Unreal, GameMaker, etc.
As a game that is also a website, it uses many of the tools of the web development trade. The ""engine"" is a custom setup that brings together various tools that are all free, widely used, and reasonably well documented, that are each specialised for a certain task.
To be able to run and edit the game yourself on your own computer, there is a setup guide that should provide a quick and easy set of instructions to get everything working with minimal messing about, though general web development knowledge will be needed to be able to do any non-trivial tasks.
Though, setting up and running the game on your own computer is not necessary for many kinds of contributions.
A lot of tasks are fairly self contained, mainly creating assets (sprites, sounds), and can just be passed to someone else who does have the rest of the project set up, to integrate into the game on your behalf.
To let people see what the implemented asset is like in game, there is a public test server that is updated with recent work much more often than the live game, and is used for faster turnarounds for testing and feedback, before things go into an update for the live game.
Features are divided into two general categories:
Things like movement, collision, creating entities, AI, new systems, etc. that affects the fundamental flow of the game. Due to how they are often intricately tied to many other things, it is recommended to get some familiarity with the core components of the codebase first and the most common workflows (creating items, creatures, actions), then look for something appropriate in the tasks backlog that has been sufficiently planned out and ready to be worked on.
Things that make use of existing mechanics to give players stuff to do, such as points of interest to explore, resources to gather, items to craft, creatures to fight, structures to build, etc.
Below are guides for each, where you are encouraged to think of something different to add instead of just the examples given and to experiment with each step of the guide, so you aren't just copying the guide without understanding what is happening.
<!-- - ### Graphic asset guidelines (TODO) -->

<!-- - ### Audio asset guidelines (TODO) -->

Proper attribution of all work is expected. This includes original creations submitted by contributors, and anything used from somewhere else (such as opengameart.org or other asset sharing resource).
The credits page for the game lists the currently used assets for the game, and should be updated when new things are used by the project by more authors.
A ""work"" or ""works"" is a piece of artistic work you have created, such as textures, sprites, sound effects, music, story/lore, etc.
This project uses the MIT license, and as such can be copied, modified, redistributed, and even used commercially by anyone. Any works you wish to submit will also be included under the project's MIT license.
Under MIT, attribution is not required, but is given anyway as a courtesy.
An attribution may (but doesn't have to) include:
The specific works you did.
Your name and/or nickname/alias.
A link to your website, portfolio, or other profile.
For example:
Scamp character animation by Arcan (https://github.com/Arcanorum)
You should be asked how you want to be credited when you submit something.
However, if you do not agree to the MIT terms for your submissions, you can submit them using another license that suits your needs, and that one shall take precedence.
For example, if you want to require attribution (credit) for use of your work by anyone else who uses it (such as someone taking the work and using it in another game), you probably want to use one of the CC-BY licenses (https://creativecommons.org/about/cclicenses/). This can be discussed with a project maintainer (i.e. Arcan) as needed.
<!-- - [Live game](https://rogueworld.io/) -->

NodeJS (JavaScript runtime)
MongoDB (player accounts DBMS)
Phaser (frontend rendering, input & audio playback framework)
NextJS (frontend GUI and build framework)
Free Texture Packer (texture packer)
Tiled (map editor)
Translations spreadsheet"
3734,"jsonresume,resume-cli","CLI tool to easily setup a new resume üìë. This is the command line tool for JSON Resume, the open source initiative to create a JSON-based standard for resumes.
Install the command-line tool:
Show a list of options and commands for the <abbr title=""Command Line Interface"">CLI</abbr>.
Creates a new resume.json file in your current working directory.
Complete the resume.json with your text editor. Be sure to follow the schema 
(available at http://jsonresume.org).
Validates your resume.json against our schema tests to ensure it complies with 
the standard. Tries to identify where any errors may be occurring.
Exports your resume locally in a stylized HTML, Markdown, or PDF format.
A list of available themes can be found here: http://jsonresume.org/themes/
Please npm install the theme you wish to use locally before attempting to export it.
Options:
--format &lt;file type&gt; Example: --format pdf
--theme &lt;name&gt; Example: --theme flat  
Starts a web server that serves your local resume.json.  
Options: 
--port &lt;port&gt;
--theme &lt;name&gt;
If no theme is specified, it will look for the file index.js and call 
render(). This is useful when developing themes.
Available under the MIT license."
4605,"Project-Books,book-project","Book platform web app for book lovers. 
    
  

  
  
    
  

  
    
    

  
    
  


Book tracker web app made with Spring Boot and React (Typescript).

The image above is from our mockup designs, so this may look slightly different to the app. If major changes are made, we will upload a new image.
Prerequisites:
Docker with Buildkit enabled
Windows or macOS: install Docker Desktop
Linux: install Docker Engine and Docker Compose. Follow the post installation guide to add your user to the docker group
Clone the repository (if you're contributing, you'll need to first fork the repository and then clone your fork)
Start Docker engine (Linux) or Docker desktop (macOS or Windows). 
If you're using an Apple silicon chip (e.g. M1), you'll need to uncomment this line. 
In the root of the project, run docker-compose build to build the database, backend and frontend services
Run docker-compose --env-file .env up to start the containers
Once the development server has started (you'll get notified in the output of docker-compose up), go to localhost:3000 in your web browser to access the frontend
When finished, run docker-compose down to stop and remove the containers
You may want to also want to run our Books API to avoid seeing an error on the search page on the frontend.
Note for backend contributors: Please ensure you run the unit tests manually (we supply the -DskipTests flag with Docker by default for convenience).
When running the frontend and backend, or only the backend, you can use the following test user:
Email address: user@user.user
Password: password
Note: If you're running the backend, you will need a JWT token for subsequent requests after logging in or creating an account; see our connecting to the backend wiki page.
Using your favourite SQL client, use the following settings:
Host: localhost
Port: 5433
User: dbuser
Password: dbpassword
Database name: book_project_db
For example, in DataGrip or IntelliJ Ultimate:

If you wish to contribute (thanks!), please first see the contributing document. 
We work hard to make our project approachable to everyone -- from those new to open-source looking to make their first contribution to seasoned developers.
You may find lots of errors for things like the log statements, or the entities not having constructors. 
You can find instructions on fixing this for IntelliJ and Eclipse in our troubleshooting page. 
Other common errors and solutions are also on the troubleshooting page.
If you are notice that the Vmmem process is consuming too much of your CPU and RAM, you can adjust the maximum limit that Docker can use.

If using the WSL 2 backend (see the image above: go to Docker Desktop > Settings > Resources), create a .wslconfig file at the root of your user folder: C:\Users\&lt;your-username&gt;:
Update the values as appropriate for your system. See the documentation for more information
If you need help with anything, we'll be happy to help you over a GitHub Q&A discussion. Alternatively, feel free to chat with us on the #book-project channel on our Slack workspace.
When asking for help on Slack, we always recommend asking on our #book-project channel, rather than contacting a maintainer directly. This is so that others can offer help and the answer may help someone else.
For more information, such as a roadmap and the project's underlying principles, see our documentation site.
To see a list of the open-source software we use, refer to our Acknowledgements file
  

  
    
  


If you are able and willing to support us financially, it will go a long way to help us achieve our goals and become more sustainable. We hate to ask for money, but running cloud server costs are not free.
We currently only accept donations through Open Collective."
4841,"GraphQLSwift,Graphiti","The Swift GraphQL Schema framework for macOS and Linux. Graphiti is a Swift library for building GraphQL schemas fast, safely and easily.





Looking for help? Find resources from the community.
An overview of GraphQL in general is available in the
README for the
Specification for GraphQL. That overview
describes a simple set of GraphQL examples that exist as tests
in this repository. A good way to get started with this repository is to walk
through that README and the corresponding tests in parallel.
Add Graphiti to your Package.swift
Graphiti provides two important capabilities: building a type schema, and
serving queries against that type schema.
First, we declare our regular Swift entities.
‚≠êÔ∏è One of the main design decisions behind Graphiti is not to polute your entities declarations. This way you can bring your entities to any other solution with ease.
Second step is to create your application's context. The context will be passed to all of your field resolver functions. This allows you to apply dependency injection to your API. This is the place where you can put code that talks to a database or another service.
‚≠êÔ∏è Notice again that this step doesn't require Graphiti. It's purely business logic.
Now that we have our entities and context we can create the GraphQL API resolver.
Now we can finally define the GraphQL API with its schema.
‚≠êÔ∏è Notice that API allows dependency injection. You could pass mocks of resolver and context when testing, for example.
To query the schema we need to instantiate the api and pass in an EventLoopGroup to feed the execute function alongside the query itself.
The output will be:
API.execute returns a GraphQLResult which adopts Encodable. You can use it with a JSONEncoder to send the response back to the client using JSON.
To use async resolvers, just add one more parameter with type EventLoopGroup to the resolver function and change the return type to EventLoopFuture&lt;YouReturnType&gt;. Don't forget to import NIO.
This library supports GraphQL subscriptions, and supports them through the Swift Concurrency AsyncThrowingStream type. See the Usage Guide for details.
If you are unable to use Swift Concurrency, you must create a concrete subclass of the EventStream class that implements event streaming
functionality. If you don't feel like creating a subclass yourself, you can use the GraphQLRxSwift repository
to integrate RxSwift observables out-of-the-box. Or you can use that repository as a reference to connect a different 
stream library like ReactiveSwift, OpenCombine, or
one that you've created yourself.
For a progressive walkthrough, see the Usage Guide. The Star Wars API provides a fairly complete example.
This repo uses SwiftFormat, and includes lint checks to enforce these formatting standards.
To format your code, install swiftformat and run:
This project is released under the MIT license. See LICENSE for details."
4671,"coreybutler,node-windows","Windows support for Node.JS scripts (daemons, eventlog, UAC, etc).. I no longer have enough time to properly maintain this project and am seeking a new primary maintainer.
This project has gained traction for two reasons:
It works well on Windows.
The same API can be used on macOS and Linux.
The ideal maintainer would also support or at least closely work with the maintainer of (node-mac & node-linux). Please get in touch if you are interested in taking over.



Follow the author on G+
or Twitter (@goldglovecb).
This README provides a pretty good overview of what node-windows has to offer, but better
documentation is now available at the node-windows documentation portal.
This is a standalone module, originally designed for internal use in NGN.
  However; it is capable of providing the same features for Node.JS scripts
  independently of NGN.
For alternative versions, see node-mac
  and node-linux
The following features are available in node-windows:
Service Management: Run Node.js scripts as native Windows services. Includes monitoring.
Event Logging: Create logs in the Event log.
Commands:
Elevated Permissions: Run a command with elevated privileges (may prompt user for acceptance)
Sudo: Run an exec command as a sudoer.
Identify Administrative Privileges: Determines whether the current user has administrative privileges.
List Tasks: A method to list running windows tasks/services.
Kill Task: A method to kill a specific windows service/task (by PID).
The recommended way to install node-windows is with npm, using the global flag:
npm install -g node-windows
Then, in your project root, run:
npm link node-windows
However; it is possible to use node-windows without the global flag (i.e. install directly into the project root).
More details regarding why this is not the recommended approach are available throughout this Readme.
Using native node modules on Windows can suck. Most native modules are not distributed in a binary format.
Instead, these modules rely on npm to build the project, utilizing node-gyp.
This means developers need to have Visual Studio (and potentially other software) installed on the system,
just to install a native module. This is portable, but painful... mostly because Visual Studio
itself is over 2GB.
node-windows does not use native modules. There are some binary/exe utilities, but everything
needed to run more complex tasks is packaged and distributed in a readily usable format. So, no need for
Visual Studio... at least not for this module.
node-windows has a utility to run Node.js scripts as Windows services. Please note that like all
Windows services, creating one requires administrative privileges. To create a service with
node-windows, prepare a script like:
The code above creates a new Service object, providing a pretty name and description.
The script attribute identifies the Node.js script that should run as a service. Upon running
this, the script will be visible from the Windows Services utility.

The Service object emits the following events:
install - Fired when the script is installed as a service.
alreadyinstalled - Fired if the script is already known to be a service.
invalidinstallation - Fired if an installation is detected but missing required files.
uninstall - Fired when an uninstallation is complete.
alreadyuninstalled - Fired when an uninstall is requested and no installation exists.
start - Fired when the new service is started.
stop - Fired when the service is stopped.
error - Fired in some instances when an error occurs.
In the example above, the script listens for the install event. Since this event
is fired when a service installation is complete, it is safe to start the service.
Services created by node-windows are similar to most other services running on Windows.
They can be started/stopped from the windows service utility, via NET START or NET STOP commands,
or even managed using the sc
utility.
Sometimes you may want to provide a service with static data, passed in on creation of the service. You can do this by setting environment variables in the service config, as shown below:
You can also supply an array to set multiple environment variables:
If you need to specify a specific user or particular credentials to manage a service, the following
attributes may be helpful.
The user attribute is an object with three keys: domain,account, and password.
This can be used to identify which user the service library should use to perform system commands.
By default, the domain is set to the local computer name, but it can be overridden with an Active Directory
or LDAP domain. For example:
app.js
Both the account and password must be explicitly defined if you want the service module to
run commands as a specific user. By default, it will run using the user account that launched
the process (i.e. who launched node app.js).
The other attribute is sudo. This attribute has a single property called password. By supplying
this, the service module will attempt to run commands using the user account that launched the
process and the password for that account. This should only be used for accounts with administrative
privileges.
app.js
Uninstalling a previously created service is syntactically similar to installation.
The uninstall process only removes process-specific files. It does NOT delete your Node.js script!
Lots of things!
Long Running Processes & Monitoring:
The built-in service recovery for Windows services is fairly limited and cannot easily be configured
from code. Therefore, node-windows creates a wrapper around the Node.js script. This wrapper
is responsible for restarting a failed service in an intelligent and configurable manner. For example,
if your script crashes due to an unknown error, node-windows will attempt to restart it. By default,
this occurs every second. However; if the script has a fatal flaw that makes it crash repeatedly,
it adds unnecessary overhead to the system. node-windows handles this by increasing the time interval
between restarts and capping the maximum number of restarts.
Smarter Restarts That Won't Pummel Your Server:
Using the default settings, node-windows adds 25% to the wait interval each time it needs to restart
the script. With the default setting (1 second), the first restart attempt occurs after one second.
The second occurs after 1.25 seconds. The third after 1.56 seconds (1.25 increased by 25%) and so on.
Both the initial wait time and the growth rate are configuration options that can be passed to a new
Service. For example:
In this example, the wait period will start at 2 seconds and increase by 50%. So, the second attempt
would be 3 seconds later while the fourth would be 4.5 seconds later.
Don't DOS Yourself!
Repetitive recycling could potentially go on forever with a bad script. To handle these situations, node-windows
supports two kinds of caps. Using maxRetries will cap the maximum number of restart attempts. By
default, this is unlimited. Setting it to 3 would tell the process to no longer restart a process
after it has failed 3 times. Another option is maxRestarts, which caps the number of restarts attempted
within 60 seconds. For example, if this is set to 3 (the default) and the process crashes/restarts repeatedly,
node-windows will cease restart attempts after the 3rd cycle in a 60 second window. Both of these
configuration options can be set, just like wait or grow.
Finally, an attribute called abortOnError can be set to true if you want your script to not restart
at all when it exits with an error.
node-windows uses the winsw utility to create a unique .exe
for each Node.js script deployed as a service. A directory called daemon is created and populated
with myappname.exe and myappname.xml. The XML file is a configuration for the executable. Additionally,
winsw will create some logs for itself in this directory (which are viewable in the Event log).
The myappname.exe file launches the node-windows wrapper, which is responsible for monitoring and managing
the script. Since this file is a part of node-windows, moving the node-windows directory could result in
the .exe file not being able to find the Node.js script. However; this should not be a problem if
node-windows is installed globally, per the recommended installation instructions.
All of these daemon-specific files are created in a subdirectory called daemon, which is created in the
same directory where the Node.js script is saved. Uninstalling a service will remove these files.
Event Logging
Services created with node-windows have two event logs that can be viewed through the Windows Event Viewer.
A log source named myappname.exe provides basic logging for the executable file. It can be used to see
when the entire service starts/stops or has errors. A second log, named after your service name (i.e. My App Name),
is used by the node-windows monitor. It is possible to write to this log from the Node.js script using
the node-windows Event Logging.
New as of v0.1.0 is a non-C++ based event logging utility. This utility can write to the event log,
making your logs visible from the Event Viewer.
To create a logger:
Looks similar to:

Some lesser-used options are also available through node-windows event logging.
Each log type (info, warn, error, auditSuccess, and auditFailure) method optionally accepts two additional
arguments, including a code and callback. By default, the event code is 1000 if not otherwise specified.
To provide a custom event code with a log message and write that message to the console, the following code could
be used:
By default, event logs are all part of the APPLICATION scope. However; it is also possible to use the SYSTEM log.
To do this, a configuration object must be passed to the new log:
node-windows ships with several commands to simplify tasks on MS Windows.
Elevate is similar to sudo on Linux/Mac. It attempts to elevate the privileges of the
current user to a local administrator. Using this does not require a password, but it
does require that the current user have administrative privileges. Without these
privileges, the command will fail with a access denied error.
On systems with UAC enabled, this may prompt the user for permission to proceed:

Syntax:
elevate(cmd[,options,callback])
cmd: The command to execute with elevated privileges. This can be any string that would be typed at the command line.
options (optional): Any options that will be passed to require('child_process').exec(cmd,&lt;OPTIONS&gt;,callback).
callback (optional): The callback function passed to require('child_process').exec(cmd,options,&lt;CALLBACK&gt;).
Sudo acts similarly to sudo on Linux/Mac. Unlike elevate, it requires a password, but it
will not prompt the user for permission to proceed. Like elevate, this
still requires administrative privileges for the user, otherwise the command will fail.
The primary difference between this and elevate() is the prompt.
Syntax:
sudo(cmd,password[,options,callback])
cmd: The command to execute with elevated privileges. This can be any string that would be typed at the command line.
password: The password of the user
options (optional): Any options that will be passed to require('child_process').exec(cmd,&lt;OPTIONS&gt;,callback).
callback (optional): The callback function passed to require('child_process').exec(cmd,options,&lt;CALLBACK&gt;).
This asynchronous command determines whether the current user has administrative privileges.
It passes a boolean value to the callback, returning true if the user is an administrator
or false if it is not.
Example
The list method queries the operating system for a list of running processes.
This returns an array of running processes. Supplying the optional true
argument in the above example provides a list with verbose output. The output is
specific to the version of the operating system. Here is an example of verbose
output on a Windows 8 computer.
The regualar (non-verbose) output typically provides the ImageName,PID,SessionName,
Session#, MemUsage, and CPUTime.
This method will kill a process by PID.
In this example, process ID 12345 would be killed. It is important to note that the
user account executing this node script may require administrative privileges.
If you're experiencing issues with the examples, please review the TESTS.md file.
If you are encountering the invalidinstallation event, take a look at the daemon
directory that is created during the installation to make sure the .exe and .xml
files are there. In some circumstances, primarily during _un_installation, it is
possbile for the process to temporarily lock a log file, which prevents Windows
from removing it. In this scenario, simply run the uninstall again. In most cases this
will fix the issue. If not, manually remove the daemon directory before running the
installation again.
There have been many contributors who have done everything from committing features to helping pick up slack while I've been swamped. I'm incredibly appreciative for the help.
Special thanks to @arthurblake whose modifications have FINALLY been added. Thanks to @hockeytim11, who helped compile and update a bunch of outstanding issues and started bringing support to the other node-* libraries.
winsw and sudowin are the copyrights of their respective owners. winsw
is distributed under an MIT license. sudowin is distributed under a BSD license.
All other scripts are Copyright (c) Corey Butler under an MIT license.
(The MIT License)
Copyright (c) 2013 Corey Butler
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
3803,"LedgerHQ,ledger-live-desktop","‚õîÔ∏è DEPRECATED - Ledger Live (Desktop). Related: ledger-live-mobile
Ledger Live is a new generation wallet desktop application providing a unique interface to maintain multiple cryptocurrencies for your Ledger Nano S / Blue. Manage your device, create accounts, receive and send cryptoassets, ...and many more.



    
  

Ledger Live is an hybrid desktop application built with Electron, React, Redux, RxJS,.. and highly optimized with ledger-core C++ library to deal with blockchains (sync, broadcast,..) via ledger-core-node-bindings. It communicates to Ledger hardware wallet devices (Nano S / Blue) to verify address and sign transactions with ledgerjs. Some logic is shared with live-common.

 


supported by ledger-core (C++) implementation: BTC BCH LTC DASH QTUM ZEC BTG STRAT DOGE DGB HSR KMD PIVX ZEN VTC PPC VIA XST POSW CLUB
supported by JavaScript implementation: ETH, ETC, XRP
NodeJS LTS/carbon (Node 8.x)
Yarn LTS
Python v2.7.10 (used by node-gyp to build native addons)
You will also need a C++ compiler
Note: Use yarn dist:dir to speed up the process: it will skip the packaging step. Handy for debugging builds. You can also use BUNDLE_ANALYZER=1 yarn dist:dir to generate webpack-bundle-analyzer report.
(you can use a .env or export environment variables)
We use storybook for UI development.
You will need to install the python gyp module
see stackoverflow/40025591"
4260,"mpalourdio,SpringBootAngularHTML5",":hotsprings: Spring Boot 3 + Angular + HTML5 router mode + HTTP interceptor + Lazy loaded modules. NB: Older Spring Boot and Angular versions are available in branches.
This project is available in Kotlin too. Take a look at this repository.
This project provides an example of an Angular single page application, served by Tomcat,
configured with the html5 router. Some endpoints have Spring Webflux integration too.
The SinglePageAppConfig makes the magic here.
The base-href in configured by the ResourceResolver. It's generated from the value of the application's context-path at runtime when served by tomcat.
It's useful if you want to serve an Angular application with the html5 router, and avoid the dashed URL.
This html5 router mode makes pretty URL, but has a default : Refreshing pages (or accessing them directly) will give you a 404
HTTP error if no RewriteRule is provided by the HTTP server that serves the application.
Handling the base-href dynamically can be tricky too. Here it's done once and for all by the ResourceResolver.
This project includes a custom HTTP interceptor. It's useful to show a loader during long HTTP requests for example.
To test the fully built project, run SpringBootAngularHTML5Application after an ./mvnw clean install -Pfront, and point your browser to http://localhost:10000/my-context/path.
If you want to play with the front part, go to the front folder and run yarn start or npm start. HTTP requests will be correctly proxyfied to your backend.
The front-end part has been scaffolded with angular-cli."
4754,"SETL-Framework,setl","A simple Spark-powered ETL framework that just works üç∫. If you‚Äôre a data scientist or data engineer, this might sound familiar while working on an ETL project: 
Switching between multiple projects is a hassle 
Debugging others‚Äô code is a nightmare
Spending a lot of time solving non-business-related issues 
SETL (pronounced ""settle"") is a Scala ETL framework powered by Apache Spark that helps you structure your Spark ETL projects, modularize your data transformation logic and speed up your development.
You can start working by cloning this template project.
To use the SNAPSHOT version, add Sonatype snapshot repository to your pom.xml
With SETL, an ETL application could be represented by a Pipeline. A Pipeline contains multiple Stages. In each stage, we could find one or several Factories.
The class Factory[T] is an abstraction of a data transformation that will produce an object of type T. It has 4 methods (read, process, write and get) that should be implemented by the developer.
The class SparkRepository[T] is a data access layer abstraction. It could be used to read/write a Dataset[T] from/to a datastore. It should be defined in a configuration file. You can have as many SparkRepositories as you want.
The entry point of a SETL project is the object io.github.setl.Setl, which will handle the pipeline and spark repository instantiation.
You can find the following tutorial code in the starter template of SETL. Go and clone it :)
Here we show a simple example of creating and saving a Dataset[TestObject]. The case class TestObject is defined as follows:
Suppose that we want to save our output into src/main/resources/test_csv. We can create a configuration file local.conf in src/main/resources with the following content that defines the target datastore to save our dataset:
In our App.scala file, we build Setl and register this data store:
We will create our Dataset[TestObject] inside a Factory[Dataset[TestObject]]. A Factory[A] will always produce an object of type A, and it contains 4 abstract methods that you need to implement:
read
process
write
get
import spark.implicits._
// A repository is needed for writing data. It will be delivered by the pipeline
  @Delivery 
  private[this] val repo = SparkRepository[TestObject]
private[this] var output = spark.emptyDataset[TestObject]
override def read(): MyFactory.this.type = {
    // in our demo we don't need to read any data
    this
  }
override def process(): MyFactory.this.type = {
    output = Seq(
      TestObject(1, ""a"", ""A"", 1L),
      TestObject(2, ""b"", ""B"", 2L)
    ).toDS()
    this
  }
override def write(): MyFactory.this.type = {
    repo.save(output)  // use the repository to save the output
    this
  }
override def get(): Dataset[TestObject] = output
}
The dataset will be saved into src/main/resources/test_csv
As our MyFactory produces a Dataset[TestObject], it can be used by other factories of the same pipeline.
Add this factory into the pipeline:
You can implement you own data source connector by implementing the ConnectorInterface
To use it, just set the storage to OTHER and provide the class reference of your connector:
You can generate a Mermaid diagram by doing:
You will have some log like this:
}
StringFinal <|.. AnotherFactory : Output
class SparkRepositoryTestObjectExternal {
  <<SparkRepository[TestObject]>>
}
AnotherFactory <|-- DatasetTestObject : Input
MyFactory <|-- SparkRepositoryTestObjectExternal : Input
------- END OF MERMAID CODE -------
You can copy the previous code to a markdown viewer that supports Mermaid.
Or you can try the live editor: https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiY2xhc3NEaWFncmFtXG5jbGFzcyBNeUZhY3Rvcnkge1xuICA8PEZhY3RvcnlbRGF0YXNldFtUZXN0T2JqZWN0XV0-PlxuICArU3BhcmtSZXBvc2l0b3J5W1Rlc3RPYmplY3RdXG59XG5cbmNsYXNzIERhdGFzZXRUZXN0T2JqZWN0IHtcbiAgPDxEYXRhc2V0W1Rlc3RPYmplY3RdPj5cbiAgPnBhcnRpdGlvbjE6IEludFxuICA-cGFydGl0aW9uMjogU3RyaW5nXG4gID5jbHVzdGVyaW5nMTogU3RyaW5nXG4gID52YWx1ZTogTG9uZ1xufVxuXG5EYXRhc2V0VGVzdE9iamVjdCA8fC4uIE15RmFjdG9yeSA6IE91dHB1dFxuY2xhc3MgQW5vdGhlckZhY3Rvcnkge1xuICA8PEZhY3RvcnlbU3RyaW5nXT4-XG4gICtEYXRhc2V0W1Rlc3RPYmplY3RdXG59XG5cbmNsYXNzIFN0cmluZ0ZpbmFsIHtcbiAgPDxTdHJpbmc-PlxuICBcbn1cblxuU3RyaW5nRmluYWwgPHwuLiBBbm90aGVyRmFjdG9yeSA6IE91dHB1dFxuY2xhc3MgU3BhcmtSZXBvc2l0b3J5VGVzdE9iamVjdEV4dGVybmFsIHtcbiAgPDxTcGFya1JlcG9zaXRvcnlbVGVzdE9iamVjdF0-PlxuICBcbn1cblxuQW5vdGhlckZhY3RvcnkgPHwtLSBEYXRhc2V0VGVzdE9iamVjdCA6IElucHV0XG5NeUZhY3RvcnkgPHwtLSBTcGFya1JlcG9zaXRvcnlUZXN0T2JqZWN0RXh0ZXJuYWwgOiBJbnB1dFxuIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0=
To compile with local configuration, with maven, just run:
To compile with production configuration, pass the jvm property app.environment.
Make sure that your resources directory has filtering enabled:
SETL currently supports the following data source. You won't need to provide these libraries in your project (except the JDBC driver):
All file formats supported by Apache Spark (csv, json, parquet etc)
Delta
Excel (crealytics/spark-excel)
Cassandra (datastax/spark-cassandra-connector)
DynamoDB (audienceproject/spark-dynamodb)
JDBC (you have to provide the jdbc driver)
To read/write data from/to AWS S3 (or other storage services), you should include the 
corresponding hadoop library in your project.
For example
You should also provide Scala and Spark in your pom file. SETL is tested against the following version of Spark: 
When using setl_2.11-1.x.x with Spark 2.4 and Scala 2.11, you may need to include manually these following dependencies to override the default version:
DynamoDBConnector doesn't work with Spark version 2.3
Compress annotation can only be used on Struct field or Array of Struct field with Spark 2.3

Check our contributing guide"
3784,"cirruslabs,cirrus-ci-docs","Documentation for Cirrus CI üìö. Documentation for Cirrus CI is available at https://cirrus-ci.org/. 
Best way to ask general questions about a particular use cases is to email us at support+ci@cirruslabs.org.
If you have a feature request or noticed lack of some documentation please feel free to create a GitHub issue. Our support team will answer it by replying or updating documentation."
3832,"DKirwan,calendar-heatmap","A d3 heatmap for representing time series data similar to github's contribution chart. A d3.js heatmap representing time series data. Inspired by Github's contribution chart

d3.js
1: Add d3.js and moment.js
2: Include calendar-heatmap.js and calendar-heatmap.css
&lt;link rel=""stylesheet"" type=""text/css"" href=""path/tocalendar-heatmap.css""&gt;
&lt;script src=""path/to/calendar-heatmap.js""&gt;&lt;/script&gt;
3: Format the data so each array item has a date and count property.
As long as new Date() can parse the date string it's ok. Note - there all data should be rolled up into daily bucket granularity.
4: Configure the chart and render it
...are very welcome!"
4808,"NerdLang,nerd","üî± Javascript's God Mode. No VM. No Bytecode. No GC. Just native binaries.. 
No VM. No Bytecode. No packaging. No Garbage Collector. Fully compiled to native binaries.


Compile JavaScript and NerdLang in native binaries.
NerdLang is a substract of JS with some additions, focus on efficiency.
Nerd is a JavaScript native compiler aiming to make JavaScript universal, Nerd is able to compile native apps for Windows, Mac, Linux, iOS, Android, Raspberry, STM32 and more.
Nerd is in active development, join us on Discord if you need more information.
Supporting EcmaScript 3 standard (then 5, 6 ...)
Supporting NodeJS and NPM ecosystem
Supporting a maximum of platforms (Windows, Mac, Linux, Android, Arduino, ...)
Being secure
Embeding debuging tools
Compile everything that can be transpiled in JS: Ruby (Opal), Python (Transcript, Brython, JavaScrypthon), TypeScript ...
Windows
Install Mingw and Clang for Windows here: http://winlibs.com/ or Clang here: https://releases.llvm.org/
You can also install Linux for Windows and use a linux system on Windows
You need MinGW with POSIX threads
Linux / FreeBSD
Install it with your distro (apt install gcc, yum install gcc, ...).
You can use GCC, CLANG, as well as any derivative of those compilers (arm-gcc ...)
Apple iOS
Install xCode and you are ready.
You can check your installation with npm start njs_test
Simplest way to use Nerd:
The output file name will be automatically chosen regarding the target. You can specify another output with -o something.out
You can select a preset
You can also run the compiled executable just after compilation using --run:
You can enable the quiet mode with --quiet:
Changing the stack size (useful on Windows):
For more informations about compilation output, use --verbose
For help, use --help
Need update
Compiled with GCC v10.2.0 on Windows
Some code can be evaluated compile-time
Actively tested for
Windows
win-x86-32
win-x86-64
Linux
linux-x86-32
linux-x86-64
linux-arm32v7
Arduino
arduino-nano
arduino-uno
arduino-mega1280
arduino-mega2560
STM32 Nucleo
nucleo-l152re
nucleo-l432kc
nucleo-f446re
Mobile
android
Web
wasm
wast
asm-js
macOS
Sun OS
This project is in heavy development and a lot features are not implemented yet.
Nerd already supports more than 80% of ES3.
<details>
<summary>Prototype</summary>


.call()

.bind()

</details>

<details>
<summary>Array</summary>


.length

.push(value)

</details>

<details>
<summary>Class</summary>


constructor

methods

static methods

</details>

<details>
<summary>Console</summary>


.log(variadic)

</details>

<details>
<summary>JSON</summary>


.parse(str) 

.stringify(obj)

</details>

<details>
<summary>Math **(DONE)**</summary>


[All static methods and constants]

</details>

<details>
<summary>Object</summary>


.keys

</details>

<details>
<summary>performance</summary>


timeOrigin

.now()

</details>

<details>
<summary>String</summary>


.length

.toString()

.indexOf(needle)

.lastIndexOf(needle)

.search(needle)

.slice(start, end)

.substring(start, end)

.substr(start, end)

.replace(needle, str)

</details>

<details>
<summary>Syntax</summary>


for

while / do while

if / else if / else

try / catch / finally

function / lambda

class

new

typeof

instanceof

undefined

null

Infinite

NaN / isNaN

true / false

</details>"
4330,"jedireza,aqua",":bulb: A website and user system starter. Boilerplates can be a huge time sink to maintain and I've decieded to archive
this project.
I started the work for upgrading to hapi v17 and using async/await instead of
callbacks, that work can be found in the hapi-17-async-await branch.
Thanks for your interest in my projects.
A website and user system starter.

Universal front-end website
Basic web pages ready to customize
Contact page with form to email
Account sign-up page
Login pages including forgot and reset password
My account area
Stub dashboard ready to customize
Settings screen to update contact info and login credentials
Admin back office
Stub dashboard ready to customize
Manage accounts, admins, groups and users
Use groups (like departments) for shared permissions
Granular permissions override group permissions
Server side, Aqua is built with the hapi framework.
We're using MongoDB as a data store.
The front-end is built with React. We use
Redux as our state container. Client side
routing is done with React Router.
We're using Gulp for the build system.
We use bcrypt for hashing
secrets. If you have issues during installation related to bcrypt then refer
to this wiki
page.
If you don't use React and/or would rather bring your own front-end, checkout
Frame. It's just the HTTP API parts of Aqua.
Simply edit config.js. The configuration uses
confidence which makes it easy to
manage configuration settings across environments. Don't store secrets in
this file or commit them to your repository.
Instead, access secrets via environment variables. We use
dotenv to help make setting local
environment variables easy (not to be used in production).
Simply copy .env-sample to .env and edit as needed. Don't commit .env
to your repository.
WARNING: This will clear all data in the following MongoDB collections if
they exist: accounts, adminGroups, admins, authAttempts, sessions,
statuses, and users.
Now you should be able to point your browser to http://127.0.0.1:8000/ and see
the welcome page.
nodemon watches for changes in server code
and restarts the app automatically. gulp and
webpack watch the front-end files and
re-build those automatically too.
We also pass the --inspect flag to Node so you have a debugger available.
Watch the output of $ npm start and look for the debugging URL and open it in
Chrome. It looks something like this:
chrome-devtools://devtools/remote/serve_file/@62cd277117e6f8ec53e31b1be58290a6f7ab42ef/inspector.html?experiments=true&amp;v8only=true&amp;ws=localhost:9229/node
Unlike $ npm start this doesn't watch for file changes. Also be sure to set
these environment variables in your production environment:
NODE_ENV=production - This is important for many different optimizations,
both server-side and with the front-end build files.
NPM_CONFIG_PRODUCTION=false - This tells $ npm install to not skip
installing devDependencies, which we need to build the front-end files.
Any issues or questions (no matter how basic), open an issue. Please take the
initiative to read relevant documentation and be proactive with debugging.
There are some guides in the wiki
Read through previously asked
questions
Contributions are welcome. If you're changing something non-trivial, you may
want to submit an issue before creating a large pull request.
Lab is part of the hapi ecosystem and what we
use to write all of our tests.
If you'd like to run a specific test or subset of tests you can use the
test-client and test-server scripts included in the package.json file.
You specificy the path(s) via the TEST_TARGET environment variable like:
MIT
What you build with Aqua is more important than Aqua."
4304,"lyfeyaj,swipe","Swipe is the most accurate touch slider. Support both React and Angular.. Swipe is the most accurate touch slider. It is extremely lightweight (only 6kb minified) and works across all browsers, including IE7+.
Support both React.js and Angular.js(v1)
This repo is a continuation of the dead Swipe project. Our mission is to keep Swipe alive and moving forward, with maintenance fixes and new features. Pull Requests are welcome!

Thanks to @loup-brun
See the online example for a simple demo.
Swipe requires just a few lines of markup. Here is an example:
Above is the initial required structure‚Äì a series of elements wrapped in two containers. Place any content you want within the items. The containing div will need to be passed to the Swipe function like so:
Swipe requires the following styles to be added to your stylesheet:
You may initialize a Swipe slider with only one line of javascript code:
I always place this at the bottom of the page, externally, to verify the page is ready.
Swipe can take an optional second parameter ‚Äì an object of key/value settings:
A Swipe instance exposes the following public methods:
Swipe is now compatible with all browsers, including IE7+. Swipe works best on devices that support CSS transforms and touch events, but can be used without these as well. A few helper methods determine touch and CSS transition support and choose the proper animation methods accordingly.
Please go to react swipe plugin, or check the example
Please go to angular swipe plugin for source code and usage example.
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""middle"">
        
      </td>
      <td align=""center"" valign=""middle"">
        
      </td>
      <td align=""center"" valign=""middle"">
        
      </td>
      <td align=""center"" valign=""middle"">
        
      </td>
    </tr>
    <tr></tr>
    <tr>
      <td align=""center"" valign=""middle"">
        
      </td>
      <td align=""center"" valign=""middle"">
        
      </td>
      <td align=""center"" valign=""middle"">
        
      </td>
      <td align=""center"" valign=""middle"">
        
      </td>
    </tr>
  </tbody>
</table>

Send me a note if you want your logo here
The MIT License (MIT)."
4581,"sindresorhus,execa","Process execution for humans. 

 
Process execution for humans
This package improves child_process methods with:
Promise interface.
Strips the final newline from the output so you don't have to do stdout.trim().
Supports shebang binaries cross-platform.
Higher max buffer. 100 MB instead of 200 KB.
Get interleaved output from stdout and stderr similar to what is printed on the terminal. (Async only)
More descriptive errors.
Using SIGTERM, and after 2 seconds, kill it with SIGKILL.
Execute a file. Think of this as a mix of child_process.execFile() and child_process.spawn().
No escaping/quoting is needed.
Unless the shell option is used, no shell interpreter (Bash, cmd.exe, etc.) is used, so shell features such as variables substitution (echo $PATH) are not allowed.
Returns a child_process instance which:
is also a Promise resolving or rejecting with a childProcessResult.
exposes the following additional methods and properties.
Same as the original child_process#kill() except: if signal is SIGTERM (the default value) and the child process is not terminated after 5 seconds, force it by sending SIGKILL.
Type: number | false
Default: 5000
Milliseconds to wait for the child process to terminate before sending SIGKILL.
Can be disabled with false.
Similar to childProcess.kill(). This is preferred when cancelling the child process execution as the error is more descriptive and childProcessResult.isCanceled is set to true.
Type: ReadableStream | undefined
Stream combining/interleaving stdout and stderr.
This is undefined if either:
the all option is false (the default value)
both stdout and stderr options are set to 'inherit', 'ipc', Stream or integer
Execute a file synchronously.
Returns or throws a childProcessResult.
Same as execa() except both file and arguments are specified in a single command string. For example, execa('echo', ['unicorns']) is the same as execa.command('echo unicorns').
If the file or an argument contains spaces, they must be escaped with backslashes. This matters especially if command is not a constant but a variable, for example with __dirname or process.cwd(). Except for spaces, no escaping/quoting is needed.
The shell option must be used if the command uses shell-specific features, as opposed to being a simple file followed by its arguments.
Same as execa.command() but synchronous.
Returns or throws a childProcessResult.
Execute a Node.js script as a child process.
Same as execa('node', [scriptPath, ...arguments], options) except (like child_process#fork()):
the current Node version and options are used. This can be overridden using the nodePath and nodeOptions options.
the shell option cannot be used
an extra channel ipc is passed to stdio
Type: object
Result of a child process execution. On success this is a plain object. On failure this is also an Error instance.
The child process fails when:
its exit code is not 0
it was killed with a signal
there's not enough memory or there are already too many child processes
Type: string
The file and arguments that were run.
Type: number
The numeric exit code of the process that was run.
Type: string | Buffer
The output of the process on stdout.
Type: string | Buffer
The output of the process on stderr.
Type: string | Buffer | undefined
The output of the process with stdout and stderr interleaved.
This is undefined if either:
the all option is false (the default value)
execa.sync() was used
Type: boolean
Whether the process failed to run.
Type: boolean
Whether the process timed out.
Type: boolean
Whether the process was canceled.
Type: boolean
Whether the process was killed.
Type: string | undefined
The name of the signal that was used to terminate the process. For example, SIGFPE.
If a signal terminated the process, this property is defined and included in the error message. Otherwise it is undefined.
Type: string | undefined
A human-friendly description of the signal that was used to terminate the process. For example, Floating point arithmetic error.
If a signal terminated the process, this property is defined and included in the error message. Otherwise it is undefined. It is also undefined when the signal is very uncommon which should seldomly happen.
Type: string | undefined
Original error message. This is undefined unless the child process exited due to an error event or a timeout.
The message property contains both the originalMessage and some additional information added by Execa.
Type: object
Type: boolean
Default: true
Kill the spawned process when the parent process exits unless either:
    - the spawned process is detached
    - the parent process is terminated abruptly, for example, with SIGKILL as opposed to SIGTERM or a normal exit
Type: boolean
Default: false
Prefer locally installed binaries when looking for a binary to execute.
If you $ npm install foo, you can then execa('foo').
Type: string
Default: process.cwd()
Preferred path to find locally installed binaries in (use with preferLocal).
Type: string
Default: process.execPath (current Node.js executable)
Path to the Node.js executable to use in child processes.
This can be either an absolute path or a path relative to the cwd option.
Requires preferLocal to be true.
For example, this can be used together with get-node to run a specific Node.js version in a child process.
Type: boolean
Default: true
Buffer the output from the spawned process. When set to false, you must read the output of stdout and stderr (or all if the all option is true). Otherwise the returned promise will not be resolved/rejected.
If the spawned process fails, error.stdout, error.stderr, and error.all will contain the buffered data.
Type: string | Buffer | stream.Readable
Write some input to the stdin of your binary.
Streams are not allowed when using the synchronous methods.
Type: string | number | Stream | undefined
Default: pipe
Same options as stdio.
Type: string | number | Stream | undefined
Default: pipe
Same options as stdio.
Type: string | number | Stream | undefined
Default: pipe
Same options as stdio.
Type: boolean
Default: false
Add an .all property on the promise and the resolved value. The property contains the output of the process with stdout and stderr interleaved.
Type: boolean
Default: true
Setting this to false resolves the promise with the error instead of rejecting it.
Type: boolean
Default: true
Strip the final newline character from the output.
Type: boolean
Default: true
Set to false if you don't want to extend the environment variables when providing the env property.
Execa also accepts the below options which are the same as the options for child_process#spawn()/child_process#exec()
Type: string
Default: process.cwd()
Current working directory of the child process.
Type: object
Default: process.env
Environment key-value pairs. Extends automatically from process.env. Set extendEnv to false if you don't want this.
Type: string
Explicitly set the value of argv[0] sent to the child process. This will be set to file if not specified.
Type: string | string[]
Default: pipe
Child's stdio configuration.
Type: string
Default: 'json'
Specify the kind of serialization used for sending messages between processes when using the stdio: 'ipc' option or execa.node():
    - json: Uses JSON.stringify() and JSON.parse().
    - advanced: Uses v8.serialize()
Requires Node.js 13.2.0 or later.
Type: boolean
Prepare child to run independently of its parent process. Specific behavior depends on the platform.
Type: number
Sets the user identity of the process.
Type: number
Sets the group identity of the process.
Type: boolean | string
Default: false
If true, runs file inside of a shell. Uses /bin/sh on UNIX and cmd.exe on Windows. A different shell can be specified as a string. The shell should understand the -c switch on UNIX or /d /s /c on Windows.
We recommend against using this option since it is:
not cross-platform, encouraging shell-specific syntax.
slower, because of the additional shell interpretation.
unsafe, potentially allowing command injection.
Type: string | null
Default: utf8
Specify the character encoding used to decode the stdout and stderr output. If set to null, then stdout and stderr will be a Buffer instead of a string.
Type: number
Default: 0
If timeout is greater than 0, the parent will send the signal identified by the killSignal property (the default is SIGTERM) if the child runs longer than timeout milliseconds.
Type: number
Default: 100_000_000 (100 MB)
Largest amount of data in bytes allowed on stdout or stderr.
Type: string | number
Default: SIGTERM
Signal value to be used when the spawned process will be killed.
Type: boolean
Default: false
If true, no quoting or escaping of arguments is done on Windows. Ignored on other platforms. This is set to true automatically when the shell option is true.
Type: boolean
Default: true
On Windows, do not create a new console window. Please note this also prevents CTRL-C from working on Windows.
Type: string
Default: process.execPath
Node.js executable used to create the child process.
Type: string[]
Default: process.execArgv
List of CLI options passed to the Node.js executable.
Gracefully handle failures by using automatic retries and exponential backoff with the p-retry package:
Let's say you want to show the output of a child process in real-time while also saving it to a variable.
execa can be combined with get-bin-path to test the current package's binary. As opposed to hard-coding the path to the binary, this validates that the package.json bin field is correctly set up.
gulp-execa - Gulp plugin for execa

    <b>
        Get professional support for this package with a Tidelift subscription
    </b>
    
    <sub>
        Tidelift helps make open source sustainable for maintainers while giving companiesassurances about security, maintenance, and licensing for their dependencies.
    </sub>
"
4953,"serenity-is,serene",Serenity Application Template. Serenity Application Template (VSIX)
4954,"jpsingleton,Huxley","JSON proxy for the UK National Rail Live Departure Board SOAP API. Huxley (1) is deprecated, please upgrade to Huxley 2."
3860,"tensorflow,tfjs-core","WebGL-accelerated ML // linear algebra // automatic differentiation for JavaScript.. This repo will remain around for some time to keep history but all future PRs should be sent to tensorflow/tfjs inside the tfjs-core folder.
All history and contributions have been preserved in the monorepo."
4100,"node-gradle,gradle-node-plugin","Gradle plugin for integrating NodeJS in your build. :rocket:. 



This plugin enables you to use a lot of Node.js-based technologies as part of your 
build without having Node.js installed locally on your system. It integrates the following Node.js-based system
with Gradle:
The plugin is published in the Gradle plugins portal
with the com.github.node-gradle.node identifier.
It supports Gradle 6.6+ and Node.js 10+, for 5.6.4 support use version 3.x
‚ö†Ô∏è This is the documentation of the development version. See below in the releases history to read the 
documentation of the version you're using.
Here's how you get started using this plugin. If you do not find what you are looking for, please add an 
issue to GitHub Issues.
Here's the documentation for older releases of the plugin:
3.5.1 (current)
Some integration test ensure that this plugin is able to use the globally installed Node.js, npm or yarn tools.
This requires those tools are globally installed on your system in order to get all integration tests pass.
To build the plugin, just type the following command:
The integration tests are run using multiple Gradle versions to ensure it works on all supported versions.
But this takes a lot of time. To speed up the build, the tests run only on the current Gradle versions.
To run the tests against all Gradle versions, use the following option (it is done by the CI).
Contributions are always welcome! If you'd like to contribute (and we hope you do) please send 
one of the existing contributors a nudge.
This plugin is open source project and completely free to use. If you are using this project in your products/projects, please consider sponsoring to ensure it is actively developed and maintained.
Donate via PayPal (one time)"
4040,"commitizen,cz-cli","The commitizen command line utility. #BlackLivesMatter. When you commit with Commitizen, you'll be prompted to fill out any required commit fields at commit time. No more waiting until later for a git commit hook to run and reject your commit (though that can still be helpful). No more digging through CONTRIBUTING.md to find what the preferred format is. Get instant feedback on your commit message formatting and be prompted for required fields.
   
    
Commitizen is currently tested against
node 10 and 12 although it may work in
older node. You should also have npm 6
or greater.
Installation is as simple as running the following command (if you see EACCES error, reading fixing npm permissions may help):
Simply use git cz instead of git commit when committing.
Alternatively, if you are using NPM 5.2+ you can use npx instead of installing globally:
or as an npm script:
When you're working in a Commitizen friendly repository, you'll be prompted to fill in any required fields and your commit messages will be formatted according to the standards defined by project maintainers.

If you're not working in a Commitizen friendly repository, then git cz will work just the same as git commit but npx git-cz will use the streamich/git-cz adapter. To fix this, you need to first make your repo Commitizen-friendly
For this example, we'll be setting up our repo to use AngularJS's commit message convention also known as conventional-changelog.
First, install the Commitizen cli tools:
Next, initialize your project to use the cz-conventional-changelog adapter by typing:
Or if you are using Yarn:
Note that if you want to force install over the top of an old adapter, you can apply the --force argument. For more information on this, just run commitizen help.
The above command does three things for you.
Installs the cz-conventional-changelog adapter npm module
Saves it to package.json's dependencies or devDependencies
Adds the config.commitizen key to the root of your package.json as shown here:
This just tells Commitizen which adapter we actually want our contributors to use when they try to commit to this repo.
commitizen.path is resolved via require.resolve and supports
npm modules
directories relative to process.cwd() containing an index.js file
file base names relative to process.cwd() with js extension
full relative file names
absolute paths.
Please note that in the previous version of Commitizen we used czConfig. czConfig has been deprecated and you should migrate to the new format before Commitizen 3.0.0.
Installing and running Commitizen locally allows you to make sure that developers are running the exact same version of Commitizen on every machine.
Install Commitizen with npm install --save-dev commitizen.
On NPM 5.2+ you can use npx to initialize the conventional changelog adapter:
For previous versions of NPM (< 5.2) you can execute ./node_modules/.bin/commitizen or ./node_modules/.bin/git-cz in order to actually use the commands.
You can then initialize the conventional changelog adapter using: ./node_modules/.bin/commitizen init cz-conventional-changelog --save-dev --save-exact
And you can then add some nice npm run scripts in your package.json pointing to the local version of commitizen:
This will be more convenient for your users because then if they want to do a commit, all they need to do is run npm run commit and they will get the prompts needed to start a commit!
NOTE: if you are using precommit hooks thanks to something like husky, you will need to name your script some thing other than ""commit"" (e.g. ""cm"": ""git-cz""). The reason is because npm-scripts has a ""feature"" where it automatically runs scripts with the name prexxx where xxx is the name of another script. In essence, npm and husky will run ""precommit"" scripts twice if you name the script ""commit,"" and the work around is to prevent the npm-triggered precommit script.
This example shows how to incorporate Commitizen into the existing git commit workflow by using git hooks and the --hook command-line option. This is useful for project maintainers
who wish to ensure the proper commit format is enforced on contributions from those unfamiliar with Commitizen.
Once either of these methods is implemented, users running git commit will be presented with an interactive Commitizen session that helps them write useful commit messages.
NOTE: This example assumes that the project has been set up to use Commitizen locally.
Update .git/hooks/prepare-commit-msg with the following code:
For husky users, add the following configuration to the project's package.json:
Why exec &lt; /dev/tty? By default, git hooks are not interactive. This command allows the user to use their terminal to interact with Commitizen during the hook.
Add the Commitizen-friendly badge to your README using the following markdown:
Your badge will look like this:

It may also make sense to change your README.md or CONTRIBUTING.md to include or link to the Commitizen project so that your new contributors may learn more about installing and using Commitizen.
Install commitizen globally, if you have not already.
Install your preferred commitizen adapter globally, for example cz-conventional-changelog
Create a .czrc file in your home directory, with path referring to the preferred, globally installed, commitizen adapter
You are all set! Now cdinto any git repository and use git cz instead of git commit and you will find the commitizen prompt.
Protip: You can use all the git commit options with git cz, for example: git cz -a.
If your repository is a nodejs project, making it Commitizen-friendly is super easy.
If your repository is already Commitizen-friendly, the local commitizen adapter will be used, instead of globally installed one.
As a project maintainer of many projects, you may want to standardize on a single commit message
format for all of them. You can create your own node module which acts as front-end for commitizen.
We know that every project and build process has different requirements so we've tried to keep Commitizen open for extension. You can do this by choosing from any of the pre-build adapters or even by building your own. Here are some of the great adapters available to you:
To create an adapter, just fork one of these great adapters and modify it to suit your needs. We pass you an instance of Inquirer.js but you can capture input using whatever means necessary. Just call the commit callback with a string and we'll be happy. Publish it to npm, and you'll be all set!
As of version 2.7.1, you may attempt to retry the last commit using the git cz --retry command. This can be helpful when you have tests set up to run via a git precommit hook. In this scenario, you may have attempted a Commitizen commit, painstakingly filled out all of the commitizen fields, but your tests fail. In previous Commitizen versions, after fixing your tests, you would be forced to fill out all of the fields again. Enter the retry command. Commitizen will retry the last commit that you attempted in this repo without you needing to fill out the fields again.
Please note that the retry cache may be cleared when upgrading commitizen versions, upgrading adapters, or if you delete the commitizen.json file in your home or temp directory. Additionally, the commit cache uses the filesystem path of the repo, so if you move a repo or change its path, you will not be able to retry a commit. This is an edge case, but might be confusing if you have scenarios where you are moving folders that contain repos.
It is important to note that if you are running git-cz from a npm script (let's say it is called commit) you will need to do one of the following:
Pass -- --retry as an argument for your script. i.e: npm run commit -- --retry
Use npm-run to find and call git-cz executable directly. i.e: npm-run git-cz --retry
Use npm-quick-run i.e: nr commit --retry or just nr c --retry (which will run all scripts that starts with the letter 'c')
Note that the last two options do not require you to pass -- before the args but the first does.
As a project maintainer, making your repo Commitizen friendly allows you to select pre-existing commit message conventions or to create your own custom commit message convention. When a contributor to your repo uses Commitizen, they will be prompted for the correct fields at commit time.
Commitizen is great on its own, but it shines when you use it with some other amazing open source tools. Kent C. Dodds shows you how to accomplish this in his Egghead.io series, How to write an open source javascript library. Many of the concepts can be applied to non-javascript projects as well.
Commitizen is an open source project that helps contributors be good open source citizens. It accomplishes this by prompting them to follow commit message conventions at commit time. It also empowers project maintainers to create or use predefined commit message conventions in their repos to better communicate their expectations to potential contributors.
Both! Commitizen is not meant to be a replacement for git commit hooks. Rather, it is meant to work side-by-side with them to ensure a consistent and positive experience for your contributors. Commitizen treats the commit command as a declarative action. The contributor is declaring that they wish to contribute to your project. It is up to you as the maintainer to define what rules they should be following.
We accomplish this by letting you define which adapter you'd like to use in your project. Adapters just allow multiple projects to share the same commit message conventions. A good example of an adapter is the cz-conventional-changelog adapter.
conventional-changelog ‚Äì Generate a changelog from conventional commit history
commitlint - Lint commit messages
@JimTheDev (Jim Cummins, author)
@kentcdodds
@accraze
@kytwb
@Den-dp
Special thanks to @stevelacy, whose gulp-git project makes commitizen possible.
This project exists thanks to all the people who contribute. [Contribute].

Thank you to all our backers! üôè [Become a backer]

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor]









"
4318,"dunklesToast,XMRigFrontend","Simple Material Design Frontend for XMRig. This is a Simple Frontend for the XMRig Monero Miners.
It shows all the important informations (Hashrate, Last Connection loss...) and has a simple, responsive Design.
You can test it at the Live Demo on GitHub Pages!
Easy Install
No Server needed
configurable
Supports XMRig CPU Miner
If you don't have a WebServer you can simply use the Version on my Server.
It has no SSL due to #2. If you want to use it with SSL (maybe because you are mining on a Server or something use this: GitHub Pages
All requests to the miner are made directly from your Device. If you use the GitHub Pages Version there is no need too Setup a Server! If you use Chrome and your Miner has no HTTPS, you need click on the Shield in the Addressbar and Allow ""Unsafe Scripts"". 
If you like to host this page yourself, simply drag and drop the 3 Files to your WebServer. All dependencies are loaded from cdn.js to make the installation as simple as possible. But if you want to, you can replace them easily!
The Setup is very easy.
You just need to open the Page on your WebBrowser and enter your Host and Port in the Settings menu (the icon in the upper right).
The Host is the IP Address of your miner. On linux (and macOS) you can get it with the ifconfig command and on Windows there is the ipconfig!
If you enabled the Bearer Authorization you can also use it. All Settings are Stored locally on your PC.
If you found a Bug please let me know and create an Issue here!
You have great Ideas how to make this better?
Create an Issue with your Idea or open a Pull Request!"
5022,"BrianMacIntosh,icon-machine","Web application for randomly generating pixel art icons.. Web application for randomly generating pixel art icons. You can try it out on this page.
Generated icons are CC0-licensed. The Javascript source code is GPL-licensed."
